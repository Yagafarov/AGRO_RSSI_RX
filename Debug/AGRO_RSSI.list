
AGRO_RSSI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008430  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b24  08008540  08008540  00009540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009064  08009064  0000b1dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009064  08009064  0000a064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800906c  0800906c  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800906c  0800906c  0000a06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009070  08009070  0000a070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009074  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000500  200001dc  08009250  0000b1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006dc  08009250  0000b6dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b59  00000000  00000000  0000b205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ed  00000000  00000000  0001cd5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  0001f650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e30  00000000  00000000  00020860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b80  00000000  00000000  00021690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001517f  00000000  00000000  0003b210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000902f5  00000000  00000000  0005038f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0684  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005da4  00000000  00000000  000e06c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000e646c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08008528 	.word	0x08008528

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08008528 	.word	0x08008528

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <E220_WaitReady>:

/*------------------------------------------*/
extern uint8_t recv[50];
/*------------------------------------------*/
GPIO_PinState E220_WaitReady(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
	while(!(AUX_Flag == true)) {};
 8000a8c:	bf00      	nop
 8000a8e:	4b07      	ldr	r3, [pc, #28]	@ (8000aac <E220_WaitReady+0x24>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	f083 0301 	eor.w	r3, r3, #1
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1f8      	bne.n	8000a8e <E220_WaitReady+0x6>
	//while(!(HAL_GPIO_ReadPin(E220_AUX_PORT, E220_AUX_PIN))) {};
	AUX_Flag = false;
 8000a9c:	4b03      	ldr	r3, [pc, #12]	@ (8000aac <E220_WaitReady+0x24>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
	return GPIO_PIN_SET;
 8000aa2:	2301      	movs	r3, #1
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	20000278 	.word	0x20000278

08000ab0 <E220_CheckSentReadPacket>:
/*------------------------------------------*/
GPIO_PinState E220_CheckSentReadPacket(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
	while(!(AUX_Flag == true)) {};
 8000ab4:	bf00      	nop
 8000ab6:	4b07      	ldr	r3, [pc, #28]	@ (8000ad4 <E220_CheckSentReadPacket+0x24>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	f083 0301 	eor.w	r3, r3, #1
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1f8      	bne.n	8000ab6 <E220_CheckSentReadPacket+0x6>
	//while(!(HAL_GPIO_ReadPin(E220_AUX_PORT, E220_AUX_PIN))) {};
	AUX_Flag = false;
 8000ac4:	4b03      	ldr	r3, [pc, #12]	@ (8000ad4 <E220_CheckSentReadPacket+0x24>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
	return GPIO_PIN_SET;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	20000278 	.word	0x20000278

08000ad8 <E220_SetMode>:
	E220_CheckSentReadPacket();
	return GPIO_PIN_SET;
}
/*------------------------------------------*/
OperatingMode E220_SetMode(OperatingMode mode)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
	if(mode == NORMAL)
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d10c      	bne.n	8000b02 <E220_SetMode+0x2a>
	{
		E220_MO_RESET;
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000aee:	481f      	ldr	r0, [pc, #124]	@ (8000b6c <E220_SetMode+0x94>)
 8000af0:	f002 f84c 	bl	8002b8c <HAL_GPIO_WritePin>
		E220_M1_RESET;
 8000af4:	2200      	movs	r2, #0
 8000af6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000afa:	481d      	ldr	r0, [pc, #116]	@ (8000b70 <E220_SetMode+0x98>)
 8000afc:	f002 f846 	bl	8002b8c <HAL_GPIO_WritePin>
 8000b00:	e02e      	b.n	8000b60 <E220_SetMode+0x88>
	}
	else if(mode == WOR_Transmission)
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d10c      	bne.n	8000b22 <E220_SetMode+0x4a>
	{
		E220_MO_SET;
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b0e:	4817      	ldr	r0, [pc, #92]	@ (8000b6c <E220_SetMode+0x94>)
 8000b10:	f002 f83c 	bl	8002b8c <HAL_GPIO_WritePin>
		E220_M1_RESET;
 8000b14:	2200      	movs	r2, #0
 8000b16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b1a:	4815      	ldr	r0, [pc, #84]	@ (8000b70 <E220_SetMode+0x98>)
 8000b1c:	f002 f836 	bl	8002b8c <HAL_GPIO_WritePin>
 8000b20:	e01e      	b.n	8000b60 <E220_SetMode+0x88>
	}
	else if(mode == WOR_Receiving)
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	d10c      	bne.n	8000b42 <E220_SetMode+0x6a>
	{
		E220_MO_RESET;
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b2e:	480f      	ldr	r0, [pc, #60]	@ (8000b6c <E220_SetMode+0x94>)
 8000b30:	f002 f82c 	bl	8002b8c <HAL_GPIO_WritePin>
		E220_M1_SET;
 8000b34:	2201      	movs	r2, #1
 8000b36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b3a:	480d      	ldr	r0, [pc, #52]	@ (8000b70 <E220_SetMode+0x98>)
 8000b3c:	f002 f826 	bl	8002b8c <HAL_GPIO_WritePin>
 8000b40:	e00e      	b.n	8000b60 <E220_SetMode+0x88>
	}
	else if(mode == DeepSleep)
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	2b03      	cmp	r3, #3
 8000b46:	d10b      	bne.n	8000b60 <E220_SetMode+0x88>
	{
		E220_MO_SET;
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b4e:	4807      	ldr	r0, [pc, #28]	@ (8000b6c <E220_SetMode+0x94>)
 8000b50:	f002 f81c 	bl	8002b8c <HAL_GPIO_WritePin>
		E220_M1_SET;
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b5a:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <E220_SetMode+0x98>)
 8000b5c:	f002 f816 	bl	8002b8c <HAL_GPIO_WritePin>
	}
	return mode;
 8000b60:	79fb      	ldrb	r3, [r7, #7]
	HAL_Delay(50);
	E220_CheckSentReadPacket();
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40010c00 	.word	0x40010c00
 8000b70:	40010800 	.word	0x40010800

08000b74 <E220_Set_AddressModule>:
/*------------------------------------------*/
void E220_Set_AddressModule(uint16_t addr)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	80fb      	strh	r3, [r7, #6]
	uint8_t addr_h = 0x00;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	75fb      	strb	r3, [r7, #23]
	uint8_t addr_l = 0x00;
 8000b82:	2300      	movs	r3, #0
 8000b84:	75bb      	strb	r3, [r7, #22]
	uint8_t send_data[5] = {E220_CMD0, E220_ADDH, 2, addr_h, addr_l};
 8000b86:	23c0      	movs	r3, #192	@ 0xc0
 8000b88:	733b      	strb	r3, [r7, #12]
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	737b      	strb	r3, [r7, #13]
 8000b8e:	2302      	movs	r3, #2
 8000b90:	73bb      	strb	r3, [r7, #14]
 8000b92:	7dfb      	ldrb	r3, [r7, #23]
 8000b94:	73fb      	strb	r3, [r7, #15]
 8000b96:	7dbb      	ldrb	r3, [r7, #22]
 8000b98:	743b      	strb	r3, [r7, #16]
	uint16_t mask = 0xFFFF;
 8000b9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b9e:	82bb      	strh	r3, [r7, #20]

	addr_h = (addr >> 8) & mask;
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	0a1b      	lsrs	r3, r3, #8
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	8abb      	ldrh	r3, [r7, #20]
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	4013      	ands	r3, r2
 8000bae:	75fb      	strb	r3, [r7, #23]
	addr_l = (addr << 0) & mask;
 8000bb0:	88fb      	ldrh	r3, [r7, #6]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	8abb      	ldrh	r3, [r7, #20]
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	4013      	ands	r3, r2
 8000bba:	75bb      	strb	r3, [r7, #22]

	send_data[3] = addr_h;
 8000bbc:	7dfb      	ldrb	r3, [r7, #23]
 8000bbe:	73fb      	strb	r3, [r7, #15]
	send_data[4] = addr_l;
 8000bc0:	7dbb      	ldrb	r3, [r7, #22]
 8000bc2:	743b      	strb	r3, [r7, #16]

	HAL_UART_Transmit(&huart1, send_data, 5, TIMEOUT);
 8000bc4:	f107 010c 	add.w	r1, r7, #12
 8000bc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bcc:	2205      	movs	r2, #5
 8000bce:	4806      	ldr	r0, [pc, #24]	@ (8000be8 <E220_Set_AddressModule+0x74>)
 8000bd0:	f004 f826 	bl	8004c20 <HAL_UART_Transmit>
	E220_CheckSentReadPacket();
 8000bd4:	f7ff ff6c 	bl	8000ab0 <E220_CheckSentReadPacket>
	E220_GlobReg.addr = addr;
 8000bd8:	4a04      	ldr	r2, [pc, #16]	@ (8000bec <E220_Set_AddressModule+0x78>)
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	8013      	strh	r3, [r2, #0]
}
 8000bde:	bf00      	nop
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2000033c 	.word	0x2000033c
 8000bec:	200001f8 	.word	0x200001f8

08000bf0 <E220_Set_Uart_Rate_Parity_Data>:
/*------------------------------------------*/
void E220_Set_Uart_Rate_Parity_Data(SerialPortRate rate, SerialPorityBit pority, AirDataRate air_data)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	71bb      	strb	r3, [r7, #6]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	717b      	strb	r3, [r7, #5]
	uint8_t all_data = 0x00;
 8000c02:	2300      	movs	r3, #0
 8000c04:	73fb      	strb	r3, [r7, #15]
	uint8_t send_data[4] = {E220_CMD0, E220_REG0, 1, all_data};
 8000c06:	23c0      	movs	r3, #192	@ 0xc0
 8000c08:	723b      	strb	r3, [r7, #8]
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	727b      	strb	r3, [r7, #9]
 8000c0e:	2301      	movs	r3, #1
 8000c10:	72bb      	strb	r3, [r7, #10]
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	72fb      	strb	r3, [r7, #11]
	/*UART Serial Port Rate*/
	if(rate == Rate_1200) all_data |= 0x00;
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d036      	beq.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
	else if(rate == Rate_2400) all_data |= 0x20;
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d104      	bne.n	8000c2c <E220_Set_Uart_Rate_Parity_Data+0x3c>
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	f043 0320 	orr.w	r3, r3, #32
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	e02e      	b.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
	else if(rate == Rate_4800) all_data |= 0x40;
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d104      	bne.n	8000c3c <E220_Set_Uart_Rate_Parity_Data+0x4c>
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c38:	73fb      	strb	r3, [r7, #15]
 8000c3a:	e026      	b.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
	else if(rate == Rate_9600) all_data |= 0x60;
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	2b03      	cmp	r3, #3
 8000c40:	d104      	bne.n	8000c4c <E220_Set_Uart_Rate_Parity_Data+0x5c>
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000c48:	73fb      	strb	r3, [r7, #15]
 8000c4a:	e01e      	b.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
	else if(rate == Rate_19200) all_data |= 0x80;
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	d104      	bne.n	8000c5c <E220_Set_Uart_Rate_Parity_Data+0x6c>
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
 8000c54:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c58:	73fb      	strb	r3, [r7, #15]
 8000c5a:	e016      	b.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
	else if(rate == Rate_38400) all_data |= 0xA0;
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	2b05      	cmp	r3, #5
 8000c60:	d104      	bne.n	8000c6c <E220_Set_Uart_Rate_Parity_Data+0x7c>
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8000c68:	73fb      	strb	r3, [r7, #15]
 8000c6a:	e00e      	b.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
	else if(rate == Rate_57600) all_data |= 0xC0;
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b06      	cmp	r3, #6
 8000c70:	d104      	bne.n	8000c7c <E220_Set_Uart_Rate_Parity_Data+0x8c>
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8000c78:	73fb      	strb	r3, [r7, #15]
 8000c7a:	e006      	b.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
	else if(rate == Rate_115200) all_data |= 0xE0;
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	2b07      	cmp	r3, #7
 8000c80:	d103      	bne.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	f063 031f 	orn	r3, r3, #31
 8000c88:	73fb      	strb	r3, [r7, #15]
	/*UART Serial Port Rate*/
	if(pority == _8N1) all_data |= 0x00;
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d016      	beq.n	8000cbe <E220_Set_Uart_Rate_Parity_Data+0xce>
	else if(pority == _8O1) all_data |= 0x80;
 8000c90:	79bb      	ldrb	r3, [r7, #6]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d104      	bne.n	8000ca0 <E220_Set_Uart_Rate_Parity_Data+0xb0>
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c9c:	73fb      	strb	r3, [r7, #15]
 8000c9e:	e00e      	b.n	8000cbe <E220_Set_Uart_Rate_Parity_Data+0xce>
	else if(pority == _8E1) all_data |= 0x10;
 8000ca0:	79bb      	ldrb	r3, [r7, #6]
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d104      	bne.n	8000cb0 <E220_Set_Uart_Rate_Parity_Data+0xc0>
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	f043 0310 	orr.w	r3, r3, #16
 8000cac:	73fb      	strb	r3, [r7, #15]
 8000cae:	e006      	b.n	8000cbe <E220_Set_Uart_Rate_Parity_Data+0xce>
	else if(pority == _8N1_2) all_data |= 0x18;
 8000cb0:	79bb      	ldrb	r3, [r7, #6]
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	d103      	bne.n	8000cbe <E220_Set_Uart_Rate_Parity_Data+0xce>
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	f043 0318 	orr.w	r3, r3, #24
 8000cbc:	73fb      	strb	r3, [r7, #15]
	/*UART Serial Port Rate*/
	if(air_data == _2_4k) all_data |= 0x00;
 8000cbe:	797b      	ldrb	r3, [r7, #5]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d036      	beq.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
	else if(air_data == _2_4k_2) all_data |= 0x01;
 8000cc4:	797b      	ldrb	r3, [r7, #5]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d104      	bne.n	8000cd4 <E220_Set_Uart_Rate_Parity_Data+0xe4>
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	73fb      	strb	r3, [r7, #15]
 8000cd2:	e02e      	b.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
	else if(air_data == _2_4k_3) all_data |= 0x02;
 8000cd4:	797b      	ldrb	r3, [r7, #5]
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d104      	bne.n	8000ce4 <E220_Set_Uart_Rate_Parity_Data+0xf4>
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	73fb      	strb	r3, [r7, #15]
 8000ce2:	e026      	b.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
	else if(air_data == _4_8k) all_data |= 0x03;
 8000ce4:	797b      	ldrb	r3, [r7, #5]
 8000ce6:	2b03      	cmp	r3, #3
 8000ce8:	d104      	bne.n	8000cf4 <E220_Set_Uart_Rate_Parity_Data+0x104>
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	f043 0303 	orr.w	r3, r3, #3
 8000cf0:	73fb      	strb	r3, [r7, #15]
 8000cf2:	e01e      	b.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
	else if(air_data == _9_6k) all_data |= 0x04;
 8000cf4:	797b      	ldrb	r3, [r7, #5]
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	d104      	bne.n	8000d04 <E220_Set_Uart_Rate_Parity_Data+0x114>
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	f043 0304 	orr.w	r3, r3, #4
 8000d00:	73fb      	strb	r3, [r7, #15]
 8000d02:	e016      	b.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
	else if(air_data == _19_2k) all_data |= 0x05;
 8000d04:	797b      	ldrb	r3, [r7, #5]
 8000d06:	2b05      	cmp	r3, #5
 8000d08:	d104      	bne.n	8000d14 <E220_Set_Uart_Rate_Parity_Data+0x124>
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
 8000d0c:	f043 0305 	orr.w	r3, r3, #5
 8000d10:	73fb      	strb	r3, [r7, #15]
 8000d12:	e00e      	b.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
	else if(air_data == _38_4k) all_data |= 0x06;
 8000d14:	797b      	ldrb	r3, [r7, #5]
 8000d16:	2b06      	cmp	r3, #6
 8000d18:	d104      	bne.n	8000d24 <E220_Set_Uart_Rate_Parity_Data+0x134>
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	f043 0306 	orr.w	r3, r3, #6
 8000d20:	73fb      	strb	r3, [r7, #15]
 8000d22:	e006      	b.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
	else if(air_data == _62_5k) all_data |= 0x07;
 8000d24:	797b      	ldrb	r3, [r7, #5]
 8000d26:	2b07      	cmp	r3, #7
 8000d28:	d103      	bne.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	f043 0307 	orr.w	r3, r3, #7
 8000d30:	73fb      	strb	r3, [r7, #15]

	send_data[3] = all_data;
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
 8000d34:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit(&huart1, send_data, 4, TIMEOUT);
 8000d36:	f107 0108 	add.w	r1, r7, #8
 8000d3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d3e:	2204      	movs	r2, #4
 8000d40:	4805      	ldr	r0, [pc, #20]	@ (8000d58 <E220_Set_Uart_Rate_Parity_Data+0x168>)
 8000d42:	f003 ff6d 	bl	8004c20 <HAL_UART_Transmit>
	E220_CheckSentReadPacket();
 8000d46:	f7ff feb3 	bl	8000ab0 <E220_CheckSentReadPacket>

	E220_GlobReg.reg0 = all_data;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	@ (8000d5c <E220_Set_Uart_Rate_Parity_Data+0x16c>)
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	7093      	strb	r3, [r2, #2]
}
 8000d50:	bf00      	nop
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	2000033c 	.word	0x2000033c
 8000d5c:	200001f8 	.word	0x200001f8

08000d60 <E220_Set_SubPacket_RSSI_TransPower>:
/*------------------------------------------*/
void E220_Set_SubPacket_RSSI_TransPower(SubPacketSetting sub, _Bool RSSIAmbientNoiseEnable, TransmittingPower tr_pow)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	71bb      	strb	r3, [r7, #6]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	717b      	strb	r3, [r7, #5]
	uint8_t all_data = 0x00;
 8000d72:	2300      	movs	r3, #0
 8000d74:	73fb      	strb	r3, [r7, #15]
	uint8_t send_data[4] = {E220_CMD0, E220_REG1, 1, all_data};
 8000d76:	23c0      	movs	r3, #192	@ 0xc0
 8000d78:	723b      	strb	r3, [r7, #8]
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	727b      	strb	r3, [r7, #9]
 8000d7e:	2301      	movs	r3, #1
 8000d80:	72bb      	strb	r3, [r7, #10]
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	72fb      	strb	r3, [r7, #11]
	/*Sub-Packet Setting*/
	if(sub == _200bytes) all_data |= 0x00;
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d016      	beq.n	8000dba <E220_Set_SubPacket_RSSI_TransPower+0x5a>
	else if(sub == _128bytes) all_data |= 0x40;
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d104      	bne.n	8000d9c <E220_Set_SubPacket_RSSI_TransPower+0x3c>
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d98:	73fb      	strb	r3, [r7, #15]
 8000d9a:	e00e      	b.n	8000dba <E220_Set_SubPacket_RSSI_TransPower+0x5a>
	else if(sub == _64bytes) all_data |= 0x80;
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d104      	bne.n	8000dac <E220_Set_SubPacket_RSSI_TransPower+0x4c>
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000da8:	73fb      	strb	r3, [r7, #15]
 8000daa:	e006      	b.n	8000dba <E220_Set_SubPacket_RSSI_TransPower+0x5a>
	else if(sub == _32bytes) all_data |= 0xC0;
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	d103      	bne.n	8000dba <E220_Set_SubPacket_RSSI_TransPower+0x5a>
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8000db8:	73fb      	strb	r3, [r7, #15]
	/*RSSI Ambient noise enable*/
	if(RSSIAmbientNoiseEnable == true) all_data |= 0x20;
 8000dba:	79bb      	ldrb	r3, [r7, #6]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d003      	beq.n	8000dc8 <E220_Set_SubPacket_RSSI_TransPower+0x68>
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	f043 0320 	orr.w	r3, r3, #32
 8000dc6:	73fb      	strb	r3, [r7, #15]
	else all_data |= 0x00;
	/*Transimitting Power*/
	if(tr_pow == _22dBm) all_data |= 0x00;
 8000dc8:	797b      	ldrb	r3, [r7, #5]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d016      	beq.n	8000dfc <E220_Set_SubPacket_RSSI_TransPower+0x9c>
	else if(tr_pow == _17dBm) all_data |= 0x01;
 8000dce:	797b      	ldrb	r3, [r7, #5]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d104      	bne.n	8000dde <E220_Set_SubPacket_RSSI_TransPower+0x7e>
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	73fb      	strb	r3, [r7, #15]
 8000ddc:	e00e      	b.n	8000dfc <E220_Set_SubPacket_RSSI_TransPower+0x9c>
	else if(tr_pow == _13dBm) all_data |= 0x02;
 8000dde:	797b      	ldrb	r3, [r7, #5]
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d104      	bne.n	8000dee <E220_Set_SubPacket_RSSI_TransPower+0x8e>
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	f043 0302 	orr.w	r3, r3, #2
 8000dea:	73fb      	strb	r3, [r7, #15]
 8000dec:	e006      	b.n	8000dfc <E220_Set_SubPacket_RSSI_TransPower+0x9c>
	else if(tr_pow == _10dBm) all_data |= 0x03;
 8000dee:	797b      	ldrb	r3, [r7, #5]
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d103      	bne.n	8000dfc <E220_Set_SubPacket_RSSI_TransPower+0x9c>
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	f043 0303 	orr.w	r3, r3, #3
 8000dfa:	73fb      	strb	r3, [r7, #15]

	send_data[3] = all_data;
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit(&huart1, send_data, 4, TIMEOUT);
 8000e00:	f107 0108 	add.w	r1, r7, #8
 8000e04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e08:	2204      	movs	r2, #4
 8000e0a:	4806      	ldr	r0, [pc, #24]	@ (8000e24 <E220_Set_SubPacket_RSSI_TransPower+0xc4>)
 8000e0c:	f003 ff08 	bl	8004c20 <HAL_UART_Transmit>
	E220_CheckSentReadPacket();
 8000e10:	f7ff fe4e 	bl	8000ab0 <E220_CheckSentReadPacket>
	E220_GlobReg.reg1 = all_data;
 8000e14:	4a04      	ldr	r2, [pc, #16]	@ (8000e28 <E220_Set_SubPacket_RSSI_TransPower+0xc8>)
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	70d3      	strb	r3, [r2, #3]
}
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	2000033c 	.word	0x2000033c
 8000e28:	200001f8 	.word	0x200001f8

08000e2c <E220_Set_Channel>:
/*------------------------------------------*/
void E220_Set_Channel(uint8_t channel)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
	uint8_t all_data = 0x00;
 8000e36:	2300      	movs	r3, #0
 8000e38:	73fb      	strb	r3, [r7, #15]
	uint8_t send_data[4] = {E220_CMD0, E220_REG2, 1, all_data};
 8000e3a:	23c0      	movs	r3, #192	@ 0xc0
 8000e3c:	723b      	strb	r3, [r7, #8]
 8000e3e:	2304      	movs	r3, #4
 8000e40:	727b      	strb	r3, [r7, #9]
 8000e42:	2301      	movs	r3, #1
 8000e44:	72bb      	strb	r3, [r7, #10]
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	72fb      	strb	r3, [r7, #11]
	all_data |= channel;
 8000e4a:	7bfa      	ldrb	r2, [r7, #15]
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	73fb      	strb	r3, [r7, #15]

	send_data[3] = all_data;
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	72fb      	strb	r3, [r7, #11]
	HAL_UART_Transmit(&huart1, send_data, 4, TIMEOUT);
 8000e56:	f107 0108 	add.w	r1, r7, #8
 8000e5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e5e:	2204      	movs	r2, #4
 8000e60:	4805      	ldr	r0, [pc, #20]	@ (8000e78 <E220_Set_Channel+0x4c>)
 8000e62:	f003 fedd 	bl	8004c20 <HAL_UART_Transmit>
	E220_CheckSentReadPacket();
 8000e66:	f7ff fe23 	bl	8000ab0 <E220_CheckSentReadPacket>
	E220_GlobReg.reg2 = all_data;
 8000e6a:	4a04      	ldr	r2, [pc, #16]	@ (8000e7c <E220_Set_Channel+0x50>)
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	7113      	strb	r3, [r2, #4]
}
 8000e70:	bf00      	nop
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	2000033c 	.word	0x2000033c
 8000e7c:	200001f8 	.word	0x200001f8

08000e80 <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle>:
/*------------------------------------------*/
void E220_Set_RSSI_TransmissionMethod_LBT_WORCycle(_Bool RSSIByte, TransmissionMethod method, _Bool LBT, WORCycle wor)
{
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4604      	mov	r4, r0
 8000e88:	4608      	mov	r0, r1
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4623      	mov	r3, r4
 8000e90:	71fb      	strb	r3, [r7, #7]
 8000e92:	4603      	mov	r3, r0
 8000e94:	71bb      	strb	r3, [r7, #6]
 8000e96:	460b      	mov	r3, r1
 8000e98:	717b      	strb	r3, [r7, #5]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	713b      	strb	r3, [r7, #4]
	uint8_t all_data = 0x00;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	73fb      	strb	r3, [r7, #15]
	uint8_t send_data[4] = {E220_CMD0, E220_REG3, 1, all_data};
 8000ea2:	23c0      	movs	r3, #192	@ 0xc0
 8000ea4:	723b      	strb	r3, [r7, #8]
 8000ea6:	2305      	movs	r3, #5
 8000ea8:	727b      	strb	r3, [r7, #9]
 8000eaa:	2301      	movs	r3, #1
 8000eac:	72bb      	strb	r3, [r7, #10]
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	72fb      	strb	r3, [r7, #11]
	/*Enable RSSI Byte*/
	if(RSSIByte == DISABLE) all_data |= 0x00;
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	f083 0301 	eor.w	r3, r3, #1
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d103      	bne.n	8000ec6 <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x46>
	else all_data |= 0x80;
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ec4:	73fb      	strb	r3, [r7, #15]
	/*Transmission Method*/
	if(method == DISABLE) all_data |= 0x00;
 8000ec6:	79bb      	ldrb	r3, [r7, #6]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d003      	beq.n	8000ed4 <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x54>
	else all_data |= 0x40;
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ed2:	73fb      	strb	r3, [r7, #15]
	/*LBT Enable*/
	if(LBT == DISABLE) all_data |= 0x00;
 8000ed4:	797b      	ldrb	r3, [r7, #5]
 8000ed6:	f083 0301 	eor.w	r3, r3, #1
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d103      	bne.n	8000ee8 <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x68>
	else all_data |= 0x10;
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	f043 0310 	orr.w	r3, r3, #16
 8000ee6:	73fb      	strb	r3, [r7, #15]
	/*WOR Cycle*/
	if(wor == _500ms) all_data |= 0x00;
 8000ee8:	793b      	ldrb	r3, [r7, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d036      	beq.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
	else if(wor == _1000ms) all_data |= 0x01;
 8000eee:	793b      	ldrb	r3, [r7, #4]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d104      	bne.n	8000efe <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x7e>
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	e02e      	b.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
	else if(wor == _1500ms) all_data |= 0x02;
 8000efe:	793b      	ldrb	r3, [r7, #4]
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d104      	bne.n	8000f0e <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x8e>
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	f043 0302 	orr.w	r3, r3, #2
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	e026      	b.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
	else if(wor == _2000ms) all_data |= 0x03;
 8000f0e:	793b      	ldrb	r3, [r7, #4]
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	d104      	bne.n	8000f1e <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x9e>
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	f043 0303 	orr.w	r3, r3, #3
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	e01e      	b.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
	else if(wor == _2500ms) all_data |= 0x04;
 8000f1e:	793b      	ldrb	r3, [r7, #4]
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d104      	bne.n	8000f2e <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xae>
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	f043 0304 	orr.w	r3, r3, #4
 8000f2a:	73fb      	strb	r3, [r7, #15]
 8000f2c:	e016      	b.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
	else if(wor == _3000ms) all_data |= 0x05;
 8000f2e:	793b      	ldrb	r3, [r7, #4]
 8000f30:	2b05      	cmp	r3, #5
 8000f32:	d104      	bne.n	8000f3e <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xbe>
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	f043 0305 	orr.w	r3, r3, #5
 8000f3a:	73fb      	strb	r3, [r7, #15]
 8000f3c:	e00e      	b.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
	else if(wor == _3500ms) all_data |= 0x06;
 8000f3e:	793b      	ldrb	r3, [r7, #4]
 8000f40:	2b06      	cmp	r3, #6
 8000f42:	d104      	bne.n	8000f4e <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xce>
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	f043 0306 	orr.w	r3, r3, #6
 8000f4a:	73fb      	strb	r3, [r7, #15]
 8000f4c:	e006      	b.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
	else if(wor == _4000ms) all_data |= 0x07;
 8000f4e:	793b      	ldrb	r3, [r7, #4]
 8000f50:	2b07      	cmp	r3, #7
 8000f52:	d103      	bne.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	f043 0307 	orr.w	r3, r3, #7
 8000f5a:	73fb      	strb	r3, [r7, #15]

	send_data[3] = all_data;
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	72fb      	strb	r3, [r7, #11]
	HAL_UART_Transmit(&huart1, send_data, 4, TIMEOUT);
 8000f60:	f107 0108 	add.w	r1, r7, #8
 8000f64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f68:	2204      	movs	r2, #4
 8000f6a:	4806      	ldr	r0, [pc, #24]	@ (8000f84 <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x104>)
 8000f6c:	f003 fe58 	bl	8004c20 <HAL_UART_Transmit>
	E220_CheckSentReadPacket();
 8000f70:	f7ff fd9e 	bl	8000ab0 <E220_CheckSentReadPacket>
	E220_GlobReg.reg3 = all_data;
 8000f74:	4a04      	ldr	r2, [pc, #16]	@ (8000f88 <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x108>)
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	7153      	strb	r3, [r2, #5]
}
 8000f7a:	bf00      	nop
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd90      	pop	{r4, r7, pc}
 8000f82:	bf00      	nop
 8000f84:	2000033c 	.word	0x2000033c
 8000f88:	200001f8 	.word	0x200001f8

08000f8c <E220_Set_Key>:
void E220_Set_Key(uint16_t key)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	80fb      	strh	r3, [r7, #6]
	uint8_t key_h = 0x00;
 8000f96:	2300      	movs	r3, #0
 8000f98:	75fb      	strb	r3, [r7, #23]
	uint8_t key_l = 0x00;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	75bb      	strb	r3, [r7, #22]
	uint8_t send_data[5] = {E220_CMD0, E220_CRYPT_H, 2, key_h, key_l};
 8000f9e:	23c0      	movs	r3, #192	@ 0xc0
 8000fa0:	733b      	strb	r3, [r7, #12]
 8000fa2:	2306      	movs	r3, #6
 8000fa4:	737b      	strb	r3, [r7, #13]
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	73bb      	strb	r3, [r7, #14]
 8000faa:	7dfb      	ldrb	r3, [r7, #23]
 8000fac:	73fb      	strb	r3, [r7, #15]
 8000fae:	7dbb      	ldrb	r3, [r7, #22]
 8000fb0:	743b      	strb	r3, [r7, #16]
	uint16_t mask = 0xFFFF;
 8000fb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fb6:	82bb      	strh	r3, [r7, #20]

	key_h = (key >> 8) & mask;
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	0a1b      	lsrs	r3, r3, #8
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	8abb      	ldrh	r3, [r7, #20]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	75fb      	strb	r3, [r7, #23]
	key_l = (key << 0) & mask;
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	8abb      	ldrh	r3, [r7, #20]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	75bb      	strb	r3, [r7, #22]

	send_data[3] = key_h;
 8000fd4:	7dfb      	ldrb	r3, [r7, #23]
 8000fd6:	73fb      	strb	r3, [r7, #15]
	send_data[4] = key_l;
 8000fd8:	7dbb      	ldrb	r3, [r7, #22]
 8000fda:	743b      	strb	r3, [r7, #16]

	HAL_UART_Transmit(&huart1, send_data, 5, TIMEOUT);
 8000fdc:	f107 010c 	add.w	r1, r7, #12
 8000fe0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe4:	2205      	movs	r2, #5
 8000fe6:	4806      	ldr	r0, [pc, #24]	@ (8001000 <E220_Set_Key+0x74>)
 8000fe8:	f003 fe1a 	bl	8004c20 <HAL_UART_Transmit>
	E220_CheckSentReadPacket();
 8000fec:	f7ff fd60 	bl	8000ab0 <E220_CheckSentReadPacket>
	E220_GlobReg.Key = key;
 8000ff0:	4a04      	ldr	r2, [pc, #16]	@ (8001004 <E220_Set_Key+0x78>)
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	80d3      	strh	r3, [r2, #6]
}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	2000033c 	.word	0x2000033c
 8001004:	200001f8 	.word	0x200001f8

08001008 <E220_SetDefaultSettings>:
	E220_Set_Key(str.Key);
	HAL_Delay(50);
}
/*------------------------------------------*/
void E220_SetDefaultSettings(uint16_t u1, uint8_t u2, _Bool u3)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	80fb      	strh	r3, [r7, #6]
 8001012:	460b      	mov	r3, r1
 8001014:	717b      	strb	r3, [r7, #5]
 8001016:	4613      	mov	r3, r2
 8001018:	713b      	strb	r3, [r7, #4]
	E220_HandleTypeDef E220_Settings = {0, };
 800101a:	f107 0308 	add.w	r3, r7, #8
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
	E220_Settings.Address = u1;
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	813b      	strh	r3, [r7, #8]
	E220_Settings.Rate = Rate_9600;
 800102c:	2303      	movs	r3, #3
 800102e:	72bb      	strb	r3, [r7, #10]
	E220_Settings.Pority = _8N1;
 8001030:	2300      	movs	r3, #0
 8001032:	72fb      	strb	r3, [r7, #11]
	E220_Settings.AirDataRate = _2_4k;
 8001034:	2300      	movs	r3, #0
 8001036:	733b      	strb	r3, [r7, #12]
	E220_Settings.SubPacket = _200bytes;
 8001038:	2300      	movs	r3, #0
 800103a:	737b      	strb	r3, [r7, #13]
	E220_Settings.RSSIAmbientNoiseEnable = DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	73bb      	strb	r3, [r7, #14]
	E220_Settings.TransPower = _22dBm;
 8001040:	2300      	movs	r3, #0
 8001042:	73fb      	strb	r3, [r7, #15]
	E220_Settings.ChannelControl = u2;
 8001044:	797b      	ldrb	r3, [r7, #5]
 8001046:	743b      	strb	r3, [r7, #16]
	E220_Settings.EnableRSSIByte = u3;
 8001048:	793b      	ldrb	r3, [r7, #4]
 800104a:	747b      	strb	r3, [r7, #17]
	E220_Settings.TransMethod = FixedTransmissionMode;
 800104c:	2301      	movs	r3, #1
 800104e:	74bb      	strb	r3, [r7, #18]
	E220_Settings.LBT = DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	74fb      	strb	r3, [r7, #19]
	E220_Settings.WORCycle = _500ms;
 8001054:	2300      	movs	r3, #0
 8001056:	753b      	strb	r3, [r7, #20]
	E220_Settings.Key = 0x0000;
 8001058:	2300      	movs	r3, #0
 800105a:	82fb      	strh	r3, [r7, #22]

	E220_Set_AddressModule(E220_Settings.Address);
 800105c:	893b      	ldrh	r3, [r7, #8]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fd88 	bl	8000b74 <E220_Set_AddressModule>
	HAL_Delay(30);
 8001064:	201e      	movs	r0, #30
 8001066:	f001 fa29 	bl	80024bc <HAL_Delay>
	E220_Set_Uart_Rate_Parity_Data(E220_Settings.Rate, E220_Settings.Pority, E220_Settings.AirDataRate);
 800106a:	7abb      	ldrb	r3, [r7, #10]
 800106c:	7af9      	ldrb	r1, [r7, #11]
 800106e:	7b3a      	ldrb	r2, [r7, #12]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fdbd 	bl	8000bf0 <E220_Set_Uart_Rate_Parity_Data>
	HAL_Delay(30);
 8001076:	201e      	movs	r0, #30
 8001078:	f001 fa20 	bl	80024bc <HAL_Delay>
	E220_Set_SubPacket_RSSI_TransPower(E220_Settings.SubPacket, E220_Settings.RSSIAmbientNoiseEnable, E220_Settings.TransPower);
 800107c:	7b7b      	ldrb	r3, [r7, #13]
 800107e:	7bb9      	ldrb	r1, [r7, #14]
 8001080:	7bfa      	ldrb	r2, [r7, #15]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fe6c 	bl	8000d60 <E220_Set_SubPacket_RSSI_TransPower>
	HAL_Delay(30);
 8001088:	201e      	movs	r0, #30
 800108a:	f001 fa17 	bl	80024bc <HAL_Delay>
	E220_Set_Channel(E220_Settings.ChannelControl);
 800108e:	7c3b      	ldrb	r3, [r7, #16]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fecb 	bl	8000e2c <E220_Set_Channel>
	HAL_Delay(30);
 8001096:	201e      	movs	r0, #30
 8001098:	f001 fa10 	bl	80024bc <HAL_Delay>
	E220_Set_RSSI_TransmissionMethod_LBT_WORCycle(E220_Settings.EnableRSSIByte, E220_Settings.TransMethod, E220_Settings.LBT, E220_Settings.WORCycle);
 800109c:	7c78      	ldrb	r0, [r7, #17]
 800109e:	7cb9      	ldrb	r1, [r7, #18]
 80010a0:	7cfa      	ldrb	r2, [r7, #19]
 80010a2:	7d3b      	ldrb	r3, [r7, #20]
 80010a4:	f7ff feec 	bl	8000e80 <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle>
	HAL_Delay(30);
 80010a8:	201e      	movs	r0, #30
 80010aa:	f001 fa07 	bl	80024bc <HAL_Delay>
	E220_Set_Key(E220_Settings.Key);
 80010ae:	8afb      	ldrh	r3, [r7, #22]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff6b 	bl	8000f8c <E220_Set_Key>
	HAL_Delay(30);
 80010b6:	201e      	movs	r0, #30
 80010b8:	f001 fa00 	bl	80024bc <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <AGRO_Init>:

	return res;
}
//-------------------------------------------------------------------//
NumberDevice AGRO_Init(AGRO_HandleTypeDef Device, NumberDevice divice)
{
 80010c4:	b490      	push	{r4, r7}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	1d3c      	adds	r4, r7, #4
 80010cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010d0:	70fb      	strb	r3, [r7, #3]
	SettingsAllDevice = Device;
 80010d2:	4b08      	ldr	r3, [pc, #32]	@ (80010f4 <AGRO_Init+0x30>)
 80010d4:	461c      	mov	r4, r3
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	MyDevice = divice;
 80010e0:	4a05      	ldr	r2, [pc, #20]	@ (80010f8 <AGRO_Init+0x34>)
 80010e2:	78fb      	ldrb	r3, [r7, #3]
 80010e4:	7013      	strb	r3, [r2, #0]

	return MyDevice;
 80010e6:	4b04      	ldr	r3, [pc, #16]	@ (80010f8 <AGRO_Init+0x34>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc90      	pop	{r4, r7}
 80010f2:	4770      	bx	lr
 80010f4:	20000200 	.word	0x20000200
 80010f8:	2000020c 	.word	0x2000020c

080010fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001100:	f001 f97a 	bl	80023f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001104:	f000 f896 	bl	8001234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001108:	f000 f9f2 	bl	80014f0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800110c:	f000 f99c 	bl	8001448 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001110:	f000 f9c4 	bl	800149c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001114:	f000 f8d4 	bl	80012c0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001118:	f000 f900 	bl	800131c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800111c:	2100      	movs	r1, #0
 800111e:	483d      	ldr	r0, [pc, #244]	@ (8001214 <main+0x118>)
 8001120:	f003 f800 	bl	8004124 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001124:	2104      	movs	r1, #4
 8001126:	483b      	ldr	r0, [pc, #236]	@ (8001214 <main+0x118>)
 8001128:	f002 fffc 	bl	8004124 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800112c:	2108      	movs	r1, #8
 800112e:	4839      	ldr	r0, [pc, #228]	@ (8001214 <main+0x118>)
 8001130:	f002 fff8 	bl	8004124 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001134:	210c      	movs	r1, #12
 8001136:	4837      	ldr	r0, [pc, #220]	@ (8001214 <main+0x118>)
 8001138:	f002 fff4 	bl	8004124 <HAL_TIM_PWM_Start>

  LED_OFF;
 800113c:	2201      	movs	r2, #1
 800113e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001142:	4835      	ldr	r0, [pc, #212]	@ (8001218 <main+0x11c>)
 8001144:	f001 fd22 	bl	8002b8c <HAL_GPIO_WritePin>
  E220_SetMode(DeepSleep); // Режим сна
 8001148:	2003      	movs	r0, #3
 800114a:	f7ff fcc5 	bl	8000ad8 <E220_SetMode>
  E220_WaitReady(); // Ожидание включения
 800114e:	f7ff fc9b 	bl	8000a88 <E220_WaitReady>
  LED_ON;
 8001152:	2200      	movs	r2, #0
 8001154:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001158:	482f      	ldr	r0, [pc, #188]	@ (8001218 <main+0x11c>)
 800115a:	f001 fd17 	bl	8002b8c <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800115e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001162:	f001 f9ab 	bl	80024bc <HAL_Delay>
  LED_OFF;
 8001166:	2201      	movs	r2, #1
 8001168:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800116c:	482a      	ldr	r0, [pc, #168]	@ (8001218 <main+0x11c>)
 800116e:	f001 fd0d 	bl	8002b8c <HAL_GPIO_WritePin>
  /*Установка настроек*/
  /*Выбор устройства установка адресов и каналов всех используемых устройств*/

  AGRO_Init(AGRO_Device, Device_0);
 8001172:	4a2a      	ldr	r2, [pc, #168]	@ (800121c <main+0x120>)
 8001174:	2300      	movs	r3, #0
 8001176:	ca07      	ldmia	r2, {r0, r1, r2}
 8001178:	f7ff ffa4 	bl	80010c4 <AGRO_Init>

  // Передатчик 1
  AGRO_Device.AddrDevice_1 = 0x0001;
 800117c:	4b27      	ldr	r3, [pc, #156]	@ (800121c <main+0x120>)
 800117e:	2201      	movs	r2, #1
 8001180:	805a      	strh	r2, [r3, #2]
  AGRO_Device.ChDevice_1 = 0x02;
 8001182:	4b26      	ldr	r3, [pc, #152]	@ (800121c <main+0x120>)
 8001184:	2202      	movs	r2, #2
 8001186:	725a      	strb	r2, [r3, #9]

  // Приемник 1
  AGRO_Device.AddrDevice_0 = 0x0003;
 8001188:	4b24      	ldr	r3, [pc, #144]	@ (800121c <main+0x120>)
 800118a:	2203      	movs	r2, #3
 800118c:	801a      	strh	r2, [r3, #0]
  AGRO_Device.ChDevice_0 = 0x04;
 800118e:	4b23      	ldr	r3, [pc, #140]	@ (800121c <main+0x120>)
 8001190:	2204      	movs	r2, #4
 8001192:	721a      	strb	r2, [r3, #8]

  E220_SetDefaultSettings(AGRO_Device.AddrDevice_0, AGRO_Device.ChDevice_0, DISABLE);
 8001194:	4b21      	ldr	r3, [pc, #132]	@ (800121c <main+0x120>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	4a20      	ldr	r2, [pc, #128]	@ (800121c <main+0x120>)
 800119a:	7a11      	ldrb	r1, [r2, #8]
 800119c:	2200      	movs	r2, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ff32 	bl	8001008 <E220_SetDefaultSettings>

  HAL_Delay(500);
 80011a4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011a8:	f001 f988 	bl	80024bc <HAL_Delay>
  LED_ON;
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011b2:	4819      	ldr	r0, [pc, #100]	@ (8001218 <main+0x11c>)
 80011b4:	f001 fcea 	bl	8002b8c <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80011b8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011bc:	f001 f97e 	bl	80024bc <HAL_Delay>
  LED_OFF;
 80011c0:	2201      	movs	r2, #1
 80011c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011c6:	4814      	ldr	r0, [pc, #80]	@ (8001218 <main+0x11c>)
 80011c8:	f001 fce0 	bl	8002b8c <HAL_GPIO_WritePin>


  E220_SetMode(NORMAL);
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff fc83 	bl	8000ad8 <E220_SetMode>




//  HAL_UART_Receive_IT(&huart1, (uint8_t*)&recv, 5);
  HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 80011d2:	2201      	movs	r2, #1
 80011d4:	4912      	ldr	r1, [pc, #72]	@ (8001220 <main+0x124>)
 80011d6:	4813      	ldr	r0, [pc, #76]	@ (8001224 <main+0x128>)
 80011d8:	f003 fda5 	bl	8004d26 <HAL_UART_Receive_IT>



#if SSD1306_DISPLAY

  SSD1306_Init();
 80011dc:	f000 fbac 	bl	8001938 <SSD1306_Init>
  SSD1306_GotoXY(0, 0);
 80011e0:	2100      	movs	r1, #0
 80011e2:	2000      	movs	r0, #0
 80011e4:	f000 fd24 	bl	8001c30 <SSD1306_GotoXY>
  sprintf(buf, "AGRO ROBOT");
 80011e8:	490f      	ldr	r1, [pc, #60]	@ (8001228 <main+0x12c>)
 80011ea:	4810      	ldr	r0, [pc, #64]	@ (800122c <main+0x130>)
 80011ec:	f005 f85e 	bl	80062ac <siprintf>
  SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 80011f0:	2201      	movs	r2, #1
 80011f2:	490f      	ldr	r1, [pc, #60]	@ (8001230 <main+0x134>)
 80011f4:	480d      	ldr	r0, [pc, #52]	@ (800122c <main+0x130>)
 80011f6:	f000 fdaf 	bl	8001d58 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 80011fa:	f000 fc61 	bl	8001ac0 <SSD1306_UpdateScreen>
  HAL_Delay(1000);
 80011fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001202:	f001 f95b 	bl	80024bc <HAL_Delay>
//	  sprintf(buf, "...");
//	  SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
//	  SSD1306_UpdateScreen();
//	  HAL_Delay(200);
//  }
  SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001206:	2000      	movs	r0, #0
 8001208:	f000 fc8c 	bl	8001b24 <SSD1306_Fill>
  SSD1306_UpdateScreen();
 800120c:	f000 fc58 	bl	8001ac0 <SSD1306_UpdateScreen>
  //uint16_t numPack = 100;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <main+0x114>
 8001214:	200002f4 	.word	0x200002f4
 8001218:	40011000 	.word	0x40011000
 800121c:	200003cc 	.word	0x200003cc
 8001220:	20000210 	.word	0x20000210
 8001224:	2000033c 	.word	0x2000033c
 8001228:	08008540 	.word	0x08008540
 800122c:	2000027c 	.word	0x2000027c
 8001230:	20000000 	.word	0x20000000

08001234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b090      	sub	sp, #64	@ 0x40
 8001238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123a:	f107 0318 	add.w	r3, r7, #24
 800123e:	2228      	movs	r2, #40	@ 0x28
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f005 f897 	bl	8006376 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001256:	2301      	movs	r3, #1
 8001258:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800125a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800125e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001264:	2301      	movs	r3, #1
 8001266:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001268:	2302      	movs	r3, #2
 800126a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800126c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001270:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001272:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001276:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001278:	f107 0318 	add.w	r3, r7, #24
 800127c:	4618      	mov	r0, r3
 800127e:	f002 fa99 	bl	80037b4 <HAL_RCC_OscConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001288:	f000 fb50 	bl	800192c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128c:	230f      	movs	r3, #15
 800128e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001290:	2302      	movs	r3, #2
 8001292:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001298:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800129c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800129e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012a2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	2102      	movs	r1, #2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f002 fd05 	bl	8003cb8 <HAL_RCC_ClockConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80012b4:	f000 fb3a 	bl	800192c <Error_Handler>
  }
}
 80012b8:	bf00      	nop
 80012ba:	3740      	adds	r7, #64	@ 0x40
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012c4:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012c6:	4a13      	ldr	r2, [pc, #76]	@ (8001314 <MX_I2C1_Init+0x54>)
 80012c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ca:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012cc:	4a12      	ldr	r2, [pc, #72]	@ (8001318 <MX_I2C1_Init+0x58>)
 80012ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ea:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f0:	4b07      	ldr	r3, [pc, #28]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f6:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012fc:	4804      	ldr	r0, [pc, #16]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012fe:	f001 fc8f 	bl	8002c20 <HAL_I2C_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001308:	f000 fb10 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200002a0 	.word	0x200002a0
 8001314:	40005400 	.word	0x40005400
 8001318:	000186a0 	.word	0x000186a0

0800131c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08e      	sub	sp, #56	@ 0x38
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001322:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001330:	f107 0320 	add.w	r3, r7, #32
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
 8001348:	615a      	str	r2, [r3, #20]
 800134a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800134c:	4b3d      	ldr	r3, [pc, #244]	@ (8001444 <MX_TIM2_Init+0x128>)
 800134e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001352:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001354:	4b3b      	ldr	r3, [pc, #236]	@ (8001444 <MX_TIM2_Init+0x128>)
 8001356:	2247      	movs	r2, #71	@ 0x47
 8001358:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135a:	4b3a      	ldr	r3, [pc, #232]	@ (8001444 <MX_TIM2_Init+0x128>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001360:	4b38      	ldr	r3, [pc, #224]	@ (8001444 <MX_TIM2_Init+0x128>)
 8001362:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001366:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001368:	4b36      	ldr	r3, [pc, #216]	@ (8001444 <MX_TIM2_Init+0x128>)
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136e:	4b35      	ldr	r3, [pc, #212]	@ (8001444 <MX_TIM2_Init+0x128>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001374:	4833      	ldr	r0, [pc, #204]	@ (8001444 <MX_TIM2_Init+0x128>)
 8001376:	f002 fe2d 	bl	8003fd4 <HAL_TIM_Base_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001380:	f000 fad4 	bl	800192c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001384:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001388:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800138a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800138e:	4619      	mov	r1, r3
 8001390:	482c      	ldr	r0, [pc, #176]	@ (8001444 <MX_TIM2_Init+0x128>)
 8001392:	f003 f82b 	bl	80043ec <HAL_TIM_ConfigClockSource>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800139c:	f000 fac6 	bl	800192c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013a0:	4828      	ldr	r0, [pc, #160]	@ (8001444 <MX_TIM2_Init+0x128>)
 80013a2:	f002 fe66 	bl	8004072 <HAL_TIM_PWM_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80013ac:	f000 fabe 	bl	800192c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013b8:	f107 0320 	add.w	r3, r7, #32
 80013bc:	4619      	mov	r1, r3
 80013be:	4821      	ldr	r0, [pc, #132]	@ (8001444 <MX_TIM2_Init+0x128>)
 80013c0:	f003 fb80 	bl	8004ac4 <HAL_TIMEx_MasterConfigSynchronization>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80013ca:	f000 faaf 	bl	800192c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ce:	2360      	movs	r3, #96	@ 0x60
 80013d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	2200      	movs	r2, #0
 80013e2:	4619      	mov	r1, r3
 80013e4:	4817      	ldr	r0, [pc, #92]	@ (8001444 <MX_TIM2_Init+0x128>)
 80013e6:	f002 ff3f 	bl	8004268 <HAL_TIM_PWM_ConfigChannel>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80013f0:	f000 fa9c 	bl	800192c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	2204      	movs	r2, #4
 80013f8:	4619      	mov	r1, r3
 80013fa:	4812      	ldr	r0, [pc, #72]	@ (8001444 <MX_TIM2_Init+0x128>)
 80013fc:	f002 ff34 	bl	8004268 <HAL_TIM_PWM_ConfigChannel>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001406:	f000 fa91 	bl	800192c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2208      	movs	r2, #8
 800140e:	4619      	mov	r1, r3
 8001410:	480c      	ldr	r0, [pc, #48]	@ (8001444 <MX_TIM2_Init+0x128>)
 8001412:	f002 ff29 	bl	8004268 <HAL_TIM_PWM_ConfigChannel>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 800141c:	f000 fa86 	bl	800192c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	220c      	movs	r2, #12
 8001424:	4619      	mov	r1, r3
 8001426:	4807      	ldr	r0, [pc, #28]	@ (8001444 <MX_TIM2_Init+0x128>)
 8001428:	f002 ff1e 	bl	8004268 <HAL_TIM_PWM_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8001432:	f000 fa7b 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001436:	4803      	ldr	r0, [pc, #12]	@ (8001444 <MX_TIM2_Init+0x128>)
 8001438:	f000 fdd8 	bl	8001fec <HAL_TIM_MspPostInit>

}
 800143c:	bf00      	nop
 800143e:	3738      	adds	r7, #56	@ 0x38
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200002f4 	.word	0x200002f4

08001448 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800144c:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <MX_USART1_UART_Init+0x4c>)
 800144e:	4a12      	ldr	r2, [pc, #72]	@ (8001498 <MX_USART1_UART_Init+0x50>)
 8001450:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001452:	4b10      	ldr	r3, [pc, #64]	@ (8001494 <MX_USART1_UART_Init+0x4c>)
 8001454:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001458:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800145a:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <MX_USART1_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001460:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <MX_USART1_UART_Init+0x4c>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <MX_USART1_UART_Init+0x4c>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800146c:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <MX_USART1_UART_Init+0x4c>)
 800146e:	220c      	movs	r2, #12
 8001470:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001472:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <MX_USART1_UART_Init+0x4c>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001478:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <MX_USART1_UART_Init+0x4c>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800147e:	4805      	ldr	r0, [pc, #20]	@ (8001494 <MX_USART1_UART_Init+0x4c>)
 8001480:	f003 fb7e 	bl	8004b80 <HAL_UART_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800148a:	f000 fa4f 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2000033c 	.word	0x2000033c
 8001498:	40013800 	.word	0x40013800

0800149c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014a0:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014a2:	4a12      	ldr	r2, [pc, #72]	@ (80014ec <MX_USART3_UART_Init+0x50>)
 80014a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80014a6:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014a8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80014ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014c0:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014c2:	220c      	movs	r2, #12
 80014c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c6:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014d2:	4805      	ldr	r0, [pc, #20]	@ (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014d4:	f003 fb54 	bl	8004b80 <HAL_UART_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80014de:	f000 fa25 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000384 	.word	0x20000384
 80014ec:	40004800 	.word	0x40004800

080014f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f6:	f107 0310 	add.w	r3, r7, #16
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001504:	4b55      	ldr	r3, [pc, #340]	@ (800165c <MX_GPIO_Init+0x16c>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	4a54      	ldr	r2, [pc, #336]	@ (800165c <MX_GPIO_Init+0x16c>)
 800150a:	f043 0310 	orr.w	r3, r3, #16
 800150e:	6193      	str	r3, [r2, #24]
 8001510:	4b52      	ldr	r3, [pc, #328]	@ (800165c <MX_GPIO_Init+0x16c>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	f003 0310 	and.w	r3, r3, #16
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800151c:	4b4f      	ldr	r3, [pc, #316]	@ (800165c <MX_GPIO_Init+0x16c>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	4a4e      	ldr	r2, [pc, #312]	@ (800165c <MX_GPIO_Init+0x16c>)
 8001522:	f043 0320 	orr.w	r3, r3, #32
 8001526:	6193      	str	r3, [r2, #24]
 8001528:	4b4c      	ldr	r3, [pc, #304]	@ (800165c <MX_GPIO_Init+0x16c>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	f003 0320 	and.w	r3, r3, #32
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001534:	4b49      	ldr	r3, [pc, #292]	@ (800165c <MX_GPIO_Init+0x16c>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	4a48      	ldr	r2, [pc, #288]	@ (800165c <MX_GPIO_Init+0x16c>)
 800153a:	f043 0304 	orr.w	r3, r3, #4
 800153e:	6193      	str	r3, [r2, #24]
 8001540:	4b46      	ldr	r3, [pc, #280]	@ (800165c <MX_GPIO_Init+0x16c>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154c:	4b43      	ldr	r3, [pc, #268]	@ (800165c <MX_GPIO_Init+0x16c>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	4a42      	ldr	r2, [pc, #264]	@ (800165c <MX_GPIO_Init+0x16c>)
 8001552:	f043 0308 	orr.w	r3, r3, #8
 8001556:	6193      	str	r3, [r2, #24]
 8001558:	4b40      	ldr	r3, [pc, #256]	@ (800165c <MX_GPIO_Init+0x16c>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f003 0308 	and.w	r3, r3, #8
 8001560:	603b      	str	r3, [r7, #0]
 8001562:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800156a:	483d      	ldr	r0, [pc, #244]	@ (8001660 <MX_GPIO_Init+0x170>)
 800156c:	f001 fb0e 	bl	8002b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|E220_M1_Pin, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	2150      	movs	r1, #80	@ 0x50
 8001574:	483b      	ldr	r0, [pc, #236]	@ (8001664 <MX_GPIO_Init+0x174>)
 8001576:	f001 fb09 	bl	8002b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|E220_M0_Pin, GPIO_PIN_RESET);
 800157a:	2200      	movs	r2, #0
 800157c:	2181      	movs	r1, #129	@ 0x81
 800157e:	483a      	ldr	r0, [pc, #232]	@ (8001668 <MX_GPIO_Init+0x178>)
 8001580:	f001 fb04 	bl	8002b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001584:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001588:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158a:	2301      	movs	r3, #1
 800158c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2302      	movs	r3, #2
 8001594:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001596:	f107 0310 	add.w	r3, r7, #16
 800159a:	4619      	mov	r1, r3
 800159c:	4830      	ldr	r0, [pc, #192]	@ (8001660 <MX_GPIO_Init+0x170>)
 800159e:	f001 f971 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015a2:	2310      	movs	r3, #16
 80015a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a6:	2301      	movs	r3, #1
 80015a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2302      	movs	r3, #2
 80015b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b2:	f107 0310 	add.w	r3, r7, #16
 80015b6:	4619      	mov	r1, r3
 80015b8:	482a      	ldr	r0, [pc, #168]	@ (8001664 <MX_GPIO_Init+0x174>)
 80015ba:	f001 f963 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015be:	2301      	movs	r3, #1
 80015c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c2:	2301      	movs	r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2302      	movs	r3, #2
 80015cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ce:	f107 0310 	add.w	r3, r7, #16
 80015d2:	4619      	mov	r1, r3
 80015d4:	4824      	ldr	r0, [pc, #144]	@ (8001668 <MX_GPIO_Init+0x178>)
 80015d6:	f001 f955 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015da:	2302      	movs	r3, #2
 80015dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015e2:	2301      	movs	r3, #1
 80015e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e6:	f107 0310 	add.w	r3, r7, #16
 80015ea:	4619      	mov	r1, r3
 80015ec:	481e      	ldr	r0, [pc, #120]	@ (8001668 <MX_GPIO_Init+0x178>)
 80015ee:	f001 f949 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pin : E220_M0_Pin */
  GPIO_InitStruct.Pin = E220_M0_Pin;
 80015f2:	2380      	movs	r3, #128	@ 0x80
 80015f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015fa:	2302      	movs	r3, #2
 80015fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2302      	movs	r3, #2
 8001600:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(E220_M0_GPIO_Port, &GPIO_InitStruct);
 8001602:	f107 0310 	add.w	r3, r7, #16
 8001606:	4619      	mov	r1, r3
 8001608:	4816      	ldr	r0, [pc, #88]	@ (8001664 <MX_GPIO_Init+0x174>)
 800160a:	f001 f93b 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pin : E220_M1_Pin */
  GPIO_InitStruct.Pin = E220_M1_Pin;
 800160e:	2340      	movs	r3, #64	@ 0x40
 8001610:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001612:	2301      	movs	r3, #1
 8001614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001616:	2302      	movs	r3, #2
 8001618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2302      	movs	r3, #2
 800161c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(E220_M1_GPIO_Port, &GPIO_InitStruct);
 800161e:	f107 0310 	add.w	r3, r7, #16
 8001622:	4619      	mov	r1, r3
 8001624:	480f      	ldr	r0, [pc, #60]	@ (8001664 <MX_GPIO_Init+0x174>)
 8001626:	f001 f92d 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800162a:	2320      	movs	r3, #32
 800162c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800162e:	4b0f      	ldr	r3, [pc, #60]	@ (800166c <MX_GPIO_Init+0x17c>)
 8001630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001632:	2301      	movs	r3, #1
 8001634:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001636:	f107 0310 	add.w	r3, r7, #16
 800163a:	4619      	mov	r1, r3
 800163c:	4809      	ldr	r0, [pc, #36]	@ (8001664 <MX_GPIO_Init+0x174>)
 800163e:	f001 f921 	bl	8002884 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	2017      	movs	r0, #23
 8001648:	f001 f833 	bl	80026b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800164c:	2017      	movs	r0, #23
 800164e:	f001 f84c 	bl	80026ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001652:	bf00      	nop
 8001654:	3720      	adds	r7, #32
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40021000 	.word	0x40021000
 8001660:	40011000 	.word	0x40011000
 8001664:	40010800 	.word	0x40010800
 8001668:	40010c00 	.word	0x40010c00
 800166c:	10210000 	.word	0x10210000

08001670 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) // Radio kanalidan ma'lumot kelsa
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a4d      	ldr	r2, [pc, #308]	@ (80017b0 <HAL_UART_RxCpltCallback+0x140>)
 800167c:	4293      	cmp	r3, r2
 800167e:	f040 808e 	bne.w	800179e <HAL_UART_RxCpltCallback+0x12e>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001682:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001686:	484b      	ldr	r0, [pc, #300]	@ (80017b4 <HAL_UART_RxCpltCallback+0x144>)
 8001688:	f001 fa98 	bl	8002bbc <HAL_GPIO_TogglePin>
        // Start baytini tekshirish
        if (rx_byte == E220_START_BYTE)
 800168c:	4b4a      	ldr	r3, [pc, #296]	@ (80017b8 <HAL_UART_RxCpltCallback+0x148>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2baa      	cmp	r3, #170	@ 0xaa
 8001692:	d106      	bne.n	80016a2 <HAL_UART_RxCpltCallback+0x32>
        {
            flag_start_recv = true; // Qabul qilishni boshlash uchun flagni yoqamiz
 8001694:	4b49      	ldr	r3, [pc, #292]	@ (80017bc <HAL_UART_RxCpltCallback+0x14c>)
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
            counterBuffer = 0; // Bufer hisoblagichini 0 ga sozlaymiz
 800169a:	4b49      	ldr	r3, [pc, #292]	@ (80017c0 <HAL_UART_RxCpltCallback+0x150>)
 800169c:	2200      	movs	r2, #0
 800169e:	801a      	strh	r2, [r3, #0]
 80016a0:	e07d      	b.n	800179e <HAL_UART_RxCpltCallback+0x12e>
        }
        else if (flag_start_recv) // Agar qabul qilish boshlangan bo'lsa
 80016a2:	4b46      	ldr	r3, [pc, #280]	@ (80017bc <HAL_UART_RxCpltCallback+0x14c>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d079      	beq.n	800179e <HAL_UART_RxCpltCallback+0x12e>
        {
            // Stop baytini tekshirish
            if (rx_byte == E220_STOP_BYTE)
 80016aa:	4b43      	ldr	r3, [pc, #268]	@ (80017b8 <HAL_UART_RxCpltCallback+0x148>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2bbb      	cmp	r3, #187	@ 0xbb
 80016b0:	d137      	bne.n	8001722 <HAL_UART_RxCpltCallback+0xb2>
            {
                flag_start_recv = false; // Qabul qilishni to'xtatish uchun flagni o'chiramiz
 80016b2:	4b42      	ldr	r3, [pc, #264]	@ (80017bc <HAL_UART_RxCpltCallback+0x14c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
                LED_OFF;
 80016b8:	2201      	movs	r2, #1
 80016ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016be:	483d      	ldr	r0, [pc, #244]	@ (80017b4 <HAL_UART_RxCpltCallback+0x144>)
 80016c0:	f001 fa64 	bl	8002b8c <HAL_GPIO_WritePin>

                // Ekranni tozalash
                SSD1306_Fill(SSD1306_COLOR_BLACK);
 80016c4:	2000      	movs	r0, #0
 80016c6:	f000 fa2d 	bl	8001b24 <SSD1306_Fill>

                // Buferni to'xtatish baytidan oldingi holatga keltirish
                recvBuffer[counterBuffer] = '\0';
 80016ca:	4b3d      	ldr	r3, [pc, #244]	@ (80017c0 <HAL_UART_RxCpltCallback+0x150>)
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	4b3c      	ldr	r3, [pc, #240]	@ (80017c4 <HAL_UART_RxCpltCallback+0x154>)
 80016d2:	2100      	movs	r1, #0
 80016d4:	5499      	strb	r1, [r3, r2]

                // Ekranga matnni chiqarish
				SSD1306_GotoXY(0, 0);
 80016d6:	2100      	movs	r1, #0
 80016d8:	2000      	movs	r0, #0
 80016da:	f000 faa9 	bl	8001c30 <SSD1306_GotoXY>
				SSD1306_Puts("Received:", &Font_7x10, SSD1306_COLOR_WHITE);
 80016de:	2201      	movs	r2, #1
 80016e0:	4939      	ldr	r1, [pc, #228]	@ (80017c8 <HAL_UART_RxCpltCallback+0x158>)
 80016e2:	483a      	ldr	r0, [pc, #232]	@ (80017cc <HAL_UART_RxCpltCallback+0x15c>)
 80016e4:	f000 fb38 	bl	8001d58 <SSD1306_Puts>
				SSD1306_GotoXY(0, 15);
 80016e8:	210f      	movs	r1, #15
 80016ea:	2000      	movs	r0, #0
 80016ec:	f000 faa0 	bl	8001c30 <SSD1306_GotoXY>
				SSD1306_Puts((char*)recvBuffer, &Font_7x10, SSD1306_COLOR_WHITE);
 80016f0:	2201      	movs	r2, #1
 80016f2:	4935      	ldr	r1, [pc, #212]	@ (80017c8 <HAL_UART_RxCpltCallback+0x158>)
 80016f4:	4833      	ldr	r0, [pc, #204]	@ (80017c4 <HAL_UART_RxCpltCallback+0x154>)
 80016f6:	f000 fb2f 	bl	8001d58 <SSD1306_Puts>
				SSD1306_UpdateScreen();
 80016fa:	f000 f9e1 	bl	8001ac0 <SSD1306_UpdateScreen>

				// Qayta ishlashdan so'ng buferni tozalash
				memset(recvBuffer, 0, counterBuffer);
 80016fe:	4b30      	ldr	r3, [pc, #192]	@ (80017c0 <HAL_UART_RxCpltCallback+0x150>)
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	2100      	movs	r1, #0
 8001706:	482f      	ldr	r0, [pc, #188]	@ (80017c4 <HAL_UART_RxCpltCallback+0x154>)
 8001708:	f004 fe35 	bl	8006376 <memset>
				counterBuffer = 0; // Hisoblagichni nolga qaytarish
 800170c:	4b2c      	ldr	r3, [pc, #176]	@ (80017c0 <HAL_UART_RxCpltCallback+0x150>)
 800170e:	2200      	movs	r2, #0
 8001710:	801a      	strh	r2, [r3, #0]
                // Misol uchun, uni UART3 orqali kompyuterga yuborish
                //HAL_UART_Transmit(&huart3, recvBuffer, counterBuffer, 100);

                // Qayta ishlashdan so'ng buferni tozalash
                memset(recvBuffer, 0, counterBuffer);
 8001712:	4b2b      	ldr	r3, [pc, #172]	@ (80017c0 <HAL_UART_RxCpltCallback+0x150>)
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	2100      	movs	r1, #0
 800171a:	482a      	ldr	r0, [pc, #168]	@ (80017c4 <HAL_UART_RxCpltCallback+0x154>)
 800171c:	f004 fe2b 	bl	8006376 <memset>
 8001720:	e03d      	b.n	800179e <HAL_UART_RxCpltCallback+0x12e>
            }
            else // Agar start va stop bayti bo'lmasa, ma'lumotni buferga yozish
            {
            	if (counterBuffer < sizeof(recvBuffer) - 1)
 8001722:	4b27      	ldr	r3, [pc, #156]	@ (80017c0 <HAL_UART_RxCpltCallback+0x150>)
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	2b62      	cmp	r3, #98	@ 0x62
 8001728:	d839      	bhi.n	800179e <HAL_UART_RxCpltCallback+0x12e>
				{
            		recvBuffer[counterBuffer++] = rx_byte;
 800172a:	4b25      	ldr	r3, [pc, #148]	@ (80017c0 <HAL_UART_RxCpltCallback+0x150>)
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	1c5a      	adds	r2, r3, #1
 8001730:	b291      	uxth	r1, r2
 8001732:	4a23      	ldr	r2, [pc, #140]	@ (80017c0 <HAL_UART_RxCpltCallback+0x150>)
 8001734:	8011      	strh	r1, [r2, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	4b1f      	ldr	r3, [pc, #124]	@ (80017b8 <HAL_UART_RxCpltCallback+0x148>)
 800173a:	7819      	ldrb	r1, [r3, #0]
 800173c:	4b21      	ldr	r3, [pc, #132]	@ (80017c4 <HAL_UART_RxCpltCallback+0x154>)
 800173e:	5499      	strb	r1, [r3, r2]
            		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001740:	2000      	movs	r0, #0
 8001742:	f000 f9ef 	bl	8001b24 <SSD1306_Fill>

					// Buferni to'xtatish baytidan oldingi holatga keltirish
					recvBuffer[counterBuffer] = '\0';
 8001746:	4b1e      	ldr	r3, [pc, #120]	@ (80017c0 <HAL_UART_RxCpltCallback+0x150>)
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	4b1d      	ldr	r3, [pc, #116]	@ (80017c4 <HAL_UART_RxCpltCallback+0x154>)
 800174e:	2100      	movs	r1, #0
 8001750:	5499      	strb	r1, [r3, r2]

					// Ekranga matnni chiqarish
					SSD1306_GotoXY(0, 0);
 8001752:	2100      	movs	r1, #0
 8001754:	2000      	movs	r0, #0
 8001756:	f000 fa6b 	bl	8001c30 <SSD1306_GotoXY>
					SSD1306_Puts("Received:", &Font_7x10, SSD1306_COLOR_WHITE);
 800175a:	2201      	movs	r2, #1
 800175c:	491a      	ldr	r1, [pc, #104]	@ (80017c8 <HAL_UART_RxCpltCallback+0x158>)
 800175e:	481b      	ldr	r0, [pc, #108]	@ (80017cc <HAL_UART_RxCpltCallback+0x15c>)
 8001760:	f000 fafa 	bl	8001d58 <SSD1306_Puts>
					SSD1306_GotoXY(0, 15);
 8001764:	210f      	movs	r1, #15
 8001766:	2000      	movs	r0, #0
 8001768:	f000 fa62 	bl	8001c30 <SSD1306_GotoXY>
					SSD1306_Puts((char*)recvBuffer, &Font_7x10, SSD1306_COLOR_WHITE);
 800176c:	2201      	movs	r2, #1
 800176e:	4916      	ldr	r1, [pc, #88]	@ (80017c8 <HAL_UART_RxCpltCallback+0x158>)
 8001770:	4814      	ldr	r0, [pc, #80]	@ (80017c4 <HAL_UART_RxCpltCallback+0x154>)
 8001772:	f000 faf1 	bl	8001d58 <SSD1306_Puts>
					SSD1306_UpdateScreen();
 8001776:	f000 f9a3 	bl	8001ac0 <SSD1306_UpdateScreen>

            		switch(counterBuffer)
 800177a:	4b11      	ldr	r3, [pc, #68]	@ (80017c0 <HAL_UART_RxCpltCallback+0x150>)
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d002      	beq.n	8001788 <HAL_UART_RxCpltCallback+0x118>
 8001782:	2b02      	cmp	r3, #2
 8001784:	d005      	beq.n	8001792 <HAL_UART_RxCpltCallback+0x122>
 8001786:	e00a      	b.n	800179e <HAL_UART_RxCpltCallback+0x12e>
            		{
						case 1:
						{
							Mode(rx_byte);
 8001788:	4b0b      	ldr	r3, [pc, #44]	@ (80017b8 <HAL_UART_RxCpltCallback+0x148>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f000 f81f 	bl	80017d0 <Mode>
						}
						case 2:
						{
							Speed(rx_byte);
 8001792:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <HAL_UART_RxCpltCallback+0x148>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f000 f856 	bl	8001848 <Speed>
							break;
 800179c:	bf00      	nop
//	}



    // Keyingi baytni qabul qilishni kutish
    HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 800179e:	2201      	movs	r2, #1
 80017a0:	4905      	ldr	r1, [pc, #20]	@ (80017b8 <HAL_UART_RxCpltCallback+0x148>)
 80017a2:	4803      	ldr	r0, [pc, #12]	@ (80017b0 <HAL_UART_RxCpltCallback+0x140>)
 80017a4:	f003 fabf 	bl	8004d26 <HAL_UART_Receive_IT>
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	2000033c 	.word	0x2000033c
 80017b4:	40011000 	.word	0x40011000
 80017b8:	20000210 	.word	0x20000210
 80017bc:	2000020d 	.word	0x2000020d
 80017c0:	2000020e 	.word	0x2000020e
 80017c4:	20000214 	.word	0x20000214
 80017c8:	20000000 	.word	0x20000000
 80017cc:	0800854c 	.word	0x0800854c

080017d0 <Mode>:

uint8_t Mode(uint8_t mode)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
	switch(mode)
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	3b01      	subs	r3, #1
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d82a      	bhi.n	8001838 <Mode+0x68>
 80017e2:	a201      	add	r2, pc, #4	@ (adr r2, 80017e8 <Mode+0x18>)
 80017e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e8:	080017f9 	.word	0x080017f9
 80017ec:	0800180d 	.word	0x0800180d
 80017f0:	08001821 	.word	0x08001821
 80017f4:	0800182d 	.word	0x0800182d
	{
		case 1:
		{
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80017f8:	2100      	movs	r1, #0
 80017fa:	4812      	ldr	r0, [pc, #72]	@ (8001844 <Mode+0x74>)
 80017fc:	f002 fc92 	bl	8004124 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001800:	210c      	movs	r1, #12
 8001802:	4810      	ldr	r0, [pc, #64]	@ (8001844 <Mode+0x74>)
 8001804:	f002 fc8e 	bl	8004124 <HAL_TIM_PWM_Start>
			return(mode);
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	e016      	b.n	800183a <Mode+0x6a>
		}
		case 2:
		{
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800180c:	2104      	movs	r1, #4
 800180e:	480d      	ldr	r0, [pc, #52]	@ (8001844 <Mode+0x74>)
 8001810:	f002 fc88 	bl	8004124 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001814:	2108      	movs	r1, #8
 8001816:	480b      	ldr	r0, [pc, #44]	@ (8001844 <Mode+0x74>)
 8001818:	f002 fc84 	bl	8004124 <HAL_TIM_PWM_Start>
			return(mode);
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	e00c      	b.n	800183a <Mode+0x6a>
		}
		case 3:
		{
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001820:	2100      	movs	r1, #0
 8001822:	4808      	ldr	r0, [pc, #32]	@ (8001844 <Mode+0x74>)
 8001824:	f002 fc7e 	bl	8004124 <HAL_TIM_PWM_Start>
			return(mode);
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	e006      	b.n	800183a <Mode+0x6a>
		}
		case 4:
		{
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800182c:	210c      	movs	r1, #12
 800182e:	4805      	ldr	r0, [pc, #20]	@ (8001844 <Mode+0x74>)
 8001830:	f002 fc78 	bl	8004124 <HAL_TIM_PWM_Start>
			return(mode);
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	e000      	b.n	800183a <Mode+0x6a>
		}
		default:
			return(mode);
 8001838:	79fb      	ldrb	r3, [r7, #7]
	}
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200002f4 	.word	0x200002f4

08001848 <Speed>:

void Speed(uint8_t speed)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
	switch(Mode(rx_byte))
 8001852:	4b1a      	ldr	r3, [pc, #104]	@ (80018bc <Speed+0x74>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff ffba 	bl	80017d0 <Mode>
 800185c:	4603      	mov	r3, r0
 800185e:	3b01      	subs	r3, #1
 8001860:	2b03      	cmp	r3, #3
 8001862:	d827      	bhi.n	80018b4 <Speed+0x6c>
 8001864:	a201      	add	r2, pc, #4	@ (adr r2, 800186c <Speed+0x24>)
 8001866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186a:	bf00      	nop
 800186c:	0800187d 	.word	0x0800187d
 8001870:	0800188f 	.word	0x0800188f
 8001874:	080018a1 	.word	0x080018a1
 8001878:	080018ab 	.word	0x080018ab
		{
			case 1:
			{
				htim2.Instance->CCR1 = speed;
 800187c:	4b10      	ldr	r3, [pc, #64]	@ (80018c0 <Speed+0x78>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	79fa      	ldrb	r2, [r7, #7]
 8001882:	635a      	str	r2, [r3, #52]	@ 0x34
				htim2.Instance->CCR4 = speed;
 8001884:	4b0e      	ldr	r3, [pc, #56]	@ (80018c0 <Speed+0x78>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	79fa      	ldrb	r2, [r7, #7]
 800188a:	641a      	str	r2, [r3, #64]	@ 0x40
				break;
 800188c:	e012      	b.n	80018b4 <Speed+0x6c>
			}
			case 2:
			{
				htim2.Instance->CCR2 = speed;
 800188e:	4b0c      	ldr	r3, [pc, #48]	@ (80018c0 <Speed+0x78>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	79fa      	ldrb	r2, [r7, #7]
 8001894:	639a      	str	r2, [r3, #56]	@ 0x38
				htim2.Instance->CCR3 = speed;
 8001896:	4b0a      	ldr	r3, [pc, #40]	@ (80018c0 <Speed+0x78>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	79fa      	ldrb	r2, [r7, #7]
 800189c:	63da      	str	r2, [r3, #60]	@ 0x3c
				break;
 800189e:	e009      	b.n	80018b4 <Speed+0x6c>
			}
			case 3:
			{
				htim2.Instance->CCR1 = speed;
 80018a0:	4b07      	ldr	r3, [pc, #28]	@ (80018c0 <Speed+0x78>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	79fa      	ldrb	r2, [r7, #7]
 80018a6:	635a      	str	r2, [r3, #52]	@ 0x34
				break;
 80018a8:	e004      	b.n	80018b4 <Speed+0x6c>
			}
			case 4:
			{
				htim2.Instance->CCR4 = speed;
 80018aa:	4b05      	ldr	r3, [pc, #20]	@ (80018c0 <Speed+0x78>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	79fa      	ldrb	r2, [r7, #7]
 80018b0:	641a      	str	r2, [r3, #64]	@ 0x40
				break;
 80018b2:	bf00      	nop
//
//		HAL_Delay(20);
//	}
//	htim2.Instance->CCR1 = 0;
//	htim2.Instance->CCR4 = 0;
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000210 	.word	0x20000210
 80018c0:	200002f4 	.word	0x200002f4

080018c4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	UART_ERROR = HAL_UART_GetError(&huart1);
 80018cc:	4809      	ldr	r0, [pc, #36]	@ (80018f4 <HAL_UART_ErrorCallback+0x30>)
 80018ce:	f003 fcf5 	bl	80052bc <HAL_UART_GetError>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4a08      	ldr	r2, [pc, #32]	@ (80018f8 <HAL_UART_ErrorCallback+0x34>)
 80018d6:	6013      	str	r3, [r2, #0]
	if(UART_ERROR == HAL_UART_ERROR_ORE)	// Ошибка переполнения
 80018d8:	4b07      	ldr	r3, [pc, #28]	@ (80018f8 <HAL_UART_ErrorCallback+0x34>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d104      	bne.n	80018ea <HAL_UART_ErrorCallback+0x26>
	{
		HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 80018e0:	2201      	movs	r2, #1
 80018e2:	4906      	ldr	r1, [pc, #24]	@ (80018fc <HAL_UART_ErrorCallback+0x38>)
 80018e4:	4803      	ldr	r0, [pc, #12]	@ (80018f4 <HAL_UART_ErrorCallback+0x30>)
 80018e6:	f003 fa1e 	bl	8004d26 <HAL_UART_Receive_IT>
	}
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	2000033c 	.word	0x2000033c
 80018f8:	2000029c 	.word	0x2000029c
 80018fc:	20000210 	.word	0x20000210

08001900 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_1)
 800190a:	88fb      	ldrh	r3, [r7, #6]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d006      	beq.n	800191e <HAL_GPIO_EXTI_Callback+0x1e>
	{

	}
	else if(GPIO_Pin == GPIO_PIN_9)
 8001910:	88fb      	ldrh	r3, [r7, #6]
 8001912:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001916:	d102      	bne.n	800191e <HAL_GPIO_EXTI_Callback+0x1e>
	{
		AUX_Flag = true;
 8001918:	4b03      	ldr	r3, [pc, #12]	@ (8001928 <HAL_GPIO_EXTI_Callback+0x28>)
 800191a:	2201      	movs	r2, #1
 800191c:	701a      	strb	r2, [r3, #0]
	}
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr
 8001928:	20000278 	.word	0x20000278

0800192c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001930:	b672      	cpsid	i
}
 8001932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <Error_Handler+0x8>

08001938 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800193e:	f000 fa31 	bl	8001da4 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001942:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001946:	2201      	movs	r2, #1
 8001948:	2178      	movs	r1, #120	@ 0x78
 800194a:	485b      	ldr	r0, [pc, #364]	@ (8001ab8 <SSD1306_Init+0x180>)
 800194c:	f001 fbaa 	bl	80030a4 <HAL_I2C_IsDeviceReady>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001956:	2300      	movs	r3, #0
 8001958:	e0a9      	b.n	8001aae <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800195a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800195e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001960:	e002      	b.n	8001968 <SSD1306_Init+0x30>
		p--;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3b01      	subs	r3, #1
 8001966:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f9      	bne.n	8001962 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800196e:	22ae      	movs	r2, #174	@ 0xae
 8001970:	2100      	movs	r1, #0
 8001972:	2078      	movs	r0, #120	@ 0x78
 8001974:	f000 fa90 	bl	8001e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001978:	2220      	movs	r2, #32
 800197a:	2100      	movs	r1, #0
 800197c:	2078      	movs	r0, #120	@ 0x78
 800197e:	f000 fa8b 	bl	8001e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001982:	2210      	movs	r2, #16
 8001984:	2100      	movs	r1, #0
 8001986:	2078      	movs	r0, #120	@ 0x78
 8001988:	f000 fa86 	bl	8001e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800198c:	22b0      	movs	r2, #176	@ 0xb0
 800198e:	2100      	movs	r1, #0
 8001990:	2078      	movs	r0, #120	@ 0x78
 8001992:	f000 fa81 	bl	8001e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001996:	22c8      	movs	r2, #200	@ 0xc8
 8001998:	2100      	movs	r1, #0
 800199a:	2078      	movs	r0, #120	@ 0x78
 800199c:	f000 fa7c 	bl	8001e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00); //---set low column address
 80019a0:	2200      	movs	r2, #0
 80019a2:	2100      	movs	r1, #0
 80019a4:	2078      	movs	r0, #120	@ 0x78
 80019a6:	f000 fa77 	bl	8001e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10); //---set high column address
 80019aa:	2210      	movs	r2, #16
 80019ac:	2100      	movs	r1, #0
 80019ae:	2078      	movs	r0, #120	@ 0x78
 80019b0:	f000 fa72 	bl	8001e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x40); //--set start line address
 80019b4:	2240      	movs	r2, #64	@ 0x40
 80019b6:	2100      	movs	r1, #0
 80019b8:	2078      	movs	r0, #120	@ 0x78
 80019ba:	f000 fa6d 	bl	8001e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80019be:	2281      	movs	r2, #129	@ 0x81
 80019c0:	2100      	movs	r1, #0
 80019c2:	2078      	movs	r0, #120	@ 0x78
 80019c4:	f000 fa68 	bl	8001e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xFF);
 80019c8:	22ff      	movs	r2, #255	@ 0xff
 80019ca:	2100      	movs	r1, #0
 80019cc:	2078      	movs	r0, #120	@ 0x78
 80019ce:	f000 fa63 	bl	8001e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80019d2:	22a1      	movs	r2, #161	@ 0xa1
 80019d4:	2100      	movs	r1, #0
 80019d6:	2078      	movs	r0, #120	@ 0x78
 80019d8:	f000 fa5e 	bl	8001e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80019dc:	22a6      	movs	r2, #166	@ 0xa6
 80019de:	2100      	movs	r1, #0
 80019e0:	2078      	movs	r0, #120	@ 0x78
 80019e2:	f000 fa59 	bl	8001e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80019e6:	22a8      	movs	r2, #168	@ 0xa8
 80019e8:	2100      	movs	r1, #0
 80019ea:	2078      	movs	r0, #120	@ 0x78
 80019ec:	f000 fa54 	bl	8001e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x1F); //
 80019f0:	221f      	movs	r2, #31
 80019f2:	2100      	movs	r1, #0
 80019f4:	2078      	movs	r0, #120	@ 0x78
 80019f6:	f000 fa4f 	bl	8001e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80019fa:	22a4      	movs	r2, #164	@ 0xa4
 80019fc:	2100      	movs	r1, #0
 80019fe:	2078      	movs	r0, #120	@ 0x78
 8001a00:	f000 fa4a 	bl	8001e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001a04:	22d3      	movs	r2, #211	@ 0xd3
 8001a06:	2100      	movs	r1, #0
 8001a08:	2078      	movs	r0, #120	@ 0x78
 8001a0a:	f000 fa45 	bl	8001e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00); //-not offset
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2100      	movs	r1, #0
 8001a12:	2078      	movs	r0, #120	@ 0x78
 8001a14:	f000 fa40 	bl	8001e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001a18:	22d5      	movs	r2, #213	@ 0xd5
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	2078      	movs	r0, #120	@ 0x78
 8001a1e:	f000 fa3b 	bl	8001e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001a22:	22f0      	movs	r2, #240	@ 0xf0
 8001a24:	2100      	movs	r1, #0
 8001a26:	2078      	movs	r0, #120	@ 0x78
 8001a28:	f000 fa36 	bl	8001e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001a2c:	22d9      	movs	r2, #217	@ 0xd9
 8001a2e:	2100      	movs	r1, #0
 8001a30:	2078      	movs	r0, #120	@ 0x78
 8001a32:	f000 fa31 	bl	8001e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x22); //
 8001a36:	2222      	movs	r2, #34	@ 0x22
 8001a38:	2100      	movs	r1, #0
 8001a3a:	2078      	movs	r0, #120	@ 0x78
 8001a3c:	f000 fa2c 	bl	8001e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001a40:	22da      	movs	r2, #218	@ 0xda
 8001a42:	2100      	movs	r1, #0
 8001a44:	2078      	movs	r0, #120	@ 0x78
 8001a46:	f000 fa27 	bl	8001e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x02);
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2078      	movs	r0, #120	@ 0x78
 8001a50:	f000 fa22 	bl	8001e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001a54:	22db      	movs	r2, #219	@ 0xdb
 8001a56:	2100      	movs	r1, #0
 8001a58:	2078      	movs	r0, #120	@ 0x78
 8001a5a:	f000 fa1d 	bl	8001e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001a5e:	2220      	movs	r2, #32
 8001a60:	2100      	movs	r1, #0
 8001a62:	2078      	movs	r0, #120	@ 0x78
 8001a64:	f000 fa18 	bl	8001e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001a68:	228d      	movs	r2, #141	@ 0x8d
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	2078      	movs	r0, #120	@ 0x78
 8001a6e:	f000 fa13 	bl	8001e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x14); //
 8001a72:	2214      	movs	r2, #20
 8001a74:	2100      	movs	r1, #0
 8001a76:	2078      	movs	r0, #120	@ 0x78
 8001a78:	f000 fa0e 	bl	8001e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001a7c:	22af      	movs	r2, #175	@ 0xaf
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2078      	movs	r0, #120	@ 0x78
 8001a82:	f000 fa09 	bl	8001e98 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001a86:	222e      	movs	r2, #46	@ 0x2e
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2078      	movs	r0, #120	@ 0x78
 8001a8c:	f000 fa04 	bl	8001e98 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001a90:	2000      	movs	r0, #0
 8001a92:	f000 f847 	bl	8001b24 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001a96:	f000 f813 	bl	8001ac0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001a9a:	4b08      	ldr	r3, [pc, #32]	@ (8001abc <SSD1306_Init+0x184>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <SSD1306_Init+0x184>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001aa6:	4b05      	ldr	r3, [pc, #20]	@ (8001abc <SSD1306_Init+0x184>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001aac:	2301      	movs	r3, #1
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200002a0 	.word	0x200002a0
 8001abc:	2000057c 	.word	0x2000057c

08001ac0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	71fb      	strb	r3, [r7, #7]
 8001aca:	e021      	b.n	8001b10 <SSD1306_UpdateScreen+0x50>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	3b50      	subs	r3, #80	@ 0x50
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	2078      	movs	r0, #120	@ 0x78
 8001ad8:	f000 f9de 	bl	8001e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2100      	movs	r1, #0
 8001ae0:	2078      	movs	r0, #120	@ 0x78
 8001ae2:	f000 f9d9 	bl	8001e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001ae6:	2210      	movs	r2, #16
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2078      	movs	r0, #120	@ 0x78
 8001aec:	f000 f9d4 	bl	8001e98 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001af0:	79fa      	ldrb	r2, [r7, #7]
 8001af2:	4613      	mov	r3, r2
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	1a9b      	subs	r3, r3, r2
 8001af8:	011a      	lsls	r2, r3, #4
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	4a08      	ldr	r2, [pc, #32]	@ (8001b20 <SSD1306_UpdateScreen+0x60>)
 8001afe:	441a      	add	r2, r3
 8001b00:	2369      	movs	r3, #105	@ 0x69
 8001b02:	2140      	movs	r1, #64	@ 0x40
 8001b04:	2078      	movs	r0, #120	@ 0x78
 8001b06:	f000 f961 	bl	8001dcc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	71fb      	strb	r3, [r7, #7]
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	2b07      	cmp	r3, #7
 8001b14:	d9da      	bls.n	8001acc <SSD1306_UpdateScreen+0xc>
	}
}
 8001b16:	bf00      	nop
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	200003d8 	.word	0x200003d8

08001b24 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <SSD1306_Fill+0x14>
 8001b34:	2300      	movs	r3, #0
 8001b36:	e000      	b.n	8001b3a <SSD1306_Fill+0x16>
 8001b38:	23ff      	movs	r3, #255	@ 0xff
 8001b3a:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4803      	ldr	r0, [pc, #12]	@ (8001b50 <SSD1306_Fill+0x2c>)
 8001b42:	f004 fc18 	bl	8006376 <memset>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	200003d8 	.word	0x200003d8

08001b54 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001b54:	b490      	push	{r4, r7}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	80fb      	strh	r3, [r7, #6]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	80bb      	strh	r3, [r7, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	70fb      	strb	r3, [r7, #3]
	if (
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	2b68      	cmp	r3, #104	@ 0x68
 8001b6a:	d858      	bhi.n	8001c1e <SSD1306_DrawPixel+0xca>
		x >= SSD1306_WIDTH ||
 8001b6c:	88bb      	ldrh	r3, [r7, #4]
 8001b6e:	2b1f      	cmp	r3, #31
 8001b70:	d855      	bhi.n	8001c1e <SSD1306_DrawPixel+0xca>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001b72:	4b2d      	ldr	r3, [pc, #180]	@ (8001c28 <SSD1306_DrawPixel+0xd4>)
 8001b74:	791b      	ldrb	r3, [r3, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d006      	beq.n	8001b88 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001b7a:	78fb      	ldrb	r3, [r7, #3]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	bf0c      	ite	eq
 8001b80:	2301      	moveq	r3, #1
 8001b82:	2300      	movne	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001b88:	78fb      	ldrb	r3, [r7, #3]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d122      	bne.n	8001bd4 <SSD1306_DrawPixel+0x80>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001b8e:	88fa      	ldrh	r2, [r7, #6]
 8001b90:	88bb      	ldrh	r3, [r7, #4]
 8001b92:	08db      	lsrs	r3, r3, #3
 8001b94:	b298      	uxth	r0, r3
 8001b96:	4601      	mov	r1, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	1a5b      	subs	r3, r3, r1
 8001b9e:	0119      	lsls	r1, r3, #4
 8001ba0:	1acb      	subs	r3, r1, r3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	4a21      	ldr	r2, [pc, #132]	@ (8001c2c <SSD1306_DrawPixel+0xd8>)
 8001ba6:	5cd3      	ldrb	r3, [r2, r3]
 8001ba8:	b25a      	sxtb	r2, r3
 8001baa:	88bb      	ldrh	r3, [r7, #4]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb6:	b25b      	sxtb	r3, r3
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	b25c      	sxtb	r4, r3
 8001bbc:	88fa      	ldrh	r2, [r7, #6]
 8001bbe:	4601      	mov	r1, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	1a5b      	subs	r3, r3, r1
 8001bc6:	0119      	lsls	r1, r3, #4
 8001bc8:	1acb      	subs	r3, r1, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	b2e1      	uxtb	r1, r4
 8001bce:	4a17      	ldr	r2, [pc, #92]	@ (8001c2c <SSD1306_DrawPixel+0xd8>)
 8001bd0:	54d1      	strb	r1, [r2, r3]
 8001bd2:	e025      	b.n	8001c20 <SSD1306_DrawPixel+0xcc>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001bd4:	88fa      	ldrh	r2, [r7, #6]
 8001bd6:	88bb      	ldrh	r3, [r7, #4]
 8001bd8:	08db      	lsrs	r3, r3, #3
 8001bda:	b298      	uxth	r0, r3
 8001bdc:	4601      	mov	r1, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	1a5b      	subs	r3, r3, r1
 8001be4:	0119      	lsls	r1, r3, #4
 8001be6:	1acb      	subs	r3, r1, r3
 8001be8:	4413      	add	r3, r2
 8001bea:	4a10      	ldr	r2, [pc, #64]	@ (8001c2c <SSD1306_DrawPixel+0xd8>)
 8001bec:	5cd3      	ldrb	r3, [r2, r3]
 8001bee:	b25a      	sxtb	r2, r3
 8001bf0:	88bb      	ldrh	r3, [r7, #4]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfc:	b25b      	sxtb	r3, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	b25b      	sxtb	r3, r3
 8001c02:	4013      	ands	r3, r2
 8001c04:	b25c      	sxtb	r4, r3
 8001c06:	88fa      	ldrh	r2, [r7, #6]
 8001c08:	4601      	mov	r1, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	1a5b      	subs	r3, r3, r1
 8001c10:	0119      	lsls	r1, r3, #4
 8001c12:	1acb      	subs	r3, r1, r3
 8001c14:	4413      	add	r3, r2
 8001c16:	b2e1      	uxtb	r1, r4
 8001c18:	4a04      	ldr	r2, [pc, #16]	@ (8001c2c <SSD1306_DrawPixel+0xd8>)
 8001c1a:	54d1      	strb	r1, [r2, r3]
 8001c1c:	e000      	b.n	8001c20 <SSD1306_DrawPixel+0xcc>
		return;
 8001c1e:	bf00      	nop
	}
}
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc90      	pop	{r4, r7}
 8001c26:	4770      	bx	lr
 8001c28:	2000057c 	.word	0x2000057c
 8001c2c:	200003d8 	.word	0x200003d8

08001c30 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	460a      	mov	r2, r1
 8001c3a:	80fb      	strh	r3, [r7, #6]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001c40:	4a05      	ldr	r2, [pc, #20]	@ (8001c58 <SSD1306_GotoXY+0x28>)
 8001c42:	88fb      	ldrh	r3, [r7, #6]
 8001c44:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001c46:	4a04      	ldr	r2, [pc, #16]	@ (8001c58 <SSD1306_GotoXY+0x28>)
 8001c48:	88bb      	ldrh	r3, [r7, #4]
 8001c4a:	8053      	strh	r3, [r2, #2]
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	2000057c 	.word	0x2000057c

08001c5c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	71fb      	strb	r3, [r7, #7]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001c6c:	4b39      	ldr	r3, [pc, #228]	@ (8001d54 <SSD1306_Putc+0xf8>)
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	4413      	add	r3, r2
	if (
 8001c78:	2b68      	cmp	r3, #104	@ 0x68
 8001c7a:	dc07      	bgt.n	8001c8c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001c7c:	4b35      	ldr	r3, [pc, #212]	@ (8001d54 <SSD1306_Putc+0xf8>)
 8001c7e:	885b      	ldrh	r3, [r3, #2]
 8001c80:	461a      	mov	r2, r3
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	785b      	ldrb	r3, [r3, #1]
 8001c86:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001c88:	2b1f      	cmp	r3, #31
 8001c8a:	dd01      	ble.n	8001c90 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	e05d      	b.n	8001d4c <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	e04b      	b.n	8001d2e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	3b20      	subs	r3, #32
 8001c9e:	6839      	ldr	r1, [r7, #0]
 8001ca0:	7849      	ldrb	r1, [r1, #1]
 8001ca2:	fb01 f303 	mul.w	r3, r1, r3
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	440b      	add	r3, r1
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	e030      	b.n	8001d1c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d010      	beq.n	8001cec <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001cca:	4b22      	ldr	r3, [pc, #136]	@ (8001d54 <SSD1306_Putc+0xf8>)
 8001ccc:	881a      	ldrh	r2, [r3, #0]
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	b298      	uxth	r0, r3
 8001cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d54 <SSD1306_Putc+0xf8>)
 8001cd8:	885a      	ldrh	r2, [r3, #2]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	4413      	add	r3, r2
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	79ba      	ldrb	r2, [r7, #6]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f7ff ff35 	bl	8001b54 <SSD1306_DrawPixel>
 8001cea:	e014      	b.n	8001d16 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001cec:	4b19      	ldr	r3, [pc, #100]	@ (8001d54 <SSD1306_Putc+0xf8>)
 8001cee:	881a      	ldrh	r2, [r3, #0]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	b298      	uxth	r0, r3
 8001cf8:	4b16      	ldr	r3, [pc, #88]	@ (8001d54 <SSD1306_Putc+0xf8>)
 8001cfa:	885a      	ldrh	r2, [r3, #2]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	4413      	add	r3, r2
 8001d02:	b299      	uxth	r1, r3
 8001d04:	79bb      	ldrb	r3, [r7, #6]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	bf0c      	ite	eq
 8001d0a:	2301      	moveq	r3, #1
 8001d0c:	2300      	movne	r3, #0
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	461a      	mov	r2, r3
 8001d12:	f7ff ff1f 	bl	8001b54 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	461a      	mov	r2, r3
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d3c8      	bcc.n	8001cba <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	785b      	ldrb	r3, [r3, #1]
 8001d32:	461a      	mov	r2, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d3ad      	bcc.n	8001c96 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001d3a:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <SSD1306_Putc+0xf8>)
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	7812      	ldrb	r2, [r2, #0]
 8001d42:	4413      	add	r3, r2
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	4b03      	ldr	r3, [pc, #12]	@ (8001d54 <SSD1306_Putc+0xf8>)
 8001d48:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	2000057c 	.word	0x2000057c

08001d58 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	4613      	mov	r3, r2
 8001d64:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001d66:	e012      	b.n	8001d8e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	79fa      	ldrb	r2, [r7, #7]
 8001d6e:	68b9      	ldr	r1, [r7, #8]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff73 	bl	8001c5c <SSD1306_Putc>
 8001d76:	4603      	mov	r3, r0
 8001d78:	461a      	mov	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d002      	beq.n	8001d88 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	e008      	b.n	8001d9a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1e8      	bne.n	8001d68 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	781b      	ldrb	r3, [r3, #0]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001daa:	4b07      	ldr	r3, [pc, #28]	@ (8001dc8 <ssd1306_I2C_Init+0x24>)
 8001dac:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001dae:	e002      	b.n	8001db6 <ssd1306_I2C_Init+0x12>
		p--;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1f9      	bne.n	8001db0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001dbc:	bf00      	nop
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr
 8001dc8:	0003d090 	.word	0x0003d090

08001dcc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001dcc:	b590      	push	{r4, r7, lr}
 8001dce:	b0c7      	sub	sp, #284	@ 0x11c
 8001dd0:	af02      	add	r7, sp, #8
 8001dd2:	4604      	mov	r4, r0
 8001dd4:	4608      	mov	r0, r1
 8001dd6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001dda:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001dde:	600a      	str	r2, [r1, #0]
 8001de0:	4619      	mov	r1, r3
 8001de2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001de6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001dea:	4622      	mov	r2, r4
 8001dec:	701a      	strb	r2, [r3, #0]
 8001dee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001df2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001df6:	4602      	mov	r2, r0
 8001df8:	701a      	strb	r2, [r3, #0]
 8001dfa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001dfe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e02:	460a      	mov	r2, r1
 8001e04:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001e06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e0e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001e12:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001e16:	7812      	ldrb	r2, [r2, #0]
 8001e18:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001e20:	e015      	b.n	8001e4e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001e22:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001e26:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001e2a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	441a      	add	r2, r3
 8001e32:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001e36:	3301      	adds	r3, #1
 8001e38:	7811      	ldrb	r1, [r2, #0]
 8001e3a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001e3e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001e42:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001e44:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001e48:	3301      	adds	r3, #1
 8001e4a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001e4e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001e58:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001e5c:	8812      	ldrh	r2, [r2, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d8df      	bhi.n	8001e22 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001e62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e66:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	b299      	uxth	r1, r3
 8001e6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e72:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	f107 020c 	add.w	r2, r7, #12
 8001e80:	200a      	movs	r0, #10
 8001e82:	9000      	str	r0, [sp, #0]
 8001e84:	4803      	ldr	r0, [pc, #12]	@ (8001e94 <ssd1306_I2C_WriteMulti+0xc8>)
 8001e86:	f001 f80f 	bl	8002ea8 <HAL_I2C_Master_Transmit>
}
 8001e8a:	bf00      	nop
 8001e8c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd90      	pop	{r4, r7, pc}
 8001e94:	200002a0 	.word	0x200002a0

08001e98 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	71fb      	strb	r3, [r7, #7]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	71bb      	strb	r3, [r7, #6]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001eaa:	79bb      	ldrb	r3, [r7, #6]
 8001eac:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001eae:	797b      	ldrb	r3, [r7, #5]
 8001eb0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	b299      	uxth	r1, r3
 8001eb6:	f107 020c 	add.w	r2, r7, #12
 8001eba:	230a      	movs	r3, #10
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	4803      	ldr	r0, [pc, #12]	@ (8001ed0 <ssd1306_I2C_Write+0x38>)
 8001ec2:	f000 fff1 	bl	8002ea8 <HAL_I2C_Master_Transmit>
}
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	200002a0 	.word	0x200002a0

08001ed4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001eda:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <HAL_MspInit+0x5c>)
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	4a14      	ldr	r2, [pc, #80]	@ (8001f30 <HAL_MspInit+0x5c>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	6193      	str	r3, [r2, #24]
 8001ee6:	4b12      	ldr	r3, [pc, #72]	@ (8001f30 <HAL_MspInit+0x5c>)
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f30 <HAL_MspInit+0x5c>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	4a0e      	ldr	r2, [pc, #56]	@ (8001f30 <HAL_MspInit+0x5c>)
 8001ef8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001efc:	61d3      	str	r3, [r2, #28]
 8001efe:	4b0c      	ldr	r3, [pc, #48]	@ (8001f30 <HAL_MspInit+0x5c>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f34 <HAL_MspInit+0x60>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	4a04      	ldr	r2, [pc, #16]	@ (8001f34 <HAL_MspInit+0x60>)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40010000 	.word	0x40010000

08001f38 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 0310 	add.w	r3, r7, #16
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a15      	ldr	r2, [pc, #84]	@ (8001fa8 <HAL_I2C_MspInit+0x70>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d123      	bne.n	8001fa0 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f58:	4b14      	ldr	r3, [pc, #80]	@ (8001fac <HAL_I2C_MspInit+0x74>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	4a13      	ldr	r2, [pc, #76]	@ (8001fac <HAL_I2C_MspInit+0x74>)
 8001f5e:	f043 0308 	orr.w	r3, r3, #8
 8001f62:	6193      	str	r3, [r2, #24]
 8001f64:	4b11      	ldr	r3, [pc, #68]	@ (8001fac <HAL_I2C_MspInit+0x74>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f70:	23c0      	movs	r3, #192	@ 0xc0
 8001f72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f74:	2312      	movs	r3, #18
 8001f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7c:	f107 0310 	add.w	r3, r7, #16
 8001f80:	4619      	mov	r1, r3
 8001f82:	480b      	ldr	r0, [pc, #44]	@ (8001fb0 <HAL_I2C_MspInit+0x78>)
 8001f84:	f000 fc7e 	bl	8002884 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f88:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <HAL_I2C_MspInit+0x74>)
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	4a07      	ldr	r2, [pc, #28]	@ (8001fac <HAL_I2C_MspInit+0x74>)
 8001f8e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f92:	61d3      	str	r3, [r2, #28]
 8001f94:	4b05      	ldr	r3, [pc, #20]	@ (8001fac <HAL_I2C_MspInit+0x74>)
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001fa0:	bf00      	nop
 8001fa2:	3720      	adds	r7, #32
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40005400 	.word	0x40005400
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40010c00 	.word	0x40010c00

08001fb4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fc4:	d10b      	bne.n	8001fde <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fc6:	4b08      	ldr	r3, [pc, #32]	@ (8001fe8 <HAL_TIM_Base_MspInit+0x34>)
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	4a07      	ldr	r2, [pc, #28]	@ (8001fe8 <HAL_TIM_Base_MspInit+0x34>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	61d3      	str	r3, [r2, #28]
 8001fd2:	4b05      	ldr	r3, [pc, #20]	@ (8001fe8 <HAL_TIM_Base_MspInit+0x34>)
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr
 8001fe8:	40021000 	.word	0x40021000

08001fec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 0310 	add.w	r3, r7, #16
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800200a:	d117      	bne.n	800203c <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200c:	4b0d      	ldr	r3, [pc, #52]	@ (8002044 <HAL_TIM_MspPostInit+0x58>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	4a0c      	ldr	r2, [pc, #48]	@ (8002044 <HAL_TIM_MspPostInit+0x58>)
 8002012:	f043 0304 	orr.w	r3, r3, #4
 8002016:	6193      	str	r3, [r2, #24]
 8002018:	4b0a      	ldr	r3, [pc, #40]	@ (8002044 <HAL_TIM_MspPostInit+0x58>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002024:	230f      	movs	r3, #15
 8002026:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002028:	2302      	movs	r3, #2
 800202a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202c:	2302      	movs	r3, #2
 800202e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002030:	f107 0310 	add.w	r3, r7, #16
 8002034:	4619      	mov	r1, r3
 8002036:	4804      	ldr	r0, [pc, #16]	@ (8002048 <HAL_TIM_MspPostInit+0x5c>)
 8002038:	f000 fc24 	bl	8002884 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800203c:	bf00      	nop
 800203e:	3720      	adds	r7, #32
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40021000 	.word	0x40021000
 8002048:	40010800 	.word	0x40010800

0800204c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08a      	sub	sp, #40	@ 0x28
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002054:	f107 0318 	add.w	r3, r7, #24
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a40      	ldr	r2, [pc, #256]	@ (8002168 <HAL_UART_MspInit+0x11c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d13a      	bne.n	80020e2 <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800206c:	4b3f      	ldr	r3, [pc, #252]	@ (800216c <HAL_UART_MspInit+0x120>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	4a3e      	ldr	r2, [pc, #248]	@ (800216c <HAL_UART_MspInit+0x120>)
 8002072:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002076:	6193      	str	r3, [r2, #24]
 8002078:	4b3c      	ldr	r3, [pc, #240]	@ (800216c <HAL_UART_MspInit+0x120>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002084:	4b39      	ldr	r3, [pc, #228]	@ (800216c <HAL_UART_MspInit+0x120>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	4a38      	ldr	r2, [pc, #224]	@ (800216c <HAL_UART_MspInit+0x120>)
 800208a:	f043 0304 	orr.w	r3, r3, #4
 800208e:	6193      	str	r3, [r2, #24]
 8002090:	4b36      	ldr	r3, [pc, #216]	@ (800216c <HAL_UART_MspInit+0x120>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800209c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a2:	2302      	movs	r3, #2
 80020a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020a6:	2303      	movs	r3, #3
 80020a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020aa:	f107 0318 	add.w	r3, r7, #24
 80020ae:	4619      	mov	r1, r3
 80020b0:	482f      	ldr	r0, [pc, #188]	@ (8002170 <HAL_UART_MspInit+0x124>)
 80020b2:	f000 fbe7 	bl	8002884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c4:	f107 0318 	add.w	r3, r7, #24
 80020c8:	4619      	mov	r1, r3
 80020ca:	4829      	ldr	r0, [pc, #164]	@ (8002170 <HAL_UART_MspInit+0x124>)
 80020cc:	f000 fbda 	bl	8002884 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020d0:	2200      	movs	r2, #0
 80020d2:	2100      	movs	r1, #0
 80020d4:	2025      	movs	r0, #37	@ 0x25
 80020d6:	f000 faec 	bl	80026b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020da:	2025      	movs	r0, #37	@ 0x25
 80020dc:	f000 fb05 	bl	80026ea <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80020e0:	e03e      	b.n	8002160 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART3)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a23      	ldr	r2, [pc, #140]	@ (8002174 <HAL_UART_MspInit+0x128>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d139      	bne.n	8002160 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020ec:	4b1f      	ldr	r3, [pc, #124]	@ (800216c <HAL_UART_MspInit+0x120>)
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	4a1e      	ldr	r2, [pc, #120]	@ (800216c <HAL_UART_MspInit+0x120>)
 80020f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020f6:	61d3      	str	r3, [r2, #28]
 80020f8:	4b1c      	ldr	r3, [pc, #112]	@ (800216c <HAL_UART_MspInit+0x120>)
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002104:	4b19      	ldr	r3, [pc, #100]	@ (800216c <HAL_UART_MspInit+0x120>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	4a18      	ldr	r2, [pc, #96]	@ (800216c <HAL_UART_MspInit+0x120>)
 800210a:	f043 0308 	orr.w	r3, r3, #8
 800210e:	6193      	str	r3, [r2, #24]
 8002110:	4b16      	ldr	r3, [pc, #88]	@ (800216c <HAL_UART_MspInit+0x120>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800211c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	2302      	movs	r3, #2
 8002124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002126:	2303      	movs	r3, #3
 8002128:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212a:	f107 0318 	add.w	r3, r7, #24
 800212e:	4619      	mov	r1, r3
 8002130:	4811      	ldr	r0, [pc, #68]	@ (8002178 <HAL_UART_MspInit+0x12c>)
 8002132:	f000 fba7 	bl	8002884 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002136:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800213a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800213c:	2300      	movs	r3, #0
 800213e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002144:	f107 0318 	add.w	r3, r7, #24
 8002148:	4619      	mov	r1, r3
 800214a:	480b      	ldr	r0, [pc, #44]	@ (8002178 <HAL_UART_MspInit+0x12c>)
 800214c:	f000 fb9a 	bl	8002884 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002150:	2200      	movs	r2, #0
 8002152:	2100      	movs	r1, #0
 8002154:	2027      	movs	r0, #39	@ 0x27
 8002156:	f000 faac 	bl	80026b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800215a:	2027      	movs	r0, #39	@ 0x27
 800215c:	f000 fac5 	bl	80026ea <HAL_NVIC_EnableIRQ>
}
 8002160:	bf00      	nop
 8002162:	3728      	adds	r7, #40	@ 0x28
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40013800 	.word	0x40013800
 800216c:	40021000 	.word	0x40021000
 8002170:	40010800 	.word	0x40010800
 8002174:	40004800 	.word	0x40004800
 8002178:	40010c00 	.word	0x40010c00

0800217c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002180:	bf00      	nop
 8002182:	e7fd      	b.n	8002180 <NMI_Handler+0x4>

08002184 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002188:	bf00      	nop
 800218a:	e7fd      	b.n	8002188 <HardFault_Handler+0x4>

0800218c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002190:	bf00      	nop
 8002192:	e7fd      	b.n	8002190 <MemManage_Handler+0x4>

08002194 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002198:	bf00      	nop
 800219a:	e7fd      	b.n	8002198 <BusFault_Handler+0x4>

0800219c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021a0:	bf00      	nop
 80021a2:	e7fd      	b.n	80021a0 <UsageFault_Handler+0x4>

080021a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr

080021c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	count_sys++;
 80021cc:	4b04      	ldr	r3, [pc, #16]	@ (80021e0 <SysTick_Handler+0x18>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	3301      	adds	r3, #1
 80021d2:	4a03      	ldr	r2, [pc, #12]	@ (80021e0 <SysTick_Handler+0x18>)
 80021d4:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021d6:	f000 f955 	bl	8002484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000584 	.word	0x20000584

080021e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80021e8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80021ec:	f000 fd00 	bl	8002bf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021f8:	4802      	ldr	r0, [pc, #8]	@ (8002204 <USART1_IRQHandler+0x10>)
 80021fa:	f002 fdb9 	bl	8004d70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	2000033c 	.word	0x2000033c

08002208 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800220c:	4802      	ldr	r0, [pc, #8]	@ (8002218 <USART3_IRQHandler+0x10>)
 800220e:	f002 fdaf 	bl	8004d70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000384 	.word	0x20000384

0800221c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
	return 1;
 8002220:	2301      	movs	r3, #1
}
 8002222:	4618      	mov	r0, r3
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr

0800222a <_kill>:

int _kill(int pid, int sig)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002234:	f004 f8f2 	bl	800641c <__errno>
 8002238:	4603      	mov	r3, r0
 800223a:	2216      	movs	r2, #22
 800223c:	601a      	str	r2, [r3, #0]
	return -1;
 800223e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <_exit>:

void _exit (int status)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002252:	f04f 31ff 	mov.w	r1, #4294967295
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff ffe7 	bl	800222a <_kill>
	while (1) {}		/* Make sure we hang here */
 800225c:	bf00      	nop
 800225e:	e7fd      	b.n	800225c <_exit+0x12>

08002260 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	e00a      	b.n	8002288 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002272:	f3af 8000 	nop.w
 8002276:	4601      	mov	r1, r0
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	60ba      	str	r2, [r7, #8]
 800227e:	b2ca      	uxtb	r2, r1
 8002280:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	3301      	adds	r3, #1
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	429a      	cmp	r2, r3
 800228e:	dbf0      	blt.n	8002272 <_read+0x12>
	}

return len;
 8002290:	687b      	ldr	r3, [r7, #4]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b086      	sub	sp, #24
 800229e:	af00      	add	r7, sp, #0
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	e009      	b.n	80022c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	60ba      	str	r2, [r7, #8]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	3301      	adds	r3, #1
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	dbf1      	blt.n	80022ac <_write+0x12>
	}
	return len;
 80022c8:	687b      	ldr	r3, [r7, #4]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <_close>:

int _close(int file)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
	return -1;
 80022da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr

080022e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022f8:	605a      	str	r2, [r3, #4]
	return 0;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr

08002306 <_isatty>:

int _isatty(int file)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
	return 1;
 800230e:	2301      	movs	r3, #1
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr

0800231a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800231a:	b480      	push	{r7}
 800231c:	b085      	sub	sp, #20
 800231e:	af00      	add	r7, sp, #0
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
	return 0;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr
	...

08002334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800233c:	4a14      	ldr	r2, [pc, #80]	@ (8002390 <_sbrk+0x5c>)
 800233e:	4b15      	ldr	r3, [pc, #84]	@ (8002394 <_sbrk+0x60>)
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002348:	4b13      	ldr	r3, [pc, #76]	@ (8002398 <_sbrk+0x64>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d102      	bne.n	8002356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002350:	4b11      	ldr	r3, [pc, #68]	@ (8002398 <_sbrk+0x64>)
 8002352:	4a12      	ldr	r2, [pc, #72]	@ (800239c <_sbrk+0x68>)
 8002354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002356:	4b10      	ldr	r3, [pc, #64]	@ (8002398 <_sbrk+0x64>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	429a      	cmp	r2, r3
 8002362:	d207      	bcs.n	8002374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002364:	f004 f85a 	bl	800641c <__errno>
 8002368:	4603      	mov	r3, r0
 800236a:	220c      	movs	r2, #12
 800236c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800236e:	f04f 33ff 	mov.w	r3, #4294967295
 8002372:	e009      	b.n	8002388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002374:	4b08      	ldr	r3, [pc, #32]	@ (8002398 <_sbrk+0x64>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800237a:	4b07      	ldr	r3, [pc, #28]	@ (8002398 <_sbrk+0x64>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4413      	add	r3, r2
 8002382:	4a05      	ldr	r2, [pc, #20]	@ (8002398 <_sbrk+0x64>)
 8002384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002386:	68fb      	ldr	r3, [r7, #12]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20005000 	.word	0x20005000
 8002394:	00000400 	.word	0x00000400
 8002398:	20000588 	.word	0x20000588
 800239c:	200006e0 	.word	0x200006e0

080023a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023a4:	bf00      	nop
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr

080023ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023ac:	f7ff fff8 	bl	80023a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023b0:	480b      	ldr	r0, [pc, #44]	@ (80023e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80023b2:	490c      	ldr	r1, [pc, #48]	@ (80023e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80023b4:	4a0c      	ldr	r2, [pc, #48]	@ (80023e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80023b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023b8:	e002      	b.n	80023c0 <LoopCopyDataInit>

080023ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023be:	3304      	adds	r3, #4

080023c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023c4:	d3f9      	bcc.n	80023ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023c6:	4a09      	ldr	r2, [pc, #36]	@ (80023ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80023c8:	4c09      	ldr	r4, [pc, #36]	@ (80023f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023cc:	e001      	b.n	80023d2 <LoopFillZerobss>

080023ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023d0:	3204      	adds	r2, #4

080023d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023d4:	d3fb      	bcc.n	80023ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023d6:	f004 f827 	bl	8006428 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023da:	f7fe fe8f 	bl	80010fc <main>
  bx lr
 80023de:	4770      	bx	lr
  ldr r0, =_sdata
 80023e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023e4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80023e8:	08009074 	.word	0x08009074
  ldr r2, =_sbss
 80023ec:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80023f0:	200006dc 	.word	0x200006dc

080023f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023f4:	e7fe      	b.n	80023f4 <ADC1_2_IRQHandler>
	...

080023f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023fc:	4b08      	ldr	r3, [pc, #32]	@ (8002420 <HAL_Init+0x28>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a07      	ldr	r2, [pc, #28]	@ (8002420 <HAL_Init+0x28>)
 8002402:	f043 0310 	orr.w	r3, r3, #16
 8002406:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002408:	2003      	movs	r0, #3
 800240a:	f000 f947 	bl	800269c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800240e:	200f      	movs	r0, #15
 8002410:	f000 f808 	bl	8002424 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002414:	f7ff fd5e 	bl	8001ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40022000 	.word	0x40022000

08002424 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800242c:	4b12      	ldr	r3, [pc, #72]	@ (8002478 <HAL_InitTick+0x54>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4b12      	ldr	r3, [pc, #72]	@ (800247c <HAL_InitTick+0x58>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	4619      	mov	r1, r3
 8002436:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800243a:	fbb3 f3f1 	udiv	r3, r3, r1
 800243e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002442:	4618      	mov	r0, r3
 8002444:	f000 f95f 	bl	8002706 <HAL_SYSTICK_Config>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e00e      	b.n	8002470 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b0f      	cmp	r3, #15
 8002456:	d80a      	bhi.n	800246e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002458:	2200      	movs	r2, #0
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	f04f 30ff 	mov.w	r0, #4294967295
 8002460:	f000 f927 	bl	80026b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002464:	4a06      	ldr	r2, [pc, #24]	@ (8002480 <HAL_InitTick+0x5c>)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
 800246c:	e000      	b.n	8002470 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
}
 8002470:	4618      	mov	r0, r3
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	20000008 	.word	0x20000008
 800247c:	20000010 	.word	0x20000010
 8002480:	2000000c 	.word	0x2000000c

08002484 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002488:	4b05      	ldr	r3, [pc, #20]	@ (80024a0 <HAL_IncTick+0x1c>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <HAL_IncTick+0x20>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4413      	add	r3, r2
 8002494:	4a03      	ldr	r2, [pc, #12]	@ (80024a4 <HAL_IncTick+0x20>)
 8002496:	6013      	str	r3, [r2, #0]
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr
 80024a0:	20000010 	.word	0x20000010
 80024a4:	2000058c 	.word	0x2000058c

080024a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return uwTick;
 80024ac:	4b02      	ldr	r3, [pc, #8]	@ (80024b8 <HAL_GetTick+0x10>)
 80024ae:	681b      	ldr	r3, [r3, #0]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr
 80024b8:	2000058c 	.word	0x2000058c

080024bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024c4:	f7ff fff0 	bl	80024a8 <HAL_GetTick>
 80024c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d4:	d005      	beq.n	80024e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002500 <HAL_Delay+0x44>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4413      	add	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024e2:	bf00      	nop
 80024e4:	f7ff ffe0 	bl	80024a8 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d8f7      	bhi.n	80024e4 <HAL_Delay+0x28>
  {
  }
}
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000010 	.word	0x20000010

08002504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002514:	4b0c      	ldr	r3, [pc, #48]	@ (8002548 <__NVIC_SetPriorityGrouping+0x44>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002520:	4013      	ands	r3, r2
 8002522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800252c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002530:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002536:	4a04      	ldr	r2, [pc, #16]	@ (8002548 <__NVIC_SetPriorityGrouping+0x44>)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	60d3      	str	r3, [r2, #12]
}
 800253c:	bf00      	nop
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002550:	4b04      	ldr	r3, [pc, #16]	@ (8002564 <__NVIC_GetPriorityGrouping+0x18>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	0a1b      	lsrs	r3, r3, #8
 8002556:	f003 0307 	and.w	r3, r3, #7
}
 800255a:	4618      	mov	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002576:	2b00      	cmp	r3, #0
 8002578:	db0b      	blt.n	8002592 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	f003 021f 	and.w	r2, r3, #31
 8002580:	4906      	ldr	r1, [pc, #24]	@ (800259c <__NVIC_EnableIRQ+0x34>)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	2001      	movs	r0, #1
 800258a:	fa00 f202 	lsl.w	r2, r0, r2
 800258e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr
 800259c:	e000e100 	.word	0xe000e100

080025a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	6039      	str	r1, [r7, #0]
 80025aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	db0a      	blt.n	80025ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	490c      	ldr	r1, [pc, #48]	@ (80025ec <__NVIC_SetPriority+0x4c>)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	0112      	lsls	r2, r2, #4
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	440b      	add	r3, r1
 80025c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c8:	e00a      	b.n	80025e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	4908      	ldr	r1, [pc, #32]	@ (80025f0 <__NVIC_SetPriority+0x50>)
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	3b04      	subs	r3, #4
 80025d8:	0112      	lsls	r2, r2, #4
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	440b      	add	r3, r1
 80025de:	761a      	strb	r2, [r3, #24]
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000e100 	.word	0xe000e100
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b089      	sub	sp, #36	@ 0x24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f1c3 0307 	rsb	r3, r3, #7
 800260e:	2b04      	cmp	r3, #4
 8002610:	bf28      	it	cs
 8002612:	2304      	movcs	r3, #4
 8002614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3304      	adds	r3, #4
 800261a:	2b06      	cmp	r3, #6
 800261c:	d902      	bls.n	8002624 <NVIC_EncodePriority+0x30>
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3b03      	subs	r3, #3
 8002622:	e000      	b.n	8002626 <NVIC_EncodePriority+0x32>
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002628:	f04f 32ff 	mov.w	r2, #4294967295
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43da      	mvns	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	401a      	ands	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800263c:	f04f 31ff 	mov.w	r1, #4294967295
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	fa01 f303 	lsl.w	r3, r1, r3
 8002646:	43d9      	mvns	r1, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800264c:	4313      	orrs	r3, r2
         );
}
 800264e:	4618      	mov	r0, r3
 8002650:	3724      	adds	r7, #36	@ 0x24
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3b01      	subs	r3, #1
 8002664:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002668:	d301      	bcc.n	800266e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800266a:	2301      	movs	r3, #1
 800266c:	e00f      	b.n	800268e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800266e:	4a0a      	ldr	r2, [pc, #40]	@ (8002698 <SysTick_Config+0x40>)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3b01      	subs	r3, #1
 8002674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002676:	210f      	movs	r1, #15
 8002678:	f04f 30ff 	mov.w	r0, #4294967295
 800267c:	f7ff ff90 	bl	80025a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002680:	4b05      	ldr	r3, [pc, #20]	@ (8002698 <SysTick_Config+0x40>)
 8002682:	2200      	movs	r2, #0
 8002684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002686:	4b04      	ldr	r3, [pc, #16]	@ (8002698 <SysTick_Config+0x40>)
 8002688:	2207      	movs	r2, #7
 800268a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	e000e010 	.word	0xe000e010

0800269c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7ff ff2d 	bl	8002504 <__NVIC_SetPriorityGrouping>
}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b086      	sub	sp, #24
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	4603      	mov	r3, r0
 80026ba:	60b9      	str	r1, [r7, #8]
 80026bc:	607a      	str	r2, [r7, #4]
 80026be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026c4:	f7ff ff42 	bl	800254c <__NVIC_GetPriorityGrouping>
 80026c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	6978      	ldr	r0, [r7, #20]
 80026d0:	f7ff ff90 	bl	80025f4 <NVIC_EncodePriority>
 80026d4:	4602      	mov	r2, r0
 80026d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff ff5f 	bl	80025a0 <__NVIC_SetPriority>
}
 80026e2:	bf00      	nop
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	4603      	mov	r3, r0
 80026f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff35 	bl	8002568 <__NVIC_EnableIRQ>
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7ff ffa2 	bl	8002658 <SysTick_Config>
 8002714:	4603      	mov	r3, r0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800271e:	b480      	push	{r7}
 8002720:	b085      	sub	sp, #20
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d008      	beq.n	8002748 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2204      	movs	r2, #4
 800273a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e020      	b.n	800278a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 020e 	bic.w	r2, r2, #14
 8002756:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0201 	bic.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002770:	2101      	movs	r1, #1
 8002772:	fa01 f202 	lsl.w	r2, r1, r2
 8002776:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002788:	7bfb      	ldrb	r3, [r7, #15]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d005      	beq.n	80027b8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2204      	movs	r2, #4
 80027b0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	73fb      	strb	r3, [r7, #15]
 80027b6:	e051      	b.n	800285c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 020e 	bic.w	r2, r2, #14
 80027c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0201 	bic.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a22      	ldr	r2, [pc, #136]	@ (8002868 <HAL_DMA_Abort_IT+0xd4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d029      	beq.n	8002836 <HAL_DMA_Abort_IT+0xa2>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a21      	ldr	r2, [pc, #132]	@ (800286c <HAL_DMA_Abort_IT+0xd8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d022      	beq.n	8002832 <HAL_DMA_Abort_IT+0x9e>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002870 <HAL_DMA_Abort_IT+0xdc>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d01a      	beq.n	800282c <HAL_DMA_Abort_IT+0x98>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002874 <HAL_DMA_Abort_IT+0xe0>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d012      	beq.n	8002826 <HAL_DMA_Abort_IT+0x92>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a1c      	ldr	r2, [pc, #112]	@ (8002878 <HAL_DMA_Abort_IT+0xe4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d00a      	beq.n	8002820 <HAL_DMA_Abort_IT+0x8c>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a1b      	ldr	r2, [pc, #108]	@ (800287c <HAL_DMA_Abort_IT+0xe8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d102      	bne.n	800281a <HAL_DMA_Abort_IT+0x86>
 8002814:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002818:	e00e      	b.n	8002838 <HAL_DMA_Abort_IT+0xa4>
 800281a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800281e:	e00b      	b.n	8002838 <HAL_DMA_Abort_IT+0xa4>
 8002820:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002824:	e008      	b.n	8002838 <HAL_DMA_Abort_IT+0xa4>
 8002826:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800282a:	e005      	b.n	8002838 <HAL_DMA_Abort_IT+0xa4>
 800282c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002830:	e002      	b.n	8002838 <HAL_DMA_Abort_IT+0xa4>
 8002832:	2310      	movs	r3, #16
 8002834:	e000      	b.n	8002838 <HAL_DMA_Abort_IT+0xa4>
 8002836:	2301      	movs	r3, #1
 8002838:	4a11      	ldr	r2, [pc, #68]	@ (8002880 <HAL_DMA_Abort_IT+0xec>)
 800283a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	4798      	blx	r3
    } 
  }
  return status;
 800285c:	7bfb      	ldrb	r3, [r7, #15]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40020008 	.word	0x40020008
 800286c:	4002001c 	.word	0x4002001c
 8002870:	40020030 	.word	0x40020030
 8002874:	40020044 	.word	0x40020044
 8002878:	40020058 	.word	0x40020058
 800287c:	4002006c 	.word	0x4002006c
 8002880:	40020000 	.word	0x40020000

08002884 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002884:	b480      	push	{r7}
 8002886:	b08b      	sub	sp, #44	@ 0x2c
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800288e:	2300      	movs	r3, #0
 8002890:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002892:	2300      	movs	r3, #0
 8002894:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002896:	e169      	b.n	8002b6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002898:	2201      	movs	r2, #1
 800289a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	69fa      	ldr	r2, [r7, #28]
 80028a8:	4013      	ands	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	f040 8158 	bne.w	8002b66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4a9a      	ldr	r2, [pc, #616]	@ (8002b24 <HAL_GPIO_Init+0x2a0>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d05e      	beq.n	800297e <HAL_GPIO_Init+0xfa>
 80028c0:	4a98      	ldr	r2, [pc, #608]	@ (8002b24 <HAL_GPIO_Init+0x2a0>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d875      	bhi.n	80029b2 <HAL_GPIO_Init+0x12e>
 80028c6:	4a98      	ldr	r2, [pc, #608]	@ (8002b28 <HAL_GPIO_Init+0x2a4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d058      	beq.n	800297e <HAL_GPIO_Init+0xfa>
 80028cc:	4a96      	ldr	r2, [pc, #600]	@ (8002b28 <HAL_GPIO_Init+0x2a4>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d86f      	bhi.n	80029b2 <HAL_GPIO_Init+0x12e>
 80028d2:	4a96      	ldr	r2, [pc, #600]	@ (8002b2c <HAL_GPIO_Init+0x2a8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d052      	beq.n	800297e <HAL_GPIO_Init+0xfa>
 80028d8:	4a94      	ldr	r2, [pc, #592]	@ (8002b2c <HAL_GPIO_Init+0x2a8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d869      	bhi.n	80029b2 <HAL_GPIO_Init+0x12e>
 80028de:	4a94      	ldr	r2, [pc, #592]	@ (8002b30 <HAL_GPIO_Init+0x2ac>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d04c      	beq.n	800297e <HAL_GPIO_Init+0xfa>
 80028e4:	4a92      	ldr	r2, [pc, #584]	@ (8002b30 <HAL_GPIO_Init+0x2ac>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d863      	bhi.n	80029b2 <HAL_GPIO_Init+0x12e>
 80028ea:	4a92      	ldr	r2, [pc, #584]	@ (8002b34 <HAL_GPIO_Init+0x2b0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d046      	beq.n	800297e <HAL_GPIO_Init+0xfa>
 80028f0:	4a90      	ldr	r2, [pc, #576]	@ (8002b34 <HAL_GPIO_Init+0x2b0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d85d      	bhi.n	80029b2 <HAL_GPIO_Init+0x12e>
 80028f6:	2b12      	cmp	r3, #18
 80028f8:	d82a      	bhi.n	8002950 <HAL_GPIO_Init+0xcc>
 80028fa:	2b12      	cmp	r3, #18
 80028fc:	d859      	bhi.n	80029b2 <HAL_GPIO_Init+0x12e>
 80028fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002904 <HAL_GPIO_Init+0x80>)
 8002900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002904:	0800297f 	.word	0x0800297f
 8002908:	08002959 	.word	0x08002959
 800290c:	0800296b 	.word	0x0800296b
 8002910:	080029ad 	.word	0x080029ad
 8002914:	080029b3 	.word	0x080029b3
 8002918:	080029b3 	.word	0x080029b3
 800291c:	080029b3 	.word	0x080029b3
 8002920:	080029b3 	.word	0x080029b3
 8002924:	080029b3 	.word	0x080029b3
 8002928:	080029b3 	.word	0x080029b3
 800292c:	080029b3 	.word	0x080029b3
 8002930:	080029b3 	.word	0x080029b3
 8002934:	080029b3 	.word	0x080029b3
 8002938:	080029b3 	.word	0x080029b3
 800293c:	080029b3 	.word	0x080029b3
 8002940:	080029b3 	.word	0x080029b3
 8002944:	080029b3 	.word	0x080029b3
 8002948:	08002961 	.word	0x08002961
 800294c:	08002975 	.word	0x08002975
 8002950:	4a79      	ldr	r2, [pc, #484]	@ (8002b38 <HAL_GPIO_Init+0x2b4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d013      	beq.n	800297e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002956:	e02c      	b.n	80029b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	623b      	str	r3, [r7, #32]
          break;
 800295e:	e029      	b.n	80029b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	3304      	adds	r3, #4
 8002966:	623b      	str	r3, [r7, #32]
          break;
 8002968:	e024      	b.n	80029b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	3308      	adds	r3, #8
 8002970:	623b      	str	r3, [r7, #32]
          break;
 8002972:	e01f      	b.n	80029b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	330c      	adds	r3, #12
 800297a:	623b      	str	r3, [r7, #32]
          break;
 800297c:	e01a      	b.n	80029b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d102      	bne.n	800298c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002986:	2304      	movs	r3, #4
 8002988:	623b      	str	r3, [r7, #32]
          break;
 800298a:	e013      	b.n	80029b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d105      	bne.n	80029a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002994:	2308      	movs	r3, #8
 8002996:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69fa      	ldr	r2, [r7, #28]
 800299c:	611a      	str	r2, [r3, #16]
          break;
 800299e:	e009      	b.n	80029b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029a0:	2308      	movs	r3, #8
 80029a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69fa      	ldr	r2, [r7, #28]
 80029a8:	615a      	str	r2, [r3, #20]
          break;
 80029aa:	e003      	b.n	80029b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029ac:	2300      	movs	r3, #0
 80029ae:	623b      	str	r3, [r7, #32]
          break;
 80029b0:	e000      	b.n	80029b4 <HAL_GPIO_Init+0x130>
          break;
 80029b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	2bff      	cmp	r3, #255	@ 0xff
 80029b8:	d801      	bhi.n	80029be <HAL_GPIO_Init+0x13a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	e001      	b.n	80029c2 <HAL_GPIO_Init+0x13e>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3304      	adds	r3, #4
 80029c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	2bff      	cmp	r3, #255	@ 0xff
 80029c8:	d802      	bhi.n	80029d0 <HAL_GPIO_Init+0x14c>
 80029ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	e002      	b.n	80029d6 <HAL_GPIO_Init+0x152>
 80029d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d2:	3b08      	subs	r3, #8
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	210f      	movs	r1, #15
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	fa01 f303 	lsl.w	r3, r1, r3
 80029e4:	43db      	mvns	r3, r3
 80029e6:	401a      	ands	r2, r3
 80029e8:	6a39      	ldr	r1, [r7, #32]
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	fa01 f303 	lsl.w	r3, r1, r3
 80029f0:	431a      	orrs	r2, r3
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 80b1 	beq.w	8002b66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a04:	4b4d      	ldr	r3, [pc, #308]	@ (8002b3c <HAL_GPIO_Init+0x2b8>)
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	4a4c      	ldr	r2, [pc, #304]	@ (8002b3c <HAL_GPIO_Init+0x2b8>)
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	6193      	str	r3, [r2, #24]
 8002a10:	4b4a      	ldr	r3, [pc, #296]	@ (8002b3c <HAL_GPIO_Init+0x2b8>)
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a1c:	4a48      	ldr	r2, [pc, #288]	@ (8002b40 <HAL_GPIO_Init+0x2bc>)
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a20:	089b      	lsrs	r3, r3, #2
 8002a22:	3302      	adds	r3, #2
 8002a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2c:	f003 0303 	and.w	r3, r3, #3
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	220f      	movs	r2, #15
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a40      	ldr	r2, [pc, #256]	@ (8002b44 <HAL_GPIO_Init+0x2c0>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d013      	beq.n	8002a70 <HAL_GPIO_Init+0x1ec>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a3f      	ldr	r2, [pc, #252]	@ (8002b48 <HAL_GPIO_Init+0x2c4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d00d      	beq.n	8002a6c <HAL_GPIO_Init+0x1e8>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a3e      	ldr	r2, [pc, #248]	@ (8002b4c <HAL_GPIO_Init+0x2c8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d007      	beq.n	8002a68 <HAL_GPIO_Init+0x1e4>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a3d      	ldr	r2, [pc, #244]	@ (8002b50 <HAL_GPIO_Init+0x2cc>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d101      	bne.n	8002a64 <HAL_GPIO_Init+0x1e0>
 8002a60:	2303      	movs	r3, #3
 8002a62:	e006      	b.n	8002a72 <HAL_GPIO_Init+0x1ee>
 8002a64:	2304      	movs	r3, #4
 8002a66:	e004      	b.n	8002a72 <HAL_GPIO_Init+0x1ee>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e002      	b.n	8002a72 <HAL_GPIO_Init+0x1ee>
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <HAL_GPIO_Init+0x1ee>
 8002a70:	2300      	movs	r3, #0
 8002a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a74:	f002 0203 	and.w	r2, r2, #3
 8002a78:	0092      	lsls	r2, r2, #2
 8002a7a:	4093      	lsls	r3, r2
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a82:	492f      	ldr	r1, [pc, #188]	@ (8002b40 <HAL_GPIO_Init+0x2bc>)
 8002a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a86:	089b      	lsrs	r3, r3, #2
 8002a88:	3302      	adds	r3, #2
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d006      	beq.n	8002aaa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a9c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	492c      	ldr	r1, [pc, #176]	@ (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	608b      	str	r3, [r1, #8]
 8002aa8:	e006      	b.n	8002ab8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	4928      	ldr	r1, [pc, #160]	@ (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d006      	beq.n	8002ad2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ac4:	4b23      	ldr	r3, [pc, #140]	@ (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	4922      	ldr	r1, [pc, #136]	@ (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	60cb      	str	r3, [r1, #12]
 8002ad0:	e006      	b.n	8002ae0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ad2:	4b20      	ldr	r3, [pc, #128]	@ (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	491e      	ldr	r1, [pc, #120]	@ (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d006      	beq.n	8002afa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002aec:	4b19      	ldr	r3, [pc, #100]	@ (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	4918      	ldr	r1, [pc, #96]	@ (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	604b      	str	r3, [r1, #4]
 8002af8:	e006      	b.n	8002b08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002afa:	4b16      	ldr	r3, [pc, #88]	@ (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	4914      	ldr	r1, [pc, #80]	@ (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d021      	beq.n	8002b58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b14:	4b0f      	ldr	r3, [pc, #60]	@ (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	490e      	ldr	r1, [pc, #56]	@ (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	600b      	str	r3, [r1, #0]
 8002b20:	e021      	b.n	8002b66 <HAL_GPIO_Init+0x2e2>
 8002b22:	bf00      	nop
 8002b24:	10320000 	.word	0x10320000
 8002b28:	10310000 	.word	0x10310000
 8002b2c:	10220000 	.word	0x10220000
 8002b30:	10210000 	.word	0x10210000
 8002b34:	10120000 	.word	0x10120000
 8002b38:	10110000 	.word	0x10110000
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40010000 	.word	0x40010000
 8002b44:	40010800 	.word	0x40010800
 8002b48:	40010c00 	.word	0x40010c00
 8002b4c:	40011000 	.word	0x40011000
 8002b50:	40011400 	.word	0x40011400
 8002b54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b58:	4b0b      	ldr	r3, [pc, #44]	@ (8002b88 <HAL_GPIO_Init+0x304>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	4909      	ldr	r1, [pc, #36]	@ (8002b88 <HAL_GPIO_Init+0x304>)
 8002b62:	4013      	ands	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b68:	3301      	adds	r3, #1
 8002b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b72:	fa22 f303 	lsr.w	r3, r2, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f47f ae8e 	bne.w	8002898 <HAL_GPIO_Init+0x14>
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	bf00      	nop
 8002b80:	372c      	adds	r7, #44	@ 0x2c
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr
 8002b88:	40010400 	.word	0x40010400

08002b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	807b      	strh	r3, [r7, #2]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b9c:	787b      	ldrb	r3, [r7, #1]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ba2:	887a      	ldrh	r2, [r7, #2]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ba8:	e003      	b.n	8002bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002baa:	887b      	ldrh	r3, [r7, #2]
 8002bac:	041a      	lsls	r2, r3, #16
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	611a      	str	r2, [r3, #16]
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr

08002bbc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bce:	887a      	ldrh	r2, [r7, #2]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	041a      	lsls	r2, r3, #16
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	43d9      	mvns	r1, r3
 8002bda:	887b      	ldrh	r3, [r7, #2]
 8002bdc:	400b      	ands	r3, r1
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	611a      	str	r2, [r3, #16]
}
 8002be4:	bf00      	nop
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bc80      	pop	{r7}
 8002bec:	4770      	bx	lr
	...

08002bf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002bfa:	4b08      	ldr	r3, [pc, #32]	@ (8002c1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bfc:	695a      	ldr	r2, [r3, #20]
 8002bfe:	88fb      	ldrh	r3, [r7, #6]
 8002c00:	4013      	ands	r3, r2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d006      	beq.n	8002c14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c06:	4a05      	ldr	r2, [pc, #20]	@ (8002c1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c08:	88fb      	ldrh	r3, [r7, #6]
 8002c0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c0c:	88fb      	ldrh	r3, [r7, #6]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe fe76 	bl	8001900 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c14:	bf00      	nop
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40010400 	.word	0x40010400

08002c20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e12b      	b.n	8002e8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d106      	bne.n	8002c4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff f976 	bl	8001f38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2224      	movs	r2, #36	@ 0x24
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0201 	bic.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c84:	f001 f960 	bl	8003f48 <HAL_RCC_GetPCLK1Freq>
 8002c88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	4a81      	ldr	r2, [pc, #516]	@ (8002e94 <HAL_I2C_Init+0x274>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d807      	bhi.n	8002ca4 <HAL_I2C_Init+0x84>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4a80      	ldr	r2, [pc, #512]	@ (8002e98 <HAL_I2C_Init+0x278>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	bf94      	ite	ls
 8002c9c:	2301      	movls	r3, #1
 8002c9e:	2300      	movhi	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	e006      	b.n	8002cb2 <HAL_I2C_Init+0x92>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4a7d      	ldr	r2, [pc, #500]	@ (8002e9c <HAL_I2C_Init+0x27c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	bf94      	ite	ls
 8002cac:	2301      	movls	r3, #1
 8002cae:	2300      	movhi	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e0e7      	b.n	8002e8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4a78      	ldr	r2, [pc, #480]	@ (8002ea0 <HAL_I2C_Init+0x280>)
 8002cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc2:	0c9b      	lsrs	r3, r3, #18
 8002cc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	4a6a      	ldr	r2, [pc, #424]	@ (8002e94 <HAL_I2C_Init+0x274>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d802      	bhi.n	8002cf4 <HAL_I2C_Init+0xd4>
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	e009      	b.n	8002d08 <HAL_I2C_Init+0xe8>
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002cfa:	fb02 f303 	mul.w	r3, r2, r3
 8002cfe:	4a69      	ldr	r2, [pc, #420]	@ (8002ea4 <HAL_I2C_Init+0x284>)
 8002d00:	fba2 2303 	umull	r2, r3, r2, r3
 8002d04:	099b      	lsrs	r3, r3, #6
 8002d06:	3301      	adds	r3, #1
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6812      	ldr	r2, [r2, #0]
 8002d0c:	430b      	orrs	r3, r1
 8002d0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002d1a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	495c      	ldr	r1, [pc, #368]	@ (8002e94 <HAL_I2C_Init+0x274>)
 8002d24:	428b      	cmp	r3, r1
 8002d26:	d819      	bhi.n	8002d5c <HAL_I2C_Init+0x13c>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	1e59      	subs	r1, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d36:	1c59      	adds	r1, r3, #1
 8002d38:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d3c:	400b      	ands	r3, r1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00a      	beq.n	8002d58 <HAL_I2C_Init+0x138>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	1e59      	subs	r1, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d50:	3301      	adds	r3, #1
 8002d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d56:	e051      	b.n	8002dfc <HAL_I2C_Init+0x1dc>
 8002d58:	2304      	movs	r3, #4
 8002d5a:	e04f      	b.n	8002dfc <HAL_I2C_Init+0x1dc>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d111      	bne.n	8002d88 <HAL_I2C_Init+0x168>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1e58      	subs	r0, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6859      	ldr	r1, [r3, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	440b      	add	r3, r1
 8002d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d76:	3301      	adds	r3, #1
 8002d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	bf0c      	ite	eq
 8002d80:	2301      	moveq	r3, #1
 8002d82:	2300      	movne	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	e012      	b.n	8002dae <HAL_I2C_Init+0x18e>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1e58      	subs	r0, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6859      	ldr	r1, [r3, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	0099      	lsls	r1, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d9e:	3301      	adds	r3, #1
 8002da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	bf0c      	ite	eq
 8002da8:	2301      	moveq	r3, #1
 8002daa:	2300      	movne	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_I2C_Init+0x196>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e022      	b.n	8002dfc <HAL_I2C_Init+0x1dc>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10e      	bne.n	8002ddc <HAL_I2C_Init+0x1bc>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	1e58      	subs	r0, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6859      	ldr	r1, [r3, #4]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	440b      	add	r3, r1
 8002dcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dda:	e00f      	b.n	8002dfc <HAL_I2C_Init+0x1dc>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	1e58      	subs	r0, r3, #1
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6859      	ldr	r1, [r3, #4]
 8002de4:	460b      	mov	r3, r1
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	0099      	lsls	r1, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002df2:	3301      	adds	r3, #1
 8002df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	6809      	ldr	r1, [r1, #0]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69da      	ldr	r2, [r3, #28]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002e2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6911      	ldr	r1, [r2, #16]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	68d2      	ldr	r2, [r2, #12]
 8002e36:	4311      	orrs	r1, r2
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	430b      	orrs	r3, r1
 8002e3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695a      	ldr	r2, [r3, #20]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	000186a0 	.word	0x000186a0
 8002e98:	001e847f 	.word	0x001e847f
 8002e9c:	003d08ff 	.word	0x003d08ff
 8002ea0:	431bde83 	.word	0x431bde83
 8002ea4:	10624dd3 	.word	0x10624dd3

08002ea8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af02      	add	r7, sp, #8
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	817b      	strh	r3, [r7, #10]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ebc:	f7ff faf4 	bl	80024a8 <HAL_GetTick>
 8002ec0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b20      	cmp	r3, #32
 8002ecc:	f040 80e0 	bne.w	8003090 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	2319      	movs	r3, #25
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	4970      	ldr	r1, [pc, #448]	@ (800309c <HAL_I2C_Master_Transmit+0x1f4>)
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 fa92 	bl	8003404 <I2C_WaitOnFlagUntilTimeout>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e0d3      	b.n	8003092 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_I2C_Master_Transmit+0x50>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e0cc      	b.n	8003092 <HAL_I2C_Master_Transmit+0x1ea>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d007      	beq.n	8002f1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f042 0201 	orr.w	r2, r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2221      	movs	r2, #33	@ 0x21
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2210      	movs	r2, #16
 8002f3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	893a      	ldrh	r2, [r7, #8]
 8002f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4a50      	ldr	r2, [pc, #320]	@ (80030a0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f60:	8979      	ldrh	r1, [r7, #10]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	6a3a      	ldr	r2, [r7, #32]
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 f9ca 	bl	8003300 <I2C_MasterRequestWrite>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e08d      	b.n	8003092 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f76:	2300      	movs	r3, #0
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f8c:	e066      	b.n	800305c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	6a39      	ldr	r1, [r7, #32]
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 fb50 	bl	8003638 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00d      	beq.n	8002fba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d107      	bne.n	8002fb6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e06b      	b.n	8003092 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbe:	781a      	ldrb	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fca:	1c5a      	adds	r2, r3, #1
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d11b      	bne.n	8003030 <HAL_I2C_Master_Transmit+0x188>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d017      	beq.n	8003030 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003004:	781a      	ldrb	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003010:	1c5a      	adds	r2, r3, #1
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b01      	subs	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003028:	3b01      	subs	r3, #1
 800302a:	b29a      	uxth	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	6a39      	ldr	r1, [r7, #32]
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 fb47 	bl	80036c8 <I2C_WaitOnBTFFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00d      	beq.n	800305c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003044:	2b04      	cmp	r3, #4
 8003046:	d107      	bne.n	8003058 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003056:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e01a      	b.n	8003092 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003060:	2b00      	cmp	r3, #0
 8003062:	d194      	bne.n	8002f8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	e000      	b.n	8003092 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003090:	2302      	movs	r3, #2
  }
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	00100002 	.word	0x00100002
 80030a0:	ffff0000 	.word	0xffff0000

080030a4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08a      	sub	sp, #40	@ 0x28
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	607a      	str	r2, [r7, #4]
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	460b      	mov	r3, r1
 80030b2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80030b4:	f7ff f9f8 	bl	80024a8 <HAL_GetTick>
 80030b8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	f040 8111 	bne.w	80032ee <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	2319      	movs	r3, #25
 80030d2:	2201      	movs	r2, #1
 80030d4:	4988      	ldr	r1, [pc, #544]	@ (80032f8 <HAL_I2C_IsDeviceReady+0x254>)
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 f994 	bl	8003404 <I2C_WaitOnFlagUntilTimeout>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80030e2:	2302      	movs	r3, #2
 80030e4:	e104      	b.n	80032f0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_I2C_IsDeviceReady+0x50>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e0fd      	b.n	80032f0 <HAL_I2C_IsDeviceReady+0x24c>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b01      	cmp	r3, #1
 8003108:	d007      	beq.n	800311a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f042 0201 	orr.w	r2, r2, #1
 8003118:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003128:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2224      	movs	r2, #36	@ 0x24
 800312e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4a70      	ldr	r2, [pc, #448]	@ (80032fc <HAL_I2C_IsDeviceReady+0x258>)
 800313c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800314c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2200      	movs	r2, #0
 8003156:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f952 	bl	8003404 <I2C_WaitOnFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00d      	beq.n	8003182 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003170:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003174:	d103      	bne.n	800317e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800317c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e0b6      	b.n	80032f0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003182:	897b      	ldrh	r3, [r7, #10]
 8003184:	b2db      	uxtb	r3, r3
 8003186:	461a      	mov	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003190:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003192:	f7ff f989 	bl	80024a8 <HAL_GetTick>
 8003196:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	bf0c      	ite	eq
 80031a6:	2301      	moveq	r3, #1
 80031a8:	2300      	movne	r3, #0
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031bc:	bf0c      	ite	eq
 80031be:	2301      	moveq	r3, #1
 80031c0:	2300      	movne	r3, #0
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80031c6:	e025      	b.n	8003214 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031c8:	f7ff f96e 	bl	80024a8 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d302      	bcc.n	80031de <HAL_I2C_IsDeviceReady+0x13a>
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d103      	bne.n	80031e6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	22a0      	movs	r2, #160	@ 0xa0
 80031e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	bf0c      	ite	eq
 80031f4:	2301      	moveq	r3, #1
 80031f6:	2300      	movne	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003206:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800320a:	bf0c      	ite	eq
 800320c:	2301      	moveq	r3, #1
 800320e:	2300      	movne	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2ba0      	cmp	r3, #160	@ 0xa0
 800321e:	d005      	beq.n	800322c <HAL_I2C_IsDeviceReady+0x188>
 8003220:	7dfb      	ldrb	r3, [r7, #23]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d102      	bne.n	800322c <HAL_I2C_IsDeviceReady+0x188>
 8003226:	7dbb      	ldrb	r3, [r7, #22]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0cd      	beq.n	80031c8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b02      	cmp	r3, #2
 8003240:	d129      	bne.n	8003296 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003250:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003252:	2300      	movs	r3, #0
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	2319      	movs	r3, #25
 800326e:	2201      	movs	r2, #1
 8003270:	4921      	ldr	r1, [pc, #132]	@ (80032f8 <HAL_I2C_IsDeviceReady+0x254>)
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 f8c6 	bl	8003404 <I2C_WaitOnFlagUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e036      	b.n	80032f0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2220      	movs	r2, #32
 8003286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003292:	2300      	movs	r3, #0
 8003294:	e02c      	b.n	80032f0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032a4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032ae:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	2319      	movs	r3, #25
 80032b6:	2201      	movs	r2, #1
 80032b8:	490f      	ldr	r1, [pc, #60]	@ (80032f8 <HAL_I2C_IsDeviceReady+0x254>)
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f8a2 	bl	8003404 <I2C_WaitOnFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e012      	b.n	80032f0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	3301      	adds	r3, #1
 80032ce:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	f4ff af32 	bcc.w	800313e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2220      	movs	r2, #32
 80032de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80032ee:	2302      	movs	r3, #2
  }
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3720      	adds	r7, #32
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	00100002 	.word	0x00100002
 80032fc:	ffff0000 	.word	0xffff0000

08003300 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af02      	add	r7, sp, #8
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	607a      	str	r2, [r7, #4]
 800330a:	603b      	str	r3, [r7, #0]
 800330c:	460b      	mov	r3, r1
 800330e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003314:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2b08      	cmp	r3, #8
 800331a:	d006      	beq.n	800332a <I2C_MasterRequestWrite+0x2a>
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d003      	beq.n	800332a <I2C_MasterRequestWrite+0x2a>
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003328:	d108      	bne.n	800333c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	e00b      	b.n	8003354 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003340:	2b12      	cmp	r3, #18
 8003342:	d107      	bne.n	8003354 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003352:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 f84f 	bl	8003404 <I2C_WaitOnFlagUntilTimeout>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00d      	beq.n	8003388 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003376:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800337a:	d103      	bne.n	8003384 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003382:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e035      	b.n	80033f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003390:	d108      	bne.n	80033a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003392:	897b      	ldrh	r3, [r7, #10]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	461a      	mov	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80033a0:	611a      	str	r2, [r3, #16]
 80033a2:	e01b      	b.n	80033dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033a4:	897b      	ldrh	r3, [r7, #10]
 80033a6:	11db      	asrs	r3, r3, #7
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	f003 0306 	and.w	r3, r3, #6
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	f063 030f 	orn	r3, r3, #15
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	490e      	ldr	r1, [pc, #56]	@ (80033fc <I2C_MasterRequestWrite+0xfc>)
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f898 	bl	80034f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e010      	b.n	80033f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033d2:	897b      	ldrh	r3, [r7, #10]
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	4907      	ldr	r1, [pc, #28]	@ (8003400 <I2C_MasterRequestWrite+0x100>)
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 f888 	bl	80034f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	00010008 	.word	0x00010008
 8003400:	00010002 	.word	0x00010002

08003404 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	4613      	mov	r3, r2
 8003412:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003414:	e048      	b.n	80034a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341c:	d044      	beq.n	80034a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800341e:	f7ff f843 	bl	80024a8 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	429a      	cmp	r2, r3
 800342c:	d302      	bcc.n	8003434 <I2C_WaitOnFlagUntilTimeout+0x30>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d139      	bne.n	80034a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	0c1b      	lsrs	r3, r3, #16
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b01      	cmp	r3, #1
 800343c:	d10d      	bne.n	800345a <I2C_WaitOnFlagUntilTimeout+0x56>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	43da      	mvns	r2, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	4013      	ands	r3, r2
 800344a:	b29b      	uxth	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	bf0c      	ite	eq
 8003450:	2301      	moveq	r3, #1
 8003452:	2300      	movne	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	461a      	mov	r2, r3
 8003458:	e00c      	b.n	8003474 <I2C_WaitOnFlagUntilTimeout+0x70>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	43da      	mvns	r2, r3
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	4013      	ands	r3, r2
 8003466:	b29b      	uxth	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	bf0c      	ite	eq
 800346c:	2301      	moveq	r3, #1
 800346e:	2300      	movne	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	461a      	mov	r2, r3
 8003474:	79fb      	ldrb	r3, [r7, #7]
 8003476:	429a      	cmp	r2, r3
 8003478:	d116      	bne.n	80034a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003494:	f043 0220 	orr.w	r2, r3, #32
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e023      	b.n	80034f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	0c1b      	lsrs	r3, r3, #16
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d10d      	bne.n	80034ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	43da      	mvns	r2, r3
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	4013      	ands	r3, r2
 80034be:	b29b      	uxth	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bf0c      	ite	eq
 80034c4:	2301      	moveq	r3, #1
 80034c6:	2300      	movne	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	461a      	mov	r2, r3
 80034cc:	e00c      	b.n	80034e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	43da      	mvns	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	4013      	ands	r3, r2
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	bf0c      	ite	eq
 80034e0:	2301      	moveq	r3, #1
 80034e2:	2300      	movne	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	461a      	mov	r2, r3
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d093      	beq.n	8003416 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
 8003504:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003506:	e071      	b.n	80035ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003512:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003516:	d123      	bne.n	8003560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003526:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003530:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354c:	f043 0204 	orr.w	r2, r3, #4
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e067      	b.n	8003630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003566:	d041      	beq.n	80035ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003568:	f7fe ff9e 	bl	80024a8 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	429a      	cmp	r2, r3
 8003576:	d302      	bcc.n	800357e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d136      	bne.n	80035ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	0c1b      	lsrs	r3, r3, #16
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b01      	cmp	r3, #1
 8003586:	d10c      	bne.n	80035a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	43da      	mvns	r2, r3
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4013      	ands	r3, r2
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	bf14      	ite	ne
 800359a:	2301      	movne	r3, #1
 800359c:	2300      	moveq	r3, #0
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	e00b      	b.n	80035ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	43da      	mvns	r2, r3
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	4013      	ands	r3, r2
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	bf14      	ite	ne
 80035b4:	2301      	movne	r3, #1
 80035b6:	2300      	moveq	r3, #0
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d016      	beq.n	80035ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d8:	f043 0220 	orr.w	r2, r3, #32
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e021      	b.n	8003630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	0c1b      	lsrs	r3, r3, #16
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d10c      	bne.n	8003610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	43da      	mvns	r2, r3
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	4013      	ands	r3, r2
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	bf14      	ite	ne
 8003608:	2301      	movne	r3, #1
 800360a:	2300      	moveq	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	e00b      	b.n	8003628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	43da      	mvns	r2, r3
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4013      	ands	r3, r2
 800361c:	b29b      	uxth	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	bf14      	ite	ne
 8003622:	2301      	movne	r3, #1
 8003624:	2300      	moveq	r3, #0
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	f47f af6d 	bne.w	8003508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003644:	e034      	b.n	80036b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f886 	bl	8003758 <I2C_IsAcknowledgeFailed>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e034      	b.n	80036c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365c:	d028      	beq.n	80036b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800365e:	f7fe ff23 	bl	80024a8 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	429a      	cmp	r2, r3
 800366c:	d302      	bcc.n	8003674 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d11d      	bne.n	80036b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800367e:	2b80      	cmp	r3, #128	@ 0x80
 8003680:	d016      	beq.n	80036b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369c:	f043 0220 	orr.w	r2, r3, #32
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e007      	b.n	80036c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ba:	2b80      	cmp	r3, #128	@ 0x80
 80036bc:	d1c3      	bne.n	8003646 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036d4:	e034      	b.n	8003740 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f83e 	bl	8003758 <I2C_IsAcknowledgeFailed>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e034      	b.n	8003750 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ec:	d028      	beq.n	8003740 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ee:	f7fe fedb 	bl	80024a8 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d302      	bcc.n	8003704 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d11d      	bne.n	8003740 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b04      	cmp	r3, #4
 8003710:	d016      	beq.n	8003740 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372c:	f043 0220 	orr.w	r2, r3, #32
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e007      	b.n	8003750 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	2b04      	cmp	r3, #4
 800374c:	d1c3      	bne.n	80036d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800376a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800376e:	d11b      	bne.n	80037a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003778:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003794:	f043 0204 	orr.w	r2, r3, #4
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr

080037b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e272      	b.n	8003cac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 8087 	beq.w	80038e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037d4:	4b92      	ldr	r3, [pc, #584]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 030c 	and.w	r3, r3, #12
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d00c      	beq.n	80037fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037e0:	4b8f      	ldr	r3, [pc, #572]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f003 030c 	and.w	r3, r3, #12
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d112      	bne.n	8003812 <HAL_RCC_OscConfig+0x5e>
 80037ec:	4b8c      	ldr	r3, [pc, #560]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037f8:	d10b      	bne.n	8003812 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037fa:	4b89      	ldr	r3, [pc, #548]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d06c      	beq.n	80038e0 <HAL_RCC_OscConfig+0x12c>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d168      	bne.n	80038e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e24c      	b.n	8003cac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800381a:	d106      	bne.n	800382a <HAL_RCC_OscConfig+0x76>
 800381c:	4b80      	ldr	r3, [pc, #512]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a7f      	ldr	r2, [pc, #508]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 8003822:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	e02e      	b.n	8003888 <HAL_RCC_OscConfig+0xd4>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10c      	bne.n	800384c <HAL_RCC_OscConfig+0x98>
 8003832:	4b7b      	ldr	r3, [pc, #492]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a7a      	ldr	r2, [pc, #488]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 8003838:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	4b78      	ldr	r3, [pc, #480]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a77      	ldr	r2, [pc, #476]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 8003844:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	e01d      	b.n	8003888 <HAL_RCC_OscConfig+0xd4>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003854:	d10c      	bne.n	8003870 <HAL_RCC_OscConfig+0xbc>
 8003856:	4b72      	ldr	r3, [pc, #456]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a71      	ldr	r2, [pc, #452]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 800385c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	4b6f      	ldr	r3, [pc, #444]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a6e      	ldr	r2, [pc, #440]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 8003868:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	e00b      	b.n	8003888 <HAL_RCC_OscConfig+0xd4>
 8003870:	4b6b      	ldr	r3, [pc, #428]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a6a      	ldr	r2, [pc, #424]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 8003876:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	4b68      	ldr	r3, [pc, #416]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a67      	ldr	r2, [pc, #412]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 8003882:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003886:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d013      	beq.n	80038b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003890:	f7fe fe0a 	bl	80024a8 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003898:	f7fe fe06 	bl	80024a8 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b64      	cmp	r3, #100	@ 0x64
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e200      	b.n	8003cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038aa:	4b5d      	ldr	r3, [pc, #372]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f0      	beq.n	8003898 <HAL_RCC_OscConfig+0xe4>
 80038b6:	e014      	b.n	80038e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b8:	f7fe fdf6 	bl	80024a8 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c0:	f7fe fdf2 	bl	80024a8 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b64      	cmp	r3, #100	@ 0x64
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e1ec      	b.n	8003cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038d2:	4b53      	ldr	r3, [pc, #332]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0x10c>
 80038de:	e000      	b.n	80038e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d063      	beq.n	80039b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038ee:	4b4c      	ldr	r3, [pc, #304]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f003 030c 	and.w	r3, r3, #12
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00b      	beq.n	8003912 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038fa:	4b49      	ldr	r3, [pc, #292]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	2b08      	cmp	r3, #8
 8003904:	d11c      	bne.n	8003940 <HAL_RCC_OscConfig+0x18c>
 8003906:	4b46      	ldr	r3, [pc, #280]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d116      	bne.n	8003940 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003912:	4b43      	ldr	r3, [pc, #268]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d005      	beq.n	800392a <HAL_RCC_OscConfig+0x176>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d001      	beq.n	800392a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e1c0      	b.n	8003cac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800392a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4939      	ldr	r1, [pc, #228]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 800393a:	4313      	orrs	r3, r2
 800393c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800393e:	e03a      	b.n	80039b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d020      	beq.n	800398a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003948:	4b36      	ldr	r3, [pc, #216]	@ (8003a24 <HAL_RCC_OscConfig+0x270>)
 800394a:	2201      	movs	r2, #1
 800394c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394e:	f7fe fdab 	bl	80024a8 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003956:	f7fe fda7 	bl	80024a8 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e1a1      	b.n	8003cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003968:	4b2d      	ldr	r3, [pc, #180]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0f0      	beq.n	8003956 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003974:	4b2a      	ldr	r3, [pc, #168]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	4927      	ldr	r1, [pc, #156]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 8003984:	4313      	orrs	r3, r2
 8003986:	600b      	str	r3, [r1, #0]
 8003988:	e015      	b.n	80039b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800398a:	4b26      	ldr	r3, [pc, #152]	@ (8003a24 <HAL_RCC_OscConfig+0x270>)
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003990:	f7fe fd8a 	bl	80024a8 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003998:	f7fe fd86 	bl	80024a8 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e180      	b.n	8003cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d03a      	beq.n	8003a38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d019      	beq.n	80039fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ca:	4b17      	ldr	r3, [pc, #92]	@ (8003a28 <HAL_RCC_OscConfig+0x274>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d0:	f7fe fd6a 	bl	80024a8 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039d8:	f7fe fd66 	bl	80024a8 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e160      	b.n	8003cac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003a20 <HAL_RCC_OscConfig+0x26c>)
 80039ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039f6:	2001      	movs	r0, #1
 80039f8:	f000 face 	bl	8003f98 <RCC_Delay>
 80039fc:	e01c      	b.n	8003a38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003a28 <HAL_RCC_OscConfig+0x274>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a04:	f7fe fd50 	bl	80024a8 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a0a:	e00f      	b.n	8003a2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a0c:	f7fe fd4c 	bl	80024a8 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d908      	bls.n	8003a2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e146      	b.n	8003cac <HAL_RCC_OscConfig+0x4f8>
 8003a1e:	bf00      	nop
 8003a20:	40021000 	.word	0x40021000
 8003a24:	42420000 	.word	0x42420000
 8003a28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a2c:	4b92      	ldr	r3, [pc, #584]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1e9      	bne.n	8003a0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 80a6 	beq.w	8003b92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a46:	2300      	movs	r3, #0
 8003a48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a4a:	4b8b      	ldr	r3, [pc, #556]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10d      	bne.n	8003a72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a56:	4b88      	ldr	r3, [pc, #544]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	4a87      	ldr	r2, [pc, #540]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a60:	61d3      	str	r3, [r2, #28]
 8003a62:	4b85      	ldr	r3, [pc, #532]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a6a:	60bb      	str	r3, [r7, #8]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a72:	4b82      	ldr	r3, [pc, #520]	@ (8003c7c <HAL_RCC_OscConfig+0x4c8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d118      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a7e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c7c <HAL_RCC_OscConfig+0x4c8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a7e      	ldr	r2, [pc, #504]	@ (8003c7c <HAL_RCC_OscConfig+0x4c8>)
 8003a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a8a:	f7fe fd0d 	bl	80024a8 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a92:	f7fe fd09 	bl	80024a8 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b64      	cmp	r3, #100	@ 0x64
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e103      	b.n	8003cac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa4:	4b75      	ldr	r3, [pc, #468]	@ (8003c7c <HAL_RCC_OscConfig+0x4c8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d106      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x312>
 8003ab8:	4b6f      	ldr	r3, [pc, #444]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	4a6e      	ldr	r2, [pc, #440]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	6213      	str	r3, [r2, #32]
 8003ac4:	e02d      	b.n	8003b22 <HAL_RCC_OscConfig+0x36e>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10c      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x334>
 8003ace:	4b6a      	ldr	r3, [pc, #424]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	4a69      	ldr	r2, [pc, #420]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003ad4:	f023 0301 	bic.w	r3, r3, #1
 8003ad8:	6213      	str	r3, [r2, #32]
 8003ada:	4b67      	ldr	r3, [pc, #412]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	4a66      	ldr	r2, [pc, #408]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003ae0:	f023 0304 	bic.w	r3, r3, #4
 8003ae4:	6213      	str	r3, [r2, #32]
 8003ae6:	e01c      	b.n	8003b22 <HAL_RCC_OscConfig+0x36e>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	2b05      	cmp	r3, #5
 8003aee:	d10c      	bne.n	8003b0a <HAL_RCC_OscConfig+0x356>
 8003af0:	4b61      	ldr	r3, [pc, #388]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	4a60      	ldr	r2, [pc, #384]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003af6:	f043 0304 	orr.w	r3, r3, #4
 8003afa:	6213      	str	r3, [r2, #32]
 8003afc:	4b5e      	ldr	r3, [pc, #376]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	4a5d      	ldr	r2, [pc, #372]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	6213      	str	r3, [r2, #32]
 8003b08:	e00b      	b.n	8003b22 <HAL_RCC_OscConfig+0x36e>
 8003b0a:	4b5b      	ldr	r3, [pc, #364]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	4a5a      	ldr	r2, [pc, #360]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003b10:	f023 0301 	bic.w	r3, r3, #1
 8003b14:	6213      	str	r3, [r2, #32]
 8003b16:	4b58      	ldr	r3, [pc, #352]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	4a57      	ldr	r2, [pc, #348]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003b1c:	f023 0304 	bic.w	r3, r3, #4
 8003b20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d015      	beq.n	8003b56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b2a:	f7fe fcbd 	bl	80024a8 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b30:	e00a      	b.n	8003b48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b32:	f7fe fcb9 	bl	80024a8 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e0b1      	b.n	8003cac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b48:	4b4b      	ldr	r3, [pc, #300]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0ee      	beq.n	8003b32 <HAL_RCC_OscConfig+0x37e>
 8003b54:	e014      	b.n	8003b80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b56:	f7fe fca7 	bl	80024a8 <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b5c:	e00a      	b.n	8003b74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b5e:	f7fe fca3 	bl	80024a8 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e09b      	b.n	8003cac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b74:	4b40      	ldr	r3, [pc, #256]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1ee      	bne.n	8003b5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b80:	7dfb      	ldrb	r3, [r7, #23]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d105      	bne.n	8003b92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b86:	4b3c      	ldr	r3, [pc, #240]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	4a3b      	ldr	r2, [pc, #236]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003b8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 8087 	beq.w	8003caa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b9c:	4b36      	ldr	r3, [pc, #216]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f003 030c 	and.w	r3, r3, #12
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d061      	beq.n	8003c6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d146      	bne.n	8003c3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb0:	4b33      	ldr	r3, [pc, #204]	@ (8003c80 <HAL_RCC_OscConfig+0x4cc>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb6:	f7fe fc77 	bl	80024a8 <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bbe:	f7fe fc73 	bl	80024a8 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e06d      	b.n	8003cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bd0:	4b29      	ldr	r3, [pc, #164]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1f0      	bne.n	8003bbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003be4:	d108      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003be6:	4b24      	ldr	r3, [pc, #144]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	4921      	ldr	r1, [pc, #132]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a19      	ldr	r1, [r3, #32]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c08:	430b      	orrs	r3, r1
 8003c0a:	491b      	ldr	r1, [pc, #108]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c10:	4b1b      	ldr	r3, [pc, #108]	@ (8003c80 <HAL_RCC_OscConfig+0x4cc>)
 8003c12:	2201      	movs	r2, #1
 8003c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c16:	f7fe fc47 	bl	80024a8 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c1e:	f7fe fc43 	bl	80024a8 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e03d      	b.n	8003cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c30:	4b11      	ldr	r3, [pc, #68]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0f0      	beq.n	8003c1e <HAL_RCC_OscConfig+0x46a>
 8003c3c:	e035      	b.n	8003caa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c3e:	4b10      	ldr	r3, [pc, #64]	@ (8003c80 <HAL_RCC_OscConfig+0x4cc>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c44:	f7fe fc30 	bl	80024a8 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4c:	f7fe fc2c 	bl	80024a8 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e026      	b.n	8003cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c5e:	4b06      	ldr	r3, [pc, #24]	@ (8003c78 <HAL_RCC_OscConfig+0x4c4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1f0      	bne.n	8003c4c <HAL_RCC_OscConfig+0x498>
 8003c6a:	e01e      	b.n	8003caa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d107      	bne.n	8003c84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e019      	b.n	8003cac <HAL_RCC_OscConfig+0x4f8>
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	40007000 	.word	0x40007000
 8003c80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c84:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb4 <HAL_RCC_OscConfig+0x500>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d106      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d001      	beq.n	8003caa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40021000 	.word	0x40021000

08003cb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e0d0      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ccc:	4b6a      	ldr	r3, [pc, #424]	@ (8003e78 <HAL_RCC_ClockConfig+0x1c0>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d910      	bls.n	8003cfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cda:	4b67      	ldr	r3, [pc, #412]	@ (8003e78 <HAL_RCC_ClockConfig+0x1c0>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f023 0207 	bic.w	r2, r3, #7
 8003ce2:	4965      	ldr	r1, [pc, #404]	@ (8003e78 <HAL_RCC_ClockConfig+0x1c0>)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cea:	4b63      	ldr	r3, [pc, #396]	@ (8003e78 <HAL_RCC_ClockConfig+0x1c0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d001      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e0b8      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d020      	beq.n	8003d4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d005      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d14:	4b59      	ldr	r3, [pc, #356]	@ (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	4a58      	ldr	r2, [pc, #352]	@ (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003d1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d005      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d2c:	4b53      	ldr	r3, [pc, #332]	@ (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	4a52      	ldr	r2, [pc, #328]	@ (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d32:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003d36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d38:	4b50      	ldr	r3, [pc, #320]	@ (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	494d      	ldr	r1, [pc, #308]	@ (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d040      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d107      	bne.n	8003d6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d5e:	4b47      	ldr	r3, [pc, #284]	@ (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d115      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e07f      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d107      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d76:	4b41      	ldr	r3, [pc, #260]	@ (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d109      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e073      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d86:	4b3d      	ldr	r3, [pc, #244]	@ (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e06b      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d96:	4b39      	ldr	r3, [pc, #228]	@ (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f023 0203 	bic.w	r2, r3, #3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	4936      	ldr	r1, [pc, #216]	@ (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003da8:	f7fe fb7e 	bl	80024a8 <HAL_GetTick>
 8003dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dae:	e00a      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003db0:	f7fe fb7a 	bl	80024a8 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e053      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dc6:	4b2d      	ldr	r3, [pc, #180]	@ (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f003 020c 	and.w	r2, r3, #12
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d1eb      	bne.n	8003db0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dd8:	4b27      	ldr	r3, [pc, #156]	@ (8003e78 <HAL_RCC_ClockConfig+0x1c0>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d210      	bcs.n	8003e08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de6:	4b24      	ldr	r3, [pc, #144]	@ (8003e78 <HAL_RCC_ClockConfig+0x1c0>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f023 0207 	bic.w	r2, r3, #7
 8003dee:	4922      	ldr	r1, [pc, #136]	@ (8003e78 <HAL_RCC_ClockConfig+0x1c0>)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df6:	4b20      	ldr	r3, [pc, #128]	@ (8003e78 <HAL_RCC_ClockConfig+0x1c0>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0307 	and.w	r3, r3, #7
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d001      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e032      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d008      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e14:	4b19      	ldr	r3, [pc, #100]	@ (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	4916      	ldr	r1, [pc, #88]	@ (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d009      	beq.n	8003e46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e32:	4b12      	ldr	r3, [pc, #72]	@ (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	490e      	ldr	r1, [pc, #56]	@ (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e46:	f000 f821 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	091b      	lsrs	r3, r3, #4
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	490a      	ldr	r1, [pc, #40]	@ (8003e80 <HAL_RCC_ClockConfig+0x1c8>)
 8003e58:	5ccb      	ldrb	r3, [r1, r3]
 8003e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e5e:	4a09      	ldr	r2, [pc, #36]	@ (8003e84 <HAL_RCC_ClockConfig+0x1cc>)
 8003e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e62:	4b09      	ldr	r3, [pc, #36]	@ (8003e88 <HAL_RCC_ClockConfig+0x1d0>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fe fadc 	bl	8002424 <HAL_InitTick>

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	40022000 	.word	0x40022000
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	08008cc4 	.word	0x08008cc4
 8003e84:	20000008 	.word	0x20000008
 8003e88:	2000000c 	.word	0x2000000c

08003e8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	2300      	movs	r3, #0
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8003f20 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f003 030c 	and.w	r3, r3, #12
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d002      	beq.n	8003ebc <HAL_RCC_GetSysClockFreq+0x30>
 8003eb6:	2b08      	cmp	r3, #8
 8003eb8:	d003      	beq.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x36>
 8003eba:	e027      	b.n	8003f0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ebc:	4b19      	ldr	r3, [pc, #100]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ebe:	613b      	str	r3, [r7, #16]
      break;
 8003ec0:	e027      	b.n	8003f12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	0c9b      	lsrs	r3, r3, #18
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	4a17      	ldr	r2, [pc, #92]	@ (8003f28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ecc:	5cd3      	ldrb	r3, [r2, r3]
 8003ece:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d010      	beq.n	8003efc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003eda:	4b11      	ldr	r3, [pc, #68]	@ (8003f20 <HAL_RCC_GetSysClockFreq+0x94>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	0c5b      	lsrs	r3, r3, #17
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	4a11      	ldr	r2, [pc, #68]	@ (8003f2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ee6:	5cd3      	ldrb	r3, [r2, r3]
 8003ee8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a0d      	ldr	r2, [pc, #52]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x98>)
 8003eee:	fb03 f202 	mul.w	r2, r3, r2
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	e004      	b.n	8003f06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a0c      	ldr	r2, [pc, #48]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f00:	fb02 f303 	mul.w	r3, r2, r3
 8003f04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	613b      	str	r3, [r7, #16]
      break;
 8003f0a:	e002      	b.n	8003f12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f0c:	4b05      	ldr	r3, [pc, #20]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f0e:	613b      	str	r3, [r7, #16]
      break;
 8003f10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f12:	693b      	ldr	r3, [r7, #16]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	371c      	adds	r7, #28
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bc80      	pop	{r7}
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40021000 	.word	0x40021000
 8003f24:	007a1200 	.word	0x007a1200
 8003f28:	08008cdc 	.word	0x08008cdc
 8003f2c:	08008cec 	.word	0x08008cec
 8003f30:	003d0900 	.word	0x003d0900

08003f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f38:	4b02      	ldr	r3, [pc, #8]	@ (8003f44 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr
 8003f44:	20000008 	.word	0x20000008

08003f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f4c:	f7ff fff2 	bl	8003f34 <HAL_RCC_GetHCLKFreq>
 8003f50:	4602      	mov	r2, r0
 8003f52:	4b05      	ldr	r3, [pc, #20]	@ (8003f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	0a1b      	lsrs	r3, r3, #8
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	4903      	ldr	r1, [pc, #12]	@ (8003f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f5e:	5ccb      	ldrb	r3, [r1, r3]
 8003f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	08008cd4 	.word	0x08008cd4

08003f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f74:	f7ff ffde 	bl	8003f34 <HAL_RCC_GetHCLKFreq>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	4b05      	ldr	r3, [pc, #20]	@ (8003f90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	0adb      	lsrs	r3, r3, #11
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	4903      	ldr	r1, [pc, #12]	@ (8003f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f86:	5ccb      	ldrb	r3, [r1, r3]
 8003f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40021000 	.word	0x40021000
 8003f94:	08008cd4 	.word	0x08008cd4

08003f98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8003fcc <RCC_Delay+0x34>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8003fd0 <RCC_Delay+0x38>)
 8003fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003faa:	0a5b      	lsrs	r3, r3, #9
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	fb02 f303 	mul.w	r3, r2, r3
 8003fb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003fb4:	bf00      	nop
  }
  while (Delay --);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	1e5a      	subs	r2, r3, #1
 8003fba:	60fa      	str	r2, [r7, #12]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1f9      	bne.n	8003fb4 <RCC_Delay+0x1c>
}
 8003fc0:	bf00      	nop
 8003fc2:	bf00      	nop
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bc80      	pop	{r7}
 8003fca:	4770      	bx	lr
 8003fcc:	20000008 	.word	0x20000008
 8003fd0:	10624dd3 	.word	0x10624dd3

08003fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e041      	b.n	800406a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d106      	bne.n	8004000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7fd ffda 	bl	8001fb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3304      	adds	r3, #4
 8004010:	4619      	mov	r1, r3
 8004012:	4610      	mov	r0, r2
 8004014:	f000 fab2 	bl	800457c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b082      	sub	sp, #8
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e041      	b.n	8004108 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d106      	bne.n	800409e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f839 	bl	8004110 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2202      	movs	r2, #2
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	3304      	adds	r3, #4
 80040ae:	4619      	mov	r1, r3
 80040b0:	4610      	mov	r0, r2
 80040b2:	f000 fa63 	bl	800457c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	bc80      	pop	{r7}
 8004120:	4770      	bx	lr
	...

08004124 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d109      	bne.n	8004148 <HAL_TIM_PWM_Start+0x24>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b01      	cmp	r3, #1
 800413e:	bf14      	ite	ne
 8004140:	2301      	movne	r3, #1
 8004142:	2300      	moveq	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	e022      	b.n	800418e <HAL_TIM_PWM_Start+0x6a>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	2b04      	cmp	r3, #4
 800414c:	d109      	bne.n	8004162 <HAL_TIM_PWM_Start+0x3e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b01      	cmp	r3, #1
 8004158:	bf14      	ite	ne
 800415a:	2301      	movne	r3, #1
 800415c:	2300      	moveq	r3, #0
 800415e:	b2db      	uxtb	r3, r3
 8004160:	e015      	b.n	800418e <HAL_TIM_PWM_Start+0x6a>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b08      	cmp	r3, #8
 8004166:	d109      	bne.n	800417c <HAL_TIM_PWM_Start+0x58>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b01      	cmp	r3, #1
 8004172:	bf14      	ite	ne
 8004174:	2301      	movne	r3, #1
 8004176:	2300      	moveq	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	e008      	b.n	800418e <HAL_TIM_PWM_Start+0x6a>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b01      	cmp	r3, #1
 8004186:	bf14      	ite	ne
 8004188:	2301      	movne	r3, #1
 800418a:	2300      	moveq	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e05e      	b.n	8004254 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d104      	bne.n	80041a6 <HAL_TIM_PWM_Start+0x82>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041a4:	e013      	b.n	80041ce <HAL_TIM_PWM_Start+0xaa>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d104      	bne.n	80041b6 <HAL_TIM_PWM_Start+0x92>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041b4:	e00b      	b.n	80041ce <HAL_TIM_PWM_Start+0xaa>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d104      	bne.n	80041c6 <HAL_TIM_PWM_Start+0xa2>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041c4:	e003      	b.n	80041ce <HAL_TIM_PWM_Start+0xaa>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2202      	movs	r2, #2
 80041ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2201      	movs	r2, #1
 80041d4:	6839      	ldr	r1, [r7, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fc50 	bl	8004a7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a1e      	ldr	r2, [pc, #120]	@ (800425c <HAL_TIM_PWM_Start+0x138>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d107      	bne.n	80041f6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a18      	ldr	r2, [pc, #96]	@ (800425c <HAL_TIM_PWM_Start+0x138>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d00e      	beq.n	800421e <HAL_TIM_PWM_Start+0xfa>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004208:	d009      	beq.n	800421e <HAL_TIM_PWM_Start+0xfa>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a14      	ldr	r2, [pc, #80]	@ (8004260 <HAL_TIM_PWM_Start+0x13c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d004      	beq.n	800421e <HAL_TIM_PWM_Start+0xfa>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a12      	ldr	r2, [pc, #72]	@ (8004264 <HAL_TIM_PWM_Start+0x140>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d111      	bne.n	8004242 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2b06      	cmp	r3, #6
 800422e:	d010      	beq.n	8004252 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 0201 	orr.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004240:	e007      	b.n	8004252 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f042 0201 	orr.w	r2, r2, #1
 8004250:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40012c00 	.word	0x40012c00
 8004260:	40000400 	.word	0x40000400
 8004264:	40000800 	.word	0x40000800

08004268 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004274:	2300      	movs	r3, #0
 8004276:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800427e:	2b01      	cmp	r3, #1
 8004280:	d101      	bne.n	8004286 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004282:	2302      	movs	r3, #2
 8004284:	e0ae      	b.n	80043e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b0c      	cmp	r3, #12
 8004292:	f200 809f 	bhi.w	80043d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004296:	a201      	add	r2, pc, #4	@ (adr r2, 800429c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429c:	080042d1 	.word	0x080042d1
 80042a0:	080043d5 	.word	0x080043d5
 80042a4:	080043d5 	.word	0x080043d5
 80042a8:	080043d5 	.word	0x080043d5
 80042ac:	08004311 	.word	0x08004311
 80042b0:	080043d5 	.word	0x080043d5
 80042b4:	080043d5 	.word	0x080043d5
 80042b8:	080043d5 	.word	0x080043d5
 80042bc:	08004353 	.word	0x08004353
 80042c0:	080043d5 	.word	0x080043d5
 80042c4:	080043d5 	.word	0x080043d5
 80042c8:	080043d5 	.word	0x080043d5
 80042cc:	08004393 	.word	0x08004393
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68b9      	ldr	r1, [r7, #8]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 f9b2 	bl	8004640 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699a      	ldr	r2, [r3, #24]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0208 	orr.w	r2, r2, #8
 80042ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699a      	ldr	r2, [r3, #24]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0204 	bic.w	r2, r2, #4
 80042fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6999      	ldr	r1, [r3, #24]
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	691a      	ldr	r2, [r3, #16]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	619a      	str	r2, [r3, #24]
      break;
 800430e:	e064      	b.n	80043da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68b9      	ldr	r1, [r7, #8]
 8004316:	4618      	mov	r0, r3
 8004318:	f000 f9f8 	bl	800470c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699a      	ldr	r2, [r3, #24]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800432a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699a      	ldr	r2, [r3, #24]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800433a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6999      	ldr	r1, [r3, #24]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	021a      	lsls	r2, r3, #8
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	619a      	str	r2, [r3, #24]
      break;
 8004350:	e043      	b.n	80043da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68b9      	ldr	r1, [r7, #8]
 8004358:	4618      	mov	r0, r3
 800435a:	f000 fa41 	bl	80047e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	69da      	ldr	r2, [r3, #28]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f042 0208 	orr.w	r2, r2, #8
 800436c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	69da      	ldr	r2, [r3, #28]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0204 	bic.w	r2, r2, #4
 800437c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	69d9      	ldr	r1, [r3, #28]
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	61da      	str	r2, [r3, #28]
      break;
 8004390:	e023      	b.n	80043da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68b9      	ldr	r1, [r7, #8]
 8004398:	4618      	mov	r0, r3
 800439a:	f000 fa8b 	bl	80048b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	69da      	ldr	r2, [r3, #28]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	69da      	ldr	r2, [r3, #28]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69d9      	ldr	r1, [r3, #28]
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	021a      	lsls	r2, r3, #8
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	61da      	str	r2, [r3, #28]
      break;
 80043d2:	e002      	b.n	80043da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	75fb      	strb	r3, [r7, #23]
      break;
 80043d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_TIM_ConfigClockSource+0x1c>
 8004404:	2302      	movs	r3, #2
 8004406:	e0b4      	b.n	8004572 <HAL_TIM_ConfigClockSource+0x186>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800442e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004440:	d03e      	beq.n	80044c0 <HAL_TIM_ConfigClockSource+0xd4>
 8004442:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004446:	f200 8087 	bhi.w	8004558 <HAL_TIM_ConfigClockSource+0x16c>
 800444a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800444e:	f000 8086 	beq.w	800455e <HAL_TIM_ConfigClockSource+0x172>
 8004452:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004456:	d87f      	bhi.n	8004558 <HAL_TIM_ConfigClockSource+0x16c>
 8004458:	2b70      	cmp	r3, #112	@ 0x70
 800445a:	d01a      	beq.n	8004492 <HAL_TIM_ConfigClockSource+0xa6>
 800445c:	2b70      	cmp	r3, #112	@ 0x70
 800445e:	d87b      	bhi.n	8004558 <HAL_TIM_ConfigClockSource+0x16c>
 8004460:	2b60      	cmp	r3, #96	@ 0x60
 8004462:	d050      	beq.n	8004506 <HAL_TIM_ConfigClockSource+0x11a>
 8004464:	2b60      	cmp	r3, #96	@ 0x60
 8004466:	d877      	bhi.n	8004558 <HAL_TIM_ConfigClockSource+0x16c>
 8004468:	2b50      	cmp	r3, #80	@ 0x50
 800446a:	d03c      	beq.n	80044e6 <HAL_TIM_ConfigClockSource+0xfa>
 800446c:	2b50      	cmp	r3, #80	@ 0x50
 800446e:	d873      	bhi.n	8004558 <HAL_TIM_ConfigClockSource+0x16c>
 8004470:	2b40      	cmp	r3, #64	@ 0x40
 8004472:	d058      	beq.n	8004526 <HAL_TIM_ConfigClockSource+0x13a>
 8004474:	2b40      	cmp	r3, #64	@ 0x40
 8004476:	d86f      	bhi.n	8004558 <HAL_TIM_ConfigClockSource+0x16c>
 8004478:	2b30      	cmp	r3, #48	@ 0x30
 800447a:	d064      	beq.n	8004546 <HAL_TIM_ConfigClockSource+0x15a>
 800447c:	2b30      	cmp	r3, #48	@ 0x30
 800447e:	d86b      	bhi.n	8004558 <HAL_TIM_ConfigClockSource+0x16c>
 8004480:	2b20      	cmp	r3, #32
 8004482:	d060      	beq.n	8004546 <HAL_TIM_ConfigClockSource+0x15a>
 8004484:	2b20      	cmp	r3, #32
 8004486:	d867      	bhi.n	8004558 <HAL_TIM_ConfigClockSource+0x16c>
 8004488:	2b00      	cmp	r3, #0
 800448a:	d05c      	beq.n	8004546 <HAL_TIM_ConfigClockSource+0x15a>
 800448c:	2b10      	cmp	r3, #16
 800448e:	d05a      	beq.n	8004546 <HAL_TIM_ConfigClockSource+0x15a>
 8004490:	e062      	b.n	8004558 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044a2:	f000 facc 	bl	8004a3e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80044b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	609a      	str	r2, [r3, #8]
      break;
 80044be:	e04f      	b.n	8004560 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044d0:	f000 fab5 	bl	8004a3e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044e2:	609a      	str	r2, [r3, #8]
      break;
 80044e4:	e03c      	b.n	8004560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044f2:	461a      	mov	r2, r3
 80044f4:	f000 fa2c 	bl	8004950 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2150      	movs	r1, #80	@ 0x50
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fa83 	bl	8004a0a <TIM_ITRx_SetConfig>
      break;
 8004504:	e02c      	b.n	8004560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004512:	461a      	mov	r2, r3
 8004514:	f000 fa4a 	bl	80049ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2160      	movs	r1, #96	@ 0x60
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fa73 	bl	8004a0a <TIM_ITRx_SetConfig>
      break;
 8004524:	e01c      	b.n	8004560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004532:	461a      	mov	r2, r3
 8004534:	f000 fa0c 	bl	8004950 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2140      	movs	r1, #64	@ 0x40
 800453e:	4618      	mov	r0, r3
 8004540:	f000 fa63 	bl	8004a0a <TIM_ITRx_SetConfig>
      break;
 8004544:	e00c      	b.n	8004560 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4619      	mov	r1, r3
 8004550:	4610      	mov	r0, r2
 8004552:	f000 fa5a 	bl	8004a0a <TIM_ITRx_SetConfig>
      break;
 8004556:	e003      	b.n	8004560 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	73fb      	strb	r3, [r7, #15]
      break;
 800455c:	e000      	b.n	8004560 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800455e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004570:	7bfb      	ldrb	r3, [r7, #15]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a29      	ldr	r2, [pc, #164]	@ (8004634 <TIM_Base_SetConfig+0xb8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d00b      	beq.n	80045ac <TIM_Base_SetConfig+0x30>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800459a:	d007      	beq.n	80045ac <TIM_Base_SetConfig+0x30>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a26      	ldr	r2, [pc, #152]	@ (8004638 <TIM_Base_SetConfig+0xbc>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d003      	beq.n	80045ac <TIM_Base_SetConfig+0x30>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a25      	ldr	r2, [pc, #148]	@ (800463c <TIM_Base_SetConfig+0xc0>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d108      	bne.n	80045be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004634 <TIM_Base_SetConfig+0xb8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d00b      	beq.n	80045de <TIM_Base_SetConfig+0x62>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045cc:	d007      	beq.n	80045de <TIM_Base_SetConfig+0x62>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a19      	ldr	r2, [pc, #100]	@ (8004638 <TIM_Base_SetConfig+0xbc>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d003      	beq.n	80045de <TIM_Base_SetConfig+0x62>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a18      	ldr	r2, [pc, #96]	@ (800463c <TIM_Base_SetConfig+0xc0>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d108      	bne.n	80045f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a07      	ldr	r2, [pc, #28]	@ (8004634 <TIM_Base_SetConfig+0xb8>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d103      	bne.n	8004624 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	691a      	ldr	r2, [r3, #16]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	615a      	str	r2, [r3, #20]
}
 800462a:	bf00      	nop
 800462c:	3714      	adds	r7, #20
 800462e:	46bd      	mov	sp, r7
 8004630:	bc80      	pop	{r7}
 8004632:	4770      	bx	lr
 8004634:	40012c00 	.word	0x40012c00
 8004638:	40000400 	.word	0x40000400
 800463c:	40000800 	.word	0x40000800

08004640 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004640:	b480      	push	{r7}
 8004642:	b087      	sub	sp, #28
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	f023 0201 	bic.w	r2, r3, #1
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800466e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f023 0303 	bic.w	r3, r3, #3
 8004676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f023 0302 	bic.w	r3, r3, #2
 8004688:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	4313      	orrs	r3, r2
 8004692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a1c      	ldr	r2, [pc, #112]	@ (8004708 <TIM_OC1_SetConfig+0xc8>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d10c      	bne.n	80046b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f023 0308 	bic.w	r3, r3, #8
 80046a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f023 0304 	bic.w	r3, r3, #4
 80046b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a13      	ldr	r2, [pc, #76]	@ (8004708 <TIM_OC1_SetConfig+0xc8>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d111      	bne.n	80046e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	4313      	orrs	r3, r2
 80046e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	621a      	str	r2, [r3, #32]
}
 80046fc:	bf00      	nop
 80046fe:	371c      	adds	r7, #28
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	40012c00 	.word	0x40012c00

0800470c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	f023 0210 	bic.w	r2, r3, #16
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800473a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	021b      	lsls	r3, r3, #8
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	4313      	orrs	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f023 0320 	bic.w	r3, r3, #32
 8004756:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	4313      	orrs	r3, r2
 8004762:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a1d      	ldr	r2, [pc, #116]	@ (80047dc <TIM_OC2_SetConfig+0xd0>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d10d      	bne.n	8004788 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	4313      	orrs	r3, r2
 800477e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004786:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a14      	ldr	r2, [pc, #80]	@ (80047dc <TIM_OC2_SetConfig+0xd0>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d113      	bne.n	80047b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004796:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800479e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	621a      	str	r2, [r3, #32]
}
 80047d2:	bf00      	nop
 80047d4:	371c      	adds	r7, #28
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bc80      	pop	{r7}
 80047da:	4770      	bx	lr
 80047dc:	40012c00 	.word	0x40012c00

080047e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800480e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 0303 	bic.w	r3, r3, #3
 8004816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	021b      	lsls	r3, r3, #8
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	4313      	orrs	r3, r2
 8004834:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a1d      	ldr	r2, [pc, #116]	@ (80048b0 <TIM_OC3_SetConfig+0xd0>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d10d      	bne.n	800485a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004844:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	021b      	lsls	r3, r3, #8
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	4313      	orrs	r3, r2
 8004850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a14      	ldr	r2, [pc, #80]	@ (80048b0 <TIM_OC3_SetConfig+0xd0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d113      	bne.n	800488a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	011b      	lsls	r3, r3, #4
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	4313      	orrs	r3, r2
 800487c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	621a      	str	r2, [r3, #32]
}
 80048a4:	bf00      	nop
 80048a6:	371c      	adds	r7, #28
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bc80      	pop	{r7}
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	40012c00 	.word	0x40012c00

080048b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	021b      	lsls	r3, r3, #8
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	031b      	lsls	r3, r3, #12
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a0f      	ldr	r2, [pc, #60]	@ (800494c <TIM_OC4_SetConfig+0x98>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d109      	bne.n	8004928 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800491a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	019b      	lsls	r3, r3, #6
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	4313      	orrs	r3, r2
 8004926:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	621a      	str	r2, [r3, #32]
}
 8004942:	bf00      	nop
 8004944:	371c      	adds	r7, #28
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr
 800494c:	40012c00 	.word	0x40012c00

08004950 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	f023 0201 	bic.w	r2, r3, #1
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800497a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f023 030a 	bic.w	r3, r3, #10
 800498c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	4313      	orrs	r3, r2
 8004994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	621a      	str	r2, [r3, #32]
}
 80049a2:	bf00      	nop
 80049a4:	371c      	adds	r7, #28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bc80      	pop	{r7}
 80049aa:	4770      	bx	lr

080049ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b087      	sub	sp, #28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	f023 0210 	bic.w	r2, r3, #16
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	031b      	lsls	r3, r3, #12
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	4313      	orrs	r3, r2
 80049e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80049e8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	621a      	str	r2, [r3, #32]
}
 8004a00:	bf00      	nop
 8004a02:	371c      	adds	r7, #28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc80      	pop	{r7}
 8004a08:	4770      	bx	lr

08004a0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b085      	sub	sp, #20
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
 8004a12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f043 0307 	orr.w	r3, r3, #7
 8004a2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	609a      	str	r2, [r3, #8]
}
 8004a34:	bf00      	nop
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc80      	pop	{r7}
 8004a3c:	4770      	bx	lr

08004a3e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b087      	sub	sp, #28
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	607a      	str	r2, [r7, #4]
 8004a4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a58:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	021a      	lsls	r2, r3, #8
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	431a      	orrs	r2, r3
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	609a      	str	r2, [r3, #8]
}
 8004a72:	bf00      	nop
 8004a74:	371c      	adds	r7, #28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bc80      	pop	{r7}
 8004a7a:	4770      	bx	lr

08004a7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	f003 031f 	and.w	r3, r3, #31
 8004a8e:	2201      	movs	r2, #1
 8004a90:	fa02 f303 	lsl.w	r3, r2, r3
 8004a94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6a1a      	ldr	r2, [r3, #32]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	401a      	ands	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6a1a      	ldr	r2, [r3, #32]
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f003 031f 	and.w	r3, r3, #31
 8004aae:	6879      	ldr	r1, [r7, #4]
 8004ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	621a      	str	r2, [r3, #32]
}
 8004aba:	bf00      	nop
 8004abc:	371c      	adds	r7, #28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d101      	bne.n	8004adc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	e046      	b.n	8004b6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a16      	ldr	r2, [pc, #88]	@ (8004b74 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d00e      	beq.n	8004b3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b28:	d009      	beq.n	8004b3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a12      	ldr	r2, [pc, #72]	@ (8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d004      	beq.n	8004b3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a10      	ldr	r2, [pc, #64]	@ (8004b7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d10c      	bne.n	8004b58 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bc80      	pop	{r7}
 8004b72:	4770      	bx	lr
 8004b74:	40012c00 	.word	0x40012c00
 8004b78:	40000400 	.word	0x40000400
 8004b7c:	40000800 	.word	0x40000800

08004b80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e042      	b.n	8004c18 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d106      	bne.n	8004bac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7fd fa50 	bl	800204c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2224      	movs	r2, #36	@ 0x24
 8004bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004bc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 fdc7 	bl	8005758 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	691a      	ldr	r2, [r3, #16]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695a      	ldr	r2, [r3, #20]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004be8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b08a      	sub	sp, #40	@ 0x28
 8004c24:	af02      	add	r7, sp, #8
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	603b      	str	r3, [r7, #0]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	d16d      	bne.n	8004d1c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d002      	beq.n	8004c4c <HAL_UART_Transmit+0x2c>
 8004c46:	88fb      	ldrh	r3, [r7, #6]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e066      	b.n	8004d1e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2221      	movs	r2, #33	@ 0x21
 8004c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c5e:	f7fd fc23 	bl	80024a8 <HAL_GetTick>
 8004c62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	88fa      	ldrh	r2, [r7, #6]
 8004c68:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	88fa      	ldrh	r2, [r7, #6]
 8004c6e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c78:	d108      	bne.n	8004c8c <HAL_UART_Transmit+0x6c>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d104      	bne.n	8004c8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c82:	2300      	movs	r3, #0
 8004c84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	61bb      	str	r3, [r7, #24]
 8004c8a:	e003      	b.n	8004c94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c90:	2300      	movs	r3, #0
 8004c92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c94:	e02a      	b.n	8004cec <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	2180      	movs	r1, #128	@ 0x80
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 fb16 	bl	80052d2 <UART_WaitOnFlagUntilTimeout>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e036      	b.n	8004d1e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10b      	bne.n	8004cce <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	3302      	adds	r3, #2
 8004cca:	61bb      	str	r3, [r7, #24]
 8004ccc:	e007      	b.n	8004cde <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	781a      	ldrb	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1cf      	bne.n	8004c96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	2140      	movs	r1, #64	@ 0x40
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 fae6 	bl	80052d2 <UART_WaitOnFlagUntilTimeout>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e006      	b.n	8004d1e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	e000      	b.n	8004d1e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004d1c:	2302      	movs	r3, #2
  }
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3720      	adds	r7, #32
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b084      	sub	sp, #16
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	60f8      	str	r0, [r7, #12]
 8004d2e:	60b9      	str	r1, [r7, #8]
 8004d30:	4613      	mov	r3, r2
 8004d32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b20      	cmp	r3, #32
 8004d3e:	d112      	bne.n	8004d66 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d002      	beq.n	8004d4c <HAL_UART_Receive_IT+0x26>
 8004d46:	88fb      	ldrh	r3, [r7, #6]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e00b      	b.n	8004d68 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d56:	88fb      	ldrh	r3, [r7, #6]
 8004d58:	461a      	mov	r2, r3
 8004d5a:	68b9      	ldr	r1, [r7, #8]
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 fb26 	bl	80053ae <UART_Start_Receive_IT>
 8004d62:	4603      	mov	r3, r0
 8004d64:	e000      	b.n	8004d68 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d66:	2302      	movs	r3, #2
  }
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b0ba      	sub	sp, #232	@ 0xe8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004dae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10f      	bne.n	8004dd6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dba:	f003 0320 	and.w	r3, r3, #32
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d009      	beq.n	8004dd6 <HAL_UART_IRQHandler+0x66>
 8004dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dc6:	f003 0320 	and.w	r3, r3, #32
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 fc03 	bl	80055da <UART_Receive_IT>
      return;
 8004dd4:	e25b      	b.n	800528e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004dd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 80de 	beq.w	8004f9c <HAL_UART_IRQHandler+0x22c>
 8004de0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d106      	bne.n	8004dfa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004df0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 80d1 	beq.w	8004f9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00b      	beq.n	8004e1e <HAL_UART_IRQHandler+0xae>
 8004e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d005      	beq.n	8004e1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e16:	f043 0201 	orr.w	r2, r3, #1
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e22:	f003 0304 	and.w	r3, r3, #4
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00b      	beq.n	8004e42 <HAL_UART_IRQHandler+0xd2>
 8004e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d005      	beq.n	8004e42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e3a:	f043 0202 	orr.w	r2, r3, #2
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00b      	beq.n	8004e66 <HAL_UART_IRQHandler+0xf6>
 8004e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d005      	beq.n	8004e66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e5e:	f043 0204 	orr.w	r2, r3, #4
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d011      	beq.n	8004e96 <HAL_UART_IRQHandler+0x126>
 8004e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e76:	f003 0320 	and.w	r3, r3, #32
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d105      	bne.n	8004e8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d005      	beq.n	8004e96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e8e:	f043 0208 	orr.w	r2, r3, #8
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f000 81f2 	beq.w	8005284 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ea4:	f003 0320 	and.w	r3, r3, #32
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d008      	beq.n	8004ebe <HAL_UART_IRQHandler+0x14e>
 8004eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eb0:	f003 0320 	and.w	r3, r3, #32
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 fb8e 	bl	80055da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	bf14      	ite	ne
 8004ecc:	2301      	movne	r3, #1
 8004ece:	2300      	moveq	r3, #0
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eda:	f003 0308 	and.w	r3, r3, #8
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d103      	bne.n	8004eea <HAL_UART_IRQHandler+0x17a>
 8004ee2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d04f      	beq.n	8004f8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 fa98 	bl	8005420 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d041      	beq.n	8004f82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	3314      	adds	r3, #20
 8004f04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f0c:	e853 3f00 	ldrex	r3, [r3]
 8004f10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3314      	adds	r3, #20
 8004f26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f3a:	e841 2300 	strex	r3, r2, [r1]
 8004f3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1d9      	bne.n	8004efe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d013      	beq.n	8004f7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f56:	4a7e      	ldr	r2, [pc, #504]	@ (8005150 <HAL_UART_IRQHandler+0x3e0>)
 8004f58:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7fd fc18 	bl	8002794 <HAL_DMA_Abort_IT>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d016      	beq.n	8004f98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f74:	4610      	mov	r0, r2
 8004f76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f78:	e00e      	b.n	8004f98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7fc fca2 	bl	80018c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f80:	e00a      	b.n	8004f98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7fc fc9e 	bl	80018c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f88:	e006      	b.n	8004f98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7fc fc9a 	bl	80018c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004f96:	e175      	b.n	8005284 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f98:	bf00      	nop
    return;
 8004f9a:	e173      	b.n	8005284 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	f040 814f 	bne.w	8005244 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004faa:	f003 0310 	and.w	r3, r3, #16
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 8148 	beq.w	8005244 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fb8:	f003 0310 	and.w	r3, r3, #16
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 8141 	beq.w	8005244 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60bb      	str	r3, [r7, #8]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	60bb      	str	r3, [r7, #8]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	60bb      	str	r3, [r7, #8]
 8004fd6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 80b6 	beq.w	8005154 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ff4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 8145 	beq.w	8005288 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005002:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005006:	429a      	cmp	r2, r3
 8005008:	f080 813e 	bcs.w	8005288 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005012:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	2b20      	cmp	r3, #32
 800501c:	f000 8088 	beq.w	8005130 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	330c      	adds	r3, #12
 8005026:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800502e:	e853 3f00 	ldrex	r3, [r3]
 8005032:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005036:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800503a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800503e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	330c      	adds	r3, #12
 8005048:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800504c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005050:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005054:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005058:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800505c:	e841 2300 	strex	r3, r2, [r1]
 8005060:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005064:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1d9      	bne.n	8005020 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	3314      	adds	r3, #20
 8005072:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005074:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005076:	e853 3f00 	ldrex	r3, [r3]
 800507a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800507c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800507e:	f023 0301 	bic.w	r3, r3, #1
 8005082:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	3314      	adds	r3, #20
 800508c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005090:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005094:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005096:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005098:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800509c:	e841 2300 	strex	r3, r2, [r1]
 80050a0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80050a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1e1      	bne.n	800506c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3314      	adds	r3, #20
 80050ae:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050b2:	e853 3f00 	ldrex	r3, [r3]
 80050b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80050b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	3314      	adds	r3, #20
 80050c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80050cc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050ce:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80050d2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80050d4:	e841 2300 	strex	r3, r2, [r1]
 80050d8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80050da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1e3      	bne.n	80050a8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	330c      	adds	r3, #12
 80050f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050f8:	e853 3f00 	ldrex	r3, [r3]
 80050fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80050fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005100:	f023 0310 	bic.w	r3, r3, #16
 8005104:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	330c      	adds	r3, #12
 800510e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005112:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005114:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005116:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005118:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800511a:	e841 2300 	strex	r3, r2, [r1]
 800511e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005120:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1e3      	bne.n	80050ee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800512a:	4618      	mov	r0, r3
 800512c:	f7fd faf7 	bl	800271e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800513e:	b29b      	uxth	r3, r3
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	b29b      	uxth	r3, r3
 8005144:	4619      	mov	r1, r3
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f8ad 	bl	80052a6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800514c:	e09c      	b.n	8005288 <HAL_UART_IRQHandler+0x518>
 800514e:	bf00      	nop
 8005150:	080054e5 	.word	0x080054e5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800515c:	b29b      	uxth	r3, r3
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005168:	b29b      	uxth	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	f000 808e 	beq.w	800528c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005170:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 8089 	beq.w	800528c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	330c      	adds	r3, #12
 8005180:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005184:	e853 3f00 	ldrex	r3, [r3]
 8005188:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800518a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800518c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005190:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	330c      	adds	r3, #12
 800519a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800519e:	647a      	str	r2, [r7, #68]	@ 0x44
 80051a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051a6:	e841 2300 	strex	r3, r2, [r1]
 80051aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e3      	bne.n	800517a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3314      	adds	r3, #20
 80051b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	e853 3f00 	ldrex	r3, [r3]
 80051c0:	623b      	str	r3, [r7, #32]
   return(result);
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	f023 0301 	bic.w	r3, r3, #1
 80051c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3314      	adds	r3, #20
 80051d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80051d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80051d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051de:	e841 2300 	strex	r3, r2, [r1]
 80051e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1e3      	bne.n	80051b2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	330c      	adds	r3, #12
 80051fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	e853 3f00 	ldrex	r3, [r3]
 8005206:	60fb      	str	r3, [r7, #12]
   return(result);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 0310 	bic.w	r3, r3, #16
 800520e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	330c      	adds	r3, #12
 8005218:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800521c:	61fa      	str	r2, [r7, #28]
 800521e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005220:	69b9      	ldr	r1, [r7, #24]
 8005222:	69fa      	ldr	r2, [r7, #28]
 8005224:	e841 2300 	strex	r3, r2, [r1]
 8005228:	617b      	str	r3, [r7, #20]
   return(result);
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1e3      	bne.n	80051f8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2202      	movs	r2, #2
 8005234:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005236:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800523a:	4619      	mov	r1, r3
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f832 	bl	80052a6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005242:	e023      	b.n	800528c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005248:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800524c:	2b00      	cmp	r3, #0
 800524e:	d009      	beq.n	8005264 <HAL_UART_IRQHandler+0x4f4>
 8005250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005258:	2b00      	cmp	r3, #0
 800525a:	d003      	beq.n	8005264 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f955 	bl	800550c <UART_Transmit_IT>
    return;
 8005262:	e014      	b.n	800528e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00e      	beq.n	800528e <HAL_UART_IRQHandler+0x51e>
 8005270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005278:	2b00      	cmp	r3, #0
 800527a:	d008      	beq.n	800528e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f994 	bl	80055aa <UART_EndTransmit_IT>
    return;
 8005282:	e004      	b.n	800528e <HAL_UART_IRQHandler+0x51e>
    return;
 8005284:	bf00      	nop
 8005286:	e002      	b.n	800528e <HAL_UART_IRQHandler+0x51e>
      return;
 8005288:	bf00      	nop
 800528a:	e000      	b.n	800528e <HAL_UART_IRQHandler+0x51e>
      return;
 800528c:	bf00      	nop
  }
}
 800528e:	37e8      	adds	r7, #232	@ 0xe8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bc80      	pop	{r7}
 80052a4:	4770      	bx	lr

080052a6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	460b      	mov	r3, r1
 80052b0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052b2:	bf00      	nop
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bc80      	pop	{r7}
 80052ba:	4770      	bx	lr

080052bc <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bc80      	pop	{r7}
 80052d0:	4770      	bx	lr

080052d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b090      	sub	sp, #64	@ 0x40
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	603b      	str	r3, [r7, #0]
 80052de:	4613      	mov	r3, r2
 80052e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e2:	e050      	b.n	8005386 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ea:	d04c      	beq.n	8005386 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80052ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d007      	beq.n	8005302 <UART_WaitOnFlagUntilTimeout+0x30>
 80052f2:	f7fd f8d9 	bl	80024a8 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052fe:	429a      	cmp	r2, r3
 8005300:	d241      	bcs.n	8005386 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	330c      	adds	r3, #12
 8005308:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530c:	e853 3f00 	ldrex	r3, [r3]
 8005310:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005314:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005318:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	330c      	adds	r3, #12
 8005320:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005322:	637a      	str	r2, [r7, #52]	@ 0x34
 8005324:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005326:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005328:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800532a:	e841 2300 	strex	r3, r2, [r1]
 800532e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1e5      	bne.n	8005302 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3314      	adds	r3, #20
 800533c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	e853 3f00 	ldrex	r3, [r3]
 8005344:	613b      	str	r3, [r7, #16]
   return(result);
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f023 0301 	bic.w	r3, r3, #1
 800534c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3314      	adds	r3, #20
 8005354:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005356:	623a      	str	r2, [r7, #32]
 8005358:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535a:	69f9      	ldr	r1, [r7, #28]
 800535c:	6a3a      	ldr	r2, [r7, #32]
 800535e:	e841 2300 	strex	r3, r2, [r1]
 8005362:	61bb      	str	r3, [r7, #24]
   return(result);
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1e5      	bne.n	8005336 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2220      	movs	r2, #32
 800536e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2220      	movs	r2, #32
 8005376:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e00f      	b.n	80053a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	4013      	ands	r3, r2
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	429a      	cmp	r2, r3
 8005394:	bf0c      	ite	eq
 8005396:	2301      	moveq	r3, #1
 8005398:	2300      	movne	r3, #0
 800539a:	b2db      	uxtb	r3, r3
 800539c:	461a      	mov	r2, r3
 800539e:	79fb      	ldrb	r3, [r7, #7]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d09f      	beq.n	80052e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3740      	adds	r7, #64	@ 0x40
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b085      	sub	sp, #20
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	4613      	mov	r3, r2
 80053ba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	88fa      	ldrh	r2, [r7, #6]
 80053c6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	88fa      	ldrh	r2, [r7, #6]
 80053cc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2222      	movs	r2, #34	@ 0x22
 80053d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d007      	beq.n	80053f4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68da      	ldr	r2, [r3, #12]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053f2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695a      	ldr	r2, [r3, #20]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0201 	orr.w	r2, r2, #1
 8005402:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0220 	orr.w	r2, r2, #32
 8005412:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	bc80      	pop	{r7}
 800541e:	4770      	bx	lr

08005420 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005420:	b480      	push	{r7}
 8005422:	b095      	sub	sp, #84	@ 0x54
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	330c      	adds	r3, #12
 800542e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005432:	e853 3f00 	ldrex	r3, [r3]
 8005436:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800543e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	330c      	adds	r3, #12
 8005446:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005448:	643a      	str	r2, [r7, #64]	@ 0x40
 800544a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800544e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005450:	e841 2300 	strex	r3, r2, [r1]
 8005454:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1e5      	bne.n	8005428 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3314      	adds	r3, #20
 8005462:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	e853 3f00 	ldrex	r3, [r3]
 800546a:	61fb      	str	r3, [r7, #28]
   return(result);
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	f023 0301 	bic.w	r3, r3, #1
 8005472:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3314      	adds	r3, #20
 800547a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800547c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800547e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005482:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005484:	e841 2300 	strex	r3, r2, [r1]
 8005488:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800548a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e5      	bne.n	800545c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005494:	2b01      	cmp	r3, #1
 8005496:	d119      	bne.n	80054cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	330c      	adds	r3, #12
 800549e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	e853 3f00 	ldrex	r3, [r3]
 80054a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f023 0310 	bic.w	r3, r3, #16
 80054ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	330c      	adds	r3, #12
 80054b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054b8:	61ba      	str	r2, [r7, #24]
 80054ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	6979      	ldr	r1, [r7, #20]
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	e841 2300 	strex	r3, r2, [r1]
 80054c4:	613b      	str	r3, [r7, #16]
   return(result);
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e5      	bne.n	8005498 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2220      	movs	r2, #32
 80054d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80054da:	bf00      	nop
 80054dc:	3754      	adds	r7, #84	@ 0x54
 80054de:	46bd      	mov	sp, r7
 80054e0:	bc80      	pop	{r7}
 80054e2:	4770      	bx	lr

080054e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f7fc f9e0 	bl	80018c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005504:	bf00      	nop
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b21      	cmp	r3, #33	@ 0x21
 800551e:	d13e      	bne.n	800559e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005528:	d114      	bne.n	8005554 <UART_Transmit_IT+0x48>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d110      	bne.n	8005554 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	461a      	mov	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005546:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	1c9a      	adds	r2, r3, #2
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	621a      	str	r2, [r3, #32]
 8005552:	e008      	b.n	8005566 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	1c59      	adds	r1, r3, #1
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	6211      	str	r1, [r2, #32]
 800555e:	781a      	ldrb	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800556a:	b29b      	uxth	r3, r3
 800556c:	3b01      	subs	r3, #1
 800556e:	b29b      	uxth	r3, r3
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	4619      	mov	r1, r3
 8005574:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10f      	bne.n	800559a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68da      	ldr	r2, [r3, #12]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005588:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68da      	ldr	r2, [r3, #12]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005598:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800559a:	2300      	movs	r3, #0
 800559c:	e000      	b.n	80055a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800559e:	2302      	movs	r3, #2
  }
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr

080055aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b082      	sub	sp, #8
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7ff fe62 	bl	8005294 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b08c      	sub	sp, #48	@ 0x30
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b22      	cmp	r3, #34	@ 0x22
 80055ec:	f040 80ae 	bne.w	800574c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055f8:	d117      	bne.n	800562a <UART_Receive_IT+0x50>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d113      	bne.n	800562a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005602:	2300      	movs	r3, #0
 8005604:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	b29b      	uxth	r3, r3
 8005614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005618:	b29a      	uxth	r2, r3
 800561a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005622:	1c9a      	adds	r2, r3, #2
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	629a      	str	r2, [r3, #40]	@ 0x28
 8005628:	e026      	b.n	8005678 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800562e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005630:	2300      	movs	r3, #0
 8005632:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800563c:	d007      	beq.n	800564e <UART_Receive_IT+0x74>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10a      	bne.n	800565c <UART_Receive_IT+0x82>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d106      	bne.n	800565c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	b2da      	uxtb	r2, r3
 8005656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005658:	701a      	strb	r2, [r3, #0]
 800565a:	e008      	b.n	800566e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	b2db      	uxtb	r3, r3
 8005664:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005668:	b2da      	uxtb	r2, r3
 800566a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800566c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800567c:	b29b      	uxth	r3, r3
 800567e:	3b01      	subs	r3, #1
 8005680:	b29b      	uxth	r3, r3
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	4619      	mov	r1, r3
 8005686:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005688:	2b00      	cmp	r3, #0
 800568a:	d15d      	bne.n	8005748 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68da      	ldr	r2, [r3, #12]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 0220 	bic.w	r2, r2, #32
 800569a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	695a      	ldr	r2, [r3, #20]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0201 	bic.w	r2, r2, #1
 80056ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2220      	movs	r2, #32
 80056c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d135      	bne.n	800573e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	330c      	adds	r3, #12
 80056de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	e853 3f00 	ldrex	r3, [r3]
 80056e6:	613b      	str	r3, [r7, #16]
   return(result);
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	f023 0310 	bic.w	r3, r3, #16
 80056ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	330c      	adds	r3, #12
 80056f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056f8:	623a      	str	r2, [r7, #32]
 80056fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fc:	69f9      	ldr	r1, [r7, #28]
 80056fe:	6a3a      	ldr	r2, [r7, #32]
 8005700:	e841 2300 	strex	r3, r2, [r1]
 8005704:	61bb      	str	r3, [r7, #24]
   return(result);
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1e5      	bne.n	80056d8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0310 	and.w	r3, r3, #16
 8005716:	2b10      	cmp	r3, #16
 8005718:	d10a      	bne.n	8005730 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800571a:	2300      	movs	r3, #0
 800571c:	60fb      	str	r3, [r7, #12]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	60fb      	str	r3, [r7, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	60fb      	str	r3, [r7, #12]
 800572e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005734:	4619      	mov	r1, r3
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7ff fdb5 	bl	80052a6 <HAL_UARTEx_RxEventCallback>
 800573c:	e002      	b.n	8005744 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7fb ff96 	bl	8001670 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005744:	2300      	movs	r3, #0
 8005746:	e002      	b.n	800574e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005748:	2300      	movs	r3, #0
 800574a:	e000      	b.n	800574e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800574c:	2302      	movs	r3, #2
  }
}
 800574e:	4618      	mov	r0, r3
 8005750:	3730      	adds	r7, #48	@ 0x30
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
	...

08005758 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68da      	ldr	r2, [r3, #12]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689a      	ldr	r2, [r3, #8]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	431a      	orrs	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	4313      	orrs	r3, r2
 8005786:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005792:	f023 030c 	bic.w	r3, r3, #12
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	6812      	ldr	r2, [r2, #0]
 800579a:	68b9      	ldr	r1, [r7, #8]
 800579c:	430b      	orrs	r3, r1
 800579e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699a      	ldr	r2, [r3, #24]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a2c      	ldr	r2, [pc, #176]	@ (800586c <UART_SetConfig+0x114>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d103      	bne.n	80057c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80057c0:	f7fe fbd6 	bl	8003f70 <HAL_RCC_GetPCLK2Freq>
 80057c4:	60f8      	str	r0, [r7, #12]
 80057c6:	e002      	b.n	80057ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80057c8:	f7fe fbbe 	bl	8003f48 <HAL_RCC_GetPCLK1Freq>
 80057cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	4613      	mov	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4413      	add	r3, r2
 80057d6:	009a      	lsls	r2, r3, #2
 80057d8:	441a      	add	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e4:	4a22      	ldr	r2, [pc, #136]	@ (8005870 <UART_SetConfig+0x118>)
 80057e6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ea:	095b      	lsrs	r3, r3, #5
 80057ec:	0119      	lsls	r1, r3, #4
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4613      	mov	r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	4413      	add	r3, r2
 80057f6:	009a      	lsls	r2, r3, #2
 80057f8:	441a      	add	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	fbb2 f2f3 	udiv	r2, r2, r3
 8005804:	4b1a      	ldr	r3, [pc, #104]	@ (8005870 <UART_SetConfig+0x118>)
 8005806:	fba3 0302 	umull	r0, r3, r3, r2
 800580a:	095b      	lsrs	r3, r3, #5
 800580c:	2064      	movs	r0, #100	@ 0x64
 800580e:	fb00 f303 	mul.w	r3, r0, r3
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	011b      	lsls	r3, r3, #4
 8005816:	3332      	adds	r3, #50	@ 0x32
 8005818:	4a15      	ldr	r2, [pc, #84]	@ (8005870 <UART_SetConfig+0x118>)
 800581a:	fba2 2303 	umull	r2, r3, r2, r3
 800581e:	095b      	lsrs	r3, r3, #5
 8005820:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005824:	4419      	add	r1, r3
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	009a      	lsls	r2, r3, #2
 8005830:	441a      	add	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	fbb2 f2f3 	udiv	r2, r2, r3
 800583c:	4b0c      	ldr	r3, [pc, #48]	@ (8005870 <UART_SetConfig+0x118>)
 800583e:	fba3 0302 	umull	r0, r3, r3, r2
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	2064      	movs	r0, #100	@ 0x64
 8005846:	fb00 f303 	mul.w	r3, r0, r3
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	011b      	lsls	r3, r3, #4
 800584e:	3332      	adds	r3, #50	@ 0x32
 8005850:	4a07      	ldr	r2, [pc, #28]	@ (8005870 <UART_SetConfig+0x118>)
 8005852:	fba2 2303 	umull	r2, r3, r2, r3
 8005856:	095b      	lsrs	r3, r3, #5
 8005858:	f003 020f 	and.w	r2, r3, #15
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	440a      	add	r2, r1
 8005862:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005864:	bf00      	nop
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	40013800 	.word	0x40013800
 8005870:	51eb851f 	.word	0x51eb851f

08005874 <__cvt>:
 8005874:	2b00      	cmp	r3, #0
 8005876:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800587a:	461d      	mov	r5, r3
 800587c:	bfbb      	ittet	lt
 800587e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005882:	461d      	movlt	r5, r3
 8005884:	2300      	movge	r3, #0
 8005886:	232d      	movlt	r3, #45	@ 0x2d
 8005888:	b088      	sub	sp, #32
 800588a:	4614      	mov	r4, r2
 800588c:	bfb8      	it	lt
 800588e:	4614      	movlt	r4, r2
 8005890:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005892:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005894:	7013      	strb	r3, [r2, #0]
 8005896:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005898:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800589c:	f023 0820 	bic.w	r8, r3, #32
 80058a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80058a4:	d005      	beq.n	80058b2 <__cvt+0x3e>
 80058a6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80058aa:	d100      	bne.n	80058ae <__cvt+0x3a>
 80058ac:	3601      	adds	r6, #1
 80058ae:	2302      	movs	r3, #2
 80058b0:	e000      	b.n	80058b4 <__cvt+0x40>
 80058b2:	2303      	movs	r3, #3
 80058b4:	aa07      	add	r2, sp, #28
 80058b6:	9204      	str	r2, [sp, #16]
 80058b8:	aa06      	add	r2, sp, #24
 80058ba:	e9cd a202 	strd	sl, r2, [sp, #8]
 80058be:	e9cd 3600 	strd	r3, r6, [sp]
 80058c2:	4622      	mov	r2, r4
 80058c4:	462b      	mov	r3, r5
 80058c6:	f000 fe6f 	bl	80065a8 <_dtoa_r>
 80058ca:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80058ce:	4607      	mov	r7, r0
 80058d0:	d119      	bne.n	8005906 <__cvt+0x92>
 80058d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80058d4:	07db      	lsls	r3, r3, #31
 80058d6:	d50e      	bpl.n	80058f6 <__cvt+0x82>
 80058d8:	eb00 0906 	add.w	r9, r0, r6
 80058dc:	2200      	movs	r2, #0
 80058de:	2300      	movs	r3, #0
 80058e0:	4620      	mov	r0, r4
 80058e2:	4629      	mov	r1, r5
 80058e4:	f7fb f860 	bl	80009a8 <__aeabi_dcmpeq>
 80058e8:	b108      	cbz	r0, 80058ee <__cvt+0x7a>
 80058ea:	f8cd 901c 	str.w	r9, [sp, #28]
 80058ee:	2230      	movs	r2, #48	@ 0x30
 80058f0:	9b07      	ldr	r3, [sp, #28]
 80058f2:	454b      	cmp	r3, r9
 80058f4:	d31e      	bcc.n	8005934 <__cvt+0xc0>
 80058f6:	4638      	mov	r0, r7
 80058f8:	9b07      	ldr	r3, [sp, #28]
 80058fa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80058fc:	1bdb      	subs	r3, r3, r7
 80058fe:	6013      	str	r3, [r2, #0]
 8005900:	b008      	add	sp, #32
 8005902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005906:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800590a:	eb00 0906 	add.w	r9, r0, r6
 800590e:	d1e5      	bne.n	80058dc <__cvt+0x68>
 8005910:	7803      	ldrb	r3, [r0, #0]
 8005912:	2b30      	cmp	r3, #48	@ 0x30
 8005914:	d10a      	bne.n	800592c <__cvt+0xb8>
 8005916:	2200      	movs	r2, #0
 8005918:	2300      	movs	r3, #0
 800591a:	4620      	mov	r0, r4
 800591c:	4629      	mov	r1, r5
 800591e:	f7fb f843 	bl	80009a8 <__aeabi_dcmpeq>
 8005922:	b918      	cbnz	r0, 800592c <__cvt+0xb8>
 8005924:	f1c6 0601 	rsb	r6, r6, #1
 8005928:	f8ca 6000 	str.w	r6, [sl]
 800592c:	f8da 3000 	ldr.w	r3, [sl]
 8005930:	4499      	add	r9, r3
 8005932:	e7d3      	b.n	80058dc <__cvt+0x68>
 8005934:	1c59      	adds	r1, r3, #1
 8005936:	9107      	str	r1, [sp, #28]
 8005938:	701a      	strb	r2, [r3, #0]
 800593a:	e7d9      	b.n	80058f0 <__cvt+0x7c>

0800593c <__exponent>:
 800593c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800593e:	2900      	cmp	r1, #0
 8005940:	bfb6      	itet	lt
 8005942:	232d      	movlt	r3, #45	@ 0x2d
 8005944:	232b      	movge	r3, #43	@ 0x2b
 8005946:	4249      	neglt	r1, r1
 8005948:	2909      	cmp	r1, #9
 800594a:	7002      	strb	r2, [r0, #0]
 800594c:	7043      	strb	r3, [r0, #1]
 800594e:	dd29      	ble.n	80059a4 <__exponent+0x68>
 8005950:	f10d 0307 	add.w	r3, sp, #7
 8005954:	461d      	mov	r5, r3
 8005956:	270a      	movs	r7, #10
 8005958:	fbb1 f6f7 	udiv	r6, r1, r7
 800595c:	461a      	mov	r2, r3
 800595e:	fb07 1416 	mls	r4, r7, r6, r1
 8005962:	3430      	adds	r4, #48	@ 0x30
 8005964:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005968:	460c      	mov	r4, r1
 800596a:	2c63      	cmp	r4, #99	@ 0x63
 800596c:	4631      	mov	r1, r6
 800596e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005972:	dcf1      	bgt.n	8005958 <__exponent+0x1c>
 8005974:	3130      	adds	r1, #48	@ 0x30
 8005976:	1e94      	subs	r4, r2, #2
 8005978:	f803 1c01 	strb.w	r1, [r3, #-1]
 800597c:	4623      	mov	r3, r4
 800597e:	1c41      	adds	r1, r0, #1
 8005980:	42ab      	cmp	r3, r5
 8005982:	d30a      	bcc.n	800599a <__exponent+0x5e>
 8005984:	f10d 0309 	add.w	r3, sp, #9
 8005988:	1a9b      	subs	r3, r3, r2
 800598a:	42ac      	cmp	r4, r5
 800598c:	bf88      	it	hi
 800598e:	2300      	movhi	r3, #0
 8005990:	3302      	adds	r3, #2
 8005992:	4403      	add	r3, r0
 8005994:	1a18      	subs	r0, r3, r0
 8005996:	b003      	add	sp, #12
 8005998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800599a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800599e:	f801 6f01 	strb.w	r6, [r1, #1]!
 80059a2:	e7ed      	b.n	8005980 <__exponent+0x44>
 80059a4:	2330      	movs	r3, #48	@ 0x30
 80059a6:	3130      	adds	r1, #48	@ 0x30
 80059a8:	7083      	strb	r3, [r0, #2]
 80059aa:	70c1      	strb	r1, [r0, #3]
 80059ac:	1d03      	adds	r3, r0, #4
 80059ae:	e7f1      	b.n	8005994 <__exponent+0x58>

080059b0 <_printf_float>:
 80059b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b4:	b091      	sub	sp, #68	@ 0x44
 80059b6:	460c      	mov	r4, r1
 80059b8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80059bc:	4616      	mov	r6, r2
 80059be:	461f      	mov	r7, r3
 80059c0:	4605      	mov	r5, r0
 80059c2:	f000 fce1 	bl	8006388 <_localeconv_r>
 80059c6:	6803      	ldr	r3, [r0, #0]
 80059c8:	4618      	mov	r0, r3
 80059ca:	9308      	str	r3, [sp, #32]
 80059cc:	f7fa fbc0 	bl	8000150 <strlen>
 80059d0:	2300      	movs	r3, #0
 80059d2:	930e      	str	r3, [sp, #56]	@ 0x38
 80059d4:	f8d8 3000 	ldr.w	r3, [r8]
 80059d8:	9009      	str	r0, [sp, #36]	@ 0x24
 80059da:	3307      	adds	r3, #7
 80059dc:	f023 0307 	bic.w	r3, r3, #7
 80059e0:	f103 0208 	add.w	r2, r3, #8
 80059e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80059e8:	f8d4 b000 	ldr.w	fp, [r4]
 80059ec:	f8c8 2000 	str.w	r2, [r8]
 80059f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80059f4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80059f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059fa:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80059fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005a02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005a06:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005a0a:	4b9c      	ldr	r3, [pc, #624]	@ (8005c7c <_printf_float+0x2cc>)
 8005a0c:	f7fa fffe 	bl	8000a0c <__aeabi_dcmpun>
 8005a10:	bb70      	cbnz	r0, 8005a70 <_printf_float+0xc0>
 8005a12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005a16:	f04f 32ff 	mov.w	r2, #4294967295
 8005a1a:	4b98      	ldr	r3, [pc, #608]	@ (8005c7c <_printf_float+0x2cc>)
 8005a1c:	f7fa ffd8 	bl	80009d0 <__aeabi_dcmple>
 8005a20:	bb30      	cbnz	r0, 8005a70 <_printf_float+0xc0>
 8005a22:	2200      	movs	r2, #0
 8005a24:	2300      	movs	r3, #0
 8005a26:	4640      	mov	r0, r8
 8005a28:	4649      	mov	r1, r9
 8005a2a:	f7fa ffc7 	bl	80009bc <__aeabi_dcmplt>
 8005a2e:	b110      	cbz	r0, 8005a36 <_printf_float+0x86>
 8005a30:	232d      	movs	r3, #45	@ 0x2d
 8005a32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a36:	4a92      	ldr	r2, [pc, #584]	@ (8005c80 <_printf_float+0x2d0>)
 8005a38:	4b92      	ldr	r3, [pc, #584]	@ (8005c84 <_printf_float+0x2d4>)
 8005a3a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005a3e:	bf8c      	ite	hi
 8005a40:	4690      	movhi	r8, r2
 8005a42:	4698      	movls	r8, r3
 8005a44:	2303      	movs	r3, #3
 8005a46:	f04f 0900 	mov.w	r9, #0
 8005a4a:	6123      	str	r3, [r4, #16]
 8005a4c:	f02b 0304 	bic.w	r3, fp, #4
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	4633      	mov	r3, r6
 8005a54:	4621      	mov	r1, r4
 8005a56:	4628      	mov	r0, r5
 8005a58:	9700      	str	r7, [sp, #0]
 8005a5a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005a5c:	f000 f9d4 	bl	8005e08 <_printf_common>
 8005a60:	3001      	adds	r0, #1
 8005a62:	f040 8090 	bne.w	8005b86 <_printf_float+0x1d6>
 8005a66:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6a:	b011      	add	sp, #68	@ 0x44
 8005a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a70:	4642      	mov	r2, r8
 8005a72:	464b      	mov	r3, r9
 8005a74:	4640      	mov	r0, r8
 8005a76:	4649      	mov	r1, r9
 8005a78:	f7fa ffc8 	bl	8000a0c <__aeabi_dcmpun>
 8005a7c:	b148      	cbz	r0, 8005a92 <_printf_float+0xe2>
 8005a7e:	464b      	mov	r3, r9
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	bfb8      	it	lt
 8005a84:	232d      	movlt	r3, #45	@ 0x2d
 8005a86:	4a80      	ldr	r2, [pc, #512]	@ (8005c88 <_printf_float+0x2d8>)
 8005a88:	bfb8      	it	lt
 8005a8a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005a8e:	4b7f      	ldr	r3, [pc, #508]	@ (8005c8c <_printf_float+0x2dc>)
 8005a90:	e7d3      	b.n	8005a3a <_printf_float+0x8a>
 8005a92:	6863      	ldr	r3, [r4, #4]
 8005a94:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005a98:	1c5a      	adds	r2, r3, #1
 8005a9a:	d13f      	bne.n	8005b1c <_printf_float+0x16c>
 8005a9c:	2306      	movs	r3, #6
 8005a9e:	6063      	str	r3, [r4, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005aa6:	6023      	str	r3, [r4, #0]
 8005aa8:	9206      	str	r2, [sp, #24]
 8005aaa:	aa0e      	add	r2, sp, #56	@ 0x38
 8005aac:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005ab0:	aa0d      	add	r2, sp, #52	@ 0x34
 8005ab2:	9203      	str	r2, [sp, #12]
 8005ab4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005ab8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005abc:	6863      	ldr	r3, [r4, #4]
 8005abe:	4642      	mov	r2, r8
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	464b      	mov	r3, r9
 8005ac6:	910a      	str	r1, [sp, #40]	@ 0x28
 8005ac8:	f7ff fed4 	bl	8005874 <__cvt>
 8005acc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005ace:	4680      	mov	r8, r0
 8005ad0:	2947      	cmp	r1, #71	@ 0x47
 8005ad2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005ad4:	d128      	bne.n	8005b28 <_printf_float+0x178>
 8005ad6:	1cc8      	adds	r0, r1, #3
 8005ad8:	db02      	blt.n	8005ae0 <_printf_float+0x130>
 8005ada:	6863      	ldr	r3, [r4, #4]
 8005adc:	4299      	cmp	r1, r3
 8005ade:	dd40      	ble.n	8005b62 <_printf_float+0x1b2>
 8005ae0:	f1aa 0a02 	sub.w	sl, sl, #2
 8005ae4:	fa5f fa8a 	uxtb.w	sl, sl
 8005ae8:	4652      	mov	r2, sl
 8005aea:	3901      	subs	r1, #1
 8005aec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005af0:	910d      	str	r1, [sp, #52]	@ 0x34
 8005af2:	f7ff ff23 	bl	800593c <__exponent>
 8005af6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005af8:	4681      	mov	r9, r0
 8005afa:	1813      	adds	r3, r2, r0
 8005afc:	2a01      	cmp	r2, #1
 8005afe:	6123      	str	r3, [r4, #16]
 8005b00:	dc02      	bgt.n	8005b08 <_printf_float+0x158>
 8005b02:	6822      	ldr	r2, [r4, #0]
 8005b04:	07d2      	lsls	r2, r2, #31
 8005b06:	d501      	bpl.n	8005b0c <_printf_float+0x15c>
 8005b08:	3301      	adds	r3, #1
 8005b0a:	6123      	str	r3, [r4, #16]
 8005b0c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d09e      	beq.n	8005a52 <_printf_float+0xa2>
 8005b14:	232d      	movs	r3, #45	@ 0x2d
 8005b16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b1a:	e79a      	b.n	8005a52 <_printf_float+0xa2>
 8005b1c:	2947      	cmp	r1, #71	@ 0x47
 8005b1e:	d1bf      	bne.n	8005aa0 <_printf_float+0xf0>
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1bd      	bne.n	8005aa0 <_printf_float+0xf0>
 8005b24:	2301      	movs	r3, #1
 8005b26:	e7ba      	b.n	8005a9e <_printf_float+0xee>
 8005b28:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005b2c:	d9dc      	bls.n	8005ae8 <_printf_float+0x138>
 8005b2e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005b32:	d118      	bne.n	8005b66 <_printf_float+0x1b6>
 8005b34:	2900      	cmp	r1, #0
 8005b36:	6863      	ldr	r3, [r4, #4]
 8005b38:	dd0b      	ble.n	8005b52 <_printf_float+0x1a2>
 8005b3a:	6121      	str	r1, [r4, #16]
 8005b3c:	b913      	cbnz	r3, 8005b44 <_printf_float+0x194>
 8005b3e:	6822      	ldr	r2, [r4, #0]
 8005b40:	07d0      	lsls	r0, r2, #31
 8005b42:	d502      	bpl.n	8005b4a <_printf_float+0x19a>
 8005b44:	3301      	adds	r3, #1
 8005b46:	440b      	add	r3, r1
 8005b48:	6123      	str	r3, [r4, #16]
 8005b4a:	f04f 0900 	mov.w	r9, #0
 8005b4e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005b50:	e7dc      	b.n	8005b0c <_printf_float+0x15c>
 8005b52:	b913      	cbnz	r3, 8005b5a <_printf_float+0x1aa>
 8005b54:	6822      	ldr	r2, [r4, #0]
 8005b56:	07d2      	lsls	r2, r2, #31
 8005b58:	d501      	bpl.n	8005b5e <_printf_float+0x1ae>
 8005b5a:	3302      	adds	r3, #2
 8005b5c:	e7f4      	b.n	8005b48 <_printf_float+0x198>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e7f2      	b.n	8005b48 <_printf_float+0x198>
 8005b62:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005b66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b68:	4299      	cmp	r1, r3
 8005b6a:	db05      	blt.n	8005b78 <_printf_float+0x1c8>
 8005b6c:	6823      	ldr	r3, [r4, #0]
 8005b6e:	6121      	str	r1, [r4, #16]
 8005b70:	07d8      	lsls	r0, r3, #31
 8005b72:	d5ea      	bpl.n	8005b4a <_printf_float+0x19a>
 8005b74:	1c4b      	adds	r3, r1, #1
 8005b76:	e7e7      	b.n	8005b48 <_printf_float+0x198>
 8005b78:	2900      	cmp	r1, #0
 8005b7a:	bfcc      	ite	gt
 8005b7c:	2201      	movgt	r2, #1
 8005b7e:	f1c1 0202 	rsble	r2, r1, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	e7e0      	b.n	8005b48 <_printf_float+0x198>
 8005b86:	6823      	ldr	r3, [r4, #0]
 8005b88:	055a      	lsls	r2, r3, #21
 8005b8a:	d407      	bmi.n	8005b9c <_printf_float+0x1ec>
 8005b8c:	6923      	ldr	r3, [r4, #16]
 8005b8e:	4642      	mov	r2, r8
 8005b90:	4631      	mov	r1, r6
 8005b92:	4628      	mov	r0, r5
 8005b94:	47b8      	blx	r7
 8005b96:	3001      	adds	r0, #1
 8005b98:	d12b      	bne.n	8005bf2 <_printf_float+0x242>
 8005b9a:	e764      	b.n	8005a66 <_printf_float+0xb6>
 8005b9c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ba0:	f240 80dc 	bls.w	8005d5c <_printf_float+0x3ac>
 8005ba4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005ba8:	2200      	movs	r2, #0
 8005baa:	2300      	movs	r3, #0
 8005bac:	f7fa fefc 	bl	80009a8 <__aeabi_dcmpeq>
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	d033      	beq.n	8005c1c <_printf_float+0x26c>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	4631      	mov	r1, r6
 8005bb8:	4628      	mov	r0, r5
 8005bba:	4a35      	ldr	r2, [pc, #212]	@ (8005c90 <_printf_float+0x2e0>)
 8005bbc:	47b8      	blx	r7
 8005bbe:	3001      	adds	r0, #1
 8005bc0:	f43f af51 	beq.w	8005a66 <_printf_float+0xb6>
 8005bc4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005bc8:	4543      	cmp	r3, r8
 8005bca:	db02      	blt.n	8005bd2 <_printf_float+0x222>
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	07d8      	lsls	r0, r3, #31
 8005bd0:	d50f      	bpl.n	8005bf2 <_printf_float+0x242>
 8005bd2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005bd6:	4631      	mov	r1, r6
 8005bd8:	4628      	mov	r0, r5
 8005bda:	47b8      	blx	r7
 8005bdc:	3001      	adds	r0, #1
 8005bde:	f43f af42 	beq.w	8005a66 <_printf_float+0xb6>
 8005be2:	f04f 0900 	mov.w	r9, #0
 8005be6:	f108 38ff 	add.w	r8, r8, #4294967295
 8005bea:	f104 0a1a 	add.w	sl, r4, #26
 8005bee:	45c8      	cmp	r8, r9
 8005bf0:	dc09      	bgt.n	8005c06 <_printf_float+0x256>
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	079b      	lsls	r3, r3, #30
 8005bf6:	f100 8102 	bmi.w	8005dfe <_printf_float+0x44e>
 8005bfa:	68e0      	ldr	r0, [r4, #12]
 8005bfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005bfe:	4298      	cmp	r0, r3
 8005c00:	bfb8      	it	lt
 8005c02:	4618      	movlt	r0, r3
 8005c04:	e731      	b.n	8005a6a <_printf_float+0xba>
 8005c06:	2301      	movs	r3, #1
 8005c08:	4652      	mov	r2, sl
 8005c0a:	4631      	mov	r1, r6
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	47b8      	blx	r7
 8005c10:	3001      	adds	r0, #1
 8005c12:	f43f af28 	beq.w	8005a66 <_printf_float+0xb6>
 8005c16:	f109 0901 	add.w	r9, r9, #1
 8005c1a:	e7e8      	b.n	8005bee <_printf_float+0x23e>
 8005c1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	dc38      	bgt.n	8005c94 <_printf_float+0x2e4>
 8005c22:	2301      	movs	r3, #1
 8005c24:	4631      	mov	r1, r6
 8005c26:	4628      	mov	r0, r5
 8005c28:	4a19      	ldr	r2, [pc, #100]	@ (8005c90 <_printf_float+0x2e0>)
 8005c2a:	47b8      	blx	r7
 8005c2c:	3001      	adds	r0, #1
 8005c2e:	f43f af1a 	beq.w	8005a66 <_printf_float+0xb6>
 8005c32:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005c36:	ea59 0303 	orrs.w	r3, r9, r3
 8005c3a:	d102      	bne.n	8005c42 <_printf_float+0x292>
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	07d9      	lsls	r1, r3, #31
 8005c40:	d5d7      	bpl.n	8005bf2 <_printf_float+0x242>
 8005c42:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005c46:	4631      	mov	r1, r6
 8005c48:	4628      	mov	r0, r5
 8005c4a:	47b8      	blx	r7
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	f43f af0a 	beq.w	8005a66 <_printf_float+0xb6>
 8005c52:	f04f 0a00 	mov.w	sl, #0
 8005c56:	f104 0b1a 	add.w	fp, r4, #26
 8005c5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c5c:	425b      	negs	r3, r3
 8005c5e:	4553      	cmp	r3, sl
 8005c60:	dc01      	bgt.n	8005c66 <_printf_float+0x2b6>
 8005c62:	464b      	mov	r3, r9
 8005c64:	e793      	b.n	8005b8e <_printf_float+0x1de>
 8005c66:	2301      	movs	r3, #1
 8005c68:	465a      	mov	r2, fp
 8005c6a:	4631      	mov	r1, r6
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	47b8      	blx	r7
 8005c70:	3001      	adds	r0, #1
 8005c72:	f43f aef8 	beq.w	8005a66 <_printf_float+0xb6>
 8005c76:	f10a 0a01 	add.w	sl, sl, #1
 8005c7a:	e7ee      	b.n	8005c5a <_printf_float+0x2aa>
 8005c7c:	7fefffff 	.word	0x7fefffff
 8005c80:	08008cf2 	.word	0x08008cf2
 8005c84:	08008cee 	.word	0x08008cee
 8005c88:	08008cfa 	.word	0x08008cfa
 8005c8c:	08008cf6 	.word	0x08008cf6
 8005c90:	08008cfe 	.word	0x08008cfe
 8005c94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c96:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005c9a:	4553      	cmp	r3, sl
 8005c9c:	bfa8      	it	ge
 8005c9e:	4653      	movge	r3, sl
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	4699      	mov	r9, r3
 8005ca4:	dc36      	bgt.n	8005d14 <_printf_float+0x364>
 8005ca6:	f04f 0b00 	mov.w	fp, #0
 8005caa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cae:	f104 021a 	add.w	r2, r4, #26
 8005cb2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005cb4:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cb6:	eba3 0309 	sub.w	r3, r3, r9
 8005cba:	455b      	cmp	r3, fp
 8005cbc:	dc31      	bgt.n	8005d22 <_printf_float+0x372>
 8005cbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005cc0:	459a      	cmp	sl, r3
 8005cc2:	dc3a      	bgt.n	8005d3a <_printf_float+0x38a>
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	07da      	lsls	r2, r3, #31
 8005cc8:	d437      	bmi.n	8005d3a <_printf_float+0x38a>
 8005cca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ccc:	ebaa 0903 	sub.w	r9, sl, r3
 8005cd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005cd2:	ebaa 0303 	sub.w	r3, sl, r3
 8005cd6:	4599      	cmp	r9, r3
 8005cd8:	bfa8      	it	ge
 8005cda:	4699      	movge	r9, r3
 8005cdc:	f1b9 0f00 	cmp.w	r9, #0
 8005ce0:	dc33      	bgt.n	8005d4a <_printf_float+0x39a>
 8005ce2:	f04f 0800 	mov.w	r8, #0
 8005ce6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cea:	f104 0b1a 	add.w	fp, r4, #26
 8005cee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005cf0:	ebaa 0303 	sub.w	r3, sl, r3
 8005cf4:	eba3 0309 	sub.w	r3, r3, r9
 8005cf8:	4543      	cmp	r3, r8
 8005cfa:	f77f af7a 	ble.w	8005bf2 <_printf_float+0x242>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	465a      	mov	r2, fp
 8005d02:	4631      	mov	r1, r6
 8005d04:	4628      	mov	r0, r5
 8005d06:	47b8      	blx	r7
 8005d08:	3001      	adds	r0, #1
 8005d0a:	f43f aeac 	beq.w	8005a66 <_printf_float+0xb6>
 8005d0e:	f108 0801 	add.w	r8, r8, #1
 8005d12:	e7ec      	b.n	8005cee <_printf_float+0x33e>
 8005d14:	4642      	mov	r2, r8
 8005d16:	4631      	mov	r1, r6
 8005d18:	4628      	mov	r0, r5
 8005d1a:	47b8      	blx	r7
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d1c2      	bne.n	8005ca6 <_printf_float+0x2f6>
 8005d20:	e6a1      	b.n	8005a66 <_printf_float+0xb6>
 8005d22:	2301      	movs	r3, #1
 8005d24:	4631      	mov	r1, r6
 8005d26:	4628      	mov	r0, r5
 8005d28:	920a      	str	r2, [sp, #40]	@ 0x28
 8005d2a:	47b8      	blx	r7
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	f43f ae9a 	beq.w	8005a66 <_printf_float+0xb6>
 8005d32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005d34:	f10b 0b01 	add.w	fp, fp, #1
 8005d38:	e7bb      	b.n	8005cb2 <_printf_float+0x302>
 8005d3a:	4631      	mov	r1, r6
 8005d3c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005d40:	4628      	mov	r0, r5
 8005d42:	47b8      	blx	r7
 8005d44:	3001      	adds	r0, #1
 8005d46:	d1c0      	bne.n	8005cca <_printf_float+0x31a>
 8005d48:	e68d      	b.n	8005a66 <_printf_float+0xb6>
 8005d4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005d4c:	464b      	mov	r3, r9
 8005d4e:	4631      	mov	r1, r6
 8005d50:	4628      	mov	r0, r5
 8005d52:	4442      	add	r2, r8
 8005d54:	47b8      	blx	r7
 8005d56:	3001      	adds	r0, #1
 8005d58:	d1c3      	bne.n	8005ce2 <_printf_float+0x332>
 8005d5a:	e684      	b.n	8005a66 <_printf_float+0xb6>
 8005d5c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005d60:	f1ba 0f01 	cmp.w	sl, #1
 8005d64:	dc01      	bgt.n	8005d6a <_printf_float+0x3ba>
 8005d66:	07db      	lsls	r3, r3, #31
 8005d68:	d536      	bpl.n	8005dd8 <_printf_float+0x428>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	4642      	mov	r2, r8
 8005d6e:	4631      	mov	r1, r6
 8005d70:	4628      	mov	r0, r5
 8005d72:	47b8      	blx	r7
 8005d74:	3001      	adds	r0, #1
 8005d76:	f43f ae76 	beq.w	8005a66 <_printf_float+0xb6>
 8005d7a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005d7e:	4631      	mov	r1, r6
 8005d80:	4628      	mov	r0, r5
 8005d82:	47b8      	blx	r7
 8005d84:	3001      	adds	r0, #1
 8005d86:	f43f ae6e 	beq.w	8005a66 <_printf_float+0xb6>
 8005d8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d8e:	2200      	movs	r2, #0
 8005d90:	2300      	movs	r3, #0
 8005d92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d96:	f7fa fe07 	bl	80009a8 <__aeabi_dcmpeq>
 8005d9a:	b9c0      	cbnz	r0, 8005dce <_printf_float+0x41e>
 8005d9c:	4653      	mov	r3, sl
 8005d9e:	f108 0201 	add.w	r2, r8, #1
 8005da2:	4631      	mov	r1, r6
 8005da4:	4628      	mov	r0, r5
 8005da6:	47b8      	blx	r7
 8005da8:	3001      	adds	r0, #1
 8005daa:	d10c      	bne.n	8005dc6 <_printf_float+0x416>
 8005dac:	e65b      	b.n	8005a66 <_printf_float+0xb6>
 8005dae:	2301      	movs	r3, #1
 8005db0:	465a      	mov	r2, fp
 8005db2:	4631      	mov	r1, r6
 8005db4:	4628      	mov	r0, r5
 8005db6:	47b8      	blx	r7
 8005db8:	3001      	adds	r0, #1
 8005dba:	f43f ae54 	beq.w	8005a66 <_printf_float+0xb6>
 8005dbe:	f108 0801 	add.w	r8, r8, #1
 8005dc2:	45d0      	cmp	r8, sl
 8005dc4:	dbf3      	blt.n	8005dae <_printf_float+0x3fe>
 8005dc6:	464b      	mov	r3, r9
 8005dc8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005dcc:	e6e0      	b.n	8005b90 <_printf_float+0x1e0>
 8005dce:	f04f 0800 	mov.w	r8, #0
 8005dd2:	f104 0b1a 	add.w	fp, r4, #26
 8005dd6:	e7f4      	b.n	8005dc2 <_printf_float+0x412>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	4642      	mov	r2, r8
 8005ddc:	e7e1      	b.n	8005da2 <_printf_float+0x3f2>
 8005dde:	2301      	movs	r3, #1
 8005de0:	464a      	mov	r2, r9
 8005de2:	4631      	mov	r1, r6
 8005de4:	4628      	mov	r0, r5
 8005de6:	47b8      	blx	r7
 8005de8:	3001      	adds	r0, #1
 8005dea:	f43f ae3c 	beq.w	8005a66 <_printf_float+0xb6>
 8005dee:	f108 0801 	add.w	r8, r8, #1
 8005df2:	68e3      	ldr	r3, [r4, #12]
 8005df4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005df6:	1a5b      	subs	r3, r3, r1
 8005df8:	4543      	cmp	r3, r8
 8005dfa:	dcf0      	bgt.n	8005dde <_printf_float+0x42e>
 8005dfc:	e6fd      	b.n	8005bfa <_printf_float+0x24a>
 8005dfe:	f04f 0800 	mov.w	r8, #0
 8005e02:	f104 0919 	add.w	r9, r4, #25
 8005e06:	e7f4      	b.n	8005df2 <_printf_float+0x442>

08005e08 <_printf_common>:
 8005e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e0c:	4616      	mov	r6, r2
 8005e0e:	4698      	mov	r8, r3
 8005e10:	688a      	ldr	r2, [r1, #8]
 8005e12:	690b      	ldr	r3, [r1, #16]
 8005e14:	4607      	mov	r7, r0
 8005e16:	4293      	cmp	r3, r2
 8005e18:	bfb8      	it	lt
 8005e1a:	4613      	movlt	r3, r2
 8005e1c:	6033      	str	r3, [r6, #0]
 8005e1e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e22:	460c      	mov	r4, r1
 8005e24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e28:	b10a      	cbz	r2, 8005e2e <_printf_common+0x26>
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	6033      	str	r3, [r6, #0]
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	0699      	lsls	r1, r3, #26
 8005e32:	bf42      	ittt	mi
 8005e34:	6833      	ldrmi	r3, [r6, #0]
 8005e36:	3302      	addmi	r3, #2
 8005e38:	6033      	strmi	r3, [r6, #0]
 8005e3a:	6825      	ldr	r5, [r4, #0]
 8005e3c:	f015 0506 	ands.w	r5, r5, #6
 8005e40:	d106      	bne.n	8005e50 <_printf_common+0x48>
 8005e42:	f104 0a19 	add.w	sl, r4, #25
 8005e46:	68e3      	ldr	r3, [r4, #12]
 8005e48:	6832      	ldr	r2, [r6, #0]
 8005e4a:	1a9b      	subs	r3, r3, r2
 8005e4c:	42ab      	cmp	r3, r5
 8005e4e:	dc2b      	bgt.n	8005ea8 <_printf_common+0xa0>
 8005e50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e54:	6822      	ldr	r2, [r4, #0]
 8005e56:	3b00      	subs	r3, #0
 8005e58:	bf18      	it	ne
 8005e5a:	2301      	movne	r3, #1
 8005e5c:	0692      	lsls	r2, r2, #26
 8005e5e:	d430      	bmi.n	8005ec2 <_printf_common+0xba>
 8005e60:	4641      	mov	r1, r8
 8005e62:	4638      	mov	r0, r7
 8005e64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e68:	47c8      	blx	r9
 8005e6a:	3001      	adds	r0, #1
 8005e6c:	d023      	beq.n	8005eb6 <_printf_common+0xae>
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	6922      	ldr	r2, [r4, #16]
 8005e72:	f003 0306 	and.w	r3, r3, #6
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	bf14      	ite	ne
 8005e7a:	2500      	movne	r5, #0
 8005e7c:	6833      	ldreq	r3, [r6, #0]
 8005e7e:	f04f 0600 	mov.w	r6, #0
 8005e82:	bf08      	it	eq
 8005e84:	68e5      	ldreq	r5, [r4, #12]
 8005e86:	f104 041a 	add.w	r4, r4, #26
 8005e8a:	bf08      	it	eq
 8005e8c:	1aed      	subeq	r5, r5, r3
 8005e8e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005e92:	bf08      	it	eq
 8005e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	bfc4      	itt	gt
 8005e9c:	1a9b      	subgt	r3, r3, r2
 8005e9e:	18ed      	addgt	r5, r5, r3
 8005ea0:	42b5      	cmp	r5, r6
 8005ea2:	d11a      	bne.n	8005eda <_printf_common+0xd2>
 8005ea4:	2000      	movs	r0, #0
 8005ea6:	e008      	b.n	8005eba <_printf_common+0xb2>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	4652      	mov	r2, sl
 8005eac:	4641      	mov	r1, r8
 8005eae:	4638      	mov	r0, r7
 8005eb0:	47c8      	blx	r9
 8005eb2:	3001      	adds	r0, #1
 8005eb4:	d103      	bne.n	8005ebe <_printf_common+0xb6>
 8005eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8005eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ebe:	3501      	adds	r5, #1
 8005ec0:	e7c1      	b.n	8005e46 <_printf_common+0x3e>
 8005ec2:	2030      	movs	r0, #48	@ 0x30
 8005ec4:	18e1      	adds	r1, r4, r3
 8005ec6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ed0:	4422      	add	r2, r4
 8005ed2:	3302      	adds	r3, #2
 8005ed4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ed8:	e7c2      	b.n	8005e60 <_printf_common+0x58>
 8005eda:	2301      	movs	r3, #1
 8005edc:	4622      	mov	r2, r4
 8005ede:	4641      	mov	r1, r8
 8005ee0:	4638      	mov	r0, r7
 8005ee2:	47c8      	blx	r9
 8005ee4:	3001      	adds	r0, #1
 8005ee6:	d0e6      	beq.n	8005eb6 <_printf_common+0xae>
 8005ee8:	3601      	adds	r6, #1
 8005eea:	e7d9      	b.n	8005ea0 <_printf_common+0x98>

08005eec <_printf_i>:
 8005eec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef0:	7e0f      	ldrb	r7, [r1, #24]
 8005ef2:	4691      	mov	r9, r2
 8005ef4:	2f78      	cmp	r7, #120	@ 0x78
 8005ef6:	4680      	mov	r8, r0
 8005ef8:	460c      	mov	r4, r1
 8005efa:	469a      	mov	sl, r3
 8005efc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005efe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f02:	d807      	bhi.n	8005f14 <_printf_i+0x28>
 8005f04:	2f62      	cmp	r7, #98	@ 0x62
 8005f06:	d80a      	bhi.n	8005f1e <_printf_i+0x32>
 8005f08:	2f00      	cmp	r7, #0
 8005f0a:	f000 80d1 	beq.w	80060b0 <_printf_i+0x1c4>
 8005f0e:	2f58      	cmp	r7, #88	@ 0x58
 8005f10:	f000 80b8 	beq.w	8006084 <_printf_i+0x198>
 8005f14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f1c:	e03a      	b.n	8005f94 <_printf_i+0xa8>
 8005f1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f22:	2b15      	cmp	r3, #21
 8005f24:	d8f6      	bhi.n	8005f14 <_printf_i+0x28>
 8005f26:	a101      	add	r1, pc, #4	@ (adr r1, 8005f2c <_printf_i+0x40>)
 8005f28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f2c:	08005f85 	.word	0x08005f85
 8005f30:	08005f99 	.word	0x08005f99
 8005f34:	08005f15 	.word	0x08005f15
 8005f38:	08005f15 	.word	0x08005f15
 8005f3c:	08005f15 	.word	0x08005f15
 8005f40:	08005f15 	.word	0x08005f15
 8005f44:	08005f99 	.word	0x08005f99
 8005f48:	08005f15 	.word	0x08005f15
 8005f4c:	08005f15 	.word	0x08005f15
 8005f50:	08005f15 	.word	0x08005f15
 8005f54:	08005f15 	.word	0x08005f15
 8005f58:	08006097 	.word	0x08006097
 8005f5c:	08005fc3 	.word	0x08005fc3
 8005f60:	08006051 	.word	0x08006051
 8005f64:	08005f15 	.word	0x08005f15
 8005f68:	08005f15 	.word	0x08005f15
 8005f6c:	080060b9 	.word	0x080060b9
 8005f70:	08005f15 	.word	0x08005f15
 8005f74:	08005fc3 	.word	0x08005fc3
 8005f78:	08005f15 	.word	0x08005f15
 8005f7c:	08005f15 	.word	0x08005f15
 8005f80:	08006059 	.word	0x08006059
 8005f84:	6833      	ldr	r3, [r6, #0]
 8005f86:	1d1a      	adds	r2, r3, #4
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	6032      	str	r2, [r6, #0]
 8005f8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f94:	2301      	movs	r3, #1
 8005f96:	e09c      	b.n	80060d2 <_printf_i+0x1e6>
 8005f98:	6833      	ldr	r3, [r6, #0]
 8005f9a:	6820      	ldr	r0, [r4, #0]
 8005f9c:	1d19      	adds	r1, r3, #4
 8005f9e:	6031      	str	r1, [r6, #0]
 8005fa0:	0606      	lsls	r6, r0, #24
 8005fa2:	d501      	bpl.n	8005fa8 <_printf_i+0xbc>
 8005fa4:	681d      	ldr	r5, [r3, #0]
 8005fa6:	e003      	b.n	8005fb0 <_printf_i+0xc4>
 8005fa8:	0645      	lsls	r5, r0, #25
 8005faa:	d5fb      	bpl.n	8005fa4 <_printf_i+0xb8>
 8005fac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005fb0:	2d00      	cmp	r5, #0
 8005fb2:	da03      	bge.n	8005fbc <_printf_i+0xd0>
 8005fb4:	232d      	movs	r3, #45	@ 0x2d
 8005fb6:	426d      	negs	r5, r5
 8005fb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fbc:	230a      	movs	r3, #10
 8005fbe:	4858      	ldr	r0, [pc, #352]	@ (8006120 <_printf_i+0x234>)
 8005fc0:	e011      	b.n	8005fe6 <_printf_i+0xfa>
 8005fc2:	6821      	ldr	r1, [r4, #0]
 8005fc4:	6833      	ldr	r3, [r6, #0]
 8005fc6:	0608      	lsls	r0, r1, #24
 8005fc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8005fcc:	d402      	bmi.n	8005fd4 <_printf_i+0xe8>
 8005fce:	0649      	lsls	r1, r1, #25
 8005fd0:	bf48      	it	mi
 8005fd2:	b2ad      	uxthmi	r5, r5
 8005fd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8005fd6:	6033      	str	r3, [r6, #0]
 8005fd8:	bf14      	ite	ne
 8005fda:	230a      	movne	r3, #10
 8005fdc:	2308      	moveq	r3, #8
 8005fde:	4850      	ldr	r0, [pc, #320]	@ (8006120 <_printf_i+0x234>)
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005fe6:	6866      	ldr	r6, [r4, #4]
 8005fe8:	2e00      	cmp	r6, #0
 8005fea:	60a6      	str	r6, [r4, #8]
 8005fec:	db05      	blt.n	8005ffa <_printf_i+0x10e>
 8005fee:	6821      	ldr	r1, [r4, #0]
 8005ff0:	432e      	orrs	r6, r5
 8005ff2:	f021 0104 	bic.w	r1, r1, #4
 8005ff6:	6021      	str	r1, [r4, #0]
 8005ff8:	d04b      	beq.n	8006092 <_printf_i+0x1a6>
 8005ffa:	4616      	mov	r6, r2
 8005ffc:	fbb5 f1f3 	udiv	r1, r5, r3
 8006000:	fb03 5711 	mls	r7, r3, r1, r5
 8006004:	5dc7      	ldrb	r7, [r0, r7]
 8006006:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800600a:	462f      	mov	r7, r5
 800600c:	42bb      	cmp	r3, r7
 800600e:	460d      	mov	r5, r1
 8006010:	d9f4      	bls.n	8005ffc <_printf_i+0x110>
 8006012:	2b08      	cmp	r3, #8
 8006014:	d10b      	bne.n	800602e <_printf_i+0x142>
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	07df      	lsls	r7, r3, #31
 800601a:	d508      	bpl.n	800602e <_printf_i+0x142>
 800601c:	6923      	ldr	r3, [r4, #16]
 800601e:	6861      	ldr	r1, [r4, #4]
 8006020:	4299      	cmp	r1, r3
 8006022:	bfde      	ittt	le
 8006024:	2330      	movle	r3, #48	@ 0x30
 8006026:	f806 3c01 	strble.w	r3, [r6, #-1]
 800602a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800602e:	1b92      	subs	r2, r2, r6
 8006030:	6122      	str	r2, [r4, #16]
 8006032:	464b      	mov	r3, r9
 8006034:	4621      	mov	r1, r4
 8006036:	4640      	mov	r0, r8
 8006038:	f8cd a000 	str.w	sl, [sp]
 800603c:	aa03      	add	r2, sp, #12
 800603e:	f7ff fee3 	bl	8005e08 <_printf_common>
 8006042:	3001      	adds	r0, #1
 8006044:	d14a      	bne.n	80060dc <_printf_i+0x1f0>
 8006046:	f04f 30ff 	mov.w	r0, #4294967295
 800604a:	b004      	add	sp, #16
 800604c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	f043 0320 	orr.w	r3, r3, #32
 8006056:	6023      	str	r3, [r4, #0]
 8006058:	2778      	movs	r7, #120	@ 0x78
 800605a:	4832      	ldr	r0, [pc, #200]	@ (8006124 <_printf_i+0x238>)
 800605c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006060:	6823      	ldr	r3, [r4, #0]
 8006062:	6831      	ldr	r1, [r6, #0]
 8006064:	061f      	lsls	r7, r3, #24
 8006066:	f851 5b04 	ldr.w	r5, [r1], #4
 800606a:	d402      	bmi.n	8006072 <_printf_i+0x186>
 800606c:	065f      	lsls	r7, r3, #25
 800606e:	bf48      	it	mi
 8006070:	b2ad      	uxthmi	r5, r5
 8006072:	6031      	str	r1, [r6, #0]
 8006074:	07d9      	lsls	r1, r3, #31
 8006076:	bf44      	itt	mi
 8006078:	f043 0320 	orrmi.w	r3, r3, #32
 800607c:	6023      	strmi	r3, [r4, #0]
 800607e:	b11d      	cbz	r5, 8006088 <_printf_i+0x19c>
 8006080:	2310      	movs	r3, #16
 8006082:	e7ad      	b.n	8005fe0 <_printf_i+0xf4>
 8006084:	4826      	ldr	r0, [pc, #152]	@ (8006120 <_printf_i+0x234>)
 8006086:	e7e9      	b.n	800605c <_printf_i+0x170>
 8006088:	6823      	ldr	r3, [r4, #0]
 800608a:	f023 0320 	bic.w	r3, r3, #32
 800608e:	6023      	str	r3, [r4, #0]
 8006090:	e7f6      	b.n	8006080 <_printf_i+0x194>
 8006092:	4616      	mov	r6, r2
 8006094:	e7bd      	b.n	8006012 <_printf_i+0x126>
 8006096:	6833      	ldr	r3, [r6, #0]
 8006098:	6825      	ldr	r5, [r4, #0]
 800609a:	1d18      	adds	r0, r3, #4
 800609c:	6961      	ldr	r1, [r4, #20]
 800609e:	6030      	str	r0, [r6, #0]
 80060a0:	062e      	lsls	r6, r5, #24
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	d501      	bpl.n	80060aa <_printf_i+0x1be>
 80060a6:	6019      	str	r1, [r3, #0]
 80060a8:	e002      	b.n	80060b0 <_printf_i+0x1c4>
 80060aa:	0668      	lsls	r0, r5, #25
 80060ac:	d5fb      	bpl.n	80060a6 <_printf_i+0x1ba>
 80060ae:	8019      	strh	r1, [r3, #0]
 80060b0:	2300      	movs	r3, #0
 80060b2:	4616      	mov	r6, r2
 80060b4:	6123      	str	r3, [r4, #16]
 80060b6:	e7bc      	b.n	8006032 <_printf_i+0x146>
 80060b8:	6833      	ldr	r3, [r6, #0]
 80060ba:	2100      	movs	r1, #0
 80060bc:	1d1a      	adds	r2, r3, #4
 80060be:	6032      	str	r2, [r6, #0]
 80060c0:	681e      	ldr	r6, [r3, #0]
 80060c2:	6862      	ldr	r2, [r4, #4]
 80060c4:	4630      	mov	r0, r6
 80060c6:	f000 f9d6 	bl	8006476 <memchr>
 80060ca:	b108      	cbz	r0, 80060d0 <_printf_i+0x1e4>
 80060cc:	1b80      	subs	r0, r0, r6
 80060ce:	6060      	str	r0, [r4, #4]
 80060d0:	6863      	ldr	r3, [r4, #4]
 80060d2:	6123      	str	r3, [r4, #16]
 80060d4:	2300      	movs	r3, #0
 80060d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060da:	e7aa      	b.n	8006032 <_printf_i+0x146>
 80060dc:	4632      	mov	r2, r6
 80060de:	4649      	mov	r1, r9
 80060e0:	4640      	mov	r0, r8
 80060e2:	6923      	ldr	r3, [r4, #16]
 80060e4:	47d0      	blx	sl
 80060e6:	3001      	adds	r0, #1
 80060e8:	d0ad      	beq.n	8006046 <_printf_i+0x15a>
 80060ea:	6823      	ldr	r3, [r4, #0]
 80060ec:	079b      	lsls	r3, r3, #30
 80060ee:	d413      	bmi.n	8006118 <_printf_i+0x22c>
 80060f0:	68e0      	ldr	r0, [r4, #12]
 80060f2:	9b03      	ldr	r3, [sp, #12]
 80060f4:	4298      	cmp	r0, r3
 80060f6:	bfb8      	it	lt
 80060f8:	4618      	movlt	r0, r3
 80060fa:	e7a6      	b.n	800604a <_printf_i+0x15e>
 80060fc:	2301      	movs	r3, #1
 80060fe:	4632      	mov	r2, r6
 8006100:	4649      	mov	r1, r9
 8006102:	4640      	mov	r0, r8
 8006104:	47d0      	blx	sl
 8006106:	3001      	adds	r0, #1
 8006108:	d09d      	beq.n	8006046 <_printf_i+0x15a>
 800610a:	3501      	adds	r5, #1
 800610c:	68e3      	ldr	r3, [r4, #12]
 800610e:	9903      	ldr	r1, [sp, #12]
 8006110:	1a5b      	subs	r3, r3, r1
 8006112:	42ab      	cmp	r3, r5
 8006114:	dcf2      	bgt.n	80060fc <_printf_i+0x210>
 8006116:	e7eb      	b.n	80060f0 <_printf_i+0x204>
 8006118:	2500      	movs	r5, #0
 800611a:	f104 0619 	add.w	r6, r4, #25
 800611e:	e7f5      	b.n	800610c <_printf_i+0x220>
 8006120:	08008d00 	.word	0x08008d00
 8006124:	08008d11 	.word	0x08008d11

08006128 <std>:
 8006128:	2300      	movs	r3, #0
 800612a:	b510      	push	{r4, lr}
 800612c:	4604      	mov	r4, r0
 800612e:	e9c0 3300 	strd	r3, r3, [r0]
 8006132:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006136:	6083      	str	r3, [r0, #8]
 8006138:	8181      	strh	r1, [r0, #12]
 800613a:	6643      	str	r3, [r0, #100]	@ 0x64
 800613c:	81c2      	strh	r2, [r0, #14]
 800613e:	6183      	str	r3, [r0, #24]
 8006140:	4619      	mov	r1, r3
 8006142:	2208      	movs	r2, #8
 8006144:	305c      	adds	r0, #92	@ 0x5c
 8006146:	f000 f916 	bl	8006376 <memset>
 800614a:	4b0d      	ldr	r3, [pc, #52]	@ (8006180 <std+0x58>)
 800614c:	6224      	str	r4, [r4, #32]
 800614e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006150:	4b0c      	ldr	r3, [pc, #48]	@ (8006184 <std+0x5c>)
 8006152:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006154:	4b0c      	ldr	r3, [pc, #48]	@ (8006188 <std+0x60>)
 8006156:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006158:	4b0c      	ldr	r3, [pc, #48]	@ (800618c <std+0x64>)
 800615a:	6323      	str	r3, [r4, #48]	@ 0x30
 800615c:	4b0c      	ldr	r3, [pc, #48]	@ (8006190 <std+0x68>)
 800615e:	429c      	cmp	r4, r3
 8006160:	d006      	beq.n	8006170 <std+0x48>
 8006162:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006166:	4294      	cmp	r4, r2
 8006168:	d002      	beq.n	8006170 <std+0x48>
 800616a:	33d0      	adds	r3, #208	@ 0xd0
 800616c:	429c      	cmp	r4, r3
 800616e:	d105      	bne.n	800617c <std+0x54>
 8006170:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006178:	f000 b97a 	b.w	8006470 <__retarget_lock_init_recursive>
 800617c:	bd10      	pop	{r4, pc}
 800617e:	bf00      	nop
 8006180:	080062f1 	.word	0x080062f1
 8006184:	08006313 	.word	0x08006313
 8006188:	0800634b 	.word	0x0800634b
 800618c:	0800636f 	.word	0x0800636f
 8006190:	20000590 	.word	0x20000590

08006194 <stdio_exit_handler>:
 8006194:	4a02      	ldr	r2, [pc, #8]	@ (80061a0 <stdio_exit_handler+0xc>)
 8006196:	4903      	ldr	r1, [pc, #12]	@ (80061a4 <stdio_exit_handler+0x10>)
 8006198:	4803      	ldr	r0, [pc, #12]	@ (80061a8 <stdio_exit_handler+0x14>)
 800619a:	f000 b869 	b.w	8006270 <_fwalk_sglue>
 800619e:	bf00      	nop
 80061a0:	20000014 	.word	0x20000014
 80061a4:	08007df1 	.word	0x08007df1
 80061a8:	20000024 	.word	0x20000024

080061ac <cleanup_stdio>:
 80061ac:	6841      	ldr	r1, [r0, #4]
 80061ae:	4b0c      	ldr	r3, [pc, #48]	@ (80061e0 <cleanup_stdio+0x34>)
 80061b0:	b510      	push	{r4, lr}
 80061b2:	4299      	cmp	r1, r3
 80061b4:	4604      	mov	r4, r0
 80061b6:	d001      	beq.n	80061bc <cleanup_stdio+0x10>
 80061b8:	f001 fe1a 	bl	8007df0 <_fflush_r>
 80061bc:	68a1      	ldr	r1, [r4, #8]
 80061be:	4b09      	ldr	r3, [pc, #36]	@ (80061e4 <cleanup_stdio+0x38>)
 80061c0:	4299      	cmp	r1, r3
 80061c2:	d002      	beq.n	80061ca <cleanup_stdio+0x1e>
 80061c4:	4620      	mov	r0, r4
 80061c6:	f001 fe13 	bl	8007df0 <_fflush_r>
 80061ca:	68e1      	ldr	r1, [r4, #12]
 80061cc:	4b06      	ldr	r3, [pc, #24]	@ (80061e8 <cleanup_stdio+0x3c>)
 80061ce:	4299      	cmp	r1, r3
 80061d0:	d004      	beq.n	80061dc <cleanup_stdio+0x30>
 80061d2:	4620      	mov	r0, r4
 80061d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061d8:	f001 be0a 	b.w	8007df0 <_fflush_r>
 80061dc:	bd10      	pop	{r4, pc}
 80061de:	bf00      	nop
 80061e0:	20000590 	.word	0x20000590
 80061e4:	200005f8 	.word	0x200005f8
 80061e8:	20000660 	.word	0x20000660

080061ec <global_stdio_init.part.0>:
 80061ec:	b510      	push	{r4, lr}
 80061ee:	4b0b      	ldr	r3, [pc, #44]	@ (800621c <global_stdio_init.part.0+0x30>)
 80061f0:	4c0b      	ldr	r4, [pc, #44]	@ (8006220 <global_stdio_init.part.0+0x34>)
 80061f2:	4a0c      	ldr	r2, [pc, #48]	@ (8006224 <global_stdio_init.part.0+0x38>)
 80061f4:	4620      	mov	r0, r4
 80061f6:	601a      	str	r2, [r3, #0]
 80061f8:	2104      	movs	r1, #4
 80061fa:	2200      	movs	r2, #0
 80061fc:	f7ff ff94 	bl	8006128 <std>
 8006200:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006204:	2201      	movs	r2, #1
 8006206:	2109      	movs	r1, #9
 8006208:	f7ff ff8e 	bl	8006128 <std>
 800620c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006210:	2202      	movs	r2, #2
 8006212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006216:	2112      	movs	r1, #18
 8006218:	f7ff bf86 	b.w	8006128 <std>
 800621c:	200006c8 	.word	0x200006c8
 8006220:	20000590 	.word	0x20000590
 8006224:	08006195 	.word	0x08006195

08006228 <__sfp_lock_acquire>:
 8006228:	4801      	ldr	r0, [pc, #4]	@ (8006230 <__sfp_lock_acquire+0x8>)
 800622a:	f000 b922 	b.w	8006472 <__retarget_lock_acquire_recursive>
 800622e:	bf00      	nop
 8006230:	200006d1 	.word	0x200006d1

08006234 <__sfp_lock_release>:
 8006234:	4801      	ldr	r0, [pc, #4]	@ (800623c <__sfp_lock_release+0x8>)
 8006236:	f000 b91d 	b.w	8006474 <__retarget_lock_release_recursive>
 800623a:	bf00      	nop
 800623c:	200006d1 	.word	0x200006d1

08006240 <__sinit>:
 8006240:	b510      	push	{r4, lr}
 8006242:	4604      	mov	r4, r0
 8006244:	f7ff fff0 	bl	8006228 <__sfp_lock_acquire>
 8006248:	6a23      	ldr	r3, [r4, #32]
 800624a:	b11b      	cbz	r3, 8006254 <__sinit+0x14>
 800624c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006250:	f7ff bff0 	b.w	8006234 <__sfp_lock_release>
 8006254:	4b04      	ldr	r3, [pc, #16]	@ (8006268 <__sinit+0x28>)
 8006256:	6223      	str	r3, [r4, #32]
 8006258:	4b04      	ldr	r3, [pc, #16]	@ (800626c <__sinit+0x2c>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1f5      	bne.n	800624c <__sinit+0xc>
 8006260:	f7ff ffc4 	bl	80061ec <global_stdio_init.part.0>
 8006264:	e7f2      	b.n	800624c <__sinit+0xc>
 8006266:	bf00      	nop
 8006268:	080061ad 	.word	0x080061ad
 800626c:	200006c8 	.word	0x200006c8

08006270 <_fwalk_sglue>:
 8006270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006274:	4607      	mov	r7, r0
 8006276:	4688      	mov	r8, r1
 8006278:	4614      	mov	r4, r2
 800627a:	2600      	movs	r6, #0
 800627c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006280:	f1b9 0901 	subs.w	r9, r9, #1
 8006284:	d505      	bpl.n	8006292 <_fwalk_sglue+0x22>
 8006286:	6824      	ldr	r4, [r4, #0]
 8006288:	2c00      	cmp	r4, #0
 800628a:	d1f7      	bne.n	800627c <_fwalk_sglue+0xc>
 800628c:	4630      	mov	r0, r6
 800628e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006292:	89ab      	ldrh	r3, [r5, #12]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d907      	bls.n	80062a8 <_fwalk_sglue+0x38>
 8006298:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800629c:	3301      	adds	r3, #1
 800629e:	d003      	beq.n	80062a8 <_fwalk_sglue+0x38>
 80062a0:	4629      	mov	r1, r5
 80062a2:	4638      	mov	r0, r7
 80062a4:	47c0      	blx	r8
 80062a6:	4306      	orrs	r6, r0
 80062a8:	3568      	adds	r5, #104	@ 0x68
 80062aa:	e7e9      	b.n	8006280 <_fwalk_sglue+0x10>

080062ac <siprintf>:
 80062ac:	b40e      	push	{r1, r2, r3}
 80062ae:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80062b2:	b510      	push	{r4, lr}
 80062b4:	2400      	movs	r4, #0
 80062b6:	b09d      	sub	sp, #116	@ 0x74
 80062b8:	ab1f      	add	r3, sp, #124	@ 0x7c
 80062ba:	9002      	str	r0, [sp, #8]
 80062bc:	9006      	str	r0, [sp, #24]
 80062be:	9107      	str	r1, [sp, #28]
 80062c0:	9104      	str	r1, [sp, #16]
 80062c2:	4809      	ldr	r0, [pc, #36]	@ (80062e8 <siprintf+0x3c>)
 80062c4:	4909      	ldr	r1, [pc, #36]	@ (80062ec <siprintf+0x40>)
 80062c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80062ca:	9105      	str	r1, [sp, #20]
 80062cc:	6800      	ldr	r0, [r0, #0]
 80062ce:	a902      	add	r1, sp, #8
 80062d0:	9301      	str	r3, [sp, #4]
 80062d2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80062d4:	f001 fc10 	bl	8007af8 <_svfiprintf_r>
 80062d8:	9b02      	ldr	r3, [sp, #8]
 80062da:	701c      	strb	r4, [r3, #0]
 80062dc:	b01d      	add	sp, #116	@ 0x74
 80062de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062e2:	b003      	add	sp, #12
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	20000020 	.word	0x20000020
 80062ec:	ffff0208 	.word	0xffff0208

080062f0 <__sread>:
 80062f0:	b510      	push	{r4, lr}
 80062f2:	460c      	mov	r4, r1
 80062f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062f8:	f000 f86c 	bl	80063d4 <_read_r>
 80062fc:	2800      	cmp	r0, #0
 80062fe:	bfab      	itete	ge
 8006300:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006302:	89a3      	ldrhlt	r3, [r4, #12]
 8006304:	181b      	addge	r3, r3, r0
 8006306:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800630a:	bfac      	ite	ge
 800630c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800630e:	81a3      	strhlt	r3, [r4, #12]
 8006310:	bd10      	pop	{r4, pc}

08006312 <__swrite>:
 8006312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006316:	461f      	mov	r7, r3
 8006318:	898b      	ldrh	r3, [r1, #12]
 800631a:	4605      	mov	r5, r0
 800631c:	05db      	lsls	r3, r3, #23
 800631e:	460c      	mov	r4, r1
 8006320:	4616      	mov	r6, r2
 8006322:	d505      	bpl.n	8006330 <__swrite+0x1e>
 8006324:	2302      	movs	r3, #2
 8006326:	2200      	movs	r2, #0
 8006328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800632c:	f000 f840 	bl	80063b0 <_lseek_r>
 8006330:	89a3      	ldrh	r3, [r4, #12]
 8006332:	4632      	mov	r2, r6
 8006334:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006338:	81a3      	strh	r3, [r4, #12]
 800633a:	4628      	mov	r0, r5
 800633c:	463b      	mov	r3, r7
 800633e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006346:	f000 b857 	b.w	80063f8 <_write_r>

0800634a <__sseek>:
 800634a:	b510      	push	{r4, lr}
 800634c:	460c      	mov	r4, r1
 800634e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006352:	f000 f82d 	bl	80063b0 <_lseek_r>
 8006356:	1c43      	adds	r3, r0, #1
 8006358:	89a3      	ldrh	r3, [r4, #12]
 800635a:	bf15      	itete	ne
 800635c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800635e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006362:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006366:	81a3      	strheq	r3, [r4, #12]
 8006368:	bf18      	it	ne
 800636a:	81a3      	strhne	r3, [r4, #12]
 800636c:	bd10      	pop	{r4, pc}

0800636e <__sclose>:
 800636e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006372:	f000 b80d 	b.w	8006390 <_close_r>

08006376 <memset>:
 8006376:	4603      	mov	r3, r0
 8006378:	4402      	add	r2, r0
 800637a:	4293      	cmp	r3, r2
 800637c:	d100      	bne.n	8006380 <memset+0xa>
 800637e:	4770      	bx	lr
 8006380:	f803 1b01 	strb.w	r1, [r3], #1
 8006384:	e7f9      	b.n	800637a <memset+0x4>
	...

08006388 <_localeconv_r>:
 8006388:	4800      	ldr	r0, [pc, #0]	@ (800638c <_localeconv_r+0x4>)
 800638a:	4770      	bx	lr
 800638c:	20000160 	.word	0x20000160

08006390 <_close_r>:
 8006390:	b538      	push	{r3, r4, r5, lr}
 8006392:	2300      	movs	r3, #0
 8006394:	4d05      	ldr	r5, [pc, #20]	@ (80063ac <_close_r+0x1c>)
 8006396:	4604      	mov	r4, r0
 8006398:	4608      	mov	r0, r1
 800639a:	602b      	str	r3, [r5, #0]
 800639c:	f7fb ff99 	bl	80022d2 <_close>
 80063a0:	1c43      	adds	r3, r0, #1
 80063a2:	d102      	bne.n	80063aa <_close_r+0x1a>
 80063a4:	682b      	ldr	r3, [r5, #0]
 80063a6:	b103      	cbz	r3, 80063aa <_close_r+0x1a>
 80063a8:	6023      	str	r3, [r4, #0]
 80063aa:	bd38      	pop	{r3, r4, r5, pc}
 80063ac:	200006cc 	.word	0x200006cc

080063b0 <_lseek_r>:
 80063b0:	b538      	push	{r3, r4, r5, lr}
 80063b2:	4604      	mov	r4, r0
 80063b4:	4608      	mov	r0, r1
 80063b6:	4611      	mov	r1, r2
 80063b8:	2200      	movs	r2, #0
 80063ba:	4d05      	ldr	r5, [pc, #20]	@ (80063d0 <_lseek_r+0x20>)
 80063bc:	602a      	str	r2, [r5, #0]
 80063be:	461a      	mov	r2, r3
 80063c0:	f7fb ffab 	bl	800231a <_lseek>
 80063c4:	1c43      	adds	r3, r0, #1
 80063c6:	d102      	bne.n	80063ce <_lseek_r+0x1e>
 80063c8:	682b      	ldr	r3, [r5, #0]
 80063ca:	b103      	cbz	r3, 80063ce <_lseek_r+0x1e>
 80063cc:	6023      	str	r3, [r4, #0]
 80063ce:	bd38      	pop	{r3, r4, r5, pc}
 80063d0:	200006cc 	.word	0x200006cc

080063d4 <_read_r>:
 80063d4:	b538      	push	{r3, r4, r5, lr}
 80063d6:	4604      	mov	r4, r0
 80063d8:	4608      	mov	r0, r1
 80063da:	4611      	mov	r1, r2
 80063dc:	2200      	movs	r2, #0
 80063de:	4d05      	ldr	r5, [pc, #20]	@ (80063f4 <_read_r+0x20>)
 80063e0:	602a      	str	r2, [r5, #0]
 80063e2:	461a      	mov	r2, r3
 80063e4:	f7fb ff3c 	bl	8002260 <_read>
 80063e8:	1c43      	adds	r3, r0, #1
 80063ea:	d102      	bne.n	80063f2 <_read_r+0x1e>
 80063ec:	682b      	ldr	r3, [r5, #0]
 80063ee:	b103      	cbz	r3, 80063f2 <_read_r+0x1e>
 80063f0:	6023      	str	r3, [r4, #0]
 80063f2:	bd38      	pop	{r3, r4, r5, pc}
 80063f4:	200006cc 	.word	0x200006cc

080063f8 <_write_r>:
 80063f8:	b538      	push	{r3, r4, r5, lr}
 80063fa:	4604      	mov	r4, r0
 80063fc:	4608      	mov	r0, r1
 80063fe:	4611      	mov	r1, r2
 8006400:	2200      	movs	r2, #0
 8006402:	4d05      	ldr	r5, [pc, #20]	@ (8006418 <_write_r+0x20>)
 8006404:	602a      	str	r2, [r5, #0]
 8006406:	461a      	mov	r2, r3
 8006408:	f7fb ff47 	bl	800229a <_write>
 800640c:	1c43      	adds	r3, r0, #1
 800640e:	d102      	bne.n	8006416 <_write_r+0x1e>
 8006410:	682b      	ldr	r3, [r5, #0]
 8006412:	b103      	cbz	r3, 8006416 <_write_r+0x1e>
 8006414:	6023      	str	r3, [r4, #0]
 8006416:	bd38      	pop	{r3, r4, r5, pc}
 8006418:	200006cc 	.word	0x200006cc

0800641c <__errno>:
 800641c:	4b01      	ldr	r3, [pc, #4]	@ (8006424 <__errno+0x8>)
 800641e:	6818      	ldr	r0, [r3, #0]
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	20000020 	.word	0x20000020

08006428 <__libc_init_array>:
 8006428:	b570      	push	{r4, r5, r6, lr}
 800642a:	2600      	movs	r6, #0
 800642c:	4d0c      	ldr	r5, [pc, #48]	@ (8006460 <__libc_init_array+0x38>)
 800642e:	4c0d      	ldr	r4, [pc, #52]	@ (8006464 <__libc_init_array+0x3c>)
 8006430:	1b64      	subs	r4, r4, r5
 8006432:	10a4      	asrs	r4, r4, #2
 8006434:	42a6      	cmp	r6, r4
 8006436:	d109      	bne.n	800644c <__libc_init_array+0x24>
 8006438:	f002 f876 	bl	8008528 <_init>
 800643c:	2600      	movs	r6, #0
 800643e:	4d0a      	ldr	r5, [pc, #40]	@ (8006468 <__libc_init_array+0x40>)
 8006440:	4c0a      	ldr	r4, [pc, #40]	@ (800646c <__libc_init_array+0x44>)
 8006442:	1b64      	subs	r4, r4, r5
 8006444:	10a4      	asrs	r4, r4, #2
 8006446:	42a6      	cmp	r6, r4
 8006448:	d105      	bne.n	8006456 <__libc_init_array+0x2e>
 800644a:	bd70      	pop	{r4, r5, r6, pc}
 800644c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006450:	4798      	blx	r3
 8006452:	3601      	adds	r6, #1
 8006454:	e7ee      	b.n	8006434 <__libc_init_array+0xc>
 8006456:	f855 3b04 	ldr.w	r3, [r5], #4
 800645a:	4798      	blx	r3
 800645c:	3601      	adds	r6, #1
 800645e:	e7f2      	b.n	8006446 <__libc_init_array+0x1e>
 8006460:	0800906c 	.word	0x0800906c
 8006464:	0800906c 	.word	0x0800906c
 8006468:	0800906c 	.word	0x0800906c
 800646c:	08009070 	.word	0x08009070

08006470 <__retarget_lock_init_recursive>:
 8006470:	4770      	bx	lr

08006472 <__retarget_lock_acquire_recursive>:
 8006472:	4770      	bx	lr

08006474 <__retarget_lock_release_recursive>:
 8006474:	4770      	bx	lr

08006476 <memchr>:
 8006476:	4603      	mov	r3, r0
 8006478:	b510      	push	{r4, lr}
 800647a:	b2c9      	uxtb	r1, r1
 800647c:	4402      	add	r2, r0
 800647e:	4293      	cmp	r3, r2
 8006480:	4618      	mov	r0, r3
 8006482:	d101      	bne.n	8006488 <memchr+0x12>
 8006484:	2000      	movs	r0, #0
 8006486:	e003      	b.n	8006490 <memchr+0x1a>
 8006488:	7804      	ldrb	r4, [r0, #0]
 800648a:	3301      	adds	r3, #1
 800648c:	428c      	cmp	r4, r1
 800648e:	d1f6      	bne.n	800647e <memchr+0x8>
 8006490:	bd10      	pop	{r4, pc}

08006492 <quorem>:
 8006492:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006496:	6903      	ldr	r3, [r0, #16]
 8006498:	690c      	ldr	r4, [r1, #16]
 800649a:	4607      	mov	r7, r0
 800649c:	42a3      	cmp	r3, r4
 800649e:	db7e      	blt.n	800659e <quorem+0x10c>
 80064a0:	3c01      	subs	r4, #1
 80064a2:	00a3      	lsls	r3, r4, #2
 80064a4:	f100 0514 	add.w	r5, r0, #20
 80064a8:	f101 0814 	add.w	r8, r1, #20
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064b2:	9301      	str	r3, [sp, #4]
 80064b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80064b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064bc:	3301      	adds	r3, #1
 80064be:	429a      	cmp	r2, r3
 80064c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80064c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80064c8:	d32e      	bcc.n	8006528 <quorem+0x96>
 80064ca:	f04f 0a00 	mov.w	sl, #0
 80064ce:	46c4      	mov	ip, r8
 80064d0:	46ae      	mov	lr, r5
 80064d2:	46d3      	mov	fp, sl
 80064d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80064d8:	b298      	uxth	r0, r3
 80064da:	fb06 a000 	mla	r0, r6, r0, sl
 80064de:	0c1b      	lsrs	r3, r3, #16
 80064e0:	0c02      	lsrs	r2, r0, #16
 80064e2:	fb06 2303 	mla	r3, r6, r3, r2
 80064e6:	f8de 2000 	ldr.w	r2, [lr]
 80064ea:	b280      	uxth	r0, r0
 80064ec:	b292      	uxth	r2, r2
 80064ee:	1a12      	subs	r2, r2, r0
 80064f0:	445a      	add	r2, fp
 80064f2:	f8de 0000 	ldr.w	r0, [lr]
 80064f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006500:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006504:	b292      	uxth	r2, r2
 8006506:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800650a:	45e1      	cmp	r9, ip
 800650c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006510:	f84e 2b04 	str.w	r2, [lr], #4
 8006514:	d2de      	bcs.n	80064d4 <quorem+0x42>
 8006516:	9b00      	ldr	r3, [sp, #0]
 8006518:	58eb      	ldr	r3, [r5, r3]
 800651a:	b92b      	cbnz	r3, 8006528 <quorem+0x96>
 800651c:	9b01      	ldr	r3, [sp, #4]
 800651e:	3b04      	subs	r3, #4
 8006520:	429d      	cmp	r5, r3
 8006522:	461a      	mov	r2, r3
 8006524:	d32f      	bcc.n	8006586 <quorem+0xf4>
 8006526:	613c      	str	r4, [r7, #16]
 8006528:	4638      	mov	r0, r7
 800652a:	f001 f981 	bl	8007830 <__mcmp>
 800652e:	2800      	cmp	r0, #0
 8006530:	db25      	blt.n	800657e <quorem+0xec>
 8006532:	4629      	mov	r1, r5
 8006534:	2000      	movs	r0, #0
 8006536:	f858 2b04 	ldr.w	r2, [r8], #4
 800653a:	f8d1 c000 	ldr.w	ip, [r1]
 800653e:	fa1f fe82 	uxth.w	lr, r2
 8006542:	fa1f f38c 	uxth.w	r3, ip
 8006546:	eba3 030e 	sub.w	r3, r3, lr
 800654a:	4403      	add	r3, r0
 800654c:	0c12      	lsrs	r2, r2, #16
 800654e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006552:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006556:	b29b      	uxth	r3, r3
 8006558:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800655c:	45c1      	cmp	r9, r8
 800655e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006562:	f841 3b04 	str.w	r3, [r1], #4
 8006566:	d2e6      	bcs.n	8006536 <quorem+0xa4>
 8006568:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800656c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006570:	b922      	cbnz	r2, 800657c <quorem+0xea>
 8006572:	3b04      	subs	r3, #4
 8006574:	429d      	cmp	r5, r3
 8006576:	461a      	mov	r2, r3
 8006578:	d30b      	bcc.n	8006592 <quorem+0x100>
 800657a:	613c      	str	r4, [r7, #16]
 800657c:	3601      	adds	r6, #1
 800657e:	4630      	mov	r0, r6
 8006580:	b003      	add	sp, #12
 8006582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006586:	6812      	ldr	r2, [r2, #0]
 8006588:	3b04      	subs	r3, #4
 800658a:	2a00      	cmp	r2, #0
 800658c:	d1cb      	bne.n	8006526 <quorem+0x94>
 800658e:	3c01      	subs	r4, #1
 8006590:	e7c6      	b.n	8006520 <quorem+0x8e>
 8006592:	6812      	ldr	r2, [r2, #0]
 8006594:	3b04      	subs	r3, #4
 8006596:	2a00      	cmp	r2, #0
 8006598:	d1ef      	bne.n	800657a <quorem+0xe8>
 800659a:	3c01      	subs	r4, #1
 800659c:	e7ea      	b.n	8006574 <quorem+0xe2>
 800659e:	2000      	movs	r0, #0
 80065a0:	e7ee      	b.n	8006580 <quorem+0xee>
 80065a2:	0000      	movs	r0, r0
 80065a4:	0000      	movs	r0, r0
	...

080065a8 <_dtoa_r>:
 80065a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ac:	4614      	mov	r4, r2
 80065ae:	461d      	mov	r5, r3
 80065b0:	69c7      	ldr	r7, [r0, #28]
 80065b2:	b097      	sub	sp, #92	@ 0x5c
 80065b4:	4681      	mov	r9, r0
 80065b6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80065ba:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80065bc:	b97f      	cbnz	r7, 80065de <_dtoa_r+0x36>
 80065be:	2010      	movs	r0, #16
 80065c0:	f000 fe0e 	bl	80071e0 <malloc>
 80065c4:	4602      	mov	r2, r0
 80065c6:	f8c9 001c 	str.w	r0, [r9, #28]
 80065ca:	b920      	cbnz	r0, 80065d6 <_dtoa_r+0x2e>
 80065cc:	21ef      	movs	r1, #239	@ 0xef
 80065ce:	4bac      	ldr	r3, [pc, #688]	@ (8006880 <_dtoa_r+0x2d8>)
 80065d0:	48ac      	ldr	r0, [pc, #688]	@ (8006884 <_dtoa_r+0x2dc>)
 80065d2:	f001 fc6d 	bl	8007eb0 <__assert_func>
 80065d6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80065da:	6007      	str	r7, [r0, #0]
 80065dc:	60c7      	str	r7, [r0, #12]
 80065de:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80065e2:	6819      	ldr	r1, [r3, #0]
 80065e4:	b159      	cbz	r1, 80065fe <_dtoa_r+0x56>
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	2301      	movs	r3, #1
 80065ea:	4093      	lsls	r3, r2
 80065ec:	604a      	str	r2, [r1, #4]
 80065ee:	608b      	str	r3, [r1, #8]
 80065f0:	4648      	mov	r0, r9
 80065f2:	f000 feeb 	bl	80073cc <_Bfree>
 80065f6:	2200      	movs	r2, #0
 80065f8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80065fc:	601a      	str	r2, [r3, #0]
 80065fe:	1e2b      	subs	r3, r5, #0
 8006600:	bfaf      	iteee	ge
 8006602:	2300      	movge	r3, #0
 8006604:	2201      	movlt	r2, #1
 8006606:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800660a:	9307      	strlt	r3, [sp, #28]
 800660c:	bfa8      	it	ge
 800660e:	6033      	strge	r3, [r6, #0]
 8006610:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8006614:	4b9c      	ldr	r3, [pc, #624]	@ (8006888 <_dtoa_r+0x2e0>)
 8006616:	bfb8      	it	lt
 8006618:	6032      	strlt	r2, [r6, #0]
 800661a:	ea33 0308 	bics.w	r3, r3, r8
 800661e:	d112      	bne.n	8006646 <_dtoa_r+0x9e>
 8006620:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006624:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006626:	6013      	str	r3, [r2, #0]
 8006628:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800662c:	4323      	orrs	r3, r4
 800662e:	f000 855e 	beq.w	80070ee <_dtoa_r+0xb46>
 8006632:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006634:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800688c <_dtoa_r+0x2e4>
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 8560 	beq.w	80070fe <_dtoa_r+0xb56>
 800663e:	f10a 0303 	add.w	r3, sl, #3
 8006642:	f000 bd5a 	b.w	80070fa <_dtoa_r+0xb52>
 8006646:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800664a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800664e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006652:	2200      	movs	r2, #0
 8006654:	2300      	movs	r3, #0
 8006656:	f7fa f9a7 	bl	80009a8 <__aeabi_dcmpeq>
 800665a:	4607      	mov	r7, r0
 800665c:	b158      	cbz	r0, 8006676 <_dtoa_r+0xce>
 800665e:	2301      	movs	r3, #1
 8006660:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006662:	6013      	str	r3, [r2, #0]
 8006664:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006666:	b113      	cbz	r3, 800666e <_dtoa_r+0xc6>
 8006668:	4b89      	ldr	r3, [pc, #548]	@ (8006890 <_dtoa_r+0x2e8>)
 800666a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8006894 <_dtoa_r+0x2ec>
 8006672:	f000 bd44 	b.w	80070fe <_dtoa_r+0xb56>
 8006676:	ab14      	add	r3, sp, #80	@ 0x50
 8006678:	9301      	str	r3, [sp, #4]
 800667a:	ab15      	add	r3, sp, #84	@ 0x54
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	4648      	mov	r0, r9
 8006680:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006684:	f001 f984 	bl	8007990 <__d2b>
 8006688:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800668c:	9003      	str	r0, [sp, #12]
 800668e:	2e00      	cmp	r6, #0
 8006690:	d078      	beq.n	8006784 <_dtoa_r+0x1dc>
 8006692:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006696:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006698:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800669c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066a0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80066a4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80066a8:	9712      	str	r7, [sp, #72]	@ 0x48
 80066aa:	4619      	mov	r1, r3
 80066ac:	2200      	movs	r2, #0
 80066ae:	4b7a      	ldr	r3, [pc, #488]	@ (8006898 <_dtoa_r+0x2f0>)
 80066b0:	f7f9 fd5a 	bl	8000168 <__aeabi_dsub>
 80066b4:	a36c      	add	r3, pc, #432	@ (adr r3, 8006868 <_dtoa_r+0x2c0>)
 80066b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ba:	f7f9 ff0d 	bl	80004d8 <__aeabi_dmul>
 80066be:	a36c      	add	r3, pc, #432	@ (adr r3, 8006870 <_dtoa_r+0x2c8>)
 80066c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c4:	f7f9 fd52 	bl	800016c <__adddf3>
 80066c8:	4604      	mov	r4, r0
 80066ca:	4630      	mov	r0, r6
 80066cc:	460d      	mov	r5, r1
 80066ce:	f7f9 fe99 	bl	8000404 <__aeabi_i2d>
 80066d2:	a369      	add	r3, pc, #420	@ (adr r3, 8006878 <_dtoa_r+0x2d0>)
 80066d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d8:	f7f9 fefe 	bl	80004d8 <__aeabi_dmul>
 80066dc:	4602      	mov	r2, r0
 80066de:	460b      	mov	r3, r1
 80066e0:	4620      	mov	r0, r4
 80066e2:	4629      	mov	r1, r5
 80066e4:	f7f9 fd42 	bl	800016c <__adddf3>
 80066e8:	4604      	mov	r4, r0
 80066ea:	460d      	mov	r5, r1
 80066ec:	f7fa f9a4 	bl	8000a38 <__aeabi_d2iz>
 80066f0:	2200      	movs	r2, #0
 80066f2:	4607      	mov	r7, r0
 80066f4:	2300      	movs	r3, #0
 80066f6:	4620      	mov	r0, r4
 80066f8:	4629      	mov	r1, r5
 80066fa:	f7fa f95f 	bl	80009bc <__aeabi_dcmplt>
 80066fe:	b140      	cbz	r0, 8006712 <_dtoa_r+0x16a>
 8006700:	4638      	mov	r0, r7
 8006702:	f7f9 fe7f 	bl	8000404 <__aeabi_i2d>
 8006706:	4622      	mov	r2, r4
 8006708:	462b      	mov	r3, r5
 800670a:	f7fa f94d 	bl	80009a8 <__aeabi_dcmpeq>
 800670e:	b900      	cbnz	r0, 8006712 <_dtoa_r+0x16a>
 8006710:	3f01      	subs	r7, #1
 8006712:	2f16      	cmp	r7, #22
 8006714:	d854      	bhi.n	80067c0 <_dtoa_r+0x218>
 8006716:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800671a:	4b60      	ldr	r3, [pc, #384]	@ (800689c <_dtoa_r+0x2f4>)
 800671c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006724:	f7fa f94a 	bl	80009bc <__aeabi_dcmplt>
 8006728:	2800      	cmp	r0, #0
 800672a:	d04b      	beq.n	80067c4 <_dtoa_r+0x21c>
 800672c:	2300      	movs	r3, #0
 800672e:	3f01      	subs	r7, #1
 8006730:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006732:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006734:	1b9b      	subs	r3, r3, r6
 8006736:	1e5a      	subs	r2, r3, #1
 8006738:	bf49      	itett	mi
 800673a:	f1c3 0301 	rsbmi	r3, r3, #1
 800673e:	2300      	movpl	r3, #0
 8006740:	9304      	strmi	r3, [sp, #16]
 8006742:	2300      	movmi	r3, #0
 8006744:	9209      	str	r2, [sp, #36]	@ 0x24
 8006746:	bf54      	ite	pl
 8006748:	9304      	strpl	r3, [sp, #16]
 800674a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800674c:	2f00      	cmp	r7, #0
 800674e:	db3b      	blt.n	80067c8 <_dtoa_r+0x220>
 8006750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006752:	970e      	str	r7, [sp, #56]	@ 0x38
 8006754:	443b      	add	r3, r7
 8006756:	9309      	str	r3, [sp, #36]	@ 0x24
 8006758:	2300      	movs	r3, #0
 800675a:	930a      	str	r3, [sp, #40]	@ 0x28
 800675c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800675e:	2b09      	cmp	r3, #9
 8006760:	d865      	bhi.n	800682e <_dtoa_r+0x286>
 8006762:	2b05      	cmp	r3, #5
 8006764:	bfc4      	itt	gt
 8006766:	3b04      	subgt	r3, #4
 8006768:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800676a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800676c:	bfc8      	it	gt
 800676e:	2400      	movgt	r4, #0
 8006770:	f1a3 0302 	sub.w	r3, r3, #2
 8006774:	bfd8      	it	le
 8006776:	2401      	movle	r4, #1
 8006778:	2b03      	cmp	r3, #3
 800677a:	d864      	bhi.n	8006846 <_dtoa_r+0x29e>
 800677c:	e8df f003 	tbb	[pc, r3]
 8006780:	2c385553 	.word	0x2c385553
 8006784:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006788:	441e      	add	r6, r3
 800678a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800678e:	2b20      	cmp	r3, #32
 8006790:	bfc1      	itttt	gt
 8006792:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006796:	fa08 f803 	lslgt.w	r8, r8, r3
 800679a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800679e:	fa24 f303 	lsrgt.w	r3, r4, r3
 80067a2:	bfd6      	itet	le
 80067a4:	f1c3 0320 	rsble	r3, r3, #32
 80067a8:	ea48 0003 	orrgt.w	r0, r8, r3
 80067ac:	fa04 f003 	lslle.w	r0, r4, r3
 80067b0:	f7f9 fe18 	bl	80003e4 <__aeabi_ui2d>
 80067b4:	2201      	movs	r2, #1
 80067b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80067ba:	3e01      	subs	r6, #1
 80067bc:	9212      	str	r2, [sp, #72]	@ 0x48
 80067be:	e774      	b.n	80066aa <_dtoa_r+0x102>
 80067c0:	2301      	movs	r3, #1
 80067c2:	e7b5      	b.n	8006730 <_dtoa_r+0x188>
 80067c4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80067c6:	e7b4      	b.n	8006732 <_dtoa_r+0x18a>
 80067c8:	9b04      	ldr	r3, [sp, #16]
 80067ca:	1bdb      	subs	r3, r3, r7
 80067cc:	9304      	str	r3, [sp, #16]
 80067ce:	427b      	negs	r3, r7
 80067d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80067d2:	2300      	movs	r3, #0
 80067d4:	930e      	str	r3, [sp, #56]	@ 0x38
 80067d6:	e7c1      	b.n	800675c <_dtoa_r+0x1b4>
 80067d8:	2301      	movs	r3, #1
 80067da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80067de:	eb07 0b03 	add.w	fp, r7, r3
 80067e2:	f10b 0301 	add.w	r3, fp, #1
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	9308      	str	r3, [sp, #32]
 80067ea:	bfb8      	it	lt
 80067ec:	2301      	movlt	r3, #1
 80067ee:	e006      	b.n	80067fe <_dtoa_r+0x256>
 80067f0:	2301      	movs	r3, #1
 80067f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	dd28      	ble.n	800684c <_dtoa_r+0x2a4>
 80067fa:	469b      	mov	fp, r3
 80067fc:	9308      	str	r3, [sp, #32]
 80067fe:	2100      	movs	r1, #0
 8006800:	2204      	movs	r2, #4
 8006802:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006806:	f102 0514 	add.w	r5, r2, #20
 800680a:	429d      	cmp	r5, r3
 800680c:	d926      	bls.n	800685c <_dtoa_r+0x2b4>
 800680e:	6041      	str	r1, [r0, #4]
 8006810:	4648      	mov	r0, r9
 8006812:	f000 fd9b 	bl	800734c <_Balloc>
 8006816:	4682      	mov	sl, r0
 8006818:	2800      	cmp	r0, #0
 800681a:	d143      	bne.n	80068a4 <_dtoa_r+0x2fc>
 800681c:	4602      	mov	r2, r0
 800681e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006822:	4b1f      	ldr	r3, [pc, #124]	@ (80068a0 <_dtoa_r+0x2f8>)
 8006824:	e6d4      	b.n	80065d0 <_dtoa_r+0x28>
 8006826:	2300      	movs	r3, #0
 8006828:	e7e3      	b.n	80067f2 <_dtoa_r+0x24a>
 800682a:	2300      	movs	r3, #0
 800682c:	e7d5      	b.n	80067da <_dtoa_r+0x232>
 800682e:	2401      	movs	r4, #1
 8006830:	2300      	movs	r3, #0
 8006832:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006834:	9320      	str	r3, [sp, #128]	@ 0x80
 8006836:	f04f 3bff 	mov.w	fp, #4294967295
 800683a:	2200      	movs	r2, #0
 800683c:	2312      	movs	r3, #18
 800683e:	f8cd b020 	str.w	fp, [sp, #32]
 8006842:	9221      	str	r2, [sp, #132]	@ 0x84
 8006844:	e7db      	b.n	80067fe <_dtoa_r+0x256>
 8006846:	2301      	movs	r3, #1
 8006848:	930b      	str	r3, [sp, #44]	@ 0x2c
 800684a:	e7f4      	b.n	8006836 <_dtoa_r+0x28e>
 800684c:	f04f 0b01 	mov.w	fp, #1
 8006850:	465b      	mov	r3, fp
 8006852:	f8cd b020 	str.w	fp, [sp, #32]
 8006856:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800685a:	e7d0      	b.n	80067fe <_dtoa_r+0x256>
 800685c:	3101      	adds	r1, #1
 800685e:	0052      	lsls	r2, r2, #1
 8006860:	e7d1      	b.n	8006806 <_dtoa_r+0x25e>
 8006862:	bf00      	nop
 8006864:	f3af 8000 	nop.w
 8006868:	636f4361 	.word	0x636f4361
 800686c:	3fd287a7 	.word	0x3fd287a7
 8006870:	8b60c8b3 	.word	0x8b60c8b3
 8006874:	3fc68a28 	.word	0x3fc68a28
 8006878:	509f79fb 	.word	0x509f79fb
 800687c:	3fd34413 	.word	0x3fd34413
 8006880:	08008d2f 	.word	0x08008d2f
 8006884:	08008d46 	.word	0x08008d46
 8006888:	7ff00000 	.word	0x7ff00000
 800688c:	08008d2b 	.word	0x08008d2b
 8006890:	08008cff 	.word	0x08008cff
 8006894:	08008cfe 	.word	0x08008cfe
 8006898:	3ff80000 	.word	0x3ff80000
 800689c:	08008e98 	.word	0x08008e98
 80068a0:	08008d9e 	.word	0x08008d9e
 80068a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80068a8:	6018      	str	r0, [r3, #0]
 80068aa:	9b08      	ldr	r3, [sp, #32]
 80068ac:	2b0e      	cmp	r3, #14
 80068ae:	f200 80a1 	bhi.w	80069f4 <_dtoa_r+0x44c>
 80068b2:	2c00      	cmp	r4, #0
 80068b4:	f000 809e 	beq.w	80069f4 <_dtoa_r+0x44c>
 80068b8:	2f00      	cmp	r7, #0
 80068ba:	dd33      	ble.n	8006924 <_dtoa_r+0x37c>
 80068bc:	4b9c      	ldr	r3, [pc, #624]	@ (8006b30 <_dtoa_r+0x588>)
 80068be:	f007 020f 	and.w	r2, r7, #15
 80068c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068c6:	05f8      	lsls	r0, r7, #23
 80068c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80068cc:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80068d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80068d4:	d516      	bpl.n	8006904 <_dtoa_r+0x35c>
 80068d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068da:	4b96      	ldr	r3, [pc, #600]	@ (8006b34 <_dtoa_r+0x58c>)
 80068dc:	2603      	movs	r6, #3
 80068de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068e2:	f7f9 ff23 	bl	800072c <__aeabi_ddiv>
 80068e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80068ea:	f004 040f 	and.w	r4, r4, #15
 80068ee:	4d91      	ldr	r5, [pc, #580]	@ (8006b34 <_dtoa_r+0x58c>)
 80068f0:	b954      	cbnz	r4, 8006908 <_dtoa_r+0x360>
 80068f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80068f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068fa:	f7f9 ff17 	bl	800072c <__aeabi_ddiv>
 80068fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006902:	e028      	b.n	8006956 <_dtoa_r+0x3ae>
 8006904:	2602      	movs	r6, #2
 8006906:	e7f2      	b.n	80068ee <_dtoa_r+0x346>
 8006908:	07e1      	lsls	r1, r4, #31
 800690a:	d508      	bpl.n	800691e <_dtoa_r+0x376>
 800690c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006910:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006914:	f7f9 fde0 	bl	80004d8 <__aeabi_dmul>
 8006918:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800691c:	3601      	adds	r6, #1
 800691e:	1064      	asrs	r4, r4, #1
 8006920:	3508      	adds	r5, #8
 8006922:	e7e5      	b.n	80068f0 <_dtoa_r+0x348>
 8006924:	f000 80af 	beq.w	8006a86 <_dtoa_r+0x4de>
 8006928:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800692c:	427c      	negs	r4, r7
 800692e:	4b80      	ldr	r3, [pc, #512]	@ (8006b30 <_dtoa_r+0x588>)
 8006930:	f004 020f 	and.w	r2, r4, #15
 8006934:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693c:	f7f9 fdcc 	bl	80004d8 <__aeabi_dmul>
 8006940:	2602      	movs	r6, #2
 8006942:	2300      	movs	r3, #0
 8006944:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006948:	4d7a      	ldr	r5, [pc, #488]	@ (8006b34 <_dtoa_r+0x58c>)
 800694a:	1124      	asrs	r4, r4, #4
 800694c:	2c00      	cmp	r4, #0
 800694e:	f040 808f 	bne.w	8006a70 <_dtoa_r+0x4c8>
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1d3      	bne.n	80068fe <_dtoa_r+0x356>
 8006956:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800695a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800695c:	2b00      	cmp	r3, #0
 800695e:	f000 8094 	beq.w	8006a8a <_dtoa_r+0x4e2>
 8006962:	2200      	movs	r2, #0
 8006964:	4620      	mov	r0, r4
 8006966:	4629      	mov	r1, r5
 8006968:	4b73      	ldr	r3, [pc, #460]	@ (8006b38 <_dtoa_r+0x590>)
 800696a:	f7fa f827 	bl	80009bc <__aeabi_dcmplt>
 800696e:	2800      	cmp	r0, #0
 8006970:	f000 808b 	beq.w	8006a8a <_dtoa_r+0x4e2>
 8006974:	9b08      	ldr	r3, [sp, #32]
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 8087 	beq.w	8006a8a <_dtoa_r+0x4e2>
 800697c:	f1bb 0f00 	cmp.w	fp, #0
 8006980:	dd34      	ble.n	80069ec <_dtoa_r+0x444>
 8006982:	4620      	mov	r0, r4
 8006984:	2200      	movs	r2, #0
 8006986:	4629      	mov	r1, r5
 8006988:	4b6c      	ldr	r3, [pc, #432]	@ (8006b3c <_dtoa_r+0x594>)
 800698a:	f7f9 fda5 	bl	80004d8 <__aeabi_dmul>
 800698e:	465c      	mov	r4, fp
 8006990:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006994:	f107 38ff 	add.w	r8, r7, #4294967295
 8006998:	3601      	adds	r6, #1
 800699a:	4630      	mov	r0, r6
 800699c:	f7f9 fd32 	bl	8000404 <__aeabi_i2d>
 80069a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069a4:	f7f9 fd98 	bl	80004d8 <__aeabi_dmul>
 80069a8:	2200      	movs	r2, #0
 80069aa:	4b65      	ldr	r3, [pc, #404]	@ (8006b40 <_dtoa_r+0x598>)
 80069ac:	f7f9 fbde 	bl	800016c <__adddf3>
 80069b0:	4605      	mov	r5, r0
 80069b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80069b6:	2c00      	cmp	r4, #0
 80069b8:	d16a      	bne.n	8006a90 <_dtoa_r+0x4e8>
 80069ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069be:	2200      	movs	r2, #0
 80069c0:	4b60      	ldr	r3, [pc, #384]	@ (8006b44 <_dtoa_r+0x59c>)
 80069c2:	f7f9 fbd1 	bl	8000168 <__aeabi_dsub>
 80069c6:	4602      	mov	r2, r0
 80069c8:	460b      	mov	r3, r1
 80069ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80069ce:	462a      	mov	r2, r5
 80069d0:	4633      	mov	r3, r6
 80069d2:	f7fa f811 	bl	80009f8 <__aeabi_dcmpgt>
 80069d6:	2800      	cmp	r0, #0
 80069d8:	f040 8298 	bne.w	8006f0c <_dtoa_r+0x964>
 80069dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069e0:	462a      	mov	r2, r5
 80069e2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80069e6:	f7f9 ffe9 	bl	80009bc <__aeabi_dcmplt>
 80069ea:	bb38      	cbnz	r0, 8006a3c <_dtoa_r+0x494>
 80069ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80069f0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80069f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f2c0 8157 	blt.w	8006caa <_dtoa_r+0x702>
 80069fc:	2f0e      	cmp	r7, #14
 80069fe:	f300 8154 	bgt.w	8006caa <_dtoa_r+0x702>
 8006a02:	4b4b      	ldr	r3, [pc, #300]	@ (8006b30 <_dtoa_r+0x588>)
 8006a04:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a08:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a0c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006a10:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f280 80e5 	bge.w	8006be2 <_dtoa_r+0x63a>
 8006a18:	9b08      	ldr	r3, [sp, #32]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f300 80e1 	bgt.w	8006be2 <_dtoa_r+0x63a>
 8006a20:	d10c      	bne.n	8006a3c <_dtoa_r+0x494>
 8006a22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a26:	2200      	movs	r2, #0
 8006a28:	4b46      	ldr	r3, [pc, #280]	@ (8006b44 <_dtoa_r+0x59c>)
 8006a2a:	f7f9 fd55 	bl	80004d8 <__aeabi_dmul>
 8006a2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a32:	f7f9 ffd7 	bl	80009e4 <__aeabi_dcmpge>
 8006a36:	2800      	cmp	r0, #0
 8006a38:	f000 8266 	beq.w	8006f08 <_dtoa_r+0x960>
 8006a3c:	2400      	movs	r4, #0
 8006a3e:	4625      	mov	r5, r4
 8006a40:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a42:	4656      	mov	r6, sl
 8006a44:	ea6f 0803 	mvn.w	r8, r3
 8006a48:	2700      	movs	r7, #0
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	4648      	mov	r0, r9
 8006a4e:	f000 fcbd 	bl	80073cc <_Bfree>
 8006a52:	2d00      	cmp	r5, #0
 8006a54:	f000 80bd 	beq.w	8006bd2 <_dtoa_r+0x62a>
 8006a58:	b12f      	cbz	r7, 8006a66 <_dtoa_r+0x4be>
 8006a5a:	42af      	cmp	r7, r5
 8006a5c:	d003      	beq.n	8006a66 <_dtoa_r+0x4be>
 8006a5e:	4639      	mov	r1, r7
 8006a60:	4648      	mov	r0, r9
 8006a62:	f000 fcb3 	bl	80073cc <_Bfree>
 8006a66:	4629      	mov	r1, r5
 8006a68:	4648      	mov	r0, r9
 8006a6a:	f000 fcaf 	bl	80073cc <_Bfree>
 8006a6e:	e0b0      	b.n	8006bd2 <_dtoa_r+0x62a>
 8006a70:	07e2      	lsls	r2, r4, #31
 8006a72:	d505      	bpl.n	8006a80 <_dtoa_r+0x4d8>
 8006a74:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a78:	f7f9 fd2e 	bl	80004d8 <__aeabi_dmul>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	3601      	adds	r6, #1
 8006a80:	1064      	asrs	r4, r4, #1
 8006a82:	3508      	adds	r5, #8
 8006a84:	e762      	b.n	800694c <_dtoa_r+0x3a4>
 8006a86:	2602      	movs	r6, #2
 8006a88:	e765      	b.n	8006956 <_dtoa_r+0x3ae>
 8006a8a:	46b8      	mov	r8, r7
 8006a8c:	9c08      	ldr	r4, [sp, #32]
 8006a8e:	e784      	b.n	800699a <_dtoa_r+0x3f2>
 8006a90:	4b27      	ldr	r3, [pc, #156]	@ (8006b30 <_dtoa_r+0x588>)
 8006a92:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a9c:	4454      	add	r4, sl
 8006a9e:	2900      	cmp	r1, #0
 8006aa0:	d054      	beq.n	8006b4c <_dtoa_r+0x5a4>
 8006aa2:	2000      	movs	r0, #0
 8006aa4:	4928      	ldr	r1, [pc, #160]	@ (8006b48 <_dtoa_r+0x5a0>)
 8006aa6:	f7f9 fe41 	bl	800072c <__aeabi_ddiv>
 8006aaa:	4633      	mov	r3, r6
 8006aac:	462a      	mov	r2, r5
 8006aae:	f7f9 fb5b 	bl	8000168 <__aeabi_dsub>
 8006ab2:	4656      	mov	r6, sl
 8006ab4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ab8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006abc:	f7f9 ffbc 	bl	8000a38 <__aeabi_d2iz>
 8006ac0:	4605      	mov	r5, r0
 8006ac2:	f7f9 fc9f 	bl	8000404 <__aeabi_i2d>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ace:	f7f9 fb4b 	bl	8000168 <__aeabi_dsub>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	3530      	adds	r5, #48	@ 0x30
 8006ad8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006adc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006ae0:	f806 5b01 	strb.w	r5, [r6], #1
 8006ae4:	f7f9 ff6a 	bl	80009bc <__aeabi_dcmplt>
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	d172      	bne.n	8006bd2 <_dtoa_r+0x62a>
 8006aec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006af0:	2000      	movs	r0, #0
 8006af2:	4911      	ldr	r1, [pc, #68]	@ (8006b38 <_dtoa_r+0x590>)
 8006af4:	f7f9 fb38 	bl	8000168 <__aeabi_dsub>
 8006af8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006afc:	f7f9 ff5e 	bl	80009bc <__aeabi_dcmplt>
 8006b00:	2800      	cmp	r0, #0
 8006b02:	f040 80b4 	bne.w	8006c6e <_dtoa_r+0x6c6>
 8006b06:	42a6      	cmp	r6, r4
 8006b08:	f43f af70 	beq.w	80069ec <_dtoa_r+0x444>
 8006b0c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006b10:	2200      	movs	r2, #0
 8006b12:	4b0a      	ldr	r3, [pc, #40]	@ (8006b3c <_dtoa_r+0x594>)
 8006b14:	f7f9 fce0 	bl	80004d8 <__aeabi_dmul>
 8006b18:	2200      	movs	r2, #0
 8006b1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006b1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b22:	4b06      	ldr	r3, [pc, #24]	@ (8006b3c <_dtoa_r+0x594>)
 8006b24:	f7f9 fcd8 	bl	80004d8 <__aeabi_dmul>
 8006b28:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b2c:	e7c4      	b.n	8006ab8 <_dtoa_r+0x510>
 8006b2e:	bf00      	nop
 8006b30:	08008e98 	.word	0x08008e98
 8006b34:	08008e70 	.word	0x08008e70
 8006b38:	3ff00000 	.word	0x3ff00000
 8006b3c:	40240000 	.word	0x40240000
 8006b40:	401c0000 	.word	0x401c0000
 8006b44:	40140000 	.word	0x40140000
 8006b48:	3fe00000 	.word	0x3fe00000
 8006b4c:	4631      	mov	r1, r6
 8006b4e:	4628      	mov	r0, r5
 8006b50:	f7f9 fcc2 	bl	80004d8 <__aeabi_dmul>
 8006b54:	4656      	mov	r6, sl
 8006b56:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006b5a:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006b5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b60:	f7f9 ff6a 	bl	8000a38 <__aeabi_d2iz>
 8006b64:	4605      	mov	r5, r0
 8006b66:	f7f9 fc4d 	bl	8000404 <__aeabi_i2d>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b72:	f7f9 faf9 	bl	8000168 <__aeabi_dsub>
 8006b76:	4602      	mov	r2, r0
 8006b78:	460b      	mov	r3, r1
 8006b7a:	3530      	adds	r5, #48	@ 0x30
 8006b7c:	f806 5b01 	strb.w	r5, [r6], #1
 8006b80:	42a6      	cmp	r6, r4
 8006b82:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006b86:	f04f 0200 	mov.w	r2, #0
 8006b8a:	d124      	bne.n	8006bd6 <_dtoa_r+0x62e>
 8006b8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006b90:	4bae      	ldr	r3, [pc, #696]	@ (8006e4c <_dtoa_r+0x8a4>)
 8006b92:	f7f9 faeb 	bl	800016c <__adddf3>
 8006b96:	4602      	mov	r2, r0
 8006b98:	460b      	mov	r3, r1
 8006b9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b9e:	f7f9 ff2b 	bl	80009f8 <__aeabi_dcmpgt>
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d163      	bne.n	8006c6e <_dtoa_r+0x6c6>
 8006ba6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006baa:	2000      	movs	r0, #0
 8006bac:	49a7      	ldr	r1, [pc, #668]	@ (8006e4c <_dtoa_r+0x8a4>)
 8006bae:	f7f9 fadb 	bl	8000168 <__aeabi_dsub>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bba:	f7f9 feff 	bl	80009bc <__aeabi_dcmplt>
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	f43f af14 	beq.w	80069ec <_dtoa_r+0x444>
 8006bc4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006bc6:	1e73      	subs	r3, r6, #1
 8006bc8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006bca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006bce:	2b30      	cmp	r3, #48	@ 0x30
 8006bd0:	d0f8      	beq.n	8006bc4 <_dtoa_r+0x61c>
 8006bd2:	4647      	mov	r7, r8
 8006bd4:	e03b      	b.n	8006c4e <_dtoa_r+0x6a6>
 8006bd6:	4b9e      	ldr	r3, [pc, #632]	@ (8006e50 <_dtoa_r+0x8a8>)
 8006bd8:	f7f9 fc7e 	bl	80004d8 <__aeabi_dmul>
 8006bdc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006be0:	e7bc      	b.n	8006b5c <_dtoa_r+0x5b4>
 8006be2:	4656      	mov	r6, sl
 8006be4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006be8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bec:	4620      	mov	r0, r4
 8006bee:	4629      	mov	r1, r5
 8006bf0:	f7f9 fd9c 	bl	800072c <__aeabi_ddiv>
 8006bf4:	f7f9 ff20 	bl	8000a38 <__aeabi_d2iz>
 8006bf8:	4680      	mov	r8, r0
 8006bfa:	f7f9 fc03 	bl	8000404 <__aeabi_i2d>
 8006bfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c02:	f7f9 fc69 	bl	80004d8 <__aeabi_dmul>
 8006c06:	4602      	mov	r2, r0
 8006c08:	460b      	mov	r3, r1
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	4629      	mov	r1, r5
 8006c0e:	f7f9 faab 	bl	8000168 <__aeabi_dsub>
 8006c12:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006c16:	9d08      	ldr	r5, [sp, #32]
 8006c18:	f806 4b01 	strb.w	r4, [r6], #1
 8006c1c:	eba6 040a 	sub.w	r4, r6, sl
 8006c20:	42a5      	cmp	r5, r4
 8006c22:	4602      	mov	r2, r0
 8006c24:	460b      	mov	r3, r1
 8006c26:	d133      	bne.n	8006c90 <_dtoa_r+0x6e8>
 8006c28:	f7f9 faa0 	bl	800016c <__adddf3>
 8006c2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c30:	4604      	mov	r4, r0
 8006c32:	460d      	mov	r5, r1
 8006c34:	f7f9 fee0 	bl	80009f8 <__aeabi_dcmpgt>
 8006c38:	b9c0      	cbnz	r0, 8006c6c <_dtoa_r+0x6c4>
 8006c3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c3e:	4620      	mov	r0, r4
 8006c40:	4629      	mov	r1, r5
 8006c42:	f7f9 feb1 	bl	80009a8 <__aeabi_dcmpeq>
 8006c46:	b110      	cbz	r0, 8006c4e <_dtoa_r+0x6a6>
 8006c48:	f018 0f01 	tst.w	r8, #1
 8006c4c:	d10e      	bne.n	8006c6c <_dtoa_r+0x6c4>
 8006c4e:	4648      	mov	r0, r9
 8006c50:	9903      	ldr	r1, [sp, #12]
 8006c52:	f000 fbbb 	bl	80073cc <_Bfree>
 8006c56:	2300      	movs	r3, #0
 8006c58:	7033      	strb	r3, [r6, #0]
 8006c5a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006c5c:	3701      	adds	r7, #1
 8006c5e:	601f      	str	r7, [r3, #0]
 8006c60:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f000 824b 	beq.w	80070fe <_dtoa_r+0xb56>
 8006c68:	601e      	str	r6, [r3, #0]
 8006c6a:	e248      	b.n	80070fe <_dtoa_r+0xb56>
 8006c6c:	46b8      	mov	r8, r7
 8006c6e:	4633      	mov	r3, r6
 8006c70:	461e      	mov	r6, r3
 8006c72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c76:	2a39      	cmp	r2, #57	@ 0x39
 8006c78:	d106      	bne.n	8006c88 <_dtoa_r+0x6e0>
 8006c7a:	459a      	cmp	sl, r3
 8006c7c:	d1f8      	bne.n	8006c70 <_dtoa_r+0x6c8>
 8006c7e:	2230      	movs	r2, #48	@ 0x30
 8006c80:	f108 0801 	add.w	r8, r8, #1
 8006c84:	f88a 2000 	strb.w	r2, [sl]
 8006c88:	781a      	ldrb	r2, [r3, #0]
 8006c8a:	3201      	adds	r2, #1
 8006c8c:	701a      	strb	r2, [r3, #0]
 8006c8e:	e7a0      	b.n	8006bd2 <_dtoa_r+0x62a>
 8006c90:	2200      	movs	r2, #0
 8006c92:	4b6f      	ldr	r3, [pc, #444]	@ (8006e50 <_dtoa_r+0x8a8>)
 8006c94:	f7f9 fc20 	bl	80004d8 <__aeabi_dmul>
 8006c98:	2200      	movs	r2, #0
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	4604      	mov	r4, r0
 8006c9e:	460d      	mov	r5, r1
 8006ca0:	f7f9 fe82 	bl	80009a8 <__aeabi_dcmpeq>
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	d09f      	beq.n	8006be8 <_dtoa_r+0x640>
 8006ca8:	e7d1      	b.n	8006c4e <_dtoa_r+0x6a6>
 8006caa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006cac:	2a00      	cmp	r2, #0
 8006cae:	f000 80ea 	beq.w	8006e86 <_dtoa_r+0x8de>
 8006cb2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006cb4:	2a01      	cmp	r2, #1
 8006cb6:	f300 80cd 	bgt.w	8006e54 <_dtoa_r+0x8ac>
 8006cba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006cbc:	2a00      	cmp	r2, #0
 8006cbe:	f000 80c1 	beq.w	8006e44 <_dtoa_r+0x89c>
 8006cc2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006cc6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006cc8:	9e04      	ldr	r6, [sp, #16]
 8006cca:	9a04      	ldr	r2, [sp, #16]
 8006ccc:	2101      	movs	r1, #1
 8006cce:	441a      	add	r2, r3
 8006cd0:	9204      	str	r2, [sp, #16]
 8006cd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cd4:	4648      	mov	r0, r9
 8006cd6:	441a      	add	r2, r3
 8006cd8:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cda:	f000 fc2b 	bl	8007534 <__i2b>
 8006cde:	4605      	mov	r5, r0
 8006ce0:	b166      	cbz	r6, 8006cfc <_dtoa_r+0x754>
 8006ce2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	dd09      	ble.n	8006cfc <_dtoa_r+0x754>
 8006ce8:	42b3      	cmp	r3, r6
 8006cea:	bfa8      	it	ge
 8006cec:	4633      	movge	r3, r6
 8006cee:	9a04      	ldr	r2, [sp, #16]
 8006cf0:	1af6      	subs	r6, r6, r3
 8006cf2:	1ad2      	subs	r2, r2, r3
 8006cf4:	9204      	str	r2, [sp, #16]
 8006cf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cfe:	b30b      	cbz	r3, 8006d44 <_dtoa_r+0x79c>
 8006d00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f000 80c6 	beq.w	8006e94 <_dtoa_r+0x8ec>
 8006d08:	2c00      	cmp	r4, #0
 8006d0a:	f000 80c0 	beq.w	8006e8e <_dtoa_r+0x8e6>
 8006d0e:	4629      	mov	r1, r5
 8006d10:	4622      	mov	r2, r4
 8006d12:	4648      	mov	r0, r9
 8006d14:	f000 fcc6 	bl	80076a4 <__pow5mult>
 8006d18:	9a03      	ldr	r2, [sp, #12]
 8006d1a:	4601      	mov	r1, r0
 8006d1c:	4605      	mov	r5, r0
 8006d1e:	4648      	mov	r0, r9
 8006d20:	f000 fc1e 	bl	8007560 <__multiply>
 8006d24:	9903      	ldr	r1, [sp, #12]
 8006d26:	4680      	mov	r8, r0
 8006d28:	4648      	mov	r0, r9
 8006d2a:	f000 fb4f 	bl	80073cc <_Bfree>
 8006d2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d30:	1b1b      	subs	r3, r3, r4
 8006d32:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d34:	f000 80b1 	beq.w	8006e9a <_dtoa_r+0x8f2>
 8006d38:	4641      	mov	r1, r8
 8006d3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d3c:	4648      	mov	r0, r9
 8006d3e:	f000 fcb1 	bl	80076a4 <__pow5mult>
 8006d42:	9003      	str	r0, [sp, #12]
 8006d44:	2101      	movs	r1, #1
 8006d46:	4648      	mov	r0, r9
 8006d48:	f000 fbf4 	bl	8007534 <__i2b>
 8006d4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d4e:	4604      	mov	r4, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 81d8 	beq.w	8007106 <_dtoa_r+0xb5e>
 8006d56:	461a      	mov	r2, r3
 8006d58:	4601      	mov	r1, r0
 8006d5a:	4648      	mov	r0, r9
 8006d5c:	f000 fca2 	bl	80076a4 <__pow5mult>
 8006d60:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d62:	4604      	mov	r4, r0
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	f300 809f 	bgt.w	8006ea8 <_dtoa_r+0x900>
 8006d6a:	9b06      	ldr	r3, [sp, #24]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f040 8097 	bne.w	8006ea0 <_dtoa_r+0x8f8>
 8006d72:	9b07      	ldr	r3, [sp, #28]
 8006d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f040 8093 	bne.w	8006ea4 <_dtoa_r+0x8fc>
 8006d7e:	9b07      	ldr	r3, [sp, #28]
 8006d80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006d84:	0d1b      	lsrs	r3, r3, #20
 8006d86:	051b      	lsls	r3, r3, #20
 8006d88:	b133      	cbz	r3, 8006d98 <_dtoa_r+0x7f0>
 8006d8a:	9b04      	ldr	r3, [sp, #16]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	9304      	str	r3, [sp, #16]
 8006d90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d92:	3301      	adds	r3, #1
 8006d94:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d96:	2301      	movs	r3, #1
 8006d98:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 81b8 	beq.w	8007112 <_dtoa_r+0xb6a>
 8006da2:	6923      	ldr	r3, [r4, #16]
 8006da4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006da8:	6918      	ldr	r0, [r3, #16]
 8006daa:	f000 fb77 	bl	800749c <__hi0bits>
 8006dae:	f1c0 0020 	rsb	r0, r0, #32
 8006db2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006db4:	4418      	add	r0, r3
 8006db6:	f010 001f 	ands.w	r0, r0, #31
 8006dba:	f000 8082 	beq.w	8006ec2 <_dtoa_r+0x91a>
 8006dbe:	f1c0 0320 	rsb	r3, r0, #32
 8006dc2:	2b04      	cmp	r3, #4
 8006dc4:	dd73      	ble.n	8006eae <_dtoa_r+0x906>
 8006dc6:	9b04      	ldr	r3, [sp, #16]
 8006dc8:	f1c0 001c 	rsb	r0, r0, #28
 8006dcc:	4403      	add	r3, r0
 8006dce:	9304      	str	r3, [sp, #16]
 8006dd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dd2:	4406      	add	r6, r0
 8006dd4:	4403      	add	r3, r0
 8006dd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dd8:	9b04      	ldr	r3, [sp, #16]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	dd05      	ble.n	8006dea <_dtoa_r+0x842>
 8006dde:	461a      	mov	r2, r3
 8006de0:	4648      	mov	r0, r9
 8006de2:	9903      	ldr	r1, [sp, #12]
 8006de4:	f000 fcb8 	bl	8007758 <__lshift>
 8006de8:	9003      	str	r0, [sp, #12]
 8006dea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	dd05      	ble.n	8006dfc <_dtoa_r+0x854>
 8006df0:	4621      	mov	r1, r4
 8006df2:	461a      	mov	r2, r3
 8006df4:	4648      	mov	r0, r9
 8006df6:	f000 fcaf 	bl	8007758 <__lshift>
 8006dfa:	4604      	mov	r4, r0
 8006dfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d061      	beq.n	8006ec6 <_dtoa_r+0x91e>
 8006e02:	4621      	mov	r1, r4
 8006e04:	9803      	ldr	r0, [sp, #12]
 8006e06:	f000 fd13 	bl	8007830 <__mcmp>
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	da5b      	bge.n	8006ec6 <_dtoa_r+0x91e>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	220a      	movs	r2, #10
 8006e12:	4648      	mov	r0, r9
 8006e14:	9903      	ldr	r1, [sp, #12]
 8006e16:	f000 fafb 	bl	8007410 <__multadd>
 8006e1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e1c:	f107 38ff 	add.w	r8, r7, #4294967295
 8006e20:	9003      	str	r0, [sp, #12]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f000 8177 	beq.w	8007116 <_dtoa_r+0xb6e>
 8006e28:	4629      	mov	r1, r5
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	220a      	movs	r2, #10
 8006e2e:	4648      	mov	r0, r9
 8006e30:	f000 faee 	bl	8007410 <__multadd>
 8006e34:	f1bb 0f00 	cmp.w	fp, #0
 8006e38:	4605      	mov	r5, r0
 8006e3a:	dc6f      	bgt.n	8006f1c <_dtoa_r+0x974>
 8006e3c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	dc49      	bgt.n	8006ed6 <_dtoa_r+0x92e>
 8006e42:	e06b      	b.n	8006f1c <_dtoa_r+0x974>
 8006e44:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006e46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006e4a:	e73c      	b.n	8006cc6 <_dtoa_r+0x71e>
 8006e4c:	3fe00000 	.word	0x3fe00000
 8006e50:	40240000 	.word	0x40240000
 8006e54:	9b08      	ldr	r3, [sp, #32]
 8006e56:	1e5c      	subs	r4, r3, #1
 8006e58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e5a:	42a3      	cmp	r3, r4
 8006e5c:	db09      	blt.n	8006e72 <_dtoa_r+0x8ca>
 8006e5e:	1b1c      	subs	r4, r3, r4
 8006e60:	9b08      	ldr	r3, [sp, #32]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f6bf af30 	bge.w	8006cc8 <_dtoa_r+0x720>
 8006e68:	9b04      	ldr	r3, [sp, #16]
 8006e6a:	9a08      	ldr	r2, [sp, #32]
 8006e6c:	1a9e      	subs	r6, r3, r2
 8006e6e:	2300      	movs	r3, #0
 8006e70:	e72b      	b.n	8006cca <_dtoa_r+0x722>
 8006e72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e76:	1ae3      	subs	r3, r4, r3
 8006e78:	441a      	add	r2, r3
 8006e7a:	940a      	str	r4, [sp, #40]	@ 0x28
 8006e7c:	9e04      	ldr	r6, [sp, #16]
 8006e7e:	2400      	movs	r4, #0
 8006e80:	9b08      	ldr	r3, [sp, #32]
 8006e82:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e84:	e721      	b.n	8006cca <_dtoa_r+0x722>
 8006e86:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006e88:	9e04      	ldr	r6, [sp, #16]
 8006e8a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006e8c:	e728      	b.n	8006ce0 <_dtoa_r+0x738>
 8006e8e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006e92:	e751      	b.n	8006d38 <_dtoa_r+0x790>
 8006e94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e96:	9903      	ldr	r1, [sp, #12]
 8006e98:	e750      	b.n	8006d3c <_dtoa_r+0x794>
 8006e9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e9e:	e751      	b.n	8006d44 <_dtoa_r+0x79c>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	e779      	b.n	8006d98 <_dtoa_r+0x7f0>
 8006ea4:	9b06      	ldr	r3, [sp, #24]
 8006ea6:	e777      	b.n	8006d98 <_dtoa_r+0x7f0>
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	930a      	str	r3, [sp, #40]	@ 0x28
 8006eac:	e779      	b.n	8006da2 <_dtoa_r+0x7fa>
 8006eae:	d093      	beq.n	8006dd8 <_dtoa_r+0x830>
 8006eb0:	9a04      	ldr	r2, [sp, #16]
 8006eb2:	331c      	adds	r3, #28
 8006eb4:	441a      	add	r2, r3
 8006eb6:	9204      	str	r2, [sp, #16]
 8006eb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006eba:	441e      	add	r6, r3
 8006ebc:	441a      	add	r2, r3
 8006ebe:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ec0:	e78a      	b.n	8006dd8 <_dtoa_r+0x830>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	e7f4      	b.n	8006eb0 <_dtoa_r+0x908>
 8006ec6:	9b08      	ldr	r3, [sp, #32]
 8006ec8:	46b8      	mov	r8, r7
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	dc20      	bgt.n	8006f10 <_dtoa_r+0x968>
 8006ece:	469b      	mov	fp, r3
 8006ed0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	dd1e      	ble.n	8006f14 <_dtoa_r+0x96c>
 8006ed6:	f1bb 0f00 	cmp.w	fp, #0
 8006eda:	f47f adb1 	bne.w	8006a40 <_dtoa_r+0x498>
 8006ede:	4621      	mov	r1, r4
 8006ee0:	465b      	mov	r3, fp
 8006ee2:	2205      	movs	r2, #5
 8006ee4:	4648      	mov	r0, r9
 8006ee6:	f000 fa93 	bl	8007410 <__multadd>
 8006eea:	4601      	mov	r1, r0
 8006eec:	4604      	mov	r4, r0
 8006eee:	9803      	ldr	r0, [sp, #12]
 8006ef0:	f000 fc9e 	bl	8007830 <__mcmp>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	f77f ada3 	ble.w	8006a40 <_dtoa_r+0x498>
 8006efa:	4656      	mov	r6, sl
 8006efc:	2331      	movs	r3, #49	@ 0x31
 8006efe:	f108 0801 	add.w	r8, r8, #1
 8006f02:	f806 3b01 	strb.w	r3, [r6], #1
 8006f06:	e59f      	b.n	8006a48 <_dtoa_r+0x4a0>
 8006f08:	46b8      	mov	r8, r7
 8006f0a:	9c08      	ldr	r4, [sp, #32]
 8006f0c:	4625      	mov	r5, r4
 8006f0e:	e7f4      	b.n	8006efa <_dtoa_r+0x952>
 8006f10:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006f14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f000 8101 	beq.w	800711e <_dtoa_r+0xb76>
 8006f1c:	2e00      	cmp	r6, #0
 8006f1e:	dd05      	ble.n	8006f2c <_dtoa_r+0x984>
 8006f20:	4629      	mov	r1, r5
 8006f22:	4632      	mov	r2, r6
 8006f24:	4648      	mov	r0, r9
 8006f26:	f000 fc17 	bl	8007758 <__lshift>
 8006f2a:	4605      	mov	r5, r0
 8006f2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d05c      	beq.n	8006fec <_dtoa_r+0xa44>
 8006f32:	4648      	mov	r0, r9
 8006f34:	6869      	ldr	r1, [r5, #4]
 8006f36:	f000 fa09 	bl	800734c <_Balloc>
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	b928      	cbnz	r0, 8006f4a <_dtoa_r+0x9a2>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006f44:	4b80      	ldr	r3, [pc, #512]	@ (8007148 <_dtoa_r+0xba0>)
 8006f46:	f7ff bb43 	b.w	80065d0 <_dtoa_r+0x28>
 8006f4a:	692a      	ldr	r2, [r5, #16]
 8006f4c:	f105 010c 	add.w	r1, r5, #12
 8006f50:	3202      	adds	r2, #2
 8006f52:	0092      	lsls	r2, r2, #2
 8006f54:	300c      	adds	r0, #12
 8006f56:	f000 ff9d 	bl	8007e94 <memcpy>
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	4631      	mov	r1, r6
 8006f5e:	4648      	mov	r0, r9
 8006f60:	f000 fbfa 	bl	8007758 <__lshift>
 8006f64:	462f      	mov	r7, r5
 8006f66:	4605      	mov	r5, r0
 8006f68:	f10a 0301 	add.w	r3, sl, #1
 8006f6c:	9304      	str	r3, [sp, #16]
 8006f6e:	eb0a 030b 	add.w	r3, sl, fp
 8006f72:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f74:	9b06      	ldr	r3, [sp, #24]
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f7c:	9b04      	ldr	r3, [sp, #16]
 8006f7e:	4621      	mov	r1, r4
 8006f80:	9803      	ldr	r0, [sp, #12]
 8006f82:	f103 3bff 	add.w	fp, r3, #4294967295
 8006f86:	f7ff fa84 	bl	8006492 <quorem>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	4639      	mov	r1, r7
 8006f8e:	3330      	adds	r3, #48	@ 0x30
 8006f90:	9006      	str	r0, [sp, #24]
 8006f92:	9803      	ldr	r0, [sp, #12]
 8006f94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f96:	f000 fc4b 	bl	8007830 <__mcmp>
 8006f9a:	462a      	mov	r2, r5
 8006f9c:	9008      	str	r0, [sp, #32]
 8006f9e:	4621      	mov	r1, r4
 8006fa0:	4648      	mov	r0, r9
 8006fa2:	f000 fc61 	bl	8007868 <__mdiff>
 8006fa6:	68c2      	ldr	r2, [r0, #12]
 8006fa8:	4606      	mov	r6, r0
 8006faa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fac:	bb02      	cbnz	r2, 8006ff0 <_dtoa_r+0xa48>
 8006fae:	4601      	mov	r1, r0
 8006fb0:	9803      	ldr	r0, [sp, #12]
 8006fb2:	f000 fc3d 	bl	8007830 <__mcmp>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fba:	4631      	mov	r1, r6
 8006fbc:	4648      	mov	r0, r9
 8006fbe:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8006fc2:	f000 fa03 	bl	80073cc <_Bfree>
 8006fc6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006fc8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006fca:	9e04      	ldr	r6, [sp, #16]
 8006fcc:	ea42 0103 	orr.w	r1, r2, r3
 8006fd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fd2:	4319      	orrs	r1, r3
 8006fd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fd6:	d10d      	bne.n	8006ff4 <_dtoa_r+0xa4c>
 8006fd8:	2b39      	cmp	r3, #57	@ 0x39
 8006fda:	d027      	beq.n	800702c <_dtoa_r+0xa84>
 8006fdc:	9a08      	ldr	r2, [sp, #32]
 8006fde:	2a00      	cmp	r2, #0
 8006fe0:	dd01      	ble.n	8006fe6 <_dtoa_r+0xa3e>
 8006fe2:	9b06      	ldr	r3, [sp, #24]
 8006fe4:	3331      	adds	r3, #49	@ 0x31
 8006fe6:	f88b 3000 	strb.w	r3, [fp]
 8006fea:	e52e      	b.n	8006a4a <_dtoa_r+0x4a2>
 8006fec:	4628      	mov	r0, r5
 8006fee:	e7b9      	b.n	8006f64 <_dtoa_r+0x9bc>
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	e7e2      	b.n	8006fba <_dtoa_r+0xa12>
 8006ff4:	9908      	ldr	r1, [sp, #32]
 8006ff6:	2900      	cmp	r1, #0
 8006ff8:	db04      	blt.n	8007004 <_dtoa_r+0xa5c>
 8006ffa:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8006ffc:	4301      	orrs	r1, r0
 8006ffe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007000:	4301      	orrs	r1, r0
 8007002:	d120      	bne.n	8007046 <_dtoa_r+0xa9e>
 8007004:	2a00      	cmp	r2, #0
 8007006:	ddee      	ble.n	8006fe6 <_dtoa_r+0xa3e>
 8007008:	2201      	movs	r2, #1
 800700a:	9903      	ldr	r1, [sp, #12]
 800700c:	4648      	mov	r0, r9
 800700e:	9304      	str	r3, [sp, #16]
 8007010:	f000 fba2 	bl	8007758 <__lshift>
 8007014:	4621      	mov	r1, r4
 8007016:	9003      	str	r0, [sp, #12]
 8007018:	f000 fc0a 	bl	8007830 <__mcmp>
 800701c:	2800      	cmp	r0, #0
 800701e:	9b04      	ldr	r3, [sp, #16]
 8007020:	dc02      	bgt.n	8007028 <_dtoa_r+0xa80>
 8007022:	d1e0      	bne.n	8006fe6 <_dtoa_r+0xa3e>
 8007024:	07da      	lsls	r2, r3, #31
 8007026:	d5de      	bpl.n	8006fe6 <_dtoa_r+0xa3e>
 8007028:	2b39      	cmp	r3, #57	@ 0x39
 800702a:	d1da      	bne.n	8006fe2 <_dtoa_r+0xa3a>
 800702c:	2339      	movs	r3, #57	@ 0x39
 800702e:	f88b 3000 	strb.w	r3, [fp]
 8007032:	4633      	mov	r3, r6
 8007034:	461e      	mov	r6, r3
 8007036:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800703a:	3b01      	subs	r3, #1
 800703c:	2a39      	cmp	r2, #57	@ 0x39
 800703e:	d04e      	beq.n	80070de <_dtoa_r+0xb36>
 8007040:	3201      	adds	r2, #1
 8007042:	701a      	strb	r2, [r3, #0]
 8007044:	e501      	b.n	8006a4a <_dtoa_r+0x4a2>
 8007046:	2a00      	cmp	r2, #0
 8007048:	dd03      	ble.n	8007052 <_dtoa_r+0xaaa>
 800704a:	2b39      	cmp	r3, #57	@ 0x39
 800704c:	d0ee      	beq.n	800702c <_dtoa_r+0xa84>
 800704e:	3301      	adds	r3, #1
 8007050:	e7c9      	b.n	8006fe6 <_dtoa_r+0xa3e>
 8007052:	9a04      	ldr	r2, [sp, #16]
 8007054:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007056:	f802 3c01 	strb.w	r3, [r2, #-1]
 800705a:	428a      	cmp	r2, r1
 800705c:	d028      	beq.n	80070b0 <_dtoa_r+0xb08>
 800705e:	2300      	movs	r3, #0
 8007060:	220a      	movs	r2, #10
 8007062:	9903      	ldr	r1, [sp, #12]
 8007064:	4648      	mov	r0, r9
 8007066:	f000 f9d3 	bl	8007410 <__multadd>
 800706a:	42af      	cmp	r7, r5
 800706c:	9003      	str	r0, [sp, #12]
 800706e:	f04f 0300 	mov.w	r3, #0
 8007072:	f04f 020a 	mov.w	r2, #10
 8007076:	4639      	mov	r1, r7
 8007078:	4648      	mov	r0, r9
 800707a:	d107      	bne.n	800708c <_dtoa_r+0xae4>
 800707c:	f000 f9c8 	bl	8007410 <__multadd>
 8007080:	4607      	mov	r7, r0
 8007082:	4605      	mov	r5, r0
 8007084:	9b04      	ldr	r3, [sp, #16]
 8007086:	3301      	adds	r3, #1
 8007088:	9304      	str	r3, [sp, #16]
 800708a:	e777      	b.n	8006f7c <_dtoa_r+0x9d4>
 800708c:	f000 f9c0 	bl	8007410 <__multadd>
 8007090:	4629      	mov	r1, r5
 8007092:	4607      	mov	r7, r0
 8007094:	2300      	movs	r3, #0
 8007096:	220a      	movs	r2, #10
 8007098:	4648      	mov	r0, r9
 800709a:	f000 f9b9 	bl	8007410 <__multadd>
 800709e:	4605      	mov	r5, r0
 80070a0:	e7f0      	b.n	8007084 <_dtoa_r+0xadc>
 80070a2:	f1bb 0f00 	cmp.w	fp, #0
 80070a6:	bfcc      	ite	gt
 80070a8:	465e      	movgt	r6, fp
 80070aa:	2601      	movle	r6, #1
 80070ac:	2700      	movs	r7, #0
 80070ae:	4456      	add	r6, sl
 80070b0:	2201      	movs	r2, #1
 80070b2:	9903      	ldr	r1, [sp, #12]
 80070b4:	4648      	mov	r0, r9
 80070b6:	9304      	str	r3, [sp, #16]
 80070b8:	f000 fb4e 	bl	8007758 <__lshift>
 80070bc:	4621      	mov	r1, r4
 80070be:	9003      	str	r0, [sp, #12]
 80070c0:	f000 fbb6 	bl	8007830 <__mcmp>
 80070c4:	2800      	cmp	r0, #0
 80070c6:	dcb4      	bgt.n	8007032 <_dtoa_r+0xa8a>
 80070c8:	d102      	bne.n	80070d0 <_dtoa_r+0xb28>
 80070ca:	9b04      	ldr	r3, [sp, #16]
 80070cc:	07db      	lsls	r3, r3, #31
 80070ce:	d4b0      	bmi.n	8007032 <_dtoa_r+0xa8a>
 80070d0:	4633      	mov	r3, r6
 80070d2:	461e      	mov	r6, r3
 80070d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070d8:	2a30      	cmp	r2, #48	@ 0x30
 80070da:	d0fa      	beq.n	80070d2 <_dtoa_r+0xb2a>
 80070dc:	e4b5      	b.n	8006a4a <_dtoa_r+0x4a2>
 80070de:	459a      	cmp	sl, r3
 80070e0:	d1a8      	bne.n	8007034 <_dtoa_r+0xa8c>
 80070e2:	2331      	movs	r3, #49	@ 0x31
 80070e4:	f108 0801 	add.w	r8, r8, #1
 80070e8:	f88a 3000 	strb.w	r3, [sl]
 80070ec:	e4ad      	b.n	8006a4a <_dtoa_r+0x4a2>
 80070ee:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80070f0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800714c <_dtoa_r+0xba4>
 80070f4:	b11b      	cbz	r3, 80070fe <_dtoa_r+0xb56>
 80070f6:	f10a 0308 	add.w	r3, sl, #8
 80070fa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	4650      	mov	r0, sl
 8007100:	b017      	add	sp, #92	@ 0x5c
 8007102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007106:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007108:	2b01      	cmp	r3, #1
 800710a:	f77f ae2e 	ble.w	8006d6a <_dtoa_r+0x7c2>
 800710e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007110:	930a      	str	r3, [sp, #40]	@ 0x28
 8007112:	2001      	movs	r0, #1
 8007114:	e64d      	b.n	8006db2 <_dtoa_r+0x80a>
 8007116:	f1bb 0f00 	cmp.w	fp, #0
 800711a:	f77f aed9 	ble.w	8006ed0 <_dtoa_r+0x928>
 800711e:	4656      	mov	r6, sl
 8007120:	4621      	mov	r1, r4
 8007122:	9803      	ldr	r0, [sp, #12]
 8007124:	f7ff f9b5 	bl	8006492 <quorem>
 8007128:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800712c:	f806 3b01 	strb.w	r3, [r6], #1
 8007130:	eba6 020a 	sub.w	r2, r6, sl
 8007134:	4593      	cmp	fp, r2
 8007136:	ddb4      	ble.n	80070a2 <_dtoa_r+0xafa>
 8007138:	2300      	movs	r3, #0
 800713a:	220a      	movs	r2, #10
 800713c:	4648      	mov	r0, r9
 800713e:	9903      	ldr	r1, [sp, #12]
 8007140:	f000 f966 	bl	8007410 <__multadd>
 8007144:	9003      	str	r0, [sp, #12]
 8007146:	e7eb      	b.n	8007120 <_dtoa_r+0xb78>
 8007148:	08008d9e 	.word	0x08008d9e
 800714c:	08008d22 	.word	0x08008d22

08007150 <_free_r>:
 8007150:	b538      	push	{r3, r4, r5, lr}
 8007152:	4605      	mov	r5, r0
 8007154:	2900      	cmp	r1, #0
 8007156:	d040      	beq.n	80071da <_free_r+0x8a>
 8007158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800715c:	1f0c      	subs	r4, r1, #4
 800715e:	2b00      	cmp	r3, #0
 8007160:	bfb8      	it	lt
 8007162:	18e4      	addlt	r4, r4, r3
 8007164:	f000 f8e6 	bl	8007334 <__malloc_lock>
 8007168:	4a1c      	ldr	r2, [pc, #112]	@ (80071dc <_free_r+0x8c>)
 800716a:	6813      	ldr	r3, [r2, #0]
 800716c:	b933      	cbnz	r3, 800717c <_free_r+0x2c>
 800716e:	6063      	str	r3, [r4, #4]
 8007170:	6014      	str	r4, [r2, #0]
 8007172:	4628      	mov	r0, r5
 8007174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007178:	f000 b8e2 	b.w	8007340 <__malloc_unlock>
 800717c:	42a3      	cmp	r3, r4
 800717e:	d908      	bls.n	8007192 <_free_r+0x42>
 8007180:	6820      	ldr	r0, [r4, #0]
 8007182:	1821      	adds	r1, r4, r0
 8007184:	428b      	cmp	r3, r1
 8007186:	bf01      	itttt	eq
 8007188:	6819      	ldreq	r1, [r3, #0]
 800718a:	685b      	ldreq	r3, [r3, #4]
 800718c:	1809      	addeq	r1, r1, r0
 800718e:	6021      	streq	r1, [r4, #0]
 8007190:	e7ed      	b.n	800716e <_free_r+0x1e>
 8007192:	461a      	mov	r2, r3
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	b10b      	cbz	r3, 800719c <_free_r+0x4c>
 8007198:	42a3      	cmp	r3, r4
 800719a:	d9fa      	bls.n	8007192 <_free_r+0x42>
 800719c:	6811      	ldr	r1, [r2, #0]
 800719e:	1850      	adds	r0, r2, r1
 80071a0:	42a0      	cmp	r0, r4
 80071a2:	d10b      	bne.n	80071bc <_free_r+0x6c>
 80071a4:	6820      	ldr	r0, [r4, #0]
 80071a6:	4401      	add	r1, r0
 80071a8:	1850      	adds	r0, r2, r1
 80071aa:	4283      	cmp	r3, r0
 80071ac:	6011      	str	r1, [r2, #0]
 80071ae:	d1e0      	bne.n	8007172 <_free_r+0x22>
 80071b0:	6818      	ldr	r0, [r3, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	4408      	add	r0, r1
 80071b6:	6010      	str	r0, [r2, #0]
 80071b8:	6053      	str	r3, [r2, #4]
 80071ba:	e7da      	b.n	8007172 <_free_r+0x22>
 80071bc:	d902      	bls.n	80071c4 <_free_r+0x74>
 80071be:	230c      	movs	r3, #12
 80071c0:	602b      	str	r3, [r5, #0]
 80071c2:	e7d6      	b.n	8007172 <_free_r+0x22>
 80071c4:	6820      	ldr	r0, [r4, #0]
 80071c6:	1821      	adds	r1, r4, r0
 80071c8:	428b      	cmp	r3, r1
 80071ca:	bf01      	itttt	eq
 80071cc:	6819      	ldreq	r1, [r3, #0]
 80071ce:	685b      	ldreq	r3, [r3, #4]
 80071d0:	1809      	addeq	r1, r1, r0
 80071d2:	6021      	streq	r1, [r4, #0]
 80071d4:	6063      	str	r3, [r4, #4]
 80071d6:	6054      	str	r4, [r2, #4]
 80071d8:	e7cb      	b.n	8007172 <_free_r+0x22>
 80071da:	bd38      	pop	{r3, r4, r5, pc}
 80071dc:	200006d8 	.word	0x200006d8

080071e0 <malloc>:
 80071e0:	4b02      	ldr	r3, [pc, #8]	@ (80071ec <malloc+0xc>)
 80071e2:	4601      	mov	r1, r0
 80071e4:	6818      	ldr	r0, [r3, #0]
 80071e6:	f000 b825 	b.w	8007234 <_malloc_r>
 80071ea:	bf00      	nop
 80071ec:	20000020 	.word	0x20000020

080071f0 <sbrk_aligned>:
 80071f0:	b570      	push	{r4, r5, r6, lr}
 80071f2:	4e0f      	ldr	r6, [pc, #60]	@ (8007230 <sbrk_aligned+0x40>)
 80071f4:	460c      	mov	r4, r1
 80071f6:	6831      	ldr	r1, [r6, #0]
 80071f8:	4605      	mov	r5, r0
 80071fa:	b911      	cbnz	r1, 8007202 <sbrk_aligned+0x12>
 80071fc:	f000 fe3a 	bl	8007e74 <_sbrk_r>
 8007200:	6030      	str	r0, [r6, #0]
 8007202:	4621      	mov	r1, r4
 8007204:	4628      	mov	r0, r5
 8007206:	f000 fe35 	bl	8007e74 <_sbrk_r>
 800720a:	1c43      	adds	r3, r0, #1
 800720c:	d103      	bne.n	8007216 <sbrk_aligned+0x26>
 800720e:	f04f 34ff 	mov.w	r4, #4294967295
 8007212:	4620      	mov	r0, r4
 8007214:	bd70      	pop	{r4, r5, r6, pc}
 8007216:	1cc4      	adds	r4, r0, #3
 8007218:	f024 0403 	bic.w	r4, r4, #3
 800721c:	42a0      	cmp	r0, r4
 800721e:	d0f8      	beq.n	8007212 <sbrk_aligned+0x22>
 8007220:	1a21      	subs	r1, r4, r0
 8007222:	4628      	mov	r0, r5
 8007224:	f000 fe26 	bl	8007e74 <_sbrk_r>
 8007228:	3001      	adds	r0, #1
 800722a:	d1f2      	bne.n	8007212 <sbrk_aligned+0x22>
 800722c:	e7ef      	b.n	800720e <sbrk_aligned+0x1e>
 800722e:	bf00      	nop
 8007230:	200006d4 	.word	0x200006d4

08007234 <_malloc_r>:
 8007234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007238:	1ccd      	adds	r5, r1, #3
 800723a:	f025 0503 	bic.w	r5, r5, #3
 800723e:	3508      	adds	r5, #8
 8007240:	2d0c      	cmp	r5, #12
 8007242:	bf38      	it	cc
 8007244:	250c      	movcc	r5, #12
 8007246:	2d00      	cmp	r5, #0
 8007248:	4606      	mov	r6, r0
 800724a:	db01      	blt.n	8007250 <_malloc_r+0x1c>
 800724c:	42a9      	cmp	r1, r5
 800724e:	d904      	bls.n	800725a <_malloc_r+0x26>
 8007250:	230c      	movs	r3, #12
 8007252:	6033      	str	r3, [r6, #0]
 8007254:	2000      	movs	r0, #0
 8007256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800725a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007330 <_malloc_r+0xfc>
 800725e:	f000 f869 	bl	8007334 <__malloc_lock>
 8007262:	f8d8 3000 	ldr.w	r3, [r8]
 8007266:	461c      	mov	r4, r3
 8007268:	bb44      	cbnz	r4, 80072bc <_malloc_r+0x88>
 800726a:	4629      	mov	r1, r5
 800726c:	4630      	mov	r0, r6
 800726e:	f7ff ffbf 	bl	80071f0 <sbrk_aligned>
 8007272:	1c43      	adds	r3, r0, #1
 8007274:	4604      	mov	r4, r0
 8007276:	d158      	bne.n	800732a <_malloc_r+0xf6>
 8007278:	f8d8 4000 	ldr.w	r4, [r8]
 800727c:	4627      	mov	r7, r4
 800727e:	2f00      	cmp	r7, #0
 8007280:	d143      	bne.n	800730a <_malloc_r+0xd6>
 8007282:	2c00      	cmp	r4, #0
 8007284:	d04b      	beq.n	800731e <_malloc_r+0xea>
 8007286:	6823      	ldr	r3, [r4, #0]
 8007288:	4639      	mov	r1, r7
 800728a:	4630      	mov	r0, r6
 800728c:	eb04 0903 	add.w	r9, r4, r3
 8007290:	f000 fdf0 	bl	8007e74 <_sbrk_r>
 8007294:	4581      	cmp	r9, r0
 8007296:	d142      	bne.n	800731e <_malloc_r+0xea>
 8007298:	6821      	ldr	r1, [r4, #0]
 800729a:	4630      	mov	r0, r6
 800729c:	1a6d      	subs	r5, r5, r1
 800729e:	4629      	mov	r1, r5
 80072a0:	f7ff ffa6 	bl	80071f0 <sbrk_aligned>
 80072a4:	3001      	adds	r0, #1
 80072a6:	d03a      	beq.n	800731e <_malloc_r+0xea>
 80072a8:	6823      	ldr	r3, [r4, #0]
 80072aa:	442b      	add	r3, r5
 80072ac:	6023      	str	r3, [r4, #0]
 80072ae:	f8d8 3000 	ldr.w	r3, [r8]
 80072b2:	685a      	ldr	r2, [r3, #4]
 80072b4:	bb62      	cbnz	r2, 8007310 <_malloc_r+0xdc>
 80072b6:	f8c8 7000 	str.w	r7, [r8]
 80072ba:	e00f      	b.n	80072dc <_malloc_r+0xa8>
 80072bc:	6822      	ldr	r2, [r4, #0]
 80072be:	1b52      	subs	r2, r2, r5
 80072c0:	d420      	bmi.n	8007304 <_malloc_r+0xd0>
 80072c2:	2a0b      	cmp	r2, #11
 80072c4:	d917      	bls.n	80072f6 <_malloc_r+0xc2>
 80072c6:	1961      	adds	r1, r4, r5
 80072c8:	42a3      	cmp	r3, r4
 80072ca:	6025      	str	r5, [r4, #0]
 80072cc:	bf18      	it	ne
 80072ce:	6059      	strne	r1, [r3, #4]
 80072d0:	6863      	ldr	r3, [r4, #4]
 80072d2:	bf08      	it	eq
 80072d4:	f8c8 1000 	streq.w	r1, [r8]
 80072d8:	5162      	str	r2, [r4, r5]
 80072da:	604b      	str	r3, [r1, #4]
 80072dc:	4630      	mov	r0, r6
 80072de:	f000 f82f 	bl	8007340 <__malloc_unlock>
 80072e2:	f104 000b 	add.w	r0, r4, #11
 80072e6:	1d23      	adds	r3, r4, #4
 80072e8:	f020 0007 	bic.w	r0, r0, #7
 80072ec:	1ac2      	subs	r2, r0, r3
 80072ee:	bf1c      	itt	ne
 80072f0:	1a1b      	subne	r3, r3, r0
 80072f2:	50a3      	strne	r3, [r4, r2]
 80072f4:	e7af      	b.n	8007256 <_malloc_r+0x22>
 80072f6:	6862      	ldr	r2, [r4, #4]
 80072f8:	42a3      	cmp	r3, r4
 80072fa:	bf0c      	ite	eq
 80072fc:	f8c8 2000 	streq.w	r2, [r8]
 8007300:	605a      	strne	r2, [r3, #4]
 8007302:	e7eb      	b.n	80072dc <_malloc_r+0xa8>
 8007304:	4623      	mov	r3, r4
 8007306:	6864      	ldr	r4, [r4, #4]
 8007308:	e7ae      	b.n	8007268 <_malloc_r+0x34>
 800730a:	463c      	mov	r4, r7
 800730c:	687f      	ldr	r7, [r7, #4]
 800730e:	e7b6      	b.n	800727e <_malloc_r+0x4a>
 8007310:	461a      	mov	r2, r3
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	42a3      	cmp	r3, r4
 8007316:	d1fb      	bne.n	8007310 <_malloc_r+0xdc>
 8007318:	2300      	movs	r3, #0
 800731a:	6053      	str	r3, [r2, #4]
 800731c:	e7de      	b.n	80072dc <_malloc_r+0xa8>
 800731e:	230c      	movs	r3, #12
 8007320:	4630      	mov	r0, r6
 8007322:	6033      	str	r3, [r6, #0]
 8007324:	f000 f80c 	bl	8007340 <__malloc_unlock>
 8007328:	e794      	b.n	8007254 <_malloc_r+0x20>
 800732a:	6005      	str	r5, [r0, #0]
 800732c:	e7d6      	b.n	80072dc <_malloc_r+0xa8>
 800732e:	bf00      	nop
 8007330:	200006d8 	.word	0x200006d8

08007334 <__malloc_lock>:
 8007334:	4801      	ldr	r0, [pc, #4]	@ (800733c <__malloc_lock+0x8>)
 8007336:	f7ff b89c 	b.w	8006472 <__retarget_lock_acquire_recursive>
 800733a:	bf00      	nop
 800733c:	200006d0 	.word	0x200006d0

08007340 <__malloc_unlock>:
 8007340:	4801      	ldr	r0, [pc, #4]	@ (8007348 <__malloc_unlock+0x8>)
 8007342:	f7ff b897 	b.w	8006474 <__retarget_lock_release_recursive>
 8007346:	bf00      	nop
 8007348:	200006d0 	.word	0x200006d0

0800734c <_Balloc>:
 800734c:	b570      	push	{r4, r5, r6, lr}
 800734e:	69c6      	ldr	r6, [r0, #28]
 8007350:	4604      	mov	r4, r0
 8007352:	460d      	mov	r5, r1
 8007354:	b976      	cbnz	r6, 8007374 <_Balloc+0x28>
 8007356:	2010      	movs	r0, #16
 8007358:	f7ff ff42 	bl	80071e0 <malloc>
 800735c:	4602      	mov	r2, r0
 800735e:	61e0      	str	r0, [r4, #28]
 8007360:	b920      	cbnz	r0, 800736c <_Balloc+0x20>
 8007362:	216b      	movs	r1, #107	@ 0x6b
 8007364:	4b17      	ldr	r3, [pc, #92]	@ (80073c4 <_Balloc+0x78>)
 8007366:	4818      	ldr	r0, [pc, #96]	@ (80073c8 <_Balloc+0x7c>)
 8007368:	f000 fda2 	bl	8007eb0 <__assert_func>
 800736c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007370:	6006      	str	r6, [r0, #0]
 8007372:	60c6      	str	r6, [r0, #12]
 8007374:	69e6      	ldr	r6, [r4, #28]
 8007376:	68f3      	ldr	r3, [r6, #12]
 8007378:	b183      	cbz	r3, 800739c <_Balloc+0x50>
 800737a:	69e3      	ldr	r3, [r4, #28]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007382:	b9b8      	cbnz	r0, 80073b4 <_Balloc+0x68>
 8007384:	2101      	movs	r1, #1
 8007386:	fa01 f605 	lsl.w	r6, r1, r5
 800738a:	1d72      	adds	r2, r6, #5
 800738c:	4620      	mov	r0, r4
 800738e:	0092      	lsls	r2, r2, #2
 8007390:	f000 fdac 	bl	8007eec <_calloc_r>
 8007394:	b160      	cbz	r0, 80073b0 <_Balloc+0x64>
 8007396:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800739a:	e00e      	b.n	80073ba <_Balloc+0x6e>
 800739c:	2221      	movs	r2, #33	@ 0x21
 800739e:	2104      	movs	r1, #4
 80073a0:	4620      	mov	r0, r4
 80073a2:	f000 fda3 	bl	8007eec <_calloc_r>
 80073a6:	69e3      	ldr	r3, [r4, #28]
 80073a8:	60f0      	str	r0, [r6, #12]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1e4      	bne.n	800737a <_Balloc+0x2e>
 80073b0:	2000      	movs	r0, #0
 80073b2:	bd70      	pop	{r4, r5, r6, pc}
 80073b4:	6802      	ldr	r2, [r0, #0]
 80073b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80073ba:	2300      	movs	r3, #0
 80073bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80073c0:	e7f7      	b.n	80073b2 <_Balloc+0x66>
 80073c2:	bf00      	nop
 80073c4:	08008d2f 	.word	0x08008d2f
 80073c8:	08008daf 	.word	0x08008daf

080073cc <_Bfree>:
 80073cc:	b570      	push	{r4, r5, r6, lr}
 80073ce:	69c6      	ldr	r6, [r0, #28]
 80073d0:	4605      	mov	r5, r0
 80073d2:	460c      	mov	r4, r1
 80073d4:	b976      	cbnz	r6, 80073f4 <_Bfree+0x28>
 80073d6:	2010      	movs	r0, #16
 80073d8:	f7ff ff02 	bl	80071e0 <malloc>
 80073dc:	4602      	mov	r2, r0
 80073de:	61e8      	str	r0, [r5, #28]
 80073e0:	b920      	cbnz	r0, 80073ec <_Bfree+0x20>
 80073e2:	218f      	movs	r1, #143	@ 0x8f
 80073e4:	4b08      	ldr	r3, [pc, #32]	@ (8007408 <_Bfree+0x3c>)
 80073e6:	4809      	ldr	r0, [pc, #36]	@ (800740c <_Bfree+0x40>)
 80073e8:	f000 fd62 	bl	8007eb0 <__assert_func>
 80073ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073f0:	6006      	str	r6, [r0, #0]
 80073f2:	60c6      	str	r6, [r0, #12]
 80073f4:	b13c      	cbz	r4, 8007406 <_Bfree+0x3a>
 80073f6:	69eb      	ldr	r3, [r5, #28]
 80073f8:	6862      	ldr	r2, [r4, #4]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007400:	6021      	str	r1, [r4, #0]
 8007402:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007406:	bd70      	pop	{r4, r5, r6, pc}
 8007408:	08008d2f 	.word	0x08008d2f
 800740c:	08008daf 	.word	0x08008daf

08007410 <__multadd>:
 8007410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007414:	4607      	mov	r7, r0
 8007416:	460c      	mov	r4, r1
 8007418:	461e      	mov	r6, r3
 800741a:	2000      	movs	r0, #0
 800741c:	690d      	ldr	r5, [r1, #16]
 800741e:	f101 0c14 	add.w	ip, r1, #20
 8007422:	f8dc 3000 	ldr.w	r3, [ip]
 8007426:	3001      	adds	r0, #1
 8007428:	b299      	uxth	r1, r3
 800742a:	fb02 6101 	mla	r1, r2, r1, r6
 800742e:	0c1e      	lsrs	r6, r3, #16
 8007430:	0c0b      	lsrs	r3, r1, #16
 8007432:	fb02 3306 	mla	r3, r2, r6, r3
 8007436:	b289      	uxth	r1, r1
 8007438:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800743c:	4285      	cmp	r5, r0
 800743e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007442:	f84c 1b04 	str.w	r1, [ip], #4
 8007446:	dcec      	bgt.n	8007422 <__multadd+0x12>
 8007448:	b30e      	cbz	r6, 800748e <__multadd+0x7e>
 800744a:	68a3      	ldr	r3, [r4, #8]
 800744c:	42ab      	cmp	r3, r5
 800744e:	dc19      	bgt.n	8007484 <__multadd+0x74>
 8007450:	6861      	ldr	r1, [r4, #4]
 8007452:	4638      	mov	r0, r7
 8007454:	3101      	adds	r1, #1
 8007456:	f7ff ff79 	bl	800734c <_Balloc>
 800745a:	4680      	mov	r8, r0
 800745c:	b928      	cbnz	r0, 800746a <__multadd+0x5a>
 800745e:	4602      	mov	r2, r0
 8007460:	21ba      	movs	r1, #186	@ 0xba
 8007462:	4b0c      	ldr	r3, [pc, #48]	@ (8007494 <__multadd+0x84>)
 8007464:	480c      	ldr	r0, [pc, #48]	@ (8007498 <__multadd+0x88>)
 8007466:	f000 fd23 	bl	8007eb0 <__assert_func>
 800746a:	6922      	ldr	r2, [r4, #16]
 800746c:	f104 010c 	add.w	r1, r4, #12
 8007470:	3202      	adds	r2, #2
 8007472:	0092      	lsls	r2, r2, #2
 8007474:	300c      	adds	r0, #12
 8007476:	f000 fd0d 	bl	8007e94 <memcpy>
 800747a:	4621      	mov	r1, r4
 800747c:	4638      	mov	r0, r7
 800747e:	f7ff ffa5 	bl	80073cc <_Bfree>
 8007482:	4644      	mov	r4, r8
 8007484:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007488:	3501      	adds	r5, #1
 800748a:	615e      	str	r6, [r3, #20]
 800748c:	6125      	str	r5, [r4, #16]
 800748e:	4620      	mov	r0, r4
 8007490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007494:	08008d9e 	.word	0x08008d9e
 8007498:	08008daf 	.word	0x08008daf

0800749c <__hi0bits>:
 800749c:	4603      	mov	r3, r0
 800749e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80074a2:	bf3a      	itte	cc
 80074a4:	0403      	lslcc	r3, r0, #16
 80074a6:	2010      	movcc	r0, #16
 80074a8:	2000      	movcs	r0, #0
 80074aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074ae:	bf3c      	itt	cc
 80074b0:	021b      	lslcc	r3, r3, #8
 80074b2:	3008      	addcc	r0, #8
 80074b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074b8:	bf3c      	itt	cc
 80074ba:	011b      	lslcc	r3, r3, #4
 80074bc:	3004      	addcc	r0, #4
 80074be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074c2:	bf3c      	itt	cc
 80074c4:	009b      	lslcc	r3, r3, #2
 80074c6:	3002      	addcc	r0, #2
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	db05      	blt.n	80074d8 <__hi0bits+0x3c>
 80074cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80074d0:	f100 0001 	add.w	r0, r0, #1
 80074d4:	bf08      	it	eq
 80074d6:	2020      	moveq	r0, #32
 80074d8:	4770      	bx	lr

080074da <__lo0bits>:
 80074da:	6803      	ldr	r3, [r0, #0]
 80074dc:	4602      	mov	r2, r0
 80074de:	f013 0007 	ands.w	r0, r3, #7
 80074e2:	d00b      	beq.n	80074fc <__lo0bits+0x22>
 80074e4:	07d9      	lsls	r1, r3, #31
 80074e6:	d421      	bmi.n	800752c <__lo0bits+0x52>
 80074e8:	0798      	lsls	r0, r3, #30
 80074ea:	bf49      	itett	mi
 80074ec:	085b      	lsrmi	r3, r3, #1
 80074ee:	089b      	lsrpl	r3, r3, #2
 80074f0:	2001      	movmi	r0, #1
 80074f2:	6013      	strmi	r3, [r2, #0]
 80074f4:	bf5c      	itt	pl
 80074f6:	2002      	movpl	r0, #2
 80074f8:	6013      	strpl	r3, [r2, #0]
 80074fa:	4770      	bx	lr
 80074fc:	b299      	uxth	r1, r3
 80074fe:	b909      	cbnz	r1, 8007504 <__lo0bits+0x2a>
 8007500:	2010      	movs	r0, #16
 8007502:	0c1b      	lsrs	r3, r3, #16
 8007504:	b2d9      	uxtb	r1, r3
 8007506:	b909      	cbnz	r1, 800750c <__lo0bits+0x32>
 8007508:	3008      	adds	r0, #8
 800750a:	0a1b      	lsrs	r3, r3, #8
 800750c:	0719      	lsls	r1, r3, #28
 800750e:	bf04      	itt	eq
 8007510:	091b      	lsreq	r3, r3, #4
 8007512:	3004      	addeq	r0, #4
 8007514:	0799      	lsls	r1, r3, #30
 8007516:	bf04      	itt	eq
 8007518:	089b      	lsreq	r3, r3, #2
 800751a:	3002      	addeq	r0, #2
 800751c:	07d9      	lsls	r1, r3, #31
 800751e:	d403      	bmi.n	8007528 <__lo0bits+0x4e>
 8007520:	085b      	lsrs	r3, r3, #1
 8007522:	f100 0001 	add.w	r0, r0, #1
 8007526:	d003      	beq.n	8007530 <__lo0bits+0x56>
 8007528:	6013      	str	r3, [r2, #0]
 800752a:	4770      	bx	lr
 800752c:	2000      	movs	r0, #0
 800752e:	4770      	bx	lr
 8007530:	2020      	movs	r0, #32
 8007532:	4770      	bx	lr

08007534 <__i2b>:
 8007534:	b510      	push	{r4, lr}
 8007536:	460c      	mov	r4, r1
 8007538:	2101      	movs	r1, #1
 800753a:	f7ff ff07 	bl	800734c <_Balloc>
 800753e:	4602      	mov	r2, r0
 8007540:	b928      	cbnz	r0, 800754e <__i2b+0x1a>
 8007542:	f240 1145 	movw	r1, #325	@ 0x145
 8007546:	4b04      	ldr	r3, [pc, #16]	@ (8007558 <__i2b+0x24>)
 8007548:	4804      	ldr	r0, [pc, #16]	@ (800755c <__i2b+0x28>)
 800754a:	f000 fcb1 	bl	8007eb0 <__assert_func>
 800754e:	2301      	movs	r3, #1
 8007550:	6144      	str	r4, [r0, #20]
 8007552:	6103      	str	r3, [r0, #16]
 8007554:	bd10      	pop	{r4, pc}
 8007556:	bf00      	nop
 8007558:	08008d9e 	.word	0x08008d9e
 800755c:	08008daf 	.word	0x08008daf

08007560 <__multiply>:
 8007560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007564:	4617      	mov	r7, r2
 8007566:	690a      	ldr	r2, [r1, #16]
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	4689      	mov	r9, r1
 800756c:	429a      	cmp	r2, r3
 800756e:	bfa2      	ittt	ge
 8007570:	463b      	movge	r3, r7
 8007572:	460f      	movge	r7, r1
 8007574:	4699      	movge	r9, r3
 8007576:	693d      	ldr	r5, [r7, #16]
 8007578:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	6879      	ldr	r1, [r7, #4]
 8007580:	eb05 060a 	add.w	r6, r5, sl
 8007584:	42b3      	cmp	r3, r6
 8007586:	b085      	sub	sp, #20
 8007588:	bfb8      	it	lt
 800758a:	3101      	addlt	r1, #1
 800758c:	f7ff fede 	bl	800734c <_Balloc>
 8007590:	b930      	cbnz	r0, 80075a0 <__multiply+0x40>
 8007592:	4602      	mov	r2, r0
 8007594:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007598:	4b40      	ldr	r3, [pc, #256]	@ (800769c <__multiply+0x13c>)
 800759a:	4841      	ldr	r0, [pc, #260]	@ (80076a0 <__multiply+0x140>)
 800759c:	f000 fc88 	bl	8007eb0 <__assert_func>
 80075a0:	f100 0414 	add.w	r4, r0, #20
 80075a4:	4623      	mov	r3, r4
 80075a6:	2200      	movs	r2, #0
 80075a8:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80075ac:	4573      	cmp	r3, lr
 80075ae:	d320      	bcc.n	80075f2 <__multiply+0x92>
 80075b0:	f107 0814 	add.w	r8, r7, #20
 80075b4:	f109 0114 	add.w	r1, r9, #20
 80075b8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80075bc:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80075c0:	9302      	str	r3, [sp, #8]
 80075c2:	1beb      	subs	r3, r5, r7
 80075c4:	3b15      	subs	r3, #21
 80075c6:	f023 0303 	bic.w	r3, r3, #3
 80075ca:	3304      	adds	r3, #4
 80075cc:	3715      	adds	r7, #21
 80075ce:	42bd      	cmp	r5, r7
 80075d0:	bf38      	it	cc
 80075d2:	2304      	movcc	r3, #4
 80075d4:	9301      	str	r3, [sp, #4]
 80075d6:	9b02      	ldr	r3, [sp, #8]
 80075d8:	9103      	str	r1, [sp, #12]
 80075da:	428b      	cmp	r3, r1
 80075dc:	d80c      	bhi.n	80075f8 <__multiply+0x98>
 80075de:	2e00      	cmp	r6, #0
 80075e0:	dd03      	ble.n	80075ea <__multiply+0x8a>
 80075e2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d055      	beq.n	8007696 <__multiply+0x136>
 80075ea:	6106      	str	r6, [r0, #16]
 80075ec:	b005      	add	sp, #20
 80075ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075f2:	f843 2b04 	str.w	r2, [r3], #4
 80075f6:	e7d9      	b.n	80075ac <__multiply+0x4c>
 80075f8:	f8b1 a000 	ldrh.w	sl, [r1]
 80075fc:	f1ba 0f00 	cmp.w	sl, #0
 8007600:	d01f      	beq.n	8007642 <__multiply+0xe2>
 8007602:	46c4      	mov	ip, r8
 8007604:	46a1      	mov	r9, r4
 8007606:	2700      	movs	r7, #0
 8007608:	f85c 2b04 	ldr.w	r2, [ip], #4
 800760c:	f8d9 3000 	ldr.w	r3, [r9]
 8007610:	fa1f fb82 	uxth.w	fp, r2
 8007614:	b29b      	uxth	r3, r3
 8007616:	fb0a 330b 	mla	r3, sl, fp, r3
 800761a:	443b      	add	r3, r7
 800761c:	f8d9 7000 	ldr.w	r7, [r9]
 8007620:	0c12      	lsrs	r2, r2, #16
 8007622:	0c3f      	lsrs	r7, r7, #16
 8007624:	fb0a 7202 	mla	r2, sl, r2, r7
 8007628:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800762c:	b29b      	uxth	r3, r3
 800762e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007632:	4565      	cmp	r5, ip
 8007634:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007638:	f849 3b04 	str.w	r3, [r9], #4
 800763c:	d8e4      	bhi.n	8007608 <__multiply+0xa8>
 800763e:	9b01      	ldr	r3, [sp, #4]
 8007640:	50e7      	str	r7, [r4, r3]
 8007642:	9b03      	ldr	r3, [sp, #12]
 8007644:	3104      	adds	r1, #4
 8007646:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800764a:	f1b9 0f00 	cmp.w	r9, #0
 800764e:	d020      	beq.n	8007692 <__multiply+0x132>
 8007650:	4647      	mov	r7, r8
 8007652:	46a4      	mov	ip, r4
 8007654:	f04f 0a00 	mov.w	sl, #0
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	f8b7 b000 	ldrh.w	fp, [r7]
 800765e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007662:	b29b      	uxth	r3, r3
 8007664:	fb09 220b 	mla	r2, r9, fp, r2
 8007668:	4452      	add	r2, sl
 800766a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800766e:	f84c 3b04 	str.w	r3, [ip], #4
 8007672:	f857 3b04 	ldr.w	r3, [r7], #4
 8007676:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800767a:	f8bc 3000 	ldrh.w	r3, [ip]
 800767e:	42bd      	cmp	r5, r7
 8007680:	fb09 330a 	mla	r3, r9, sl, r3
 8007684:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007688:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800768c:	d8e5      	bhi.n	800765a <__multiply+0xfa>
 800768e:	9a01      	ldr	r2, [sp, #4]
 8007690:	50a3      	str	r3, [r4, r2]
 8007692:	3404      	adds	r4, #4
 8007694:	e79f      	b.n	80075d6 <__multiply+0x76>
 8007696:	3e01      	subs	r6, #1
 8007698:	e7a1      	b.n	80075de <__multiply+0x7e>
 800769a:	bf00      	nop
 800769c:	08008d9e 	.word	0x08008d9e
 80076a0:	08008daf 	.word	0x08008daf

080076a4 <__pow5mult>:
 80076a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076a8:	4615      	mov	r5, r2
 80076aa:	f012 0203 	ands.w	r2, r2, #3
 80076ae:	4607      	mov	r7, r0
 80076b0:	460e      	mov	r6, r1
 80076b2:	d007      	beq.n	80076c4 <__pow5mult+0x20>
 80076b4:	4c25      	ldr	r4, [pc, #148]	@ (800774c <__pow5mult+0xa8>)
 80076b6:	3a01      	subs	r2, #1
 80076b8:	2300      	movs	r3, #0
 80076ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80076be:	f7ff fea7 	bl	8007410 <__multadd>
 80076c2:	4606      	mov	r6, r0
 80076c4:	10ad      	asrs	r5, r5, #2
 80076c6:	d03d      	beq.n	8007744 <__pow5mult+0xa0>
 80076c8:	69fc      	ldr	r4, [r7, #28]
 80076ca:	b97c      	cbnz	r4, 80076ec <__pow5mult+0x48>
 80076cc:	2010      	movs	r0, #16
 80076ce:	f7ff fd87 	bl	80071e0 <malloc>
 80076d2:	4602      	mov	r2, r0
 80076d4:	61f8      	str	r0, [r7, #28]
 80076d6:	b928      	cbnz	r0, 80076e4 <__pow5mult+0x40>
 80076d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80076dc:	4b1c      	ldr	r3, [pc, #112]	@ (8007750 <__pow5mult+0xac>)
 80076de:	481d      	ldr	r0, [pc, #116]	@ (8007754 <__pow5mult+0xb0>)
 80076e0:	f000 fbe6 	bl	8007eb0 <__assert_func>
 80076e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80076e8:	6004      	str	r4, [r0, #0]
 80076ea:	60c4      	str	r4, [r0, #12]
 80076ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80076f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80076f4:	b94c      	cbnz	r4, 800770a <__pow5mult+0x66>
 80076f6:	f240 2171 	movw	r1, #625	@ 0x271
 80076fa:	4638      	mov	r0, r7
 80076fc:	f7ff ff1a 	bl	8007534 <__i2b>
 8007700:	2300      	movs	r3, #0
 8007702:	4604      	mov	r4, r0
 8007704:	f8c8 0008 	str.w	r0, [r8, #8]
 8007708:	6003      	str	r3, [r0, #0]
 800770a:	f04f 0900 	mov.w	r9, #0
 800770e:	07eb      	lsls	r3, r5, #31
 8007710:	d50a      	bpl.n	8007728 <__pow5mult+0x84>
 8007712:	4631      	mov	r1, r6
 8007714:	4622      	mov	r2, r4
 8007716:	4638      	mov	r0, r7
 8007718:	f7ff ff22 	bl	8007560 <__multiply>
 800771c:	4680      	mov	r8, r0
 800771e:	4631      	mov	r1, r6
 8007720:	4638      	mov	r0, r7
 8007722:	f7ff fe53 	bl	80073cc <_Bfree>
 8007726:	4646      	mov	r6, r8
 8007728:	106d      	asrs	r5, r5, #1
 800772a:	d00b      	beq.n	8007744 <__pow5mult+0xa0>
 800772c:	6820      	ldr	r0, [r4, #0]
 800772e:	b938      	cbnz	r0, 8007740 <__pow5mult+0x9c>
 8007730:	4622      	mov	r2, r4
 8007732:	4621      	mov	r1, r4
 8007734:	4638      	mov	r0, r7
 8007736:	f7ff ff13 	bl	8007560 <__multiply>
 800773a:	6020      	str	r0, [r4, #0]
 800773c:	f8c0 9000 	str.w	r9, [r0]
 8007740:	4604      	mov	r4, r0
 8007742:	e7e4      	b.n	800770e <__pow5mult+0x6a>
 8007744:	4630      	mov	r0, r6
 8007746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800774a:	bf00      	nop
 800774c:	08008e60 	.word	0x08008e60
 8007750:	08008d2f 	.word	0x08008d2f
 8007754:	08008daf 	.word	0x08008daf

08007758 <__lshift>:
 8007758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800775c:	460c      	mov	r4, r1
 800775e:	4607      	mov	r7, r0
 8007760:	4691      	mov	r9, r2
 8007762:	6923      	ldr	r3, [r4, #16]
 8007764:	6849      	ldr	r1, [r1, #4]
 8007766:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800776a:	68a3      	ldr	r3, [r4, #8]
 800776c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007770:	f108 0601 	add.w	r6, r8, #1
 8007774:	42b3      	cmp	r3, r6
 8007776:	db0b      	blt.n	8007790 <__lshift+0x38>
 8007778:	4638      	mov	r0, r7
 800777a:	f7ff fde7 	bl	800734c <_Balloc>
 800777e:	4605      	mov	r5, r0
 8007780:	b948      	cbnz	r0, 8007796 <__lshift+0x3e>
 8007782:	4602      	mov	r2, r0
 8007784:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007788:	4b27      	ldr	r3, [pc, #156]	@ (8007828 <__lshift+0xd0>)
 800778a:	4828      	ldr	r0, [pc, #160]	@ (800782c <__lshift+0xd4>)
 800778c:	f000 fb90 	bl	8007eb0 <__assert_func>
 8007790:	3101      	adds	r1, #1
 8007792:	005b      	lsls	r3, r3, #1
 8007794:	e7ee      	b.n	8007774 <__lshift+0x1c>
 8007796:	2300      	movs	r3, #0
 8007798:	f100 0114 	add.w	r1, r0, #20
 800779c:	f100 0210 	add.w	r2, r0, #16
 80077a0:	4618      	mov	r0, r3
 80077a2:	4553      	cmp	r3, sl
 80077a4:	db33      	blt.n	800780e <__lshift+0xb6>
 80077a6:	6920      	ldr	r0, [r4, #16]
 80077a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80077ac:	f104 0314 	add.w	r3, r4, #20
 80077b0:	f019 091f 	ands.w	r9, r9, #31
 80077b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80077b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80077bc:	d02b      	beq.n	8007816 <__lshift+0xbe>
 80077be:	468a      	mov	sl, r1
 80077c0:	2200      	movs	r2, #0
 80077c2:	f1c9 0e20 	rsb	lr, r9, #32
 80077c6:	6818      	ldr	r0, [r3, #0]
 80077c8:	fa00 f009 	lsl.w	r0, r0, r9
 80077cc:	4310      	orrs	r0, r2
 80077ce:	f84a 0b04 	str.w	r0, [sl], #4
 80077d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80077d6:	459c      	cmp	ip, r3
 80077d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80077dc:	d8f3      	bhi.n	80077c6 <__lshift+0x6e>
 80077de:	ebac 0304 	sub.w	r3, ip, r4
 80077e2:	3b15      	subs	r3, #21
 80077e4:	f023 0303 	bic.w	r3, r3, #3
 80077e8:	3304      	adds	r3, #4
 80077ea:	f104 0015 	add.w	r0, r4, #21
 80077ee:	4560      	cmp	r0, ip
 80077f0:	bf88      	it	hi
 80077f2:	2304      	movhi	r3, #4
 80077f4:	50ca      	str	r2, [r1, r3]
 80077f6:	b10a      	cbz	r2, 80077fc <__lshift+0xa4>
 80077f8:	f108 0602 	add.w	r6, r8, #2
 80077fc:	3e01      	subs	r6, #1
 80077fe:	4638      	mov	r0, r7
 8007800:	4621      	mov	r1, r4
 8007802:	612e      	str	r6, [r5, #16]
 8007804:	f7ff fde2 	bl	80073cc <_Bfree>
 8007808:	4628      	mov	r0, r5
 800780a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800780e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007812:	3301      	adds	r3, #1
 8007814:	e7c5      	b.n	80077a2 <__lshift+0x4a>
 8007816:	3904      	subs	r1, #4
 8007818:	f853 2b04 	ldr.w	r2, [r3], #4
 800781c:	459c      	cmp	ip, r3
 800781e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007822:	d8f9      	bhi.n	8007818 <__lshift+0xc0>
 8007824:	e7ea      	b.n	80077fc <__lshift+0xa4>
 8007826:	bf00      	nop
 8007828:	08008d9e 	.word	0x08008d9e
 800782c:	08008daf 	.word	0x08008daf

08007830 <__mcmp>:
 8007830:	4603      	mov	r3, r0
 8007832:	690a      	ldr	r2, [r1, #16]
 8007834:	6900      	ldr	r0, [r0, #16]
 8007836:	b530      	push	{r4, r5, lr}
 8007838:	1a80      	subs	r0, r0, r2
 800783a:	d10e      	bne.n	800785a <__mcmp+0x2a>
 800783c:	3314      	adds	r3, #20
 800783e:	3114      	adds	r1, #20
 8007840:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007844:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007848:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800784c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007850:	4295      	cmp	r5, r2
 8007852:	d003      	beq.n	800785c <__mcmp+0x2c>
 8007854:	d205      	bcs.n	8007862 <__mcmp+0x32>
 8007856:	f04f 30ff 	mov.w	r0, #4294967295
 800785a:	bd30      	pop	{r4, r5, pc}
 800785c:	42a3      	cmp	r3, r4
 800785e:	d3f3      	bcc.n	8007848 <__mcmp+0x18>
 8007860:	e7fb      	b.n	800785a <__mcmp+0x2a>
 8007862:	2001      	movs	r0, #1
 8007864:	e7f9      	b.n	800785a <__mcmp+0x2a>
	...

08007868 <__mdiff>:
 8007868:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800786c:	4689      	mov	r9, r1
 800786e:	4606      	mov	r6, r0
 8007870:	4611      	mov	r1, r2
 8007872:	4648      	mov	r0, r9
 8007874:	4614      	mov	r4, r2
 8007876:	f7ff ffdb 	bl	8007830 <__mcmp>
 800787a:	1e05      	subs	r5, r0, #0
 800787c:	d112      	bne.n	80078a4 <__mdiff+0x3c>
 800787e:	4629      	mov	r1, r5
 8007880:	4630      	mov	r0, r6
 8007882:	f7ff fd63 	bl	800734c <_Balloc>
 8007886:	4602      	mov	r2, r0
 8007888:	b928      	cbnz	r0, 8007896 <__mdiff+0x2e>
 800788a:	f240 2137 	movw	r1, #567	@ 0x237
 800788e:	4b3e      	ldr	r3, [pc, #248]	@ (8007988 <__mdiff+0x120>)
 8007890:	483e      	ldr	r0, [pc, #248]	@ (800798c <__mdiff+0x124>)
 8007892:	f000 fb0d 	bl	8007eb0 <__assert_func>
 8007896:	2301      	movs	r3, #1
 8007898:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800789c:	4610      	mov	r0, r2
 800789e:	b003      	add	sp, #12
 80078a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a4:	bfbc      	itt	lt
 80078a6:	464b      	movlt	r3, r9
 80078a8:	46a1      	movlt	r9, r4
 80078aa:	4630      	mov	r0, r6
 80078ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80078b0:	bfba      	itte	lt
 80078b2:	461c      	movlt	r4, r3
 80078b4:	2501      	movlt	r5, #1
 80078b6:	2500      	movge	r5, #0
 80078b8:	f7ff fd48 	bl	800734c <_Balloc>
 80078bc:	4602      	mov	r2, r0
 80078be:	b918      	cbnz	r0, 80078c8 <__mdiff+0x60>
 80078c0:	f240 2145 	movw	r1, #581	@ 0x245
 80078c4:	4b30      	ldr	r3, [pc, #192]	@ (8007988 <__mdiff+0x120>)
 80078c6:	e7e3      	b.n	8007890 <__mdiff+0x28>
 80078c8:	f100 0b14 	add.w	fp, r0, #20
 80078cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80078d0:	f109 0310 	add.w	r3, r9, #16
 80078d4:	60c5      	str	r5, [r0, #12]
 80078d6:	f04f 0c00 	mov.w	ip, #0
 80078da:	f109 0514 	add.w	r5, r9, #20
 80078de:	46d9      	mov	r9, fp
 80078e0:	6926      	ldr	r6, [r4, #16]
 80078e2:	f104 0e14 	add.w	lr, r4, #20
 80078e6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80078ea:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80078ee:	9301      	str	r3, [sp, #4]
 80078f0:	9b01      	ldr	r3, [sp, #4]
 80078f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80078f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80078fa:	b281      	uxth	r1, r0
 80078fc:	9301      	str	r3, [sp, #4]
 80078fe:	fa1f f38a 	uxth.w	r3, sl
 8007902:	1a5b      	subs	r3, r3, r1
 8007904:	0c00      	lsrs	r0, r0, #16
 8007906:	4463      	add	r3, ip
 8007908:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800790c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007910:	b29b      	uxth	r3, r3
 8007912:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007916:	4576      	cmp	r6, lr
 8007918:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800791c:	f849 3b04 	str.w	r3, [r9], #4
 8007920:	d8e6      	bhi.n	80078f0 <__mdiff+0x88>
 8007922:	1b33      	subs	r3, r6, r4
 8007924:	3b15      	subs	r3, #21
 8007926:	f023 0303 	bic.w	r3, r3, #3
 800792a:	3415      	adds	r4, #21
 800792c:	3304      	adds	r3, #4
 800792e:	42a6      	cmp	r6, r4
 8007930:	bf38      	it	cc
 8007932:	2304      	movcc	r3, #4
 8007934:	441d      	add	r5, r3
 8007936:	445b      	add	r3, fp
 8007938:	461e      	mov	r6, r3
 800793a:	462c      	mov	r4, r5
 800793c:	4544      	cmp	r4, r8
 800793e:	d30e      	bcc.n	800795e <__mdiff+0xf6>
 8007940:	f108 0103 	add.w	r1, r8, #3
 8007944:	1b49      	subs	r1, r1, r5
 8007946:	f021 0103 	bic.w	r1, r1, #3
 800794a:	3d03      	subs	r5, #3
 800794c:	45a8      	cmp	r8, r5
 800794e:	bf38      	it	cc
 8007950:	2100      	movcc	r1, #0
 8007952:	440b      	add	r3, r1
 8007954:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007958:	b199      	cbz	r1, 8007982 <__mdiff+0x11a>
 800795a:	6117      	str	r7, [r2, #16]
 800795c:	e79e      	b.n	800789c <__mdiff+0x34>
 800795e:	46e6      	mov	lr, ip
 8007960:	f854 1b04 	ldr.w	r1, [r4], #4
 8007964:	fa1f fc81 	uxth.w	ip, r1
 8007968:	44f4      	add	ip, lr
 800796a:	0c08      	lsrs	r0, r1, #16
 800796c:	4471      	add	r1, lr
 800796e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007972:	b289      	uxth	r1, r1
 8007974:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007978:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800797c:	f846 1b04 	str.w	r1, [r6], #4
 8007980:	e7dc      	b.n	800793c <__mdiff+0xd4>
 8007982:	3f01      	subs	r7, #1
 8007984:	e7e6      	b.n	8007954 <__mdiff+0xec>
 8007986:	bf00      	nop
 8007988:	08008d9e 	.word	0x08008d9e
 800798c:	08008daf 	.word	0x08008daf

08007990 <__d2b>:
 8007990:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007994:	2101      	movs	r1, #1
 8007996:	4690      	mov	r8, r2
 8007998:	4699      	mov	r9, r3
 800799a:	9e08      	ldr	r6, [sp, #32]
 800799c:	f7ff fcd6 	bl	800734c <_Balloc>
 80079a0:	4604      	mov	r4, r0
 80079a2:	b930      	cbnz	r0, 80079b2 <__d2b+0x22>
 80079a4:	4602      	mov	r2, r0
 80079a6:	f240 310f 	movw	r1, #783	@ 0x30f
 80079aa:	4b23      	ldr	r3, [pc, #140]	@ (8007a38 <__d2b+0xa8>)
 80079ac:	4823      	ldr	r0, [pc, #140]	@ (8007a3c <__d2b+0xac>)
 80079ae:	f000 fa7f 	bl	8007eb0 <__assert_func>
 80079b2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80079b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80079ba:	b10d      	cbz	r5, 80079c0 <__d2b+0x30>
 80079bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80079c0:	9301      	str	r3, [sp, #4]
 80079c2:	f1b8 0300 	subs.w	r3, r8, #0
 80079c6:	d024      	beq.n	8007a12 <__d2b+0x82>
 80079c8:	4668      	mov	r0, sp
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	f7ff fd85 	bl	80074da <__lo0bits>
 80079d0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80079d4:	b1d8      	cbz	r0, 8007a0e <__d2b+0x7e>
 80079d6:	f1c0 0320 	rsb	r3, r0, #32
 80079da:	fa02 f303 	lsl.w	r3, r2, r3
 80079de:	430b      	orrs	r3, r1
 80079e0:	40c2      	lsrs	r2, r0
 80079e2:	6163      	str	r3, [r4, #20]
 80079e4:	9201      	str	r2, [sp, #4]
 80079e6:	9b01      	ldr	r3, [sp, #4]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	bf0c      	ite	eq
 80079ec:	2201      	moveq	r2, #1
 80079ee:	2202      	movne	r2, #2
 80079f0:	61a3      	str	r3, [r4, #24]
 80079f2:	6122      	str	r2, [r4, #16]
 80079f4:	b1ad      	cbz	r5, 8007a22 <__d2b+0x92>
 80079f6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80079fa:	4405      	add	r5, r0
 80079fc:	6035      	str	r5, [r6, #0]
 80079fe:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007a02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a04:	6018      	str	r0, [r3, #0]
 8007a06:	4620      	mov	r0, r4
 8007a08:	b002      	add	sp, #8
 8007a0a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007a0e:	6161      	str	r1, [r4, #20]
 8007a10:	e7e9      	b.n	80079e6 <__d2b+0x56>
 8007a12:	a801      	add	r0, sp, #4
 8007a14:	f7ff fd61 	bl	80074da <__lo0bits>
 8007a18:	9b01      	ldr	r3, [sp, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	6163      	str	r3, [r4, #20]
 8007a1e:	3020      	adds	r0, #32
 8007a20:	e7e7      	b.n	80079f2 <__d2b+0x62>
 8007a22:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007a26:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a2a:	6030      	str	r0, [r6, #0]
 8007a2c:	6918      	ldr	r0, [r3, #16]
 8007a2e:	f7ff fd35 	bl	800749c <__hi0bits>
 8007a32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a36:	e7e4      	b.n	8007a02 <__d2b+0x72>
 8007a38:	08008d9e 	.word	0x08008d9e
 8007a3c:	08008daf 	.word	0x08008daf

08007a40 <__ssputs_r>:
 8007a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a44:	461f      	mov	r7, r3
 8007a46:	688e      	ldr	r6, [r1, #8]
 8007a48:	4682      	mov	sl, r0
 8007a4a:	42be      	cmp	r6, r7
 8007a4c:	460c      	mov	r4, r1
 8007a4e:	4690      	mov	r8, r2
 8007a50:	680b      	ldr	r3, [r1, #0]
 8007a52:	d82d      	bhi.n	8007ab0 <__ssputs_r+0x70>
 8007a54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a58:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007a5c:	d026      	beq.n	8007aac <__ssputs_r+0x6c>
 8007a5e:	6965      	ldr	r5, [r4, #20]
 8007a60:	6909      	ldr	r1, [r1, #16]
 8007a62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a66:	eba3 0901 	sub.w	r9, r3, r1
 8007a6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a6e:	1c7b      	adds	r3, r7, #1
 8007a70:	444b      	add	r3, r9
 8007a72:	106d      	asrs	r5, r5, #1
 8007a74:	429d      	cmp	r5, r3
 8007a76:	bf38      	it	cc
 8007a78:	461d      	movcc	r5, r3
 8007a7a:	0553      	lsls	r3, r2, #21
 8007a7c:	d527      	bpl.n	8007ace <__ssputs_r+0x8e>
 8007a7e:	4629      	mov	r1, r5
 8007a80:	f7ff fbd8 	bl	8007234 <_malloc_r>
 8007a84:	4606      	mov	r6, r0
 8007a86:	b360      	cbz	r0, 8007ae2 <__ssputs_r+0xa2>
 8007a88:	464a      	mov	r2, r9
 8007a8a:	6921      	ldr	r1, [r4, #16]
 8007a8c:	f000 fa02 	bl	8007e94 <memcpy>
 8007a90:	89a3      	ldrh	r3, [r4, #12]
 8007a92:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007a96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a9a:	81a3      	strh	r3, [r4, #12]
 8007a9c:	6126      	str	r6, [r4, #16]
 8007a9e:	444e      	add	r6, r9
 8007aa0:	6026      	str	r6, [r4, #0]
 8007aa2:	463e      	mov	r6, r7
 8007aa4:	6165      	str	r5, [r4, #20]
 8007aa6:	eba5 0509 	sub.w	r5, r5, r9
 8007aaa:	60a5      	str	r5, [r4, #8]
 8007aac:	42be      	cmp	r6, r7
 8007aae:	d900      	bls.n	8007ab2 <__ssputs_r+0x72>
 8007ab0:	463e      	mov	r6, r7
 8007ab2:	4632      	mov	r2, r6
 8007ab4:	4641      	mov	r1, r8
 8007ab6:	6820      	ldr	r0, [r4, #0]
 8007ab8:	f000 f9c2 	bl	8007e40 <memmove>
 8007abc:	2000      	movs	r0, #0
 8007abe:	68a3      	ldr	r3, [r4, #8]
 8007ac0:	1b9b      	subs	r3, r3, r6
 8007ac2:	60a3      	str	r3, [r4, #8]
 8007ac4:	6823      	ldr	r3, [r4, #0]
 8007ac6:	4433      	add	r3, r6
 8007ac8:	6023      	str	r3, [r4, #0]
 8007aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ace:	462a      	mov	r2, r5
 8007ad0:	f000 fa32 	bl	8007f38 <_realloc_r>
 8007ad4:	4606      	mov	r6, r0
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	d1e0      	bne.n	8007a9c <__ssputs_r+0x5c>
 8007ada:	4650      	mov	r0, sl
 8007adc:	6921      	ldr	r1, [r4, #16]
 8007ade:	f7ff fb37 	bl	8007150 <_free_r>
 8007ae2:	230c      	movs	r3, #12
 8007ae4:	f8ca 3000 	str.w	r3, [sl]
 8007ae8:	89a3      	ldrh	r3, [r4, #12]
 8007aea:	f04f 30ff 	mov.w	r0, #4294967295
 8007aee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007af2:	81a3      	strh	r3, [r4, #12]
 8007af4:	e7e9      	b.n	8007aca <__ssputs_r+0x8a>
	...

08007af8 <_svfiprintf_r>:
 8007af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007afc:	4698      	mov	r8, r3
 8007afe:	898b      	ldrh	r3, [r1, #12]
 8007b00:	4607      	mov	r7, r0
 8007b02:	061b      	lsls	r3, r3, #24
 8007b04:	460d      	mov	r5, r1
 8007b06:	4614      	mov	r4, r2
 8007b08:	b09d      	sub	sp, #116	@ 0x74
 8007b0a:	d510      	bpl.n	8007b2e <_svfiprintf_r+0x36>
 8007b0c:	690b      	ldr	r3, [r1, #16]
 8007b0e:	b973      	cbnz	r3, 8007b2e <_svfiprintf_r+0x36>
 8007b10:	2140      	movs	r1, #64	@ 0x40
 8007b12:	f7ff fb8f 	bl	8007234 <_malloc_r>
 8007b16:	6028      	str	r0, [r5, #0]
 8007b18:	6128      	str	r0, [r5, #16]
 8007b1a:	b930      	cbnz	r0, 8007b2a <_svfiprintf_r+0x32>
 8007b1c:	230c      	movs	r3, #12
 8007b1e:	603b      	str	r3, [r7, #0]
 8007b20:	f04f 30ff 	mov.w	r0, #4294967295
 8007b24:	b01d      	add	sp, #116	@ 0x74
 8007b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b2a:	2340      	movs	r3, #64	@ 0x40
 8007b2c:	616b      	str	r3, [r5, #20]
 8007b2e:	2300      	movs	r3, #0
 8007b30:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b32:	2320      	movs	r3, #32
 8007b34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b38:	2330      	movs	r3, #48	@ 0x30
 8007b3a:	f04f 0901 	mov.w	r9, #1
 8007b3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b42:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007cdc <_svfiprintf_r+0x1e4>
 8007b46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b4a:	4623      	mov	r3, r4
 8007b4c:	469a      	mov	sl, r3
 8007b4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b52:	b10a      	cbz	r2, 8007b58 <_svfiprintf_r+0x60>
 8007b54:	2a25      	cmp	r2, #37	@ 0x25
 8007b56:	d1f9      	bne.n	8007b4c <_svfiprintf_r+0x54>
 8007b58:	ebba 0b04 	subs.w	fp, sl, r4
 8007b5c:	d00b      	beq.n	8007b76 <_svfiprintf_r+0x7e>
 8007b5e:	465b      	mov	r3, fp
 8007b60:	4622      	mov	r2, r4
 8007b62:	4629      	mov	r1, r5
 8007b64:	4638      	mov	r0, r7
 8007b66:	f7ff ff6b 	bl	8007a40 <__ssputs_r>
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	f000 80a7 	beq.w	8007cbe <_svfiprintf_r+0x1c6>
 8007b70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b72:	445a      	add	r2, fp
 8007b74:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b76:	f89a 3000 	ldrb.w	r3, [sl]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f000 809f 	beq.w	8007cbe <_svfiprintf_r+0x1c6>
 8007b80:	2300      	movs	r3, #0
 8007b82:	f04f 32ff 	mov.w	r2, #4294967295
 8007b86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b8a:	f10a 0a01 	add.w	sl, sl, #1
 8007b8e:	9304      	str	r3, [sp, #16]
 8007b90:	9307      	str	r3, [sp, #28]
 8007b92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b96:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b98:	4654      	mov	r4, sl
 8007b9a:	2205      	movs	r2, #5
 8007b9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ba0:	484e      	ldr	r0, [pc, #312]	@ (8007cdc <_svfiprintf_r+0x1e4>)
 8007ba2:	f7fe fc68 	bl	8006476 <memchr>
 8007ba6:	9a04      	ldr	r2, [sp, #16]
 8007ba8:	b9d8      	cbnz	r0, 8007be2 <_svfiprintf_r+0xea>
 8007baa:	06d0      	lsls	r0, r2, #27
 8007bac:	bf44      	itt	mi
 8007bae:	2320      	movmi	r3, #32
 8007bb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007bb4:	0711      	lsls	r1, r2, #28
 8007bb6:	bf44      	itt	mi
 8007bb8:	232b      	movmi	r3, #43	@ 0x2b
 8007bba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007bbe:	f89a 3000 	ldrb.w	r3, [sl]
 8007bc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bc4:	d015      	beq.n	8007bf2 <_svfiprintf_r+0xfa>
 8007bc6:	4654      	mov	r4, sl
 8007bc8:	2000      	movs	r0, #0
 8007bca:	f04f 0c0a 	mov.w	ip, #10
 8007bce:	9a07      	ldr	r2, [sp, #28]
 8007bd0:	4621      	mov	r1, r4
 8007bd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bd6:	3b30      	subs	r3, #48	@ 0x30
 8007bd8:	2b09      	cmp	r3, #9
 8007bda:	d94b      	bls.n	8007c74 <_svfiprintf_r+0x17c>
 8007bdc:	b1b0      	cbz	r0, 8007c0c <_svfiprintf_r+0x114>
 8007bde:	9207      	str	r2, [sp, #28]
 8007be0:	e014      	b.n	8007c0c <_svfiprintf_r+0x114>
 8007be2:	eba0 0308 	sub.w	r3, r0, r8
 8007be6:	fa09 f303 	lsl.w	r3, r9, r3
 8007bea:	4313      	orrs	r3, r2
 8007bec:	46a2      	mov	sl, r4
 8007bee:	9304      	str	r3, [sp, #16]
 8007bf0:	e7d2      	b.n	8007b98 <_svfiprintf_r+0xa0>
 8007bf2:	9b03      	ldr	r3, [sp, #12]
 8007bf4:	1d19      	adds	r1, r3, #4
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	9103      	str	r1, [sp, #12]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	bfbb      	ittet	lt
 8007bfe:	425b      	neglt	r3, r3
 8007c00:	f042 0202 	orrlt.w	r2, r2, #2
 8007c04:	9307      	strge	r3, [sp, #28]
 8007c06:	9307      	strlt	r3, [sp, #28]
 8007c08:	bfb8      	it	lt
 8007c0a:	9204      	strlt	r2, [sp, #16]
 8007c0c:	7823      	ldrb	r3, [r4, #0]
 8007c0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c10:	d10a      	bne.n	8007c28 <_svfiprintf_r+0x130>
 8007c12:	7863      	ldrb	r3, [r4, #1]
 8007c14:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c16:	d132      	bne.n	8007c7e <_svfiprintf_r+0x186>
 8007c18:	9b03      	ldr	r3, [sp, #12]
 8007c1a:	3402      	adds	r4, #2
 8007c1c:	1d1a      	adds	r2, r3, #4
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	9203      	str	r2, [sp, #12]
 8007c22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c26:	9305      	str	r3, [sp, #20]
 8007c28:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007ce0 <_svfiprintf_r+0x1e8>
 8007c2c:	2203      	movs	r2, #3
 8007c2e:	4650      	mov	r0, sl
 8007c30:	7821      	ldrb	r1, [r4, #0]
 8007c32:	f7fe fc20 	bl	8006476 <memchr>
 8007c36:	b138      	cbz	r0, 8007c48 <_svfiprintf_r+0x150>
 8007c38:	2240      	movs	r2, #64	@ 0x40
 8007c3a:	9b04      	ldr	r3, [sp, #16]
 8007c3c:	eba0 000a 	sub.w	r0, r0, sl
 8007c40:	4082      	lsls	r2, r0
 8007c42:	4313      	orrs	r3, r2
 8007c44:	3401      	adds	r4, #1
 8007c46:	9304      	str	r3, [sp, #16]
 8007c48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c4c:	2206      	movs	r2, #6
 8007c4e:	4825      	ldr	r0, [pc, #148]	@ (8007ce4 <_svfiprintf_r+0x1ec>)
 8007c50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c54:	f7fe fc0f 	bl	8006476 <memchr>
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	d036      	beq.n	8007cca <_svfiprintf_r+0x1d2>
 8007c5c:	4b22      	ldr	r3, [pc, #136]	@ (8007ce8 <_svfiprintf_r+0x1f0>)
 8007c5e:	bb1b      	cbnz	r3, 8007ca8 <_svfiprintf_r+0x1b0>
 8007c60:	9b03      	ldr	r3, [sp, #12]
 8007c62:	3307      	adds	r3, #7
 8007c64:	f023 0307 	bic.w	r3, r3, #7
 8007c68:	3308      	adds	r3, #8
 8007c6a:	9303      	str	r3, [sp, #12]
 8007c6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c6e:	4433      	add	r3, r6
 8007c70:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c72:	e76a      	b.n	8007b4a <_svfiprintf_r+0x52>
 8007c74:	460c      	mov	r4, r1
 8007c76:	2001      	movs	r0, #1
 8007c78:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c7c:	e7a8      	b.n	8007bd0 <_svfiprintf_r+0xd8>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	f04f 0c0a 	mov.w	ip, #10
 8007c84:	4619      	mov	r1, r3
 8007c86:	3401      	adds	r4, #1
 8007c88:	9305      	str	r3, [sp, #20]
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c90:	3a30      	subs	r2, #48	@ 0x30
 8007c92:	2a09      	cmp	r2, #9
 8007c94:	d903      	bls.n	8007c9e <_svfiprintf_r+0x1a6>
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d0c6      	beq.n	8007c28 <_svfiprintf_r+0x130>
 8007c9a:	9105      	str	r1, [sp, #20]
 8007c9c:	e7c4      	b.n	8007c28 <_svfiprintf_r+0x130>
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ca6:	e7f0      	b.n	8007c8a <_svfiprintf_r+0x192>
 8007ca8:	ab03      	add	r3, sp, #12
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	462a      	mov	r2, r5
 8007cae:	4638      	mov	r0, r7
 8007cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8007cec <_svfiprintf_r+0x1f4>)
 8007cb2:	a904      	add	r1, sp, #16
 8007cb4:	f7fd fe7c 	bl	80059b0 <_printf_float>
 8007cb8:	1c42      	adds	r2, r0, #1
 8007cba:	4606      	mov	r6, r0
 8007cbc:	d1d6      	bne.n	8007c6c <_svfiprintf_r+0x174>
 8007cbe:	89ab      	ldrh	r3, [r5, #12]
 8007cc0:	065b      	lsls	r3, r3, #25
 8007cc2:	f53f af2d 	bmi.w	8007b20 <_svfiprintf_r+0x28>
 8007cc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007cc8:	e72c      	b.n	8007b24 <_svfiprintf_r+0x2c>
 8007cca:	ab03      	add	r3, sp, #12
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	462a      	mov	r2, r5
 8007cd0:	4638      	mov	r0, r7
 8007cd2:	4b06      	ldr	r3, [pc, #24]	@ (8007cec <_svfiprintf_r+0x1f4>)
 8007cd4:	a904      	add	r1, sp, #16
 8007cd6:	f7fe f909 	bl	8005eec <_printf_i>
 8007cda:	e7ed      	b.n	8007cb8 <_svfiprintf_r+0x1c0>
 8007cdc:	08008e08 	.word	0x08008e08
 8007ce0:	08008e0e 	.word	0x08008e0e
 8007ce4:	08008e12 	.word	0x08008e12
 8007ce8:	080059b1 	.word	0x080059b1
 8007cec:	08007a41 	.word	0x08007a41

08007cf0 <__sflush_r>:
 8007cf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf6:	0716      	lsls	r6, r2, #28
 8007cf8:	4605      	mov	r5, r0
 8007cfa:	460c      	mov	r4, r1
 8007cfc:	d454      	bmi.n	8007da8 <__sflush_r+0xb8>
 8007cfe:	684b      	ldr	r3, [r1, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	dc02      	bgt.n	8007d0a <__sflush_r+0x1a>
 8007d04:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	dd48      	ble.n	8007d9c <__sflush_r+0xac>
 8007d0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d0c:	2e00      	cmp	r6, #0
 8007d0e:	d045      	beq.n	8007d9c <__sflush_r+0xac>
 8007d10:	2300      	movs	r3, #0
 8007d12:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007d16:	682f      	ldr	r7, [r5, #0]
 8007d18:	6a21      	ldr	r1, [r4, #32]
 8007d1a:	602b      	str	r3, [r5, #0]
 8007d1c:	d030      	beq.n	8007d80 <__sflush_r+0x90>
 8007d1e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007d20:	89a3      	ldrh	r3, [r4, #12]
 8007d22:	0759      	lsls	r1, r3, #29
 8007d24:	d505      	bpl.n	8007d32 <__sflush_r+0x42>
 8007d26:	6863      	ldr	r3, [r4, #4]
 8007d28:	1ad2      	subs	r2, r2, r3
 8007d2a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007d2c:	b10b      	cbz	r3, 8007d32 <__sflush_r+0x42>
 8007d2e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007d30:	1ad2      	subs	r2, r2, r3
 8007d32:	2300      	movs	r3, #0
 8007d34:	4628      	mov	r0, r5
 8007d36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d38:	6a21      	ldr	r1, [r4, #32]
 8007d3a:	47b0      	blx	r6
 8007d3c:	1c43      	adds	r3, r0, #1
 8007d3e:	89a3      	ldrh	r3, [r4, #12]
 8007d40:	d106      	bne.n	8007d50 <__sflush_r+0x60>
 8007d42:	6829      	ldr	r1, [r5, #0]
 8007d44:	291d      	cmp	r1, #29
 8007d46:	d82b      	bhi.n	8007da0 <__sflush_r+0xb0>
 8007d48:	4a28      	ldr	r2, [pc, #160]	@ (8007dec <__sflush_r+0xfc>)
 8007d4a:	40ca      	lsrs	r2, r1
 8007d4c:	07d6      	lsls	r6, r2, #31
 8007d4e:	d527      	bpl.n	8007da0 <__sflush_r+0xb0>
 8007d50:	2200      	movs	r2, #0
 8007d52:	6062      	str	r2, [r4, #4]
 8007d54:	6922      	ldr	r2, [r4, #16]
 8007d56:	04d9      	lsls	r1, r3, #19
 8007d58:	6022      	str	r2, [r4, #0]
 8007d5a:	d504      	bpl.n	8007d66 <__sflush_r+0x76>
 8007d5c:	1c42      	adds	r2, r0, #1
 8007d5e:	d101      	bne.n	8007d64 <__sflush_r+0x74>
 8007d60:	682b      	ldr	r3, [r5, #0]
 8007d62:	b903      	cbnz	r3, 8007d66 <__sflush_r+0x76>
 8007d64:	6560      	str	r0, [r4, #84]	@ 0x54
 8007d66:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d68:	602f      	str	r7, [r5, #0]
 8007d6a:	b1b9      	cbz	r1, 8007d9c <__sflush_r+0xac>
 8007d6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d70:	4299      	cmp	r1, r3
 8007d72:	d002      	beq.n	8007d7a <__sflush_r+0x8a>
 8007d74:	4628      	mov	r0, r5
 8007d76:	f7ff f9eb 	bl	8007150 <_free_r>
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d7e:	e00d      	b.n	8007d9c <__sflush_r+0xac>
 8007d80:	2301      	movs	r3, #1
 8007d82:	4628      	mov	r0, r5
 8007d84:	47b0      	blx	r6
 8007d86:	4602      	mov	r2, r0
 8007d88:	1c50      	adds	r0, r2, #1
 8007d8a:	d1c9      	bne.n	8007d20 <__sflush_r+0x30>
 8007d8c:	682b      	ldr	r3, [r5, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d0c6      	beq.n	8007d20 <__sflush_r+0x30>
 8007d92:	2b1d      	cmp	r3, #29
 8007d94:	d001      	beq.n	8007d9a <__sflush_r+0xaa>
 8007d96:	2b16      	cmp	r3, #22
 8007d98:	d11d      	bne.n	8007dd6 <__sflush_r+0xe6>
 8007d9a:	602f      	str	r7, [r5, #0]
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	e021      	b.n	8007de4 <__sflush_r+0xf4>
 8007da0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007da4:	b21b      	sxth	r3, r3
 8007da6:	e01a      	b.n	8007dde <__sflush_r+0xee>
 8007da8:	690f      	ldr	r7, [r1, #16]
 8007daa:	2f00      	cmp	r7, #0
 8007dac:	d0f6      	beq.n	8007d9c <__sflush_r+0xac>
 8007dae:	0793      	lsls	r3, r2, #30
 8007db0:	bf18      	it	ne
 8007db2:	2300      	movne	r3, #0
 8007db4:	680e      	ldr	r6, [r1, #0]
 8007db6:	bf08      	it	eq
 8007db8:	694b      	ldreq	r3, [r1, #20]
 8007dba:	1bf6      	subs	r6, r6, r7
 8007dbc:	600f      	str	r7, [r1, #0]
 8007dbe:	608b      	str	r3, [r1, #8]
 8007dc0:	2e00      	cmp	r6, #0
 8007dc2:	ddeb      	ble.n	8007d9c <__sflush_r+0xac>
 8007dc4:	4633      	mov	r3, r6
 8007dc6:	463a      	mov	r2, r7
 8007dc8:	4628      	mov	r0, r5
 8007dca:	6a21      	ldr	r1, [r4, #32]
 8007dcc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007dd0:	47e0      	blx	ip
 8007dd2:	2800      	cmp	r0, #0
 8007dd4:	dc07      	bgt.n	8007de6 <__sflush_r+0xf6>
 8007dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dde:	f04f 30ff 	mov.w	r0, #4294967295
 8007de2:	81a3      	strh	r3, [r4, #12]
 8007de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007de6:	4407      	add	r7, r0
 8007de8:	1a36      	subs	r6, r6, r0
 8007dea:	e7e9      	b.n	8007dc0 <__sflush_r+0xd0>
 8007dec:	20400001 	.word	0x20400001

08007df0 <_fflush_r>:
 8007df0:	b538      	push	{r3, r4, r5, lr}
 8007df2:	690b      	ldr	r3, [r1, #16]
 8007df4:	4605      	mov	r5, r0
 8007df6:	460c      	mov	r4, r1
 8007df8:	b913      	cbnz	r3, 8007e00 <_fflush_r+0x10>
 8007dfa:	2500      	movs	r5, #0
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	bd38      	pop	{r3, r4, r5, pc}
 8007e00:	b118      	cbz	r0, 8007e0a <_fflush_r+0x1a>
 8007e02:	6a03      	ldr	r3, [r0, #32]
 8007e04:	b90b      	cbnz	r3, 8007e0a <_fflush_r+0x1a>
 8007e06:	f7fe fa1b 	bl	8006240 <__sinit>
 8007e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d0f3      	beq.n	8007dfa <_fflush_r+0xa>
 8007e12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007e14:	07d0      	lsls	r0, r2, #31
 8007e16:	d404      	bmi.n	8007e22 <_fflush_r+0x32>
 8007e18:	0599      	lsls	r1, r3, #22
 8007e1a:	d402      	bmi.n	8007e22 <_fflush_r+0x32>
 8007e1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e1e:	f7fe fb28 	bl	8006472 <__retarget_lock_acquire_recursive>
 8007e22:	4628      	mov	r0, r5
 8007e24:	4621      	mov	r1, r4
 8007e26:	f7ff ff63 	bl	8007cf0 <__sflush_r>
 8007e2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e2c:	4605      	mov	r5, r0
 8007e2e:	07da      	lsls	r2, r3, #31
 8007e30:	d4e4      	bmi.n	8007dfc <_fflush_r+0xc>
 8007e32:	89a3      	ldrh	r3, [r4, #12]
 8007e34:	059b      	lsls	r3, r3, #22
 8007e36:	d4e1      	bmi.n	8007dfc <_fflush_r+0xc>
 8007e38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e3a:	f7fe fb1b 	bl	8006474 <__retarget_lock_release_recursive>
 8007e3e:	e7dd      	b.n	8007dfc <_fflush_r+0xc>

08007e40 <memmove>:
 8007e40:	4288      	cmp	r0, r1
 8007e42:	b510      	push	{r4, lr}
 8007e44:	eb01 0402 	add.w	r4, r1, r2
 8007e48:	d902      	bls.n	8007e50 <memmove+0x10>
 8007e4a:	4284      	cmp	r4, r0
 8007e4c:	4623      	mov	r3, r4
 8007e4e:	d807      	bhi.n	8007e60 <memmove+0x20>
 8007e50:	1e43      	subs	r3, r0, #1
 8007e52:	42a1      	cmp	r1, r4
 8007e54:	d008      	beq.n	8007e68 <memmove+0x28>
 8007e56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e5e:	e7f8      	b.n	8007e52 <memmove+0x12>
 8007e60:	4601      	mov	r1, r0
 8007e62:	4402      	add	r2, r0
 8007e64:	428a      	cmp	r2, r1
 8007e66:	d100      	bne.n	8007e6a <memmove+0x2a>
 8007e68:	bd10      	pop	{r4, pc}
 8007e6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e72:	e7f7      	b.n	8007e64 <memmove+0x24>

08007e74 <_sbrk_r>:
 8007e74:	b538      	push	{r3, r4, r5, lr}
 8007e76:	2300      	movs	r3, #0
 8007e78:	4d05      	ldr	r5, [pc, #20]	@ (8007e90 <_sbrk_r+0x1c>)
 8007e7a:	4604      	mov	r4, r0
 8007e7c:	4608      	mov	r0, r1
 8007e7e:	602b      	str	r3, [r5, #0]
 8007e80:	f7fa fa58 	bl	8002334 <_sbrk>
 8007e84:	1c43      	adds	r3, r0, #1
 8007e86:	d102      	bne.n	8007e8e <_sbrk_r+0x1a>
 8007e88:	682b      	ldr	r3, [r5, #0]
 8007e8a:	b103      	cbz	r3, 8007e8e <_sbrk_r+0x1a>
 8007e8c:	6023      	str	r3, [r4, #0]
 8007e8e:	bd38      	pop	{r3, r4, r5, pc}
 8007e90:	200006cc 	.word	0x200006cc

08007e94 <memcpy>:
 8007e94:	440a      	add	r2, r1
 8007e96:	4291      	cmp	r1, r2
 8007e98:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e9c:	d100      	bne.n	8007ea0 <memcpy+0xc>
 8007e9e:	4770      	bx	lr
 8007ea0:	b510      	push	{r4, lr}
 8007ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ea6:	4291      	cmp	r1, r2
 8007ea8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007eac:	d1f9      	bne.n	8007ea2 <memcpy+0xe>
 8007eae:	bd10      	pop	{r4, pc}

08007eb0 <__assert_func>:
 8007eb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007eb2:	4614      	mov	r4, r2
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	4b09      	ldr	r3, [pc, #36]	@ (8007edc <__assert_func+0x2c>)
 8007eb8:	4605      	mov	r5, r0
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68d8      	ldr	r0, [r3, #12]
 8007ebe:	b14c      	cbz	r4, 8007ed4 <__assert_func+0x24>
 8007ec0:	4b07      	ldr	r3, [pc, #28]	@ (8007ee0 <__assert_func+0x30>)
 8007ec2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ec6:	9100      	str	r1, [sp, #0]
 8007ec8:	462b      	mov	r3, r5
 8007eca:	4906      	ldr	r1, [pc, #24]	@ (8007ee4 <__assert_func+0x34>)
 8007ecc:	f000 f870 	bl	8007fb0 <fiprintf>
 8007ed0:	f000 f880 	bl	8007fd4 <abort>
 8007ed4:	4b04      	ldr	r3, [pc, #16]	@ (8007ee8 <__assert_func+0x38>)
 8007ed6:	461c      	mov	r4, r3
 8007ed8:	e7f3      	b.n	8007ec2 <__assert_func+0x12>
 8007eda:	bf00      	nop
 8007edc:	20000020 	.word	0x20000020
 8007ee0:	08008e23 	.word	0x08008e23
 8007ee4:	08008e30 	.word	0x08008e30
 8007ee8:	08008e5e 	.word	0x08008e5e

08007eec <_calloc_r>:
 8007eec:	b570      	push	{r4, r5, r6, lr}
 8007eee:	fba1 5402 	umull	r5, r4, r1, r2
 8007ef2:	b934      	cbnz	r4, 8007f02 <_calloc_r+0x16>
 8007ef4:	4629      	mov	r1, r5
 8007ef6:	f7ff f99d 	bl	8007234 <_malloc_r>
 8007efa:	4606      	mov	r6, r0
 8007efc:	b928      	cbnz	r0, 8007f0a <_calloc_r+0x1e>
 8007efe:	4630      	mov	r0, r6
 8007f00:	bd70      	pop	{r4, r5, r6, pc}
 8007f02:	220c      	movs	r2, #12
 8007f04:	2600      	movs	r6, #0
 8007f06:	6002      	str	r2, [r0, #0]
 8007f08:	e7f9      	b.n	8007efe <_calloc_r+0x12>
 8007f0a:	462a      	mov	r2, r5
 8007f0c:	4621      	mov	r1, r4
 8007f0e:	f7fe fa32 	bl	8006376 <memset>
 8007f12:	e7f4      	b.n	8007efe <_calloc_r+0x12>

08007f14 <__ascii_mbtowc>:
 8007f14:	b082      	sub	sp, #8
 8007f16:	b901      	cbnz	r1, 8007f1a <__ascii_mbtowc+0x6>
 8007f18:	a901      	add	r1, sp, #4
 8007f1a:	b142      	cbz	r2, 8007f2e <__ascii_mbtowc+0x1a>
 8007f1c:	b14b      	cbz	r3, 8007f32 <__ascii_mbtowc+0x1e>
 8007f1e:	7813      	ldrb	r3, [r2, #0]
 8007f20:	600b      	str	r3, [r1, #0]
 8007f22:	7812      	ldrb	r2, [r2, #0]
 8007f24:	1e10      	subs	r0, r2, #0
 8007f26:	bf18      	it	ne
 8007f28:	2001      	movne	r0, #1
 8007f2a:	b002      	add	sp, #8
 8007f2c:	4770      	bx	lr
 8007f2e:	4610      	mov	r0, r2
 8007f30:	e7fb      	b.n	8007f2a <__ascii_mbtowc+0x16>
 8007f32:	f06f 0001 	mvn.w	r0, #1
 8007f36:	e7f8      	b.n	8007f2a <__ascii_mbtowc+0x16>

08007f38 <_realloc_r>:
 8007f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f3c:	4607      	mov	r7, r0
 8007f3e:	4614      	mov	r4, r2
 8007f40:	460d      	mov	r5, r1
 8007f42:	b921      	cbnz	r1, 8007f4e <_realloc_r+0x16>
 8007f44:	4611      	mov	r1, r2
 8007f46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f4a:	f7ff b973 	b.w	8007234 <_malloc_r>
 8007f4e:	b92a      	cbnz	r2, 8007f5c <_realloc_r+0x24>
 8007f50:	f7ff f8fe 	bl	8007150 <_free_r>
 8007f54:	4625      	mov	r5, r4
 8007f56:	4628      	mov	r0, r5
 8007f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f5c:	f000 f841 	bl	8007fe2 <_malloc_usable_size_r>
 8007f60:	4284      	cmp	r4, r0
 8007f62:	4606      	mov	r6, r0
 8007f64:	d802      	bhi.n	8007f6c <_realloc_r+0x34>
 8007f66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f6a:	d8f4      	bhi.n	8007f56 <_realloc_r+0x1e>
 8007f6c:	4621      	mov	r1, r4
 8007f6e:	4638      	mov	r0, r7
 8007f70:	f7ff f960 	bl	8007234 <_malloc_r>
 8007f74:	4680      	mov	r8, r0
 8007f76:	b908      	cbnz	r0, 8007f7c <_realloc_r+0x44>
 8007f78:	4645      	mov	r5, r8
 8007f7a:	e7ec      	b.n	8007f56 <_realloc_r+0x1e>
 8007f7c:	42b4      	cmp	r4, r6
 8007f7e:	4622      	mov	r2, r4
 8007f80:	4629      	mov	r1, r5
 8007f82:	bf28      	it	cs
 8007f84:	4632      	movcs	r2, r6
 8007f86:	f7ff ff85 	bl	8007e94 <memcpy>
 8007f8a:	4629      	mov	r1, r5
 8007f8c:	4638      	mov	r0, r7
 8007f8e:	f7ff f8df 	bl	8007150 <_free_r>
 8007f92:	e7f1      	b.n	8007f78 <_realloc_r+0x40>

08007f94 <__ascii_wctomb>:
 8007f94:	4603      	mov	r3, r0
 8007f96:	4608      	mov	r0, r1
 8007f98:	b141      	cbz	r1, 8007fac <__ascii_wctomb+0x18>
 8007f9a:	2aff      	cmp	r2, #255	@ 0xff
 8007f9c:	d904      	bls.n	8007fa8 <__ascii_wctomb+0x14>
 8007f9e:	228a      	movs	r2, #138	@ 0x8a
 8007fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	4770      	bx	lr
 8007fa8:	2001      	movs	r0, #1
 8007faa:	700a      	strb	r2, [r1, #0]
 8007fac:	4770      	bx	lr
	...

08007fb0 <fiprintf>:
 8007fb0:	b40e      	push	{r1, r2, r3}
 8007fb2:	b503      	push	{r0, r1, lr}
 8007fb4:	4601      	mov	r1, r0
 8007fb6:	ab03      	add	r3, sp, #12
 8007fb8:	4805      	ldr	r0, [pc, #20]	@ (8007fd0 <fiprintf+0x20>)
 8007fba:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fbe:	6800      	ldr	r0, [r0, #0]
 8007fc0:	9301      	str	r3, [sp, #4]
 8007fc2:	f000 f83d 	bl	8008040 <_vfiprintf_r>
 8007fc6:	b002      	add	sp, #8
 8007fc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fcc:	b003      	add	sp, #12
 8007fce:	4770      	bx	lr
 8007fd0:	20000020 	.word	0x20000020

08007fd4 <abort>:
 8007fd4:	2006      	movs	r0, #6
 8007fd6:	b508      	push	{r3, lr}
 8007fd8:	f000 fa06 	bl	80083e8 <raise>
 8007fdc:	2001      	movs	r0, #1
 8007fde:	f7fa f934 	bl	800224a <_exit>

08007fe2 <_malloc_usable_size_r>:
 8007fe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fe6:	1f18      	subs	r0, r3, #4
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	bfbc      	itt	lt
 8007fec:	580b      	ldrlt	r3, [r1, r0]
 8007fee:	18c0      	addlt	r0, r0, r3
 8007ff0:	4770      	bx	lr

08007ff2 <__sfputc_r>:
 8007ff2:	6893      	ldr	r3, [r2, #8]
 8007ff4:	b410      	push	{r4}
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	6093      	str	r3, [r2, #8]
 8007ffc:	da07      	bge.n	800800e <__sfputc_r+0x1c>
 8007ffe:	6994      	ldr	r4, [r2, #24]
 8008000:	42a3      	cmp	r3, r4
 8008002:	db01      	blt.n	8008008 <__sfputc_r+0x16>
 8008004:	290a      	cmp	r1, #10
 8008006:	d102      	bne.n	800800e <__sfputc_r+0x1c>
 8008008:	bc10      	pop	{r4}
 800800a:	f000 b931 	b.w	8008270 <__swbuf_r>
 800800e:	6813      	ldr	r3, [r2, #0]
 8008010:	1c58      	adds	r0, r3, #1
 8008012:	6010      	str	r0, [r2, #0]
 8008014:	7019      	strb	r1, [r3, #0]
 8008016:	4608      	mov	r0, r1
 8008018:	bc10      	pop	{r4}
 800801a:	4770      	bx	lr

0800801c <__sfputs_r>:
 800801c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800801e:	4606      	mov	r6, r0
 8008020:	460f      	mov	r7, r1
 8008022:	4614      	mov	r4, r2
 8008024:	18d5      	adds	r5, r2, r3
 8008026:	42ac      	cmp	r4, r5
 8008028:	d101      	bne.n	800802e <__sfputs_r+0x12>
 800802a:	2000      	movs	r0, #0
 800802c:	e007      	b.n	800803e <__sfputs_r+0x22>
 800802e:	463a      	mov	r2, r7
 8008030:	4630      	mov	r0, r6
 8008032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008036:	f7ff ffdc 	bl	8007ff2 <__sfputc_r>
 800803a:	1c43      	adds	r3, r0, #1
 800803c:	d1f3      	bne.n	8008026 <__sfputs_r+0xa>
 800803e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008040 <_vfiprintf_r>:
 8008040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008044:	460d      	mov	r5, r1
 8008046:	4614      	mov	r4, r2
 8008048:	4698      	mov	r8, r3
 800804a:	4606      	mov	r6, r0
 800804c:	b09d      	sub	sp, #116	@ 0x74
 800804e:	b118      	cbz	r0, 8008058 <_vfiprintf_r+0x18>
 8008050:	6a03      	ldr	r3, [r0, #32]
 8008052:	b90b      	cbnz	r3, 8008058 <_vfiprintf_r+0x18>
 8008054:	f7fe f8f4 	bl	8006240 <__sinit>
 8008058:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800805a:	07d9      	lsls	r1, r3, #31
 800805c:	d405      	bmi.n	800806a <_vfiprintf_r+0x2a>
 800805e:	89ab      	ldrh	r3, [r5, #12]
 8008060:	059a      	lsls	r2, r3, #22
 8008062:	d402      	bmi.n	800806a <_vfiprintf_r+0x2a>
 8008064:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008066:	f7fe fa04 	bl	8006472 <__retarget_lock_acquire_recursive>
 800806a:	89ab      	ldrh	r3, [r5, #12]
 800806c:	071b      	lsls	r3, r3, #28
 800806e:	d501      	bpl.n	8008074 <_vfiprintf_r+0x34>
 8008070:	692b      	ldr	r3, [r5, #16]
 8008072:	b99b      	cbnz	r3, 800809c <_vfiprintf_r+0x5c>
 8008074:	4629      	mov	r1, r5
 8008076:	4630      	mov	r0, r6
 8008078:	f000 f938 	bl	80082ec <__swsetup_r>
 800807c:	b170      	cbz	r0, 800809c <_vfiprintf_r+0x5c>
 800807e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008080:	07dc      	lsls	r4, r3, #31
 8008082:	d504      	bpl.n	800808e <_vfiprintf_r+0x4e>
 8008084:	f04f 30ff 	mov.w	r0, #4294967295
 8008088:	b01d      	add	sp, #116	@ 0x74
 800808a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800808e:	89ab      	ldrh	r3, [r5, #12]
 8008090:	0598      	lsls	r0, r3, #22
 8008092:	d4f7      	bmi.n	8008084 <_vfiprintf_r+0x44>
 8008094:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008096:	f7fe f9ed 	bl	8006474 <__retarget_lock_release_recursive>
 800809a:	e7f3      	b.n	8008084 <_vfiprintf_r+0x44>
 800809c:	2300      	movs	r3, #0
 800809e:	9309      	str	r3, [sp, #36]	@ 0x24
 80080a0:	2320      	movs	r3, #32
 80080a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080a6:	2330      	movs	r3, #48	@ 0x30
 80080a8:	f04f 0901 	mov.w	r9, #1
 80080ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80080b0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800825c <_vfiprintf_r+0x21c>
 80080b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080b8:	4623      	mov	r3, r4
 80080ba:	469a      	mov	sl, r3
 80080bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080c0:	b10a      	cbz	r2, 80080c6 <_vfiprintf_r+0x86>
 80080c2:	2a25      	cmp	r2, #37	@ 0x25
 80080c4:	d1f9      	bne.n	80080ba <_vfiprintf_r+0x7a>
 80080c6:	ebba 0b04 	subs.w	fp, sl, r4
 80080ca:	d00b      	beq.n	80080e4 <_vfiprintf_r+0xa4>
 80080cc:	465b      	mov	r3, fp
 80080ce:	4622      	mov	r2, r4
 80080d0:	4629      	mov	r1, r5
 80080d2:	4630      	mov	r0, r6
 80080d4:	f7ff ffa2 	bl	800801c <__sfputs_r>
 80080d8:	3001      	adds	r0, #1
 80080da:	f000 80a7 	beq.w	800822c <_vfiprintf_r+0x1ec>
 80080de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080e0:	445a      	add	r2, fp
 80080e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80080e4:	f89a 3000 	ldrb.w	r3, [sl]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f000 809f 	beq.w	800822c <_vfiprintf_r+0x1ec>
 80080ee:	2300      	movs	r3, #0
 80080f0:	f04f 32ff 	mov.w	r2, #4294967295
 80080f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080f8:	f10a 0a01 	add.w	sl, sl, #1
 80080fc:	9304      	str	r3, [sp, #16]
 80080fe:	9307      	str	r3, [sp, #28]
 8008100:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008104:	931a      	str	r3, [sp, #104]	@ 0x68
 8008106:	4654      	mov	r4, sl
 8008108:	2205      	movs	r2, #5
 800810a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800810e:	4853      	ldr	r0, [pc, #332]	@ (800825c <_vfiprintf_r+0x21c>)
 8008110:	f7fe f9b1 	bl	8006476 <memchr>
 8008114:	9a04      	ldr	r2, [sp, #16]
 8008116:	b9d8      	cbnz	r0, 8008150 <_vfiprintf_r+0x110>
 8008118:	06d1      	lsls	r1, r2, #27
 800811a:	bf44      	itt	mi
 800811c:	2320      	movmi	r3, #32
 800811e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008122:	0713      	lsls	r3, r2, #28
 8008124:	bf44      	itt	mi
 8008126:	232b      	movmi	r3, #43	@ 0x2b
 8008128:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800812c:	f89a 3000 	ldrb.w	r3, [sl]
 8008130:	2b2a      	cmp	r3, #42	@ 0x2a
 8008132:	d015      	beq.n	8008160 <_vfiprintf_r+0x120>
 8008134:	4654      	mov	r4, sl
 8008136:	2000      	movs	r0, #0
 8008138:	f04f 0c0a 	mov.w	ip, #10
 800813c:	9a07      	ldr	r2, [sp, #28]
 800813e:	4621      	mov	r1, r4
 8008140:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008144:	3b30      	subs	r3, #48	@ 0x30
 8008146:	2b09      	cmp	r3, #9
 8008148:	d94b      	bls.n	80081e2 <_vfiprintf_r+0x1a2>
 800814a:	b1b0      	cbz	r0, 800817a <_vfiprintf_r+0x13a>
 800814c:	9207      	str	r2, [sp, #28]
 800814e:	e014      	b.n	800817a <_vfiprintf_r+0x13a>
 8008150:	eba0 0308 	sub.w	r3, r0, r8
 8008154:	fa09 f303 	lsl.w	r3, r9, r3
 8008158:	4313      	orrs	r3, r2
 800815a:	46a2      	mov	sl, r4
 800815c:	9304      	str	r3, [sp, #16]
 800815e:	e7d2      	b.n	8008106 <_vfiprintf_r+0xc6>
 8008160:	9b03      	ldr	r3, [sp, #12]
 8008162:	1d19      	adds	r1, r3, #4
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	9103      	str	r1, [sp, #12]
 8008168:	2b00      	cmp	r3, #0
 800816a:	bfbb      	ittet	lt
 800816c:	425b      	neglt	r3, r3
 800816e:	f042 0202 	orrlt.w	r2, r2, #2
 8008172:	9307      	strge	r3, [sp, #28]
 8008174:	9307      	strlt	r3, [sp, #28]
 8008176:	bfb8      	it	lt
 8008178:	9204      	strlt	r2, [sp, #16]
 800817a:	7823      	ldrb	r3, [r4, #0]
 800817c:	2b2e      	cmp	r3, #46	@ 0x2e
 800817e:	d10a      	bne.n	8008196 <_vfiprintf_r+0x156>
 8008180:	7863      	ldrb	r3, [r4, #1]
 8008182:	2b2a      	cmp	r3, #42	@ 0x2a
 8008184:	d132      	bne.n	80081ec <_vfiprintf_r+0x1ac>
 8008186:	9b03      	ldr	r3, [sp, #12]
 8008188:	3402      	adds	r4, #2
 800818a:	1d1a      	adds	r2, r3, #4
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	9203      	str	r2, [sp, #12]
 8008190:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008194:	9305      	str	r3, [sp, #20]
 8008196:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008260 <_vfiprintf_r+0x220>
 800819a:	2203      	movs	r2, #3
 800819c:	4650      	mov	r0, sl
 800819e:	7821      	ldrb	r1, [r4, #0]
 80081a0:	f7fe f969 	bl	8006476 <memchr>
 80081a4:	b138      	cbz	r0, 80081b6 <_vfiprintf_r+0x176>
 80081a6:	2240      	movs	r2, #64	@ 0x40
 80081a8:	9b04      	ldr	r3, [sp, #16]
 80081aa:	eba0 000a 	sub.w	r0, r0, sl
 80081ae:	4082      	lsls	r2, r0
 80081b0:	4313      	orrs	r3, r2
 80081b2:	3401      	adds	r4, #1
 80081b4:	9304      	str	r3, [sp, #16]
 80081b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ba:	2206      	movs	r2, #6
 80081bc:	4829      	ldr	r0, [pc, #164]	@ (8008264 <_vfiprintf_r+0x224>)
 80081be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081c2:	f7fe f958 	bl	8006476 <memchr>
 80081c6:	2800      	cmp	r0, #0
 80081c8:	d03f      	beq.n	800824a <_vfiprintf_r+0x20a>
 80081ca:	4b27      	ldr	r3, [pc, #156]	@ (8008268 <_vfiprintf_r+0x228>)
 80081cc:	bb1b      	cbnz	r3, 8008216 <_vfiprintf_r+0x1d6>
 80081ce:	9b03      	ldr	r3, [sp, #12]
 80081d0:	3307      	adds	r3, #7
 80081d2:	f023 0307 	bic.w	r3, r3, #7
 80081d6:	3308      	adds	r3, #8
 80081d8:	9303      	str	r3, [sp, #12]
 80081da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081dc:	443b      	add	r3, r7
 80081de:	9309      	str	r3, [sp, #36]	@ 0x24
 80081e0:	e76a      	b.n	80080b8 <_vfiprintf_r+0x78>
 80081e2:	460c      	mov	r4, r1
 80081e4:	2001      	movs	r0, #1
 80081e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80081ea:	e7a8      	b.n	800813e <_vfiprintf_r+0xfe>
 80081ec:	2300      	movs	r3, #0
 80081ee:	f04f 0c0a 	mov.w	ip, #10
 80081f2:	4619      	mov	r1, r3
 80081f4:	3401      	adds	r4, #1
 80081f6:	9305      	str	r3, [sp, #20]
 80081f8:	4620      	mov	r0, r4
 80081fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081fe:	3a30      	subs	r2, #48	@ 0x30
 8008200:	2a09      	cmp	r2, #9
 8008202:	d903      	bls.n	800820c <_vfiprintf_r+0x1cc>
 8008204:	2b00      	cmp	r3, #0
 8008206:	d0c6      	beq.n	8008196 <_vfiprintf_r+0x156>
 8008208:	9105      	str	r1, [sp, #20]
 800820a:	e7c4      	b.n	8008196 <_vfiprintf_r+0x156>
 800820c:	4604      	mov	r4, r0
 800820e:	2301      	movs	r3, #1
 8008210:	fb0c 2101 	mla	r1, ip, r1, r2
 8008214:	e7f0      	b.n	80081f8 <_vfiprintf_r+0x1b8>
 8008216:	ab03      	add	r3, sp, #12
 8008218:	9300      	str	r3, [sp, #0]
 800821a:	462a      	mov	r2, r5
 800821c:	4630      	mov	r0, r6
 800821e:	4b13      	ldr	r3, [pc, #76]	@ (800826c <_vfiprintf_r+0x22c>)
 8008220:	a904      	add	r1, sp, #16
 8008222:	f7fd fbc5 	bl	80059b0 <_printf_float>
 8008226:	4607      	mov	r7, r0
 8008228:	1c78      	adds	r0, r7, #1
 800822a:	d1d6      	bne.n	80081da <_vfiprintf_r+0x19a>
 800822c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800822e:	07d9      	lsls	r1, r3, #31
 8008230:	d405      	bmi.n	800823e <_vfiprintf_r+0x1fe>
 8008232:	89ab      	ldrh	r3, [r5, #12]
 8008234:	059a      	lsls	r2, r3, #22
 8008236:	d402      	bmi.n	800823e <_vfiprintf_r+0x1fe>
 8008238:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800823a:	f7fe f91b 	bl	8006474 <__retarget_lock_release_recursive>
 800823e:	89ab      	ldrh	r3, [r5, #12]
 8008240:	065b      	lsls	r3, r3, #25
 8008242:	f53f af1f 	bmi.w	8008084 <_vfiprintf_r+0x44>
 8008246:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008248:	e71e      	b.n	8008088 <_vfiprintf_r+0x48>
 800824a:	ab03      	add	r3, sp, #12
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	462a      	mov	r2, r5
 8008250:	4630      	mov	r0, r6
 8008252:	4b06      	ldr	r3, [pc, #24]	@ (800826c <_vfiprintf_r+0x22c>)
 8008254:	a904      	add	r1, sp, #16
 8008256:	f7fd fe49 	bl	8005eec <_printf_i>
 800825a:	e7e4      	b.n	8008226 <_vfiprintf_r+0x1e6>
 800825c:	08008e08 	.word	0x08008e08
 8008260:	08008e0e 	.word	0x08008e0e
 8008264:	08008e12 	.word	0x08008e12
 8008268:	080059b1 	.word	0x080059b1
 800826c:	0800801d 	.word	0x0800801d

08008270 <__swbuf_r>:
 8008270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008272:	460e      	mov	r6, r1
 8008274:	4614      	mov	r4, r2
 8008276:	4605      	mov	r5, r0
 8008278:	b118      	cbz	r0, 8008282 <__swbuf_r+0x12>
 800827a:	6a03      	ldr	r3, [r0, #32]
 800827c:	b90b      	cbnz	r3, 8008282 <__swbuf_r+0x12>
 800827e:	f7fd ffdf 	bl	8006240 <__sinit>
 8008282:	69a3      	ldr	r3, [r4, #24]
 8008284:	60a3      	str	r3, [r4, #8]
 8008286:	89a3      	ldrh	r3, [r4, #12]
 8008288:	071a      	lsls	r2, r3, #28
 800828a:	d501      	bpl.n	8008290 <__swbuf_r+0x20>
 800828c:	6923      	ldr	r3, [r4, #16]
 800828e:	b943      	cbnz	r3, 80082a2 <__swbuf_r+0x32>
 8008290:	4621      	mov	r1, r4
 8008292:	4628      	mov	r0, r5
 8008294:	f000 f82a 	bl	80082ec <__swsetup_r>
 8008298:	b118      	cbz	r0, 80082a2 <__swbuf_r+0x32>
 800829a:	f04f 37ff 	mov.w	r7, #4294967295
 800829e:	4638      	mov	r0, r7
 80082a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082a2:	6823      	ldr	r3, [r4, #0]
 80082a4:	6922      	ldr	r2, [r4, #16]
 80082a6:	b2f6      	uxtb	r6, r6
 80082a8:	1a98      	subs	r0, r3, r2
 80082aa:	6963      	ldr	r3, [r4, #20]
 80082ac:	4637      	mov	r7, r6
 80082ae:	4283      	cmp	r3, r0
 80082b0:	dc05      	bgt.n	80082be <__swbuf_r+0x4e>
 80082b2:	4621      	mov	r1, r4
 80082b4:	4628      	mov	r0, r5
 80082b6:	f7ff fd9b 	bl	8007df0 <_fflush_r>
 80082ba:	2800      	cmp	r0, #0
 80082bc:	d1ed      	bne.n	800829a <__swbuf_r+0x2a>
 80082be:	68a3      	ldr	r3, [r4, #8]
 80082c0:	3b01      	subs	r3, #1
 80082c2:	60a3      	str	r3, [r4, #8]
 80082c4:	6823      	ldr	r3, [r4, #0]
 80082c6:	1c5a      	adds	r2, r3, #1
 80082c8:	6022      	str	r2, [r4, #0]
 80082ca:	701e      	strb	r6, [r3, #0]
 80082cc:	6962      	ldr	r2, [r4, #20]
 80082ce:	1c43      	adds	r3, r0, #1
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d004      	beq.n	80082de <__swbuf_r+0x6e>
 80082d4:	89a3      	ldrh	r3, [r4, #12]
 80082d6:	07db      	lsls	r3, r3, #31
 80082d8:	d5e1      	bpl.n	800829e <__swbuf_r+0x2e>
 80082da:	2e0a      	cmp	r6, #10
 80082dc:	d1df      	bne.n	800829e <__swbuf_r+0x2e>
 80082de:	4621      	mov	r1, r4
 80082e0:	4628      	mov	r0, r5
 80082e2:	f7ff fd85 	bl	8007df0 <_fflush_r>
 80082e6:	2800      	cmp	r0, #0
 80082e8:	d0d9      	beq.n	800829e <__swbuf_r+0x2e>
 80082ea:	e7d6      	b.n	800829a <__swbuf_r+0x2a>

080082ec <__swsetup_r>:
 80082ec:	b538      	push	{r3, r4, r5, lr}
 80082ee:	4b29      	ldr	r3, [pc, #164]	@ (8008394 <__swsetup_r+0xa8>)
 80082f0:	4605      	mov	r5, r0
 80082f2:	6818      	ldr	r0, [r3, #0]
 80082f4:	460c      	mov	r4, r1
 80082f6:	b118      	cbz	r0, 8008300 <__swsetup_r+0x14>
 80082f8:	6a03      	ldr	r3, [r0, #32]
 80082fa:	b90b      	cbnz	r3, 8008300 <__swsetup_r+0x14>
 80082fc:	f7fd ffa0 	bl	8006240 <__sinit>
 8008300:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008304:	0719      	lsls	r1, r3, #28
 8008306:	d422      	bmi.n	800834e <__swsetup_r+0x62>
 8008308:	06da      	lsls	r2, r3, #27
 800830a:	d407      	bmi.n	800831c <__swsetup_r+0x30>
 800830c:	2209      	movs	r2, #9
 800830e:	602a      	str	r2, [r5, #0]
 8008310:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008314:	f04f 30ff 	mov.w	r0, #4294967295
 8008318:	81a3      	strh	r3, [r4, #12]
 800831a:	e033      	b.n	8008384 <__swsetup_r+0x98>
 800831c:	0758      	lsls	r0, r3, #29
 800831e:	d512      	bpl.n	8008346 <__swsetup_r+0x5a>
 8008320:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008322:	b141      	cbz	r1, 8008336 <__swsetup_r+0x4a>
 8008324:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008328:	4299      	cmp	r1, r3
 800832a:	d002      	beq.n	8008332 <__swsetup_r+0x46>
 800832c:	4628      	mov	r0, r5
 800832e:	f7fe ff0f 	bl	8007150 <_free_r>
 8008332:	2300      	movs	r3, #0
 8008334:	6363      	str	r3, [r4, #52]	@ 0x34
 8008336:	89a3      	ldrh	r3, [r4, #12]
 8008338:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800833c:	81a3      	strh	r3, [r4, #12]
 800833e:	2300      	movs	r3, #0
 8008340:	6063      	str	r3, [r4, #4]
 8008342:	6923      	ldr	r3, [r4, #16]
 8008344:	6023      	str	r3, [r4, #0]
 8008346:	89a3      	ldrh	r3, [r4, #12]
 8008348:	f043 0308 	orr.w	r3, r3, #8
 800834c:	81a3      	strh	r3, [r4, #12]
 800834e:	6923      	ldr	r3, [r4, #16]
 8008350:	b94b      	cbnz	r3, 8008366 <__swsetup_r+0x7a>
 8008352:	89a3      	ldrh	r3, [r4, #12]
 8008354:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008358:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800835c:	d003      	beq.n	8008366 <__swsetup_r+0x7a>
 800835e:	4621      	mov	r1, r4
 8008360:	4628      	mov	r0, r5
 8008362:	f000 f882 	bl	800846a <__smakebuf_r>
 8008366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800836a:	f013 0201 	ands.w	r2, r3, #1
 800836e:	d00a      	beq.n	8008386 <__swsetup_r+0x9a>
 8008370:	2200      	movs	r2, #0
 8008372:	60a2      	str	r2, [r4, #8]
 8008374:	6962      	ldr	r2, [r4, #20]
 8008376:	4252      	negs	r2, r2
 8008378:	61a2      	str	r2, [r4, #24]
 800837a:	6922      	ldr	r2, [r4, #16]
 800837c:	b942      	cbnz	r2, 8008390 <__swsetup_r+0xa4>
 800837e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008382:	d1c5      	bne.n	8008310 <__swsetup_r+0x24>
 8008384:	bd38      	pop	{r3, r4, r5, pc}
 8008386:	0799      	lsls	r1, r3, #30
 8008388:	bf58      	it	pl
 800838a:	6962      	ldrpl	r2, [r4, #20]
 800838c:	60a2      	str	r2, [r4, #8]
 800838e:	e7f4      	b.n	800837a <__swsetup_r+0x8e>
 8008390:	2000      	movs	r0, #0
 8008392:	e7f7      	b.n	8008384 <__swsetup_r+0x98>
 8008394:	20000020 	.word	0x20000020

08008398 <_raise_r>:
 8008398:	291f      	cmp	r1, #31
 800839a:	b538      	push	{r3, r4, r5, lr}
 800839c:	4605      	mov	r5, r0
 800839e:	460c      	mov	r4, r1
 80083a0:	d904      	bls.n	80083ac <_raise_r+0x14>
 80083a2:	2316      	movs	r3, #22
 80083a4:	6003      	str	r3, [r0, #0]
 80083a6:	f04f 30ff 	mov.w	r0, #4294967295
 80083aa:	bd38      	pop	{r3, r4, r5, pc}
 80083ac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80083ae:	b112      	cbz	r2, 80083b6 <_raise_r+0x1e>
 80083b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80083b4:	b94b      	cbnz	r3, 80083ca <_raise_r+0x32>
 80083b6:	4628      	mov	r0, r5
 80083b8:	f000 f830 	bl	800841c <_getpid_r>
 80083bc:	4622      	mov	r2, r4
 80083be:	4601      	mov	r1, r0
 80083c0:	4628      	mov	r0, r5
 80083c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083c6:	f000 b817 	b.w	80083f8 <_kill_r>
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d00a      	beq.n	80083e4 <_raise_r+0x4c>
 80083ce:	1c59      	adds	r1, r3, #1
 80083d0:	d103      	bne.n	80083da <_raise_r+0x42>
 80083d2:	2316      	movs	r3, #22
 80083d4:	6003      	str	r3, [r0, #0]
 80083d6:	2001      	movs	r0, #1
 80083d8:	e7e7      	b.n	80083aa <_raise_r+0x12>
 80083da:	2100      	movs	r1, #0
 80083dc:	4620      	mov	r0, r4
 80083de:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80083e2:	4798      	blx	r3
 80083e4:	2000      	movs	r0, #0
 80083e6:	e7e0      	b.n	80083aa <_raise_r+0x12>

080083e8 <raise>:
 80083e8:	4b02      	ldr	r3, [pc, #8]	@ (80083f4 <raise+0xc>)
 80083ea:	4601      	mov	r1, r0
 80083ec:	6818      	ldr	r0, [r3, #0]
 80083ee:	f7ff bfd3 	b.w	8008398 <_raise_r>
 80083f2:	bf00      	nop
 80083f4:	20000020 	.word	0x20000020

080083f8 <_kill_r>:
 80083f8:	b538      	push	{r3, r4, r5, lr}
 80083fa:	2300      	movs	r3, #0
 80083fc:	4d06      	ldr	r5, [pc, #24]	@ (8008418 <_kill_r+0x20>)
 80083fe:	4604      	mov	r4, r0
 8008400:	4608      	mov	r0, r1
 8008402:	4611      	mov	r1, r2
 8008404:	602b      	str	r3, [r5, #0]
 8008406:	f7f9 ff10 	bl	800222a <_kill>
 800840a:	1c43      	adds	r3, r0, #1
 800840c:	d102      	bne.n	8008414 <_kill_r+0x1c>
 800840e:	682b      	ldr	r3, [r5, #0]
 8008410:	b103      	cbz	r3, 8008414 <_kill_r+0x1c>
 8008412:	6023      	str	r3, [r4, #0]
 8008414:	bd38      	pop	{r3, r4, r5, pc}
 8008416:	bf00      	nop
 8008418:	200006cc 	.word	0x200006cc

0800841c <_getpid_r>:
 800841c:	f7f9 befe 	b.w	800221c <_getpid>

08008420 <__swhatbuf_r>:
 8008420:	b570      	push	{r4, r5, r6, lr}
 8008422:	460c      	mov	r4, r1
 8008424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008428:	4615      	mov	r5, r2
 800842a:	2900      	cmp	r1, #0
 800842c:	461e      	mov	r6, r3
 800842e:	b096      	sub	sp, #88	@ 0x58
 8008430:	da0c      	bge.n	800844c <__swhatbuf_r+0x2c>
 8008432:	89a3      	ldrh	r3, [r4, #12]
 8008434:	2100      	movs	r1, #0
 8008436:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800843a:	bf14      	ite	ne
 800843c:	2340      	movne	r3, #64	@ 0x40
 800843e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008442:	2000      	movs	r0, #0
 8008444:	6031      	str	r1, [r6, #0]
 8008446:	602b      	str	r3, [r5, #0]
 8008448:	b016      	add	sp, #88	@ 0x58
 800844a:	bd70      	pop	{r4, r5, r6, pc}
 800844c:	466a      	mov	r2, sp
 800844e:	f000 f849 	bl	80084e4 <_fstat_r>
 8008452:	2800      	cmp	r0, #0
 8008454:	dbed      	blt.n	8008432 <__swhatbuf_r+0x12>
 8008456:	9901      	ldr	r1, [sp, #4]
 8008458:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800845c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008460:	4259      	negs	r1, r3
 8008462:	4159      	adcs	r1, r3
 8008464:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008468:	e7eb      	b.n	8008442 <__swhatbuf_r+0x22>

0800846a <__smakebuf_r>:
 800846a:	898b      	ldrh	r3, [r1, #12]
 800846c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800846e:	079d      	lsls	r5, r3, #30
 8008470:	4606      	mov	r6, r0
 8008472:	460c      	mov	r4, r1
 8008474:	d507      	bpl.n	8008486 <__smakebuf_r+0x1c>
 8008476:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800847a:	6023      	str	r3, [r4, #0]
 800847c:	6123      	str	r3, [r4, #16]
 800847e:	2301      	movs	r3, #1
 8008480:	6163      	str	r3, [r4, #20]
 8008482:	b003      	add	sp, #12
 8008484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008486:	466a      	mov	r2, sp
 8008488:	ab01      	add	r3, sp, #4
 800848a:	f7ff ffc9 	bl	8008420 <__swhatbuf_r>
 800848e:	9f00      	ldr	r7, [sp, #0]
 8008490:	4605      	mov	r5, r0
 8008492:	4639      	mov	r1, r7
 8008494:	4630      	mov	r0, r6
 8008496:	f7fe fecd 	bl	8007234 <_malloc_r>
 800849a:	b948      	cbnz	r0, 80084b0 <__smakebuf_r+0x46>
 800849c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084a0:	059a      	lsls	r2, r3, #22
 80084a2:	d4ee      	bmi.n	8008482 <__smakebuf_r+0x18>
 80084a4:	f023 0303 	bic.w	r3, r3, #3
 80084a8:	f043 0302 	orr.w	r3, r3, #2
 80084ac:	81a3      	strh	r3, [r4, #12]
 80084ae:	e7e2      	b.n	8008476 <__smakebuf_r+0xc>
 80084b0:	89a3      	ldrh	r3, [r4, #12]
 80084b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80084b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084ba:	81a3      	strh	r3, [r4, #12]
 80084bc:	9b01      	ldr	r3, [sp, #4]
 80084be:	6020      	str	r0, [r4, #0]
 80084c0:	b15b      	cbz	r3, 80084da <__smakebuf_r+0x70>
 80084c2:	4630      	mov	r0, r6
 80084c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084c8:	f000 f81e 	bl	8008508 <_isatty_r>
 80084cc:	b128      	cbz	r0, 80084da <__smakebuf_r+0x70>
 80084ce:	89a3      	ldrh	r3, [r4, #12]
 80084d0:	f023 0303 	bic.w	r3, r3, #3
 80084d4:	f043 0301 	orr.w	r3, r3, #1
 80084d8:	81a3      	strh	r3, [r4, #12]
 80084da:	89a3      	ldrh	r3, [r4, #12]
 80084dc:	431d      	orrs	r5, r3
 80084de:	81a5      	strh	r5, [r4, #12]
 80084e0:	e7cf      	b.n	8008482 <__smakebuf_r+0x18>
	...

080084e4 <_fstat_r>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	2300      	movs	r3, #0
 80084e8:	4d06      	ldr	r5, [pc, #24]	@ (8008504 <_fstat_r+0x20>)
 80084ea:	4604      	mov	r4, r0
 80084ec:	4608      	mov	r0, r1
 80084ee:	4611      	mov	r1, r2
 80084f0:	602b      	str	r3, [r5, #0]
 80084f2:	f7f9 fef9 	bl	80022e8 <_fstat>
 80084f6:	1c43      	adds	r3, r0, #1
 80084f8:	d102      	bne.n	8008500 <_fstat_r+0x1c>
 80084fa:	682b      	ldr	r3, [r5, #0]
 80084fc:	b103      	cbz	r3, 8008500 <_fstat_r+0x1c>
 80084fe:	6023      	str	r3, [r4, #0]
 8008500:	bd38      	pop	{r3, r4, r5, pc}
 8008502:	bf00      	nop
 8008504:	200006cc 	.word	0x200006cc

08008508 <_isatty_r>:
 8008508:	b538      	push	{r3, r4, r5, lr}
 800850a:	2300      	movs	r3, #0
 800850c:	4d05      	ldr	r5, [pc, #20]	@ (8008524 <_isatty_r+0x1c>)
 800850e:	4604      	mov	r4, r0
 8008510:	4608      	mov	r0, r1
 8008512:	602b      	str	r3, [r5, #0]
 8008514:	f7f9 fef7 	bl	8002306 <_isatty>
 8008518:	1c43      	adds	r3, r0, #1
 800851a:	d102      	bne.n	8008522 <_isatty_r+0x1a>
 800851c:	682b      	ldr	r3, [r5, #0]
 800851e:	b103      	cbz	r3, 8008522 <_isatty_r+0x1a>
 8008520:	6023      	str	r3, [r4, #0]
 8008522:	bd38      	pop	{r3, r4, r5, pc}
 8008524:	200006cc 	.word	0x200006cc

08008528 <_init>:
 8008528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800852a:	bf00      	nop
 800852c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800852e:	bc08      	pop	{r3}
 8008530:	469e      	mov	lr, r3
 8008532:	4770      	bx	lr

08008534 <_fini>:
 8008534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008536:	bf00      	nop
 8008538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800853a:	bc08      	pop	{r3}
 800853c:	469e      	mov	lr, r3
 800853e:	4770      	bx	lr
