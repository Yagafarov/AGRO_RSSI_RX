
AGRO_RSSI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007648  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b44  08007758  08007758  00008758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800829c  0800829c  0000a1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800829c  0800829c  0000929c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082a4  080082a4  0000a1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082a4  080082a4  000092a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082a8  080082a8  000092a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080082ac  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000554  200001dc  08008488  0000a1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000730  08008488  0000a730  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d448  00000000  00000000  0000a205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002366  00000000  00000000  0001764d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  000199b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009cc  00000000  00000000  0001a660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018dfd  00000000  00000000  0001b02c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001004c  00000000  00000000  00033e29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087fca  00000000  00000000  00043e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cbe3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044d4  00000000  00000000  000cbe84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000d0358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007740 	.word	0x08007740

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08007740 	.word	0x08007740

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <E220_WaitReady>:

/*------------------------------------------*/
extern uint8_t recv[50];
/*------------------------------------------*/
GPIO_PinState E220_WaitReady(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
	while(!(AUX_Flag == true)) {};
 8000a8c:	bf00      	nop
 8000a8e:	4b07      	ldr	r3, [pc, #28]	@ (8000aac <E220_WaitReady+0x24>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	f083 0301 	eor.w	r3, r3, #1
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1f8      	bne.n	8000a8e <E220_WaitReady+0x6>
	//while(!(HAL_GPIO_ReadPin(E220_AUX_PORT, E220_AUX_PIN))) {};
	AUX_Flag = false;
 8000a9c:	4b03      	ldr	r3, [pc, #12]	@ (8000aac <E220_WaitReady+0x24>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
	return GPIO_PIN_SET;
 8000aa2:	2301      	movs	r3, #1
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	20000314 	.word	0x20000314

08000ab0 <E220_CheckSentReadPacket>:
/*------------------------------------------*/
GPIO_PinState E220_CheckSentReadPacket(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
	while(!(AUX_Flag == true)) {};
 8000ab4:	bf00      	nop
 8000ab6:	4b07      	ldr	r3, [pc, #28]	@ (8000ad4 <E220_CheckSentReadPacket+0x24>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	f083 0301 	eor.w	r3, r3, #1
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1f8      	bne.n	8000ab6 <E220_CheckSentReadPacket+0x6>
	//while(!(HAL_GPIO_ReadPin(E220_AUX_PORT, E220_AUX_PIN))) {};
	AUX_Flag = false;
 8000ac4:	4b03      	ldr	r3, [pc, #12]	@ (8000ad4 <E220_CheckSentReadPacket+0x24>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
	return GPIO_PIN_SET;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	20000314 	.word	0x20000314

08000ad8 <E220_SetMode>:
	E220_CheckSentReadPacket();
	return GPIO_PIN_SET;
}
/*------------------------------------------*/
OperatingMode E220_SetMode(OperatingMode mode)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
	if(mode == NORMAL)
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d10c      	bne.n	8000b02 <E220_SetMode+0x2a>
	{
		E220_MO_RESET;
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000aee:	481f      	ldr	r0, [pc, #124]	@ (8000b6c <E220_SetMode+0x94>)
 8000af0:	f001 ff4a 	bl	8002988 <HAL_GPIO_WritePin>
		E220_M1_RESET;
 8000af4:	2200      	movs	r2, #0
 8000af6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000afa:	481d      	ldr	r0, [pc, #116]	@ (8000b70 <E220_SetMode+0x98>)
 8000afc:	f001 ff44 	bl	8002988 <HAL_GPIO_WritePin>
 8000b00:	e02e      	b.n	8000b60 <E220_SetMode+0x88>
	}
	else if(mode == WOR_Transmission)
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d10c      	bne.n	8000b22 <E220_SetMode+0x4a>
	{
		E220_MO_SET;
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b0e:	4817      	ldr	r0, [pc, #92]	@ (8000b6c <E220_SetMode+0x94>)
 8000b10:	f001 ff3a 	bl	8002988 <HAL_GPIO_WritePin>
		E220_M1_RESET;
 8000b14:	2200      	movs	r2, #0
 8000b16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b1a:	4815      	ldr	r0, [pc, #84]	@ (8000b70 <E220_SetMode+0x98>)
 8000b1c:	f001 ff34 	bl	8002988 <HAL_GPIO_WritePin>
 8000b20:	e01e      	b.n	8000b60 <E220_SetMode+0x88>
	}
	else if(mode == WOR_Receiving)
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	d10c      	bne.n	8000b42 <E220_SetMode+0x6a>
	{
		E220_MO_RESET;
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b2e:	480f      	ldr	r0, [pc, #60]	@ (8000b6c <E220_SetMode+0x94>)
 8000b30:	f001 ff2a 	bl	8002988 <HAL_GPIO_WritePin>
		E220_M1_SET;
 8000b34:	2201      	movs	r2, #1
 8000b36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b3a:	480d      	ldr	r0, [pc, #52]	@ (8000b70 <E220_SetMode+0x98>)
 8000b3c:	f001 ff24 	bl	8002988 <HAL_GPIO_WritePin>
 8000b40:	e00e      	b.n	8000b60 <E220_SetMode+0x88>
	}
	else if(mode == DeepSleep)
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	2b03      	cmp	r3, #3
 8000b46:	d10b      	bne.n	8000b60 <E220_SetMode+0x88>
	{
		E220_MO_SET;
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b4e:	4807      	ldr	r0, [pc, #28]	@ (8000b6c <E220_SetMode+0x94>)
 8000b50:	f001 ff1a 	bl	8002988 <HAL_GPIO_WritePin>
		E220_M1_SET;
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b5a:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <E220_SetMode+0x98>)
 8000b5c:	f001 ff14 	bl	8002988 <HAL_GPIO_WritePin>
	}
	return mode;
 8000b60:	79fb      	ldrb	r3, [r7, #7]
	HAL_Delay(50);
	E220_CheckSentReadPacket();
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40010c00 	.word	0x40010c00
 8000b70:	40010800 	.word	0x40010800

08000b74 <E220_Set_AddressModule>:
/*------------------------------------------*/
void E220_Set_AddressModule(uint16_t addr)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	80fb      	strh	r3, [r7, #6]
	uint8_t addr_h = 0x00;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	75fb      	strb	r3, [r7, #23]
	uint8_t addr_l = 0x00;
 8000b82:	2300      	movs	r3, #0
 8000b84:	75bb      	strb	r3, [r7, #22]
	uint8_t send_data[5] = {E220_CMD0, E220_ADDH, 2, addr_h, addr_l};
 8000b86:	23c0      	movs	r3, #192	@ 0xc0
 8000b88:	733b      	strb	r3, [r7, #12]
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	737b      	strb	r3, [r7, #13]
 8000b8e:	2302      	movs	r3, #2
 8000b90:	73bb      	strb	r3, [r7, #14]
 8000b92:	7dfb      	ldrb	r3, [r7, #23]
 8000b94:	73fb      	strb	r3, [r7, #15]
 8000b96:	7dbb      	ldrb	r3, [r7, #22]
 8000b98:	743b      	strb	r3, [r7, #16]
	uint16_t mask = 0xFFFF;
 8000b9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b9e:	82bb      	strh	r3, [r7, #20]

	addr_h = (addr >> 8) & mask;
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	0a1b      	lsrs	r3, r3, #8
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	8abb      	ldrh	r3, [r7, #20]
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	4013      	ands	r3, r2
 8000bae:	75fb      	strb	r3, [r7, #23]
	addr_l = (addr << 0) & mask;
 8000bb0:	88fb      	ldrh	r3, [r7, #6]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	8abb      	ldrh	r3, [r7, #20]
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	4013      	ands	r3, r2
 8000bba:	75bb      	strb	r3, [r7, #22]

	send_data[3] = addr_h;
 8000bbc:	7dfb      	ldrb	r3, [r7, #23]
 8000bbe:	73fb      	strb	r3, [r7, #15]
	send_data[4] = addr_l;
 8000bc0:	7dbb      	ldrb	r3, [r7, #22]
 8000bc2:	743b      	strb	r3, [r7, #16]

	HAL_UART_Transmit(&huart1, send_data, 5, TIMEOUT);
 8000bc4:	f107 010c 	add.w	r1, r7, #12
 8000bc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bcc:	2205      	movs	r2, #5
 8000bce:	4806      	ldr	r0, [pc, #24]	@ (8000be8 <E220_Set_AddressModule+0x74>)
 8000bd0:	f003 f934 	bl	8003e3c <HAL_UART_Transmit>
	E220_CheckSentReadPacket();
 8000bd4:	f7ff ff6c 	bl	8000ab0 <E220_CheckSentReadPacket>
	E220_GlobReg.addr = addr;
 8000bd8:	4a04      	ldr	r2, [pc, #16]	@ (8000bec <E220_Set_AddressModule+0x78>)
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	8013      	strh	r3, [r2, #0]
}
 8000bde:	bf00      	nop
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000390 	.word	0x20000390
 8000bec:	200001f8 	.word	0x200001f8

08000bf0 <E220_Set_Uart_Rate_Parity_Data>:
/*------------------------------------------*/
void E220_Set_Uart_Rate_Parity_Data(SerialPortRate rate, SerialPorityBit pority, AirDataRate air_data)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	71bb      	strb	r3, [r7, #6]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	717b      	strb	r3, [r7, #5]
	uint8_t all_data = 0x00;
 8000c02:	2300      	movs	r3, #0
 8000c04:	73fb      	strb	r3, [r7, #15]
	uint8_t send_data[4] = {E220_CMD0, E220_REG0, 1, all_data};
 8000c06:	23c0      	movs	r3, #192	@ 0xc0
 8000c08:	723b      	strb	r3, [r7, #8]
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	727b      	strb	r3, [r7, #9]
 8000c0e:	2301      	movs	r3, #1
 8000c10:	72bb      	strb	r3, [r7, #10]
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	72fb      	strb	r3, [r7, #11]
	/*UART Serial Port Rate*/
	if(rate == Rate_1200) all_data |= 0x00;
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d036      	beq.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
	else if(rate == Rate_2400) all_data |= 0x20;
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d104      	bne.n	8000c2c <E220_Set_Uart_Rate_Parity_Data+0x3c>
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	f043 0320 	orr.w	r3, r3, #32
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	e02e      	b.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
	else if(rate == Rate_4800) all_data |= 0x40;
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d104      	bne.n	8000c3c <E220_Set_Uart_Rate_Parity_Data+0x4c>
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c38:	73fb      	strb	r3, [r7, #15]
 8000c3a:	e026      	b.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
	else if(rate == Rate_9600) all_data |= 0x60;
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	2b03      	cmp	r3, #3
 8000c40:	d104      	bne.n	8000c4c <E220_Set_Uart_Rate_Parity_Data+0x5c>
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000c48:	73fb      	strb	r3, [r7, #15]
 8000c4a:	e01e      	b.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
	else if(rate == Rate_19200) all_data |= 0x80;
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	d104      	bne.n	8000c5c <E220_Set_Uart_Rate_Parity_Data+0x6c>
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
 8000c54:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c58:	73fb      	strb	r3, [r7, #15]
 8000c5a:	e016      	b.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
	else if(rate == Rate_38400) all_data |= 0xA0;
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	2b05      	cmp	r3, #5
 8000c60:	d104      	bne.n	8000c6c <E220_Set_Uart_Rate_Parity_Data+0x7c>
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8000c68:	73fb      	strb	r3, [r7, #15]
 8000c6a:	e00e      	b.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
	else if(rate == Rate_57600) all_data |= 0xC0;
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b06      	cmp	r3, #6
 8000c70:	d104      	bne.n	8000c7c <E220_Set_Uart_Rate_Parity_Data+0x8c>
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8000c78:	73fb      	strb	r3, [r7, #15]
 8000c7a:	e006      	b.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
	else if(rate == Rate_115200) all_data |= 0xE0;
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	2b07      	cmp	r3, #7
 8000c80:	d103      	bne.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	f063 031f 	orn	r3, r3, #31
 8000c88:	73fb      	strb	r3, [r7, #15]
	/*UART Serial Port Rate*/
	if(pority == _8N1) all_data |= 0x00;
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d016      	beq.n	8000cbe <E220_Set_Uart_Rate_Parity_Data+0xce>
	else if(pority == _8O1) all_data |= 0x80;
 8000c90:	79bb      	ldrb	r3, [r7, #6]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d104      	bne.n	8000ca0 <E220_Set_Uart_Rate_Parity_Data+0xb0>
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c9c:	73fb      	strb	r3, [r7, #15]
 8000c9e:	e00e      	b.n	8000cbe <E220_Set_Uart_Rate_Parity_Data+0xce>
	else if(pority == _8E1) all_data |= 0x10;
 8000ca0:	79bb      	ldrb	r3, [r7, #6]
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d104      	bne.n	8000cb0 <E220_Set_Uart_Rate_Parity_Data+0xc0>
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	f043 0310 	orr.w	r3, r3, #16
 8000cac:	73fb      	strb	r3, [r7, #15]
 8000cae:	e006      	b.n	8000cbe <E220_Set_Uart_Rate_Parity_Data+0xce>
	else if(pority == _8N1_2) all_data |= 0x18;
 8000cb0:	79bb      	ldrb	r3, [r7, #6]
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	d103      	bne.n	8000cbe <E220_Set_Uart_Rate_Parity_Data+0xce>
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	f043 0318 	orr.w	r3, r3, #24
 8000cbc:	73fb      	strb	r3, [r7, #15]
	/*UART Serial Port Rate*/
	if(air_data == _2_4k) all_data |= 0x00;
 8000cbe:	797b      	ldrb	r3, [r7, #5]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d036      	beq.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
	else if(air_data == _2_4k_2) all_data |= 0x01;
 8000cc4:	797b      	ldrb	r3, [r7, #5]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d104      	bne.n	8000cd4 <E220_Set_Uart_Rate_Parity_Data+0xe4>
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	73fb      	strb	r3, [r7, #15]
 8000cd2:	e02e      	b.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
	else if(air_data == _2_4k_3) all_data |= 0x02;
 8000cd4:	797b      	ldrb	r3, [r7, #5]
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d104      	bne.n	8000ce4 <E220_Set_Uart_Rate_Parity_Data+0xf4>
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	73fb      	strb	r3, [r7, #15]
 8000ce2:	e026      	b.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
	else if(air_data == _4_8k) all_data |= 0x03;
 8000ce4:	797b      	ldrb	r3, [r7, #5]
 8000ce6:	2b03      	cmp	r3, #3
 8000ce8:	d104      	bne.n	8000cf4 <E220_Set_Uart_Rate_Parity_Data+0x104>
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	f043 0303 	orr.w	r3, r3, #3
 8000cf0:	73fb      	strb	r3, [r7, #15]
 8000cf2:	e01e      	b.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
	else if(air_data == _9_6k) all_data |= 0x04;
 8000cf4:	797b      	ldrb	r3, [r7, #5]
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	d104      	bne.n	8000d04 <E220_Set_Uart_Rate_Parity_Data+0x114>
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	f043 0304 	orr.w	r3, r3, #4
 8000d00:	73fb      	strb	r3, [r7, #15]
 8000d02:	e016      	b.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
	else if(air_data == _19_2k) all_data |= 0x05;
 8000d04:	797b      	ldrb	r3, [r7, #5]
 8000d06:	2b05      	cmp	r3, #5
 8000d08:	d104      	bne.n	8000d14 <E220_Set_Uart_Rate_Parity_Data+0x124>
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
 8000d0c:	f043 0305 	orr.w	r3, r3, #5
 8000d10:	73fb      	strb	r3, [r7, #15]
 8000d12:	e00e      	b.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
	else if(air_data == _38_4k) all_data |= 0x06;
 8000d14:	797b      	ldrb	r3, [r7, #5]
 8000d16:	2b06      	cmp	r3, #6
 8000d18:	d104      	bne.n	8000d24 <E220_Set_Uart_Rate_Parity_Data+0x134>
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	f043 0306 	orr.w	r3, r3, #6
 8000d20:	73fb      	strb	r3, [r7, #15]
 8000d22:	e006      	b.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
	else if(air_data == _62_5k) all_data |= 0x07;
 8000d24:	797b      	ldrb	r3, [r7, #5]
 8000d26:	2b07      	cmp	r3, #7
 8000d28:	d103      	bne.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	f043 0307 	orr.w	r3, r3, #7
 8000d30:	73fb      	strb	r3, [r7, #15]

	send_data[3] = all_data;
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
 8000d34:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit(&huart1, send_data, 4, TIMEOUT);
 8000d36:	f107 0108 	add.w	r1, r7, #8
 8000d3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d3e:	2204      	movs	r2, #4
 8000d40:	4805      	ldr	r0, [pc, #20]	@ (8000d58 <E220_Set_Uart_Rate_Parity_Data+0x168>)
 8000d42:	f003 f87b 	bl	8003e3c <HAL_UART_Transmit>
	E220_CheckSentReadPacket();
 8000d46:	f7ff feb3 	bl	8000ab0 <E220_CheckSentReadPacket>

	E220_GlobReg.reg0 = all_data;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	@ (8000d5c <E220_Set_Uart_Rate_Parity_Data+0x16c>)
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	7093      	strb	r3, [r2, #2]
}
 8000d50:	bf00      	nop
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000390 	.word	0x20000390
 8000d5c:	200001f8 	.word	0x200001f8

08000d60 <E220_Set_SubPacket_RSSI_TransPower>:
/*------------------------------------------*/
void E220_Set_SubPacket_RSSI_TransPower(SubPacketSetting sub, _Bool RSSIAmbientNoiseEnable, TransmittingPower tr_pow)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	71bb      	strb	r3, [r7, #6]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	717b      	strb	r3, [r7, #5]
	uint8_t all_data = 0x00;
 8000d72:	2300      	movs	r3, #0
 8000d74:	73fb      	strb	r3, [r7, #15]
	uint8_t send_data[4] = {E220_CMD0, E220_REG1, 1, all_data};
 8000d76:	23c0      	movs	r3, #192	@ 0xc0
 8000d78:	723b      	strb	r3, [r7, #8]
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	727b      	strb	r3, [r7, #9]
 8000d7e:	2301      	movs	r3, #1
 8000d80:	72bb      	strb	r3, [r7, #10]
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	72fb      	strb	r3, [r7, #11]
	/*Sub-Packet Setting*/
	if(sub == _200bytes) all_data |= 0x00;
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d016      	beq.n	8000dba <E220_Set_SubPacket_RSSI_TransPower+0x5a>
	else if(sub == _128bytes) all_data |= 0x40;
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d104      	bne.n	8000d9c <E220_Set_SubPacket_RSSI_TransPower+0x3c>
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d98:	73fb      	strb	r3, [r7, #15]
 8000d9a:	e00e      	b.n	8000dba <E220_Set_SubPacket_RSSI_TransPower+0x5a>
	else if(sub == _64bytes) all_data |= 0x80;
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d104      	bne.n	8000dac <E220_Set_SubPacket_RSSI_TransPower+0x4c>
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000da8:	73fb      	strb	r3, [r7, #15]
 8000daa:	e006      	b.n	8000dba <E220_Set_SubPacket_RSSI_TransPower+0x5a>
	else if(sub == _32bytes) all_data |= 0xC0;
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	d103      	bne.n	8000dba <E220_Set_SubPacket_RSSI_TransPower+0x5a>
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8000db8:	73fb      	strb	r3, [r7, #15]
	/*RSSI Ambient noise enable*/
	if(RSSIAmbientNoiseEnable == true) all_data |= 0x20;
 8000dba:	79bb      	ldrb	r3, [r7, #6]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d003      	beq.n	8000dc8 <E220_Set_SubPacket_RSSI_TransPower+0x68>
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	f043 0320 	orr.w	r3, r3, #32
 8000dc6:	73fb      	strb	r3, [r7, #15]
	else all_data |= 0x00;
	/*Transimitting Power*/
	if(tr_pow == _22dBm) all_data |= 0x00;
 8000dc8:	797b      	ldrb	r3, [r7, #5]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d016      	beq.n	8000dfc <E220_Set_SubPacket_RSSI_TransPower+0x9c>
	else if(tr_pow == _17dBm) all_data |= 0x01;
 8000dce:	797b      	ldrb	r3, [r7, #5]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d104      	bne.n	8000dde <E220_Set_SubPacket_RSSI_TransPower+0x7e>
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	73fb      	strb	r3, [r7, #15]
 8000ddc:	e00e      	b.n	8000dfc <E220_Set_SubPacket_RSSI_TransPower+0x9c>
	else if(tr_pow == _13dBm) all_data |= 0x02;
 8000dde:	797b      	ldrb	r3, [r7, #5]
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d104      	bne.n	8000dee <E220_Set_SubPacket_RSSI_TransPower+0x8e>
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	f043 0302 	orr.w	r3, r3, #2
 8000dea:	73fb      	strb	r3, [r7, #15]
 8000dec:	e006      	b.n	8000dfc <E220_Set_SubPacket_RSSI_TransPower+0x9c>
	else if(tr_pow == _10dBm) all_data |= 0x03;
 8000dee:	797b      	ldrb	r3, [r7, #5]
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d103      	bne.n	8000dfc <E220_Set_SubPacket_RSSI_TransPower+0x9c>
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	f043 0303 	orr.w	r3, r3, #3
 8000dfa:	73fb      	strb	r3, [r7, #15]

	send_data[3] = all_data;
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit(&huart1, send_data, 4, TIMEOUT);
 8000e00:	f107 0108 	add.w	r1, r7, #8
 8000e04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e08:	2204      	movs	r2, #4
 8000e0a:	4806      	ldr	r0, [pc, #24]	@ (8000e24 <E220_Set_SubPacket_RSSI_TransPower+0xc4>)
 8000e0c:	f003 f816 	bl	8003e3c <HAL_UART_Transmit>
	E220_CheckSentReadPacket();
 8000e10:	f7ff fe4e 	bl	8000ab0 <E220_CheckSentReadPacket>
	E220_GlobReg.reg1 = all_data;
 8000e14:	4a04      	ldr	r2, [pc, #16]	@ (8000e28 <E220_Set_SubPacket_RSSI_TransPower+0xc8>)
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	70d3      	strb	r3, [r2, #3]
}
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000390 	.word	0x20000390
 8000e28:	200001f8 	.word	0x200001f8

08000e2c <E220_Set_Channel>:
/*------------------------------------------*/
void E220_Set_Channel(uint8_t channel)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
	uint8_t all_data = 0x00;
 8000e36:	2300      	movs	r3, #0
 8000e38:	73fb      	strb	r3, [r7, #15]
	uint8_t send_data[4] = {E220_CMD0, E220_REG2, 1, all_data};
 8000e3a:	23c0      	movs	r3, #192	@ 0xc0
 8000e3c:	723b      	strb	r3, [r7, #8]
 8000e3e:	2304      	movs	r3, #4
 8000e40:	727b      	strb	r3, [r7, #9]
 8000e42:	2301      	movs	r3, #1
 8000e44:	72bb      	strb	r3, [r7, #10]
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	72fb      	strb	r3, [r7, #11]
	all_data |= channel;
 8000e4a:	7bfa      	ldrb	r2, [r7, #15]
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	73fb      	strb	r3, [r7, #15]

	send_data[3] = all_data;
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	72fb      	strb	r3, [r7, #11]
	HAL_UART_Transmit(&huart1, send_data, 4, TIMEOUT);
 8000e56:	f107 0108 	add.w	r1, r7, #8
 8000e5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e5e:	2204      	movs	r2, #4
 8000e60:	4805      	ldr	r0, [pc, #20]	@ (8000e78 <E220_Set_Channel+0x4c>)
 8000e62:	f002 ffeb 	bl	8003e3c <HAL_UART_Transmit>
	E220_CheckSentReadPacket();
 8000e66:	f7ff fe23 	bl	8000ab0 <E220_CheckSentReadPacket>
	E220_GlobReg.reg2 = all_data;
 8000e6a:	4a04      	ldr	r2, [pc, #16]	@ (8000e7c <E220_Set_Channel+0x50>)
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	7113      	strb	r3, [r2, #4]
}
 8000e70:	bf00      	nop
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000390 	.word	0x20000390
 8000e7c:	200001f8 	.word	0x200001f8

08000e80 <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle>:
/*------------------------------------------*/
void E220_Set_RSSI_TransmissionMethod_LBT_WORCycle(_Bool RSSIByte, TransmissionMethod method, _Bool LBT, WORCycle wor)
{
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4604      	mov	r4, r0
 8000e88:	4608      	mov	r0, r1
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4623      	mov	r3, r4
 8000e90:	71fb      	strb	r3, [r7, #7]
 8000e92:	4603      	mov	r3, r0
 8000e94:	71bb      	strb	r3, [r7, #6]
 8000e96:	460b      	mov	r3, r1
 8000e98:	717b      	strb	r3, [r7, #5]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	713b      	strb	r3, [r7, #4]
	uint8_t all_data = 0x00;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	73fb      	strb	r3, [r7, #15]
	uint8_t send_data[4] = {E220_CMD0, E220_REG3, 1, all_data};
 8000ea2:	23c0      	movs	r3, #192	@ 0xc0
 8000ea4:	723b      	strb	r3, [r7, #8]
 8000ea6:	2305      	movs	r3, #5
 8000ea8:	727b      	strb	r3, [r7, #9]
 8000eaa:	2301      	movs	r3, #1
 8000eac:	72bb      	strb	r3, [r7, #10]
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	72fb      	strb	r3, [r7, #11]
	/*Enable RSSI Byte*/
	if(RSSIByte == DISABLE) all_data |= 0x00;
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	f083 0301 	eor.w	r3, r3, #1
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d103      	bne.n	8000ec6 <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x46>
	else all_data |= 0x80;
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ec4:	73fb      	strb	r3, [r7, #15]
	/*Transmission Method*/
	if(method == DISABLE) all_data |= 0x00;
 8000ec6:	79bb      	ldrb	r3, [r7, #6]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d003      	beq.n	8000ed4 <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x54>
	else all_data |= 0x40;
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ed2:	73fb      	strb	r3, [r7, #15]
	/*LBT Enable*/
	if(LBT == DISABLE) all_data |= 0x00;
 8000ed4:	797b      	ldrb	r3, [r7, #5]
 8000ed6:	f083 0301 	eor.w	r3, r3, #1
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d103      	bne.n	8000ee8 <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x68>
	else all_data |= 0x10;
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	f043 0310 	orr.w	r3, r3, #16
 8000ee6:	73fb      	strb	r3, [r7, #15]
	/*WOR Cycle*/
	if(wor == _500ms) all_data |= 0x00;
 8000ee8:	793b      	ldrb	r3, [r7, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d036      	beq.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
	else if(wor == _1000ms) all_data |= 0x01;
 8000eee:	793b      	ldrb	r3, [r7, #4]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d104      	bne.n	8000efe <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x7e>
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	e02e      	b.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
	else if(wor == _1500ms) all_data |= 0x02;
 8000efe:	793b      	ldrb	r3, [r7, #4]
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d104      	bne.n	8000f0e <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x8e>
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	f043 0302 	orr.w	r3, r3, #2
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	e026      	b.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
	else if(wor == _2000ms) all_data |= 0x03;
 8000f0e:	793b      	ldrb	r3, [r7, #4]
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	d104      	bne.n	8000f1e <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x9e>
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	f043 0303 	orr.w	r3, r3, #3
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	e01e      	b.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
	else if(wor == _2500ms) all_data |= 0x04;
 8000f1e:	793b      	ldrb	r3, [r7, #4]
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d104      	bne.n	8000f2e <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xae>
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	f043 0304 	orr.w	r3, r3, #4
 8000f2a:	73fb      	strb	r3, [r7, #15]
 8000f2c:	e016      	b.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
	else if(wor == _3000ms) all_data |= 0x05;
 8000f2e:	793b      	ldrb	r3, [r7, #4]
 8000f30:	2b05      	cmp	r3, #5
 8000f32:	d104      	bne.n	8000f3e <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xbe>
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	f043 0305 	orr.w	r3, r3, #5
 8000f3a:	73fb      	strb	r3, [r7, #15]
 8000f3c:	e00e      	b.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
	else if(wor == _3500ms) all_data |= 0x06;
 8000f3e:	793b      	ldrb	r3, [r7, #4]
 8000f40:	2b06      	cmp	r3, #6
 8000f42:	d104      	bne.n	8000f4e <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xce>
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	f043 0306 	orr.w	r3, r3, #6
 8000f4a:	73fb      	strb	r3, [r7, #15]
 8000f4c:	e006      	b.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
	else if(wor == _4000ms) all_data |= 0x07;
 8000f4e:	793b      	ldrb	r3, [r7, #4]
 8000f50:	2b07      	cmp	r3, #7
 8000f52:	d103      	bne.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	f043 0307 	orr.w	r3, r3, #7
 8000f5a:	73fb      	strb	r3, [r7, #15]

	send_data[3] = all_data;
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	72fb      	strb	r3, [r7, #11]
	HAL_UART_Transmit(&huart1, send_data, 4, TIMEOUT);
 8000f60:	f107 0108 	add.w	r1, r7, #8
 8000f64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f68:	2204      	movs	r2, #4
 8000f6a:	4806      	ldr	r0, [pc, #24]	@ (8000f84 <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x104>)
 8000f6c:	f002 ff66 	bl	8003e3c <HAL_UART_Transmit>
	E220_CheckSentReadPacket();
 8000f70:	f7ff fd9e 	bl	8000ab0 <E220_CheckSentReadPacket>
	E220_GlobReg.reg3 = all_data;
 8000f74:	4a04      	ldr	r2, [pc, #16]	@ (8000f88 <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x108>)
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	7153      	strb	r3, [r2, #5]
}
 8000f7a:	bf00      	nop
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd90      	pop	{r4, r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000390 	.word	0x20000390
 8000f88:	200001f8 	.word	0x200001f8

08000f8c <E220_Set_Key>:
void E220_Set_Key(uint16_t key)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	80fb      	strh	r3, [r7, #6]
	uint8_t key_h = 0x00;
 8000f96:	2300      	movs	r3, #0
 8000f98:	75fb      	strb	r3, [r7, #23]
	uint8_t key_l = 0x00;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	75bb      	strb	r3, [r7, #22]
	uint8_t send_data[5] = {E220_CMD0, E220_CRYPT_H, 2, key_h, key_l};
 8000f9e:	23c0      	movs	r3, #192	@ 0xc0
 8000fa0:	733b      	strb	r3, [r7, #12]
 8000fa2:	2306      	movs	r3, #6
 8000fa4:	737b      	strb	r3, [r7, #13]
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	73bb      	strb	r3, [r7, #14]
 8000faa:	7dfb      	ldrb	r3, [r7, #23]
 8000fac:	73fb      	strb	r3, [r7, #15]
 8000fae:	7dbb      	ldrb	r3, [r7, #22]
 8000fb0:	743b      	strb	r3, [r7, #16]
	uint16_t mask = 0xFFFF;
 8000fb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fb6:	82bb      	strh	r3, [r7, #20]

	key_h = (key >> 8) & mask;
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	0a1b      	lsrs	r3, r3, #8
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	8abb      	ldrh	r3, [r7, #20]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	75fb      	strb	r3, [r7, #23]
	key_l = (key << 0) & mask;
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	8abb      	ldrh	r3, [r7, #20]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	75bb      	strb	r3, [r7, #22]

	send_data[3] = key_h;
 8000fd4:	7dfb      	ldrb	r3, [r7, #23]
 8000fd6:	73fb      	strb	r3, [r7, #15]
	send_data[4] = key_l;
 8000fd8:	7dbb      	ldrb	r3, [r7, #22]
 8000fda:	743b      	strb	r3, [r7, #16]

	HAL_UART_Transmit(&huart1, send_data, 5, TIMEOUT);
 8000fdc:	f107 010c 	add.w	r1, r7, #12
 8000fe0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe4:	2205      	movs	r2, #5
 8000fe6:	4806      	ldr	r0, [pc, #24]	@ (8001000 <E220_Set_Key+0x74>)
 8000fe8:	f002 ff28 	bl	8003e3c <HAL_UART_Transmit>
	E220_CheckSentReadPacket();
 8000fec:	f7ff fd60 	bl	8000ab0 <E220_CheckSentReadPacket>
	E220_GlobReg.Key = key;
 8000ff0:	4a04      	ldr	r2, [pc, #16]	@ (8001004 <E220_Set_Key+0x78>)
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	80d3      	strh	r3, [r2, #6]
}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000390 	.word	0x20000390
 8001004:	200001f8 	.word	0x200001f8

08001008 <E220_SetDefaultSettings>:
	E220_Set_Key(str.Key);
	HAL_Delay(50);
}
/*------------------------------------------*/
void E220_SetDefaultSettings(uint16_t u1, uint8_t u2, _Bool u3)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	80fb      	strh	r3, [r7, #6]
 8001012:	460b      	mov	r3, r1
 8001014:	717b      	strb	r3, [r7, #5]
 8001016:	4613      	mov	r3, r2
 8001018:	713b      	strb	r3, [r7, #4]
	E220_HandleTypeDef E220_Settings = {0, };
 800101a:	f107 0308 	add.w	r3, r7, #8
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
	E220_Settings.Address = u1;
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	813b      	strh	r3, [r7, #8]
	E220_Settings.Rate = Rate_9600;
 800102c:	2303      	movs	r3, #3
 800102e:	72bb      	strb	r3, [r7, #10]
	E220_Settings.Pority = _8N1;
 8001030:	2300      	movs	r3, #0
 8001032:	72fb      	strb	r3, [r7, #11]
	E220_Settings.AirDataRate = _2_4k;
 8001034:	2300      	movs	r3, #0
 8001036:	733b      	strb	r3, [r7, #12]
	E220_Settings.SubPacket = _200bytes;
 8001038:	2300      	movs	r3, #0
 800103a:	737b      	strb	r3, [r7, #13]
	E220_Settings.RSSIAmbientNoiseEnable = DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	73bb      	strb	r3, [r7, #14]
	E220_Settings.TransPower = _22dBm;
 8001040:	2300      	movs	r3, #0
 8001042:	73fb      	strb	r3, [r7, #15]
	E220_Settings.ChannelControl = u2;
 8001044:	797b      	ldrb	r3, [r7, #5]
 8001046:	743b      	strb	r3, [r7, #16]
	E220_Settings.EnableRSSIByte = u3;
 8001048:	793b      	ldrb	r3, [r7, #4]
 800104a:	747b      	strb	r3, [r7, #17]
	E220_Settings.TransMethod = FixedTransmissionMode;
 800104c:	2301      	movs	r3, #1
 800104e:	74bb      	strb	r3, [r7, #18]
	E220_Settings.LBT = DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	74fb      	strb	r3, [r7, #19]
	E220_Settings.WORCycle = _500ms;
 8001054:	2300      	movs	r3, #0
 8001056:	753b      	strb	r3, [r7, #20]
	E220_Settings.Key = 0x0000;
 8001058:	2300      	movs	r3, #0
 800105a:	82fb      	strh	r3, [r7, #22]

	E220_Set_AddressModule(E220_Settings.Address);
 800105c:	893b      	ldrh	r3, [r7, #8]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fd88 	bl	8000b74 <E220_Set_AddressModule>
	HAL_Delay(30);
 8001064:	201e      	movs	r0, #30
 8001066:	f001 f927 	bl	80022b8 <HAL_Delay>
	E220_Set_Uart_Rate_Parity_Data(E220_Settings.Rate, E220_Settings.Pority, E220_Settings.AirDataRate);
 800106a:	7abb      	ldrb	r3, [r7, #10]
 800106c:	7af9      	ldrb	r1, [r7, #11]
 800106e:	7b3a      	ldrb	r2, [r7, #12]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fdbd 	bl	8000bf0 <E220_Set_Uart_Rate_Parity_Data>
	HAL_Delay(30);
 8001076:	201e      	movs	r0, #30
 8001078:	f001 f91e 	bl	80022b8 <HAL_Delay>
	E220_Set_SubPacket_RSSI_TransPower(E220_Settings.SubPacket, E220_Settings.RSSIAmbientNoiseEnable, E220_Settings.TransPower);
 800107c:	7b7b      	ldrb	r3, [r7, #13]
 800107e:	7bb9      	ldrb	r1, [r7, #14]
 8001080:	7bfa      	ldrb	r2, [r7, #15]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fe6c 	bl	8000d60 <E220_Set_SubPacket_RSSI_TransPower>
	HAL_Delay(30);
 8001088:	201e      	movs	r0, #30
 800108a:	f001 f915 	bl	80022b8 <HAL_Delay>
	E220_Set_Channel(E220_Settings.ChannelControl);
 800108e:	7c3b      	ldrb	r3, [r7, #16]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fecb 	bl	8000e2c <E220_Set_Channel>
	HAL_Delay(30);
 8001096:	201e      	movs	r0, #30
 8001098:	f001 f90e 	bl	80022b8 <HAL_Delay>
	E220_Set_RSSI_TransmissionMethod_LBT_WORCycle(E220_Settings.EnableRSSIByte, E220_Settings.TransMethod, E220_Settings.LBT, E220_Settings.WORCycle);
 800109c:	7c78      	ldrb	r0, [r7, #17]
 800109e:	7cb9      	ldrb	r1, [r7, #18]
 80010a0:	7cfa      	ldrb	r2, [r7, #19]
 80010a2:	7d3b      	ldrb	r3, [r7, #20]
 80010a4:	f7ff feec 	bl	8000e80 <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle>
	HAL_Delay(30);
 80010a8:	201e      	movs	r0, #30
 80010aa:	f001 f905 	bl	80022b8 <HAL_Delay>
	E220_Set_Key(E220_Settings.Key);
 80010ae:	8afb      	ldrh	r3, [r7, #22]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff6b 	bl	8000f8c <E220_Set_Key>
	HAL_Delay(30);
 80010b6:	201e      	movs	r0, #30
 80010b8:	f001 f8fe 	bl	80022b8 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <AGRO_Init>:

	return res;
}
//-------------------------------------------------------------------//
NumberDevice AGRO_Init(AGRO_HandleTypeDef Device, NumberDevice divice)
{
 80010c4:	b490      	push	{r4, r7}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	1d3c      	adds	r4, r7, #4
 80010cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010d0:	70fb      	strb	r3, [r7, #3]
	SettingsAllDevice = Device;
 80010d2:	4b08      	ldr	r3, [pc, #32]	@ (80010f4 <AGRO_Init+0x30>)
 80010d4:	461c      	mov	r4, r3
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	MyDevice = divice;
 80010e0:	4a05      	ldr	r2, [pc, #20]	@ (80010f8 <AGRO_Init+0x34>)
 80010e2:	78fb      	ldrb	r3, [r7, #3]
 80010e4:	7013      	strb	r3, [r2, #0]

	return MyDevice;
 80010e6:	4b04      	ldr	r3, [pc, #16]	@ (80010f8 <AGRO_Init+0x34>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc90      	pop	{r4, r7}
 80010f2:	4770      	bx	lr
 80010f4:	20000200 	.word	0x20000200
 80010f8:	2000020c 	.word	0x2000020c

080010fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001102:	f001 f877 	bl	80021f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001106:	f000 f885 	bl	8001214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110a:	f000 f94b 	bl	80013a4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800110e:	f000 f8f5 	bl	80012fc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001112:	f000 f91d 	bl	8001350 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001116:	f000 f8c3 	bl	80012a0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LED_OFF;
 800111a:	2201      	movs	r2, #1
 800111c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001120:	4835      	ldr	r0, [pc, #212]	@ (80011f8 <main+0xfc>)
 8001122:	f001 fc31 	bl	8002988 <HAL_GPIO_WritePin>
  E220_SetMode(DeepSleep); // Режим сна
 8001126:	2003      	movs	r0, #3
 8001128:	f7ff fcd6 	bl	8000ad8 <E220_SetMode>
  E220_WaitReady(); // Ожидание включения
 800112c:	f7ff fcac 	bl	8000a88 <E220_WaitReady>
  LED_ON;
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001136:	4830      	ldr	r0, [pc, #192]	@ (80011f8 <main+0xfc>)
 8001138:	f001 fc26 	bl	8002988 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800113c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001140:	f001 f8ba 	bl	80022b8 <HAL_Delay>
  LED_OFF;
 8001144:	2201      	movs	r2, #1
 8001146:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800114a:	482b      	ldr	r0, [pc, #172]	@ (80011f8 <main+0xfc>)
 800114c:	f001 fc1c 	bl	8002988 <HAL_GPIO_WritePin>
  /*Установка настроек*/
  /*Выбор устройства установка адресов и каналов всех используемых устройств*/

  AGRO_Init(AGRO_Device, Device_0);
 8001150:	4a2a      	ldr	r2, [pc, #168]	@ (80011fc <main+0x100>)
 8001152:	2300      	movs	r3, #0
 8001154:	ca07      	ldmia	r2, {r0, r1, r2}
 8001156:	f7ff ffb5 	bl	80010c4 <AGRO_Init>

  // Передатчик 1
  AGRO_Device.AddrDevice_1 = 0x0001;
 800115a:	4b28      	ldr	r3, [pc, #160]	@ (80011fc <main+0x100>)
 800115c:	2201      	movs	r2, #1
 800115e:	805a      	strh	r2, [r3, #2]
  AGRO_Device.ChDevice_1 = 0x02;
 8001160:	4b26      	ldr	r3, [pc, #152]	@ (80011fc <main+0x100>)
 8001162:	2202      	movs	r2, #2
 8001164:	725a      	strb	r2, [r3, #9]

  // Приемник 1
  AGRO_Device.AddrDevice_0 = 0x0003;
 8001166:	4b25      	ldr	r3, [pc, #148]	@ (80011fc <main+0x100>)
 8001168:	2203      	movs	r2, #3
 800116a:	801a      	strh	r2, [r3, #0]
  AGRO_Device.ChDevice_0 = 0x04;
 800116c:	4b23      	ldr	r3, [pc, #140]	@ (80011fc <main+0x100>)
 800116e:	2204      	movs	r2, #4
 8001170:	721a      	strb	r2, [r3, #8]

  E220_SetDefaultSettings(AGRO_Device.AddrDevice_0, AGRO_Device.ChDevice_0, DISABLE);
 8001172:	4b22      	ldr	r3, [pc, #136]	@ (80011fc <main+0x100>)
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	4a21      	ldr	r2, [pc, #132]	@ (80011fc <main+0x100>)
 8001178:	7a11      	ldrb	r1, [r2, #8]
 800117a:	2200      	movs	r2, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff43 	bl	8001008 <E220_SetDefaultSettings>

  HAL_Delay(500);
 8001182:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001186:	f001 f897 	bl	80022b8 <HAL_Delay>
  LED_ON;
 800118a:	2200      	movs	r2, #0
 800118c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001190:	4819      	ldr	r0, [pc, #100]	@ (80011f8 <main+0xfc>)
 8001192:	f001 fbf9 	bl	8002988 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001196:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800119a:	f001 f88d 	bl	80022b8 <HAL_Delay>
  LED_OFF;
 800119e:	2201      	movs	r2, #1
 80011a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011a4:	4814      	ldr	r0, [pc, #80]	@ (80011f8 <main+0xfc>)
 80011a6:	f001 fbef 	bl	8002988 <HAL_GPIO_WritePin>


  E220_SetMode(NORMAL);
 80011aa:	2000      	movs	r0, #0
 80011ac:	f7ff fc94 	bl	8000ad8 <E220_SetMode>




//  HAL_UART_Receive_IT(&huart1, (uint8_t*)&recv, 5);
  HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 80011b0:	2201      	movs	r2, #1
 80011b2:	4913      	ldr	r1, [pc, #76]	@ (8001200 <main+0x104>)
 80011b4:	4813      	ldr	r0, [pc, #76]	@ (8001204 <main+0x108>)
 80011b6:	f002 fec4 	bl	8003f42 <HAL_UART_Receive_IT>



#if SSD1306_DISPLAY

  SSD1306_Init();
 80011ba:	f000 fb07 	bl	80017cc <SSD1306_Init>
  SSD1306_GotoXY(0, 0);
 80011be:	2100      	movs	r1, #0
 80011c0:	2000      	movs	r0, #0
 80011c2:	f000 fc7f 	bl	8001ac4 <SSD1306_GotoXY>
  sprintf(buf, "AGRO ROBOT");
 80011c6:	4910      	ldr	r1, [pc, #64]	@ (8001208 <main+0x10c>)
 80011c8:	4810      	ldr	r0, [pc, #64]	@ (800120c <main+0x110>)
 80011ca:	f004 f97d 	bl	80054c8 <siprintf>
  SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 80011ce:	2201      	movs	r2, #1
 80011d0:	490f      	ldr	r1, [pc, #60]	@ (8001210 <main+0x114>)
 80011d2:	480e      	ldr	r0, [pc, #56]	@ (800120c <main+0x110>)
 80011d4:	f000 fd0a 	bl	8001bec <SSD1306_Puts>
  SSD1306_UpdateScreen();
 80011d8:	f000 fbbc 	bl	8001954 <SSD1306_UpdateScreen>
  HAL_Delay(1000);
 80011dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011e0:	f001 f86a 	bl	80022b8 <HAL_Delay>
//	  sprintf(buf, "...");
//	  SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
//	  SSD1306_UpdateScreen();
//	  HAL_Delay(200);
//  }
  SSD1306_Fill(SSD1306_COLOR_BLACK);
 80011e4:	2000      	movs	r0, #0
 80011e6:	f000 fbe7 	bl	80019b8 <SSD1306_Fill>
  SSD1306_UpdateScreen();
 80011ea:	f000 fbb3 	bl	8001954 <SSD1306_UpdateScreen>
#endif

  uint16_t numPack = 100;
 80011ee:	2364      	movs	r3, #100	@ 0x64
 80011f0:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011f2:	bf00      	nop
 80011f4:	e7fd      	b.n	80011f2 <main+0xf6>
 80011f6:	bf00      	nop
 80011f8:	40011000 	.word	0x40011000
 80011fc:	20000420 	.word	0x20000420
 8001200:	2000020d 	.word	0x2000020d
 8001204:	20000390 	.word	0x20000390
 8001208:	08007758 	.word	0x08007758
 800120c:	20000318 	.word	0x20000318
 8001210:	20000000 	.word	0x20000000

08001214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b090      	sub	sp, #64	@ 0x40
 8001218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121a:	f107 0318 	add.w	r3, r7, #24
 800121e:	2228      	movs	r2, #40	@ 0x28
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f004 f9b5 	bl	8005592 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
 8001234:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001236:	2301      	movs	r3, #1
 8001238:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800123a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800123e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001244:	2301      	movs	r3, #1
 8001246:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001248:	2302      	movs	r3, #2
 800124a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800124c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001250:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001252:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001256:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001258:	f107 0318 	add.w	r3, r7, #24
 800125c:	4618      	mov	r0, r3
 800125e:	f002 f98d 	bl	800357c <HAL_RCC_OscConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001268:	f000 faaa 	bl	80017c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126c:	230f      	movs	r3, #15
 800126e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001270:	2302      	movs	r3, #2
 8001272:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001278:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800127c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800127e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001282:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2102      	movs	r1, #2
 8001288:	4618      	mov	r0, r3
 800128a:	f002 fbf9 	bl	8003a80 <HAL_RCC_ClockConfig>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001294:	f000 fa94 	bl	80017c0 <Error_Handler>
  }
}
 8001298:	bf00      	nop
 800129a:	3740      	adds	r7, #64	@ 0x40
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012a6:	4a13      	ldr	r2, [pc, #76]	@ (80012f4 <MX_I2C1_Init+0x54>)
 80012a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012aa:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012ac:	4a12      	ldr	r2, [pc, #72]	@ (80012f8 <MX_I2C1_Init+0x58>)
 80012ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ca:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d0:	4b07      	ldr	r3, [pc, #28]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012de:	f001 fb83 	bl	80029e8 <HAL_I2C_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012e8:	f000 fa6a 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	2000033c 	.word	0x2000033c
 80012f4:	40005400 	.word	0x40005400
 80012f8:	000186a0 	.word	0x000186a0

080012fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001300:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <MX_USART1_UART_Init+0x4c>)
 8001302:	4a12      	ldr	r2, [pc, #72]	@ (800134c <MX_USART1_UART_Init+0x50>)
 8001304:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001306:	4b10      	ldr	r3, [pc, #64]	@ (8001348 <MX_USART1_UART_Init+0x4c>)
 8001308:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800130c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <MX_USART1_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001314:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <MX_USART1_UART_Init+0x4c>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800131a:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <MX_USART1_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001320:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <MX_USART1_UART_Init+0x4c>)
 8001322:	220c      	movs	r2, #12
 8001324:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001326:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <MX_USART1_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <MX_USART1_UART_Init+0x4c>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	@ (8001348 <MX_USART1_UART_Init+0x4c>)
 8001334:	f002 fd32 	bl	8003d9c <HAL_UART_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800133e:	f000 fa3f 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000390 	.word	0x20000390
 800134c:	40013800 	.word	0x40013800

08001350 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001354:	4b11      	ldr	r3, [pc, #68]	@ (800139c <MX_USART3_UART_Init+0x4c>)
 8001356:	4a12      	ldr	r2, [pc, #72]	@ (80013a0 <MX_USART3_UART_Init+0x50>)
 8001358:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800135a:	4b10      	ldr	r3, [pc, #64]	@ (800139c <MX_USART3_UART_Init+0x4c>)
 800135c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001360:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001362:	4b0e      	ldr	r3, [pc, #56]	@ (800139c <MX_USART3_UART_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001368:	4b0c      	ldr	r3, [pc, #48]	@ (800139c <MX_USART3_UART_Init+0x4c>)
 800136a:	2200      	movs	r2, #0
 800136c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800136e:	4b0b      	ldr	r3, [pc, #44]	@ (800139c <MX_USART3_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001374:	4b09      	ldr	r3, [pc, #36]	@ (800139c <MX_USART3_UART_Init+0x4c>)
 8001376:	220c      	movs	r2, #12
 8001378:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137a:	4b08      	ldr	r3, [pc, #32]	@ (800139c <MX_USART3_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001380:	4b06      	ldr	r3, [pc, #24]	@ (800139c <MX_USART3_UART_Init+0x4c>)
 8001382:	2200      	movs	r2, #0
 8001384:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001386:	4805      	ldr	r0, [pc, #20]	@ (800139c <MX_USART3_UART_Init+0x4c>)
 8001388:	f002 fd08 	bl	8003d9c <HAL_UART_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001392:	f000 fa15 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200003d8 	.word	0x200003d8
 80013a0:	40004800 	.word	0x40004800

080013a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	f107 0310 	add.w	r3, r7, #16
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b8:	4b57      	ldr	r3, [pc, #348]	@ (8001518 <MX_GPIO_Init+0x174>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	4a56      	ldr	r2, [pc, #344]	@ (8001518 <MX_GPIO_Init+0x174>)
 80013be:	f043 0310 	orr.w	r3, r3, #16
 80013c2:	6193      	str	r3, [r2, #24]
 80013c4:	4b54      	ldr	r3, [pc, #336]	@ (8001518 <MX_GPIO_Init+0x174>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	f003 0310 	and.w	r3, r3, #16
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013d0:	4b51      	ldr	r3, [pc, #324]	@ (8001518 <MX_GPIO_Init+0x174>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	4a50      	ldr	r2, [pc, #320]	@ (8001518 <MX_GPIO_Init+0x174>)
 80013d6:	f043 0320 	orr.w	r3, r3, #32
 80013da:	6193      	str	r3, [r2, #24]
 80013dc:	4b4e      	ldr	r3, [pc, #312]	@ (8001518 <MX_GPIO_Init+0x174>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	f003 0320 	and.w	r3, r3, #32
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e8:	4b4b      	ldr	r3, [pc, #300]	@ (8001518 <MX_GPIO_Init+0x174>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	4a4a      	ldr	r2, [pc, #296]	@ (8001518 <MX_GPIO_Init+0x174>)
 80013ee:	f043 0304 	orr.w	r3, r3, #4
 80013f2:	6193      	str	r3, [r2, #24]
 80013f4:	4b48      	ldr	r3, [pc, #288]	@ (8001518 <MX_GPIO_Init+0x174>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001400:	4b45      	ldr	r3, [pc, #276]	@ (8001518 <MX_GPIO_Init+0x174>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a44      	ldr	r2, [pc, #272]	@ (8001518 <MX_GPIO_Init+0x174>)
 8001406:	f043 0308 	orr.w	r3, r3, #8
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b42      	ldr	r3, [pc, #264]	@ (8001518 <MX_GPIO_Init+0x174>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f003 0308 	and.w	r3, r3, #8
 8001414:	603b      	str	r3, [r7, #0]
 8001416:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800141e:	483f      	ldr	r0, [pc, #252]	@ (800151c <MX_GPIO_Init+0x178>)
 8001420:	f001 fab2 	bl	8002988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|E220_M1_Pin, GPIO_PIN_RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800142a:	483d      	ldr	r0, [pc, #244]	@ (8001520 <MX_GPIO_Init+0x17c>)
 800142c:	f001 faac 	bl	8002988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|E220_M0_Pin, GPIO_PIN_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	f248 0101 	movw	r1, #32769	@ 0x8001
 8001436:	483b      	ldr	r0, [pc, #236]	@ (8001524 <MX_GPIO_Init+0x180>)
 8001438:	f001 faa6 	bl	8002988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800143c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001440:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001442:	2301      	movs	r3, #1
 8001444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2302      	movs	r3, #2
 800144c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144e:	f107 0310 	add.w	r3, r7, #16
 8001452:	4619      	mov	r1, r3
 8001454:	4831      	ldr	r0, [pc, #196]	@ (800151c <MX_GPIO_Init+0x178>)
 8001456:	f001 f913 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800145a:	2310      	movs	r3, #16
 800145c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145e:	2301      	movs	r3, #1
 8001460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2302      	movs	r3, #2
 8001468:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f107 0310 	add.w	r3, r7, #16
 800146e:	4619      	mov	r1, r3
 8001470:	482b      	ldr	r0, [pc, #172]	@ (8001520 <MX_GPIO_Init+0x17c>)
 8001472:	f001 f905 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001476:	2301      	movs	r3, #1
 8001478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147a:	2301      	movs	r3, #1
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2302      	movs	r3, #2
 8001484:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001486:	f107 0310 	add.w	r3, r7, #16
 800148a:	4619      	mov	r1, r3
 800148c:	4825      	ldr	r0, [pc, #148]	@ (8001524 <MX_GPIO_Init+0x180>)
 800148e:	f001 f8f7 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001492:	2302      	movs	r3, #2
 8001494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800149a:	2301      	movs	r3, #1
 800149c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149e:	f107 0310 	add.w	r3, r7, #16
 80014a2:	4619      	mov	r1, r3
 80014a4:	481f      	ldr	r0, [pc, #124]	@ (8001524 <MX_GPIO_Init+0x180>)
 80014a6:	f001 f8eb 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : E220_M0_Pin */
  GPIO_InitStruct.Pin = E220_M0_Pin;
 80014aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b0:	2301      	movs	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014b4:	2302      	movs	r3, #2
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2302      	movs	r3, #2
 80014ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(E220_M0_GPIO_Port, &GPIO_InitStruct);
 80014bc:	f107 0310 	add.w	r3, r7, #16
 80014c0:	4619      	mov	r1, r3
 80014c2:	4818      	ldr	r0, [pc, #96]	@ (8001524 <MX_GPIO_Init+0x180>)
 80014c4:	f001 f8dc 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : E220_M1_Pin */
  GPIO_InitStruct.Pin = E220_M1_Pin;
 80014c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ce:	2301      	movs	r3, #1
 80014d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014d2:	2302      	movs	r3, #2
 80014d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2302      	movs	r3, #2
 80014d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(E220_M1_GPIO_Port, &GPIO_InitStruct);
 80014da:	f107 0310 	add.w	r3, r7, #16
 80014de:	4619      	mov	r1, r3
 80014e0:	480f      	ldr	r0, [pc, #60]	@ (8001520 <MX_GPIO_Init+0x17c>)
 80014e2:	f001 f8cd 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <MX_GPIO_Init+0x184>)
 80014ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f0:	2301      	movs	r3, #1
 80014f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f4:	f107 0310 	add.w	r3, r7, #16
 80014f8:	4619      	mov	r1, r3
 80014fa:	480a      	ldr	r0, [pc, #40]	@ (8001524 <MX_GPIO_Init+0x180>)
 80014fc:	f001 f8c0 	bl	8002680 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001500:	2200      	movs	r2, #0
 8001502:	2100      	movs	r1, #0
 8001504:	2017      	movs	r0, #23
 8001506:	f000 ffd2 	bl	80024ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800150a:	2017      	movs	r0, #23
 800150c:	f000 ffeb 	bl	80024e6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001510:	bf00      	nop
 8001512:	3720      	adds	r7, #32
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40021000 	.word	0x40021000
 800151c:	40011000 	.word	0x40011000
 8001520:	40010800 	.word	0x40010800
 8001524:	40010c00 	.word	0x40010c00
 8001528:	10210000 	.word	0x10210000

0800152c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	@ 0x28
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
    if (huart == &huart1) // UART1 orqali qabul qilish
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a7d      	ldr	r2, [pc, #500]	@ (800172c <HAL_UART_RxCpltCallback+0x200>)
 8001538:	4293      	cmp	r3, r2
 800153a:	f040 80f3 	bne.w	8001724 <HAL_UART_RxCpltCallback+0x1f8>
    {
        if (!receiving)
 800153e:	4b7c      	ldr	r3, [pc, #496]	@ (8001730 <HAL_UART_RxCpltCallback+0x204>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	f083 0301 	eor.w	r3, r3, #1
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d02e      	beq.n	80015aa <HAL_UART_RxCpltCallback+0x7e>
        {
            // Paket boshlanishi uchun 2 ta 0xAA ketma-ket bo'lishi kerak
            if (rxIndex == 0 && rx_byte == START_BYTE)
 800154c:	4b79      	ldr	r3, [pc, #484]	@ (8001734 <HAL_UART_RxCpltCallback+0x208>)
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d10f      	bne.n	8001574 <HAL_UART_RxCpltCallback+0x48>
 8001554:	4b78      	ldr	r3, [pc, #480]	@ (8001738 <HAL_UART_RxCpltCallback+0x20c>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2baa      	cmp	r3, #170	@ 0xaa
 800155a:	d10b      	bne.n	8001574 <HAL_UART_RxCpltCallback+0x48>
            {
                recvBuffer[rxIndex++] = rx_byte;
 800155c:	4b75      	ldr	r3, [pc, #468]	@ (8001734 <HAL_UART_RxCpltCallback+0x208>)
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	1c5a      	adds	r2, r3, #1
 8001562:	b291      	uxth	r1, r2
 8001564:	4a73      	ldr	r2, [pc, #460]	@ (8001734 <HAL_UART_RxCpltCallback+0x208>)
 8001566:	8011      	strh	r1, [r2, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	4b73      	ldr	r3, [pc, #460]	@ (8001738 <HAL_UART_RxCpltCallback+0x20c>)
 800156c:	7819      	ldrb	r1, [r3, #0]
 800156e:	4b73      	ldr	r3, [pc, #460]	@ (800173c <HAL_UART_RxCpltCallback+0x210>)
 8001570:	5499      	strb	r1, [r3, r2]
 8001572:	e0d2      	b.n	800171a <HAL_UART_RxCpltCallback+0x1ee>
            }
            else if (rxIndex == 1 && rx_byte == START_BYTE)
 8001574:	4b6f      	ldr	r3, [pc, #444]	@ (8001734 <HAL_UART_RxCpltCallback+0x208>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d112      	bne.n	80015a2 <HAL_UART_RxCpltCallback+0x76>
 800157c:	4b6e      	ldr	r3, [pc, #440]	@ (8001738 <HAL_UART_RxCpltCallback+0x20c>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2baa      	cmp	r3, #170	@ 0xaa
 8001582:	d10e      	bne.n	80015a2 <HAL_UART_RxCpltCallback+0x76>
            {
                recvBuffer[rxIndex++] = rx_byte;
 8001584:	4b6b      	ldr	r3, [pc, #428]	@ (8001734 <HAL_UART_RxCpltCallback+0x208>)
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	1c5a      	adds	r2, r3, #1
 800158a:	b291      	uxth	r1, r2
 800158c:	4a69      	ldr	r2, [pc, #420]	@ (8001734 <HAL_UART_RxCpltCallback+0x208>)
 800158e:	8011      	strh	r1, [r2, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	4b69      	ldr	r3, [pc, #420]	@ (8001738 <HAL_UART_RxCpltCallback+0x20c>)
 8001594:	7819      	ldrb	r1, [r3, #0]
 8001596:	4b69      	ldr	r3, [pc, #420]	@ (800173c <HAL_UART_RxCpltCallback+0x210>)
 8001598:	5499      	strb	r1, [r3, r2]
                receiving = true; // Paket qabul qilish boshlangan
 800159a:	4b65      	ldr	r3, [pc, #404]	@ (8001730 <HAL_UART_RxCpltCallback+0x204>)
 800159c:	2201      	movs	r2, #1
 800159e:	701a      	strb	r2, [r3, #0]
 80015a0:	e0bb      	b.n	800171a <HAL_UART_RxCpltCallback+0x1ee>
            }
            else
            {
                // Noto'g'ri start bayti, rxIndex ni tiklash
                rxIndex = 0;
 80015a2:	4b64      	ldr	r3, [pc, #400]	@ (8001734 <HAL_UART_RxCpltCallback+0x208>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	801a      	strh	r2, [r3, #0]
 80015a8:	e0b7      	b.n	800171a <HAL_UART_RxCpltCallback+0x1ee>
            }
        }
        else
        {
            // Paket davomida ma'lumot qabul qilinmoqda
            recvBuffer[rxIndex++] = rx_byte;
 80015aa:	4b62      	ldr	r3, [pc, #392]	@ (8001734 <HAL_UART_RxCpltCallback+0x208>)
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	1c5a      	adds	r2, r3, #1
 80015b0:	b291      	uxth	r1, r2
 80015b2:	4a60      	ldr	r2, [pc, #384]	@ (8001734 <HAL_UART_RxCpltCallback+0x208>)
 80015b4:	8011      	strh	r1, [r2, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	4b5f      	ldr	r3, [pc, #380]	@ (8001738 <HAL_UART_RxCpltCallback+0x20c>)
 80015ba:	7819      	ldrb	r1, [r3, #0]
 80015bc:	4b5f      	ldr	r3, [pc, #380]	@ (800173c <HAL_UART_RxCpltCallback+0x210>)
 80015be:	5499      	strb	r1, [r3, r2]

            if (rxIndex == 3)
 80015c0:	4b5c      	ldr	r3, [pc, #368]	@ (8001734 <HAL_UART_RxCpltCallback+0x208>)
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	2b03      	cmp	r3, #3
 80015c6:	d10f      	bne.n	80015e8 <HAL_UART_RxCpltCallback+0xbc>
            {
                // 3-bayt: uzunlik bayti
                packetLength = recvBuffer[2];
 80015c8:	4b5c      	ldr	r3, [pc, #368]	@ (800173c <HAL_UART_RxCpltCallback+0x210>)
 80015ca:	789a      	ldrb	r2, [r3, #2]
 80015cc:	4b5c      	ldr	r3, [pc, #368]	@ (8001740 <HAL_UART_RxCpltCallback+0x214>)
 80015ce:	701a      	strb	r2, [r3, #0]
                // Tekshirish: packetLength maksimal chegaradan oshmasligi kerak
                if (packetLength > MAX_PACKET_SIZE - 6) // 6 = start(2) + length(1) + stop(2) + margin
 80015d0:	4b5b      	ldr	r3, [pc, #364]	@ (8001740 <HAL_UART_RxCpltCallback+0x214>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2bfa      	cmp	r3, #250	@ 0xfa
 80015d6:	f240 80a0 	bls.w	800171a <HAL_UART_RxCpltCallback+0x1ee>
                {
                    // Xato uzunlik, qabulni bekor qilish
                    rxIndex = 0;
 80015da:	4b56      	ldr	r3, [pc, #344]	@ (8001734 <HAL_UART_RxCpltCallback+0x208>)
 80015dc:	2200      	movs	r2, #0
 80015de:	801a      	strh	r2, [r3, #0]
                    receiving = false;
 80015e0:	4b53      	ldr	r3, [pc, #332]	@ (8001730 <HAL_UART_RxCpltCallback+0x204>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
 80015e6:	e098      	b.n	800171a <HAL_UART_RxCpltCallback+0x1ee>
                }
            }
            else if (packetLength > 0 && rxIndex == (3 + packetLength + 2))
 80015e8:	4b55      	ldr	r3, [pc, #340]	@ (8001740 <HAL_UART_RxCpltCallback+0x214>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 8087 	beq.w	8001700 <HAL_UART_RxCpltCallback+0x1d4>
 80015f2:	4b50      	ldr	r3, [pc, #320]	@ (8001734 <HAL_UART_RxCpltCallback+0x208>)
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b51      	ldr	r3, [pc, #324]	@ (8001740 <HAL_UART_RxCpltCallback+0x214>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	3305      	adds	r3, #5
 80015fe:	429a      	cmp	r2, r3
 8001600:	d17e      	bne.n	8001700 <HAL_UART_RxCpltCallback+0x1d4>
            {
                // Paket oxiri keldi: 2 ta stop bayt (oxirgi ikki bayt)
                if (recvBuffer[rxIndex-2] == STOP_BYTE && recvBuffer[rxIndex-1] == STOP_BYTE)
 8001602:	4b4c      	ldr	r3, [pc, #304]	@ (8001734 <HAL_UART_RxCpltCallback+0x208>)
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	3b02      	subs	r3, #2
 8001608:	4a4c      	ldr	r2, [pc, #304]	@ (800173c <HAL_UART_RxCpltCallback+0x210>)
 800160a:	5cd3      	ldrb	r3, [r2, r3]
 800160c:	2bbb      	cmp	r3, #187	@ 0xbb
 800160e:	d16d      	bne.n	80016ec <HAL_UART_RxCpltCallback+0x1c0>
 8001610:	4b48      	ldr	r3, [pc, #288]	@ (8001734 <HAL_UART_RxCpltCallback+0x208>)
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	3b01      	subs	r3, #1
 8001616:	4a49      	ldr	r2, [pc, #292]	@ (800173c <HAL_UART_RxCpltCallback+0x210>)
 8001618:	5cd3      	ldrb	r3, [r2, r3]
 800161a:	2bbb      	cmp	r3, #187	@ 0xbb
 800161c:	d166      	bne.n	80016ec <HAL_UART_RxCpltCallback+0x1c0>
                {
                    // To'liq paket qabul qilindi, paketni tahlil qilamiz

                    uint8_t address = recvBuffer[3];           // 1-bayt: manzil
 800161e:	4b47      	ldr	r3, [pc, #284]	@ (800173c <HAL_UART_RxCpltCallback+0x210>)
 8001620:	78db      	ldrb	r3, [r3, #3]
 8001622:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    uint8_t deviceType = recvBuffer[4];        // 2-bayt: qurilma turi
 8001626:	4b45      	ldr	r3, [pc, #276]	@ (800173c <HAL_UART_RxCpltCallback+0x210>)
 8001628:	791b      	ldrb	r3, [r3, #4]
 800162a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                    uint8_t mode = recvBuffer[5];              // 3-bayt: rejim
 800162e:	4b43      	ldr	r3, [pc, #268]	@ (800173c <HAL_UART_RxCpltCallback+0x210>)
 8001630:	795b      	ldrb	r3, [r3, #5]
 8001632:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                    uint16_t speed = (recvBuffer[6] << 8) | recvBuffer[7]; // 4-5 bayt: tezlik (big endian)
 8001636:	4b41      	ldr	r3, [pc, #260]	@ (800173c <HAL_UART_RxCpltCallback+0x210>)
 8001638:	799b      	ldrb	r3, [r3, #6]
 800163a:	b21b      	sxth	r3, r3
 800163c:	021b      	lsls	r3, r3, #8
 800163e:	b21a      	sxth	r2, r3
 8001640:	4b3e      	ldr	r3, [pc, #248]	@ (800173c <HAL_UART_RxCpltCallback+0x210>)
 8001642:	79db      	ldrb	r3, [r3, #7]
 8001644:	b21b      	sxth	r3, r3
 8001646:	4313      	orrs	r3, r2
 8001648:	b21b      	sxth	r3, r3
 800164a:	847b      	strh	r3, [r7, #34]	@ 0x22

                    // Misol uchun SSD1306 ekranga chiqarish
#if SSD1306_DISPLAY
                    char disp_buf[20];
                    SSD1306_Fill(SSD1306_COLOR_BLACK);
 800164c:	2000      	movs	r0, #0
 800164e:	f000 f9b3 	bl	80019b8 <SSD1306_Fill>
                    SSD1306_GotoXY(0,0);
 8001652:	2100      	movs	r1, #0
 8001654:	2000      	movs	r0, #0
 8001656:	f000 fa35 	bl	8001ac4 <SSD1306_GotoXY>
                    sprintf(disp_buf, "Adr: %02X", address);
 800165a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	4938      	ldr	r1, [pc, #224]	@ (8001744 <HAL_UART_RxCpltCallback+0x218>)
 8001664:	4618      	mov	r0, r3
 8001666:	f003 ff2f 	bl	80054c8 <siprintf>
                    SSD1306_Puts(disp_buf, &Font_7x10, SSD1306_COLOR_WHITE);
 800166a:	f107 030c 	add.w	r3, r7, #12
 800166e:	2201      	movs	r2, #1
 8001670:	4935      	ldr	r1, [pc, #212]	@ (8001748 <HAL_UART_RxCpltCallback+0x21c>)
 8001672:	4618      	mov	r0, r3
 8001674:	f000 faba 	bl	8001bec <SSD1306_Puts>
                    SSD1306_GotoXY(0,15);
 8001678:	210f      	movs	r1, #15
 800167a:	2000      	movs	r0, #0
 800167c:	f000 fa22 	bl	8001ac4 <SSD1306_GotoXY>
                    sprintf(disp_buf, "Dev: %02X", deviceType);
 8001680:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001684:	f107 030c 	add.w	r3, r7, #12
 8001688:	4930      	ldr	r1, [pc, #192]	@ (800174c <HAL_UART_RxCpltCallback+0x220>)
 800168a:	4618      	mov	r0, r3
 800168c:	f003 ff1c 	bl	80054c8 <siprintf>
                    SSD1306_Puts(disp_buf, &Font_7x10, SSD1306_COLOR_WHITE);
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	2201      	movs	r2, #1
 8001696:	492c      	ldr	r1, [pc, #176]	@ (8001748 <HAL_UART_RxCpltCallback+0x21c>)
 8001698:	4618      	mov	r0, r3
 800169a:	f000 faa7 	bl	8001bec <SSD1306_Puts>
                    SSD1306_GotoXY(0,30);
 800169e:	211e      	movs	r1, #30
 80016a0:	2000      	movs	r0, #0
 80016a2:	f000 fa0f 	bl	8001ac4 <SSD1306_GotoXY>
                    sprintf(disp_buf, "Mode: %02X", mode);
 80016a6:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80016aa:	f107 030c 	add.w	r3, r7, #12
 80016ae:	4928      	ldr	r1, [pc, #160]	@ (8001750 <HAL_UART_RxCpltCallback+0x224>)
 80016b0:	4618      	mov	r0, r3
 80016b2:	f003 ff09 	bl	80054c8 <siprintf>
                    SSD1306_Puts(disp_buf, &Font_7x10, SSD1306_COLOR_WHITE);
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	2201      	movs	r2, #1
 80016bc:	4922      	ldr	r1, [pc, #136]	@ (8001748 <HAL_UART_RxCpltCallback+0x21c>)
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 fa94 	bl	8001bec <SSD1306_Puts>
                    SSD1306_GotoXY(0,45);
 80016c4:	212d      	movs	r1, #45	@ 0x2d
 80016c6:	2000      	movs	r0, #0
 80016c8:	f000 f9fc 	bl	8001ac4 <SSD1306_GotoXY>
                    sprintf(disp_buf, "Speed: %u", speed);
 80016cc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80016ce:	f107 030c 	add.w	r3, r7, #12
 80016d2:	4920      	ldr	r1, [pc, #128]	@ (8001754 <HAL_UART_RxCpltCallback+0x228>)
 80016d4:	4618      	mov	r0, r3
 80016d6:	f003 fef7 	bl	80054c8 <siprintf>
                    SSD1306_Puts(disp_buf, &Font_7x10, SSD1306_COLOR_WHITE);
 80016da:	f107 030c 	add.w	r3, r7, #12
 80016de:	2201      	movs	r2, #1
 80016e0:	4919      	ldr	r1, [pc, #100]	@ (8001748 <HAL_UART_RxCpltCallback+0x21c>)
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 fa82 	bl	8001bec <SSD1306_Puts>
                    SSD1306_UpdateScreen();
 80016e8:	f000 f934 	bl	8001954 <SSD1306_UpdateScreen>

                    // Paketni qayta ishlash kodi shu yerda yoziladi

                }
                // Paket tugadi, yangi paket kutish uchun o'zgaruvchilarni tiklaymiz
                rxIndex = 0;
 80016ec:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <HAL_UART_RxCpltCallback+0x208>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	801a      	strh	r2, [r3, #0]
                receiving = false;
 80016f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001730 <HAL_UART_RxCpltCallback+0x204>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
                packetLength = 0;
 80016f8:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <HAL_UART_RxCpltCallback+0x214>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
 80016fe:	e00c      	b.n	800171a <HAL_UART_RxCpltCallback+0x1ee>
            }
            else if (rxIndex >= MAX_PACKET_SIZE)
 8001700:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <HAL_UART_RxCpltCallback+0x208>)
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	2bff      	cmp	r3, #255	@ 0xff
 8001706:	d908      	bls.n	800171a <HAL_UART_RxCpltCallback+0x1ee>
            {
                // Buffer to'ldi, ammo paket tugamadi, xato holat
                rxIndex = 0;
 8001708:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <HAL_UART_RxCpltCallback+0x208>)
 800170a:	2200      	movs	r2, #0
 800170c:	801a      	strh	r2, [r3, #0]
                receiving = false;
 800170e:	4b08      	ldr	r3, [pc, #32]	@ (8001730 <HAL_UART_RxCpltCallback+0x204>)
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
                packetLength = 0;
 8001714:	4b0a      	ldr	r3, [pc, #40]	@ (8001740 <HAL_UART_RxCpltCallback+0x214>)
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
            }
        }
        // Yana keyingi baytni qabul qilishni kutish
        HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 800171a:	2201      	movs	r2, #1
 800171c:	4906      	ldr	r1, [pc, #24]	@ (8001738 <HAL_UART_RxCpltCallback+0x20c>)
 800171e:	4803      	ldr	r0, [pc, #12]	@ (800172c <HAL_UART_RxCpltCallback+0x200>)
 8001720:	f002 fc0f 	bl	8003f42 <HAL_UART_Receive_IT>
    }
}
 8001724:	bf00      	nop
 8001726:	3728      	adds	r7, #40	@ 0x28
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000390 	.word	0x20000390
 8001730:	20000313 	.word	0x20000313
 8001734:	20000310 	.word	0x20000310
 8001738:	2000020d 	.word	0x2000020d
 800173c:	20000210 	.word	0x20000210
 8001740:	20000312 	.word	0x20000312
 8001744:	08007764 	.word	0x08007764
 8001748:	20000000 	.word	0x20000000
 800174c:	08007770 	.word	0x08007770
 8001750:	0800777c 	.word	0x0800777c
 8001754:	08007788 	.word	0x08007788

08001758 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
    UART_ERROR = HAL_UART_GetError(&huart1);
 8001760:	4809      	ldr	r0, [pc, #36]	@ (8001788 <HAL_UART_ErrorCallback+0x30>)
 8001762:	f002 feb9 	bl	80044d8 <HAL_UART_GetError>
 8001766:	4603      	mov	r3, r0
 8001768:	4a08      	ldr	r2, [pc, #32]	@ (800178c <HAL_UART_ErrorCallback+0x34>)
 800176a:	6013      	str	r3, [r2, #0]
    if (UART_ERROR == HAL_UART_ERROR_ORE) // Ошибка переполнения
 800176c:	4b07      	ldr	r3, [pc, #28]	@ (800178c <HAL_UART_ErrorCallback+0x34>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b08      	cmp	r3, #8
 8001772:	d104      	bne.n	800177e <HAL_UART_ErrorCallback+0x26>
    {
        HAL_UART_Receive_IT(&huart1, &rx_byte, 1); // 1 bayt qabul qilish
 8001774:	2201      	movs	r2, #1
 8001776:	4906      	ldr	r1, [pc, #24]	@ (8001790 <HAL_UART_ErrorCallback+0x38>)
 8001778:	4803      	ldr	r0, [pc, #12]	@ (8001788 <HAL_UART_ErrorCallback+0x30>)
 800177a:	f002 fbe2 	bl	8003f42 <HAL_UART_Receive_IT>
    }
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000390 	.word	0x20000390
 800178c:	20000338 	.word	0x20000338
 8001790:	2000020d 	.word	0x2000020d

08001794 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_1)
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d006      	beq.n	80017b2 <HAL_GPIO_EXTI_Callback+0x1e>
    {
        // Boshqa logika
    }
    else if (GPIO_Pin == GPIO_PIN_9)
 80017a4:	88fb      	ldrh	r3, [r7, #6]
 80017a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017aa:	d102      	bne.n	80017b2 <HAL_GPIO_EXTI_Callback+0x1e>
    {
        AUX_Flag = true;
 80017ac:	4b03      	ldr	r3, [pc, #12]	@ (80017bc <HAL_GPIO_EXTI_Callback+0x28>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	701a      	strb	r2, [r3, #0]
    }
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	20000314 	.word	0x20000314

080017c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c4:	b672      	cpsid	i
}
 80017c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <Error_Handler+0x8>

080017cc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80017d2:	f000 fa31 	bl	8001c38 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80017d6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80017da:	2201      	movs	r2, #1
 80017dc:	2178      	movs	r1, #120	@ 0x78
 80017de:	485b      	ldr	r0, [pc, #364]	@ (800194c <SSD1306_Init+0x180>)
 80017e0:	f001 fb44 	bl	8002e6c <HAL_I2C_IsDeviceReady>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	e0a9      	b.n	8001942 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80017ee:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80017f2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80017f4:	e002      	b.n	80017fc <SSD1306_Init+0x30>
		p--;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f9      	bne.n	80017f6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001802:	22ae      	movs	r2, #174	@ 0xae
 8001804:	2100      	movs	r1, #0
 8001806:	2078      	movs	r0, #120	@ 0x78
 8001808:	f000 fa90 	bl	8001d2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 800180c:	2220      	movs	r2, #32
 800180e:	2100      	movs	r1, #0
 8001810:	2078      	movs	r0, #120	@ 0x78
 8001812:	f000 fa8b 	bl	8001d2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001816:	2210      	movs	r2, #16
 8001818:	2100      	movs	r1, #0
 800181a:	2078      	movs	r0, #120	@ 0x78
 800181c:	f000 fa86 	bl	8001d2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001820:	22b0      	movs	r2, #176	@ 0xb0
 8001822:	2100      	movs	r1, #0
 8001824:	2078      	movs	r0, #120	@ 0x78
 8001826:	f000 fa81 	bl	8001d2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800182a:	22c8      	movs	r2, #200	@ 0xc8
 800182c:	2100      	movs	r1, #0
 800182e:	2078      	movs	r0, #120	@ 0x78
 8001830:	f000 fa7c 	bl	8001d2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001834:	2200      	movs	r2, #0
 8001836:	2100      	movs	r1, #0
 8001838:	2078      	movs	r0, #120	@ 0x78
 800183a:	f000 fa77 	bl	8001d2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10); //---set high column address
 800183e:	2210      	movs	r2, #16
 8001840:	2100      	movs	r1, #0
 8001842:	2078      	movs	r0, #120	@ 0x78
 8001844:	f000 fa72 	bl	8001d2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001848:	2240      	movs	r2, #64	@ 0x40
 800184a:	2100      	movs	r1, #0
 800184c:	2078      	movs	r0, #120	@ 0x78
 800184e:	f000 fa6d 	bl	8001d2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001852:	2281      	movs	r2, #129	@ 0x81
 8001854:	2100      	movs	r1, #0
 8001856:	2078      	movs	r0, #120	@ 0x78
 8001858:	f000 fa68 	bl	8001d2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xFF);
 800185c:	22ff      	movs	r2, #255	@ 0xff
 800185e:	2100      	movs	r1, #0
 8001860:	2078      	movs	r0, #120	@ 0x78
 8001862:	f000 fa63 	bl	8001d2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001866:	22a1      	movs	r2, #161	@ 0xa1
 8001868:	2100      	movs	r1, #0
 800186a:	2078      	movs	r0, #120	@ 0x78
 800186c:	f000 fa5e 	bl	8001d2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001870:	22a6      	movs	r2, #166	@ 0xa6
 8001872:	2100      	movs	r1, #0
 8001874:	2078      	movs	r0, #120	@ 0x78
 8001876:	f000 fa59 	bl	8001d2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800187a:	22a8      	movs	r2, #168	@ 0xa8
 800187c:	2100      	movs	r1, #0
 800187e:	2078      	movs	r0, #120	@ 0x78
 8001880:	f000 fa54 	bl	8001d2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x1F); //
 8001884:	221f      	movs	r2, #31
 8001886:	2100      	movs	r1, #0
 8001888:	2078      	movs	r0, #120	@ 0x78
 800188a:	f000 fa4f 	bl	8001d2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800188e:	22a4      	movs	r2, #164	@ 0xa4
 8001890:	2100      	movs	r1, #0
 8001892:	2078      	movs	r0, #120	@ 0x78
 8001894:	f000 fa4a 	bl	8001d2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001898:	22d3      	movs	r2, #211	@ 0xd3
 800189a:	2100      	movs	r1, #0
 800189c:	2078      	movs	r0, #120	@ 0x78
 800189e:	f000 fa45 	bl	8001d2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00); //-not offset
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	2078      	movs	r0, #120	@ 0x78
 80018a8:	f000 fa40 	bl	8001d2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80018ac:	22d5      	movs	r2, #213	@ 0xd5
 80018ae:	2100      	movs	r1, #0
 80018b0:	2078      	movs	r0, #120	@ 0x78
 80018b2:	f000 fa3b 	bl	8001d2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80018b6:	22f0      	movs	r2, #240	@ 0xf0
 80018b8:	2100      	movs	r1, #0
 80018ba:	2078      	movs	r0, #120	@ 0x78
 80018bc:	f000 fa36 	bl	8001d2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80018c0:	22d9      	movs	r2, #217	@ 0xd9
 80018c2:	2100      	movs	r1, #0
 80018c4:	2078      	movs	r0, #120	@ 0x78
 80018c6:	f000 fa31 	bl	8001d2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x22); //
 80018ca:	2222      	movs	r2, #34	@ 0x22
 80018cc:	2100      	movs	r1, #0
 80018ce:	2078      	movs	r0, #120	@ 0x78
 80018d0:	f000 fa2c 	bl	8001d2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80018d4:	22da      	movs	r2, #218	@ 0xda
 80018d6:	2100      	movs	r1, #0
 80018d8:	2078      	movs	r0, #120	@ 0x78
 80018da:	f000 fa27 	bl	8001d2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x02);
 80018de:	2202      	movs	r2, #2
 80018e0:	2100      	movs	r1, #0
 80018e2:	2078      	movs	r0, #120	@ 0x78
 80018e4:	f000 fa22 	bl	8001d2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80018e8:	22db      	movs	r2, #219	@ 0xdb
 80018ea:	2100      	movs	r1, #0
 80018ec:	2078      	movs	r0, #120	@ 0x78
 80018ee:	f000 fa1d 	bl	8001d2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80018f2:	2220      	movs	r2, #32
 80018f4:	2100      	movs	r1, #0
 80018f6:	2078      	movs	r0, #120	@ 0x78
 80018f8:	f000 fa18 	bl	8001d2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80018fc:	228d      	movs	r2, #141	@ 0x8d
 80018fe:	2100      	movs	r1, #0
 8001900:	2078      	movs	r0, #120	@ 0x78
 8001902:	f000 fa13 	bl	8001d2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x14); //
 8001906:	2214      	movs	r2, #20
 8001908:	2100      	movs	r1, #0
 800190a:	2078      	movs	r0, #120	@ 0x78
 800190c:	f000 fa0e 	bl	8001d2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001910:	22af      	movs	r2, #175	@ 0xaf
 8001912:	2100      	movs	r1, #0
 8001914:	2078      	movs	r0, #120	@ 0x78
 8001916:	f000 fa09 	bl	8001d2c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800191a:	222e      	movs	r2, #46	@ 0x2e
 800191c:	2100      	movs	r1, #0
 800191e:	2078      	movs	r0, #120	@ 0x78
 8001920:	f000 fa04 	bl	8001d2c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001924:	2000      	movs	r0, #0
 8001926:	f000 f847 	bl	80019b8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800192a:	f000 f813 	bl	8001954 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800192e:	4b08      	ldr	r3, [pc, #32]	@ (8001950 <SSD1306_Init+0x184>)
 8001930:	2200      	movs	r2, #0
 8001932:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001934:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <SSD1306_Init+0x184>)
 8001936:	2200      	movs	r2, #0
 8001938:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800193a:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <SSD1306_Init+0x184>)
 800193c:	2201      	movs	r2, #1
 800193e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001940:	2301      	movs	r3, #1
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	2000033c 	.word	0x2000033c
 8001950:	200005d0 	.word	0x200005d0

08001954 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800195a:	2300      	movs	r3, #0
 800195c:	71fb      	strb	r3, [r7, #7]
 800195e:	e021      	b.n	80019a4 <SSD1306_UpdateScreen+0x50>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	3b50      	subs	r3, #80	@ 0x50
 8001964:	b2db      	uxtb	r3, r3
 8001966:	461a      	mov	r2, r3
 8001968:	2100      	movs	r1, #0
 800196a:	2078      	movs	r0, #120	@ 0x78
 800196c:	f000 f9de 	bl	8001d2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001970:	2200      	movs	r2, #0
 8001972:	2100      	movs	r1, #0
 8001974:	2078      	movs	r0, #120	@ 0x78
 8001976:	f000 f9d9 	bl	8001d2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800197a:	2210      	movs	r2, #16
 800197c:	2100      	movs	r1, #0
 800197e:	2078      	movs	r0, #120	@ 0x78
 8001980:	f000 f9d4 	bl	8001d2c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001984:	79fa      	ldrb	r2, [r7, #7]
 8001986:	4613      	mov	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	1a9b      	subs	r3, r3, r2
 800198c:	011a      	lsls	r2, r3, #4
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	4a08      	ldr	r2, [pc, #32]	@ (80019b4 <SSD1306_UpdateScreen+0x60>)
 8001992:	441a      	add	r2, r3
 8001994:	2369      	movs	r3, #105	@ 0x69
 8001996:	2140      	movs	r1, #64	@ 0x40
 8001998:	2078      	movs	r0, #120	@ 0x78
 800199a:	f000 f961 	bl	8001c60 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	3301      	adds	r3, #1
 80019a2:	71fb      	strb	r3, [r7, #7]
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	2b07      	cmp	r3, #7
 80019a8:	d9da      	bls.n	8001960 <SSD1306_UpdateScreen+0xc>
	}
}
 80019aa:	bf00      	nop
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	2000042c 	.word	0x2000042c

080019b8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <SSD1306_Fill+0x14>
 80019c8:	2300      	movs	r3, #0
 80019ca:	e000      	b.n	80019ce <SSD1306_Fill+0x16>
 80019cc:	23ff      	movs	r3, #255	@ 0xff
 80019ce:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 80019d2:	4619      	mov	r1, r3
 80019d4:	4803      	ldr	r0, [pc, #12]	@ (80019e4 <SSD1306_Fill+0x2c>)
 80019d6:	f003 fddc 	bl	8005592 <memset>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	2000042c 	.word	0x2000042c

080019e8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80019e8:	b490      	push	{r4, r7}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	80fb      	strh	r3, [r7, #6]
 80019f2:	460b      	mov	r3, r1
 80019f4:	80bb      	strh	r3, [r7, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	70fb      	strb	r3, [r7, #3]
	if (
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	2b68      	cmp	r3, #104	@ 0x68
 80019fe:	d858      	bhi.n	8001ab2 <SSD1306_DrawPixel+0xca>
		x >= SSD1306_WIDTH ||
 8001a00:	88bb      	ldrh	r3, [r7, #4]
 8001a02:	2b1f      	cmp	r3, #31
 8001a04:	d855      	bhi.n	8001ab2 <SSD1306_DrawPixel+0xca>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001a06:	4b2d      	ldr	r3, [pc, #180]	@ (8001abc <SSD1306_DrawPixel+0xd4>)
 8001a08:	791b      	ldrb	r3, [r3, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d006      	beq.n	8001a1c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001a0e:	78fb      	ldrb	r3, [r7, #3]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	bf0c      	ite	eq
 8001a14:	2301      	moveq	r3, #1
 8001a16:	2300      	movne	r3, #0
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d122      	bne.n	8001a68 <SSD1306_DrawPixel+0x80>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a22:	88fa      	ldrh	r2, [r7, #6]
 8001a24:	88bb      	ldrh	r3, [r7, #4]
 8001a26:	08db      	lsrs	r3, r3, #3
 8001a28:	b298      	uxth	r0, r3
 8001a2a:	4601      	mov	r1, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	1a5b      	subs	r3, r3, r1
 8001a32:	0119      	lsls	r1, r3, #4
 8001a34:	1acb      	subs	r3, r1, r3
 8001a36:	4413      	add	r3, r2
 8001a38:	4a21      	ldr	r2, [pc, #132]	@ (8001ac0 <SSD1306_DrawPixel+0xd8>)
 8001a3a:	5cd3      	ldrb	r3, [r2, r3]
 8001a3c:	b25a      	sxtb	r2, r3
 8001a3e:	88bb      	ldrh	r3, [r7, #4]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	2101      	movs	r1, #1
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	b25b      	sxtb	r3, r3
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	b25c      	sxtb	r4, r3
 8001a50:	88fa      	ldrh	r2, [r7, #6]
 8001a52:	4601      	mov	r1, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	1a5b      	subs	r3, r3, r1
 8001a5a:	0119      	lsls	r1, r3, #4
 8001a5c:	1acb      	subs	r3, r1, r3
 8001a5e:	4413      	add	r3, r2
 8001a60:	b2e1      	uxtb	r1, r4
 8001a62:	4a17      	ldr	r2, [pc, #92]	@ (8001ac0 <SSD1306_DrawPixel+0xd8>)
 8001a64:	54d1      	strb	r1, [r2, r3]
 8001a66:	e025      	b.n	8001ab4 <SSD1306_DrawPixel+0xcc>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001a68:	88fa      	ldrh	r2, [r7, #6]
 8001a6a:	88bb      	ldrh	r3, [r7, #4]
 8001a6c:	08db      	lsrs	r3, r3, #3
 8001a6e:	b298      	uxth	r0, r3
 8001a70:	4601      	mov	r1, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	1a5b      	subs	r3, r3, r1
 8001a78:	0119      	lsls	r1, r3, #4
 8001a7a:	1acb      	subs	r3, r1, r3
 8001a7c:	4413      	add	r3, r2
 8001a7e:	4a10      	ldr	r2, [pc, #64]	@ (8001ac0 <SSD1306_DrawPixel+0xd8>)
 8001a80:	5cd3      	ldrb	r3, [r2, r3]
 8001a82:	b25a      	sxtb	r2, r3
 8001a84:	88bb      	ldrh	r3, [r7, #4]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a90:	b25b      	sxtb	r3, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	4013      	ands	r3, r2
 8001a98:	b25c      	sxtb	r4, r3
 8001a9a:	88fa      	ldrh	r2, [r7, #6]
 8001a9c:	4601      	mov	r1, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	1a5b      	subs	r3, r3, r1
 8001aa4:	0119      	lsls	r1, r3, #4
 8001aa6:	1acb      	subs	r3, r1, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b2e1      	uxtb	r1, r4
 8001aac:	4a04      	ldr	r2, [pc, #16]	@ (8001ac0 <SSD1306_DrawPixel+0xd8>)
 8001aae:	54d1      	strb	r1, [r2, r3]
 8001ab0:	e000      	b.n	8001ab4 <SSD1306_DrawPixel+0xcc>
		return;
 8001ab2:	bf00      	nop
	}
}
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc90      	pop	{r4, r7}
 8001aba:	4770      	bx	lr
 8001abc:	200005d0 	.word	0x200005d0
 8001ac0:	2000042c 	.word	0x2000042c

08001ac4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	460a      	mov	r2, r1
 8001ace:	80fb      	strh	r3, [r7, #6]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001ad4:	4a05      	ldr	r2, [pc, #20]	@ (8001aec <SSD1306_GotoXY+0x28>)
 8001ad6:	88fb      	ldrh	r3, [r7, #6]
 8001ad8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001ada:	4a04      	ldr	r2, [pc, #16]	@ (8001aec <SSD1306_GotoXY+0x28>)
 8001adc:	88bb      	ldrh	r3, [r7, #4]
 8001ade:	8053      	strh	r3, [r2, #2]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	200005d0 	.word	0x200005d0

08001af0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	6039      	str	r1, [r7, #0]
 8001afa:	71fb      	strb	r3, [r7, #7]
 8001afc:	4613      	mov	r3, r2
 8001afe:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001b00:	4b39      	ldr	r3, [pc, #228]	@ (8001be8 <SSD1306_Putc+0xf8>)
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	4413      	add	r3, r2
	if (
 8001b0c:	2b68      	cmp	r3, #104	@ 0x68
 8001b0e:	dc07      	bgt.n	8001b20 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001b10:	4b35      	ldr	r3, [pc, #212]	@ (8001be8 <SSD1306_Putc+0xf8>)
 8001b12:	885b      	ldrh	r3, [r3, #2]
 8001b14:	461a      	mov	r2, r3
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	785b      	ldrb	r3, [r3, #1]
 8001b1a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001b1c:	2b1f      	cmp	r3, #31
 8001b1e:	dd01      	ble.n	8001b24 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	e05d      	b.n	8001be0 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	e04b      	b.n	8001bc2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	3b20      	subs	r3, #32
 8001b32:	6839      	ldr	r1, [r7, #0]
 8001b34:	7849      	ldrb	r1, [r1, #1]
 8001b36:	fb01 f303 	mul.w	r3, r1, r3
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	440b      	add	r3, r1
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	4413      	add	r3, r2
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001b48:	2300      	movs	r3, #0
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	e030      	b.n	8001bb0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d010      	beq.n	8001b80 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001b5e:	4b22      	ldr	r3, [pc, #136]	@ (8001be8 <SSD1306_Putc+0xf8>)
 8001b60:	881a      	ldrh	r2, [r3, #0]
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	4413      	add	r3, r2
 8001b68:	b298      	uxth	r0, r3
 8001b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001be8 <SSD1306_Putc+0xf8>)
 8001b6c:	885a      	ldrh	r2, [r3, #2]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	4413      	add	r3, r2
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	79ba      	ldrb	r2, [r7, #6]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f7ff ff35 	bl	80019e8 <SSD1306_DrawPixel>
 8001b7e:	e014      	b.n	8001baa <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001b80:	4b19      	ldr	r3, [pc, #100]	@ (8001be8 <SSD1306_Putc+0xf8>)
 8001b82:	881a      	ldrh	r2, [r3, #0]
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	4413      	add	r3, r2
 8001b8a:	b298      	uxth	r0, r3
 8001b8c:	4b16      	ldr	r3, [pc, #88]	@ (8001be8 <SSD1306_Putc+0xf8>)
 8001b8e:	885a      	ldrh	r2, [r3, #2]
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	4413      	add	r3, r2
 8001b96:	b299      	uxth	r1, r3
 8001b98:	79bb      	ldrb	r3, [r7, #6]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	bf0c      	ite	eq
 8001b9e:	2301      	moveq	r3, #1
 8001ba0:	2300      	movne	r3, #0
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	f7ff ff1f 	bl	80019e8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	3301      	adds	r3, #1
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d3c8      	bcc.n	8001b4e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	785b      	ldrb	r3, [r3, #1]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d3ad      	bcc.n	8001b2a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001bce:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <SSD1306_Putc+0xf8>)
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	7812      	ldrb	r2, [r2, #0]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	4b03      	ldr	r3, [pc, #12]	@ (8001be8 <SSD1306_Putc+0xf8>)
 8001bdc:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001bde:	79fb      	ldrb	r3, [r7, #7]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	200005d0 	.word	0x200005d0

08001bec <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001bfa:	e012      	b.n	8001c22 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	79fa      	ldrb	r2, [r7, #7]
 8001c02:	68b9      	ldr	r1, [r7, #8]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff73 	bl	8001af0 <SSD1306_Putc>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d002      	beq.n	8001c1c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	e008      	b.n	8001c2e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1e8      	bne.n	8001bfc <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	781b      	ldrb	r3, [r3, #0]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001c3e:	4b07      	ldr	r3, [pc, #28]	@ (8001c5c <ssd1306_I2C_Init+0x24>)
 8001c40:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001c42:	e002      	b.n	8001c4a <ssd1306_I2C_Init+0x12>
		p--;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1f9      	bne.n	8001c44 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001c50:	bf00      	nop
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr
 8001c5c:	0003d090 	.word	0x0003d090

08001c60 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b0c7      	sub	sp, #284	@ 0x11c
 8001c64:	af02      	add	r7, sp, #8
 8001c66:	4604      	mov	r4, r0
 8001c68:	4608      	mov	r0, r1
 8001c6a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001c6e:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001c72:	600a      	str	r2, [r1, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c7a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001c7e:	4622      	mov	r2, r4
 8001c80:	701a      	strb	r2, [r3, #0]
 8001c82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c86:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	701a      	strb	r2, [r3, #0]
 8001c8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c92:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c96:	460a      	mov	r2, r1
 8001c98:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001c9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ca2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001ca6:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001caa:	7812      	ldrb	r2, [r2, #0]
 8001cac:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001cb4:	e015      	b.n	8001ce2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001cb6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001cba:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001cbe:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	441a      	add	r2, r3
 8001cc6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001cca:	3301      	adds	r3, #1
 8001ccc:	7811      	ldrb	r1, [r2, #0]
 8001cce:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001cd2:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001cd6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001cd8:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001cdc:	3301      	adds	r3, #1
 8001cde:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001ce2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001cec:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001cf0:	8812      	ldrh	r2, [r2, #0]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d8df      	bhi.n	8001cb6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001cf6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001cfa:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	b299      	uxth	r1, r3
 8001d02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d06:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	f107 020c 	add.w	r2, r7, #12
 8001d14:	200a      	movs	r0, #10
 8001d16:	9000      	str	r0, [sp, #0]
 8001d18:	4803      	ldr	r0, [pc, #12]	@ (8001d28 <ssd1306_I2C_WriteMulti+0xc8>)
 8001d1a:	f000 ffa9 	bl	8002c70 <HAL_I2C_Master_Transmit>
}
 8001d1e:	bf00      	nop
 8001d20:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd90      	pop	{r4, r7, pc}
 8001d28:	2000033c 	.word	0x2000033c

08001d2c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af02      	add	r7, sp, #8
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
 8001d36:	460b      	mov	r3, r1
 8001d38:	71bb      	strb	r3, [r7, #6]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001d3e:	79bb      	ldrb	r3, [r7, #6]
 8001d40:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001d42:	797b      	ldrb	r3, [r7, #5]
 8001d44:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	b299      	uxth	r1, r3
 8001d4a:	f107 020c 	add.w	r2, r7, #12
 8001d4e:	230a      	movs	r3, #10
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2302      	movs	r3, #2
 8001d54:	4803      	ldr	r0, [pc, #12]	@ (8001d64 <ssd1306_I2C_Write+0x38>)
 8001d56:	f000 ff8b 	bl	8002c70 <HAL_I2C_Master_Transmit>
}
 8001d5a:	bf00      	nop
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	2000033c 	.word	0x2000033c

08001d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d6e:	4b15      	ldr	r3, [pc, #84]	@ (8001dc4 <HAL_MspInit+0x5c>)
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	4a14      	ldr	r2, [pc, #80]	@ (8001dc4 <HAL_MspInit+0x5c>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6193      	str	r3, [r2, #24]
 8001d7a:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <HAL_MspInit+0x5c>)
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc4 <HAL_MspInit+0x5c>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	4a0e      	ldr	r2, [pc, #56]	@ (8001dc4 <HAL_MspInit+0x5c>)
 8001d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d90:	61d3      	str	r3, [r2, #28]
 8001d92:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc4 <HAL_MspInit+0x5c>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9a:	607b      	str	r3, [r7, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc8 <HAL_MspInit+0x60>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	4a04      	ldr	r2, [pc, #16]	@ (8001dc8 <HAL_MspInit+0x60>)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40010000 	.word	0x40010000

08001dcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b088      	sub	sp, #32
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	f107 0310 	add.w	r3, r7, #16
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a15      	ldr	r2, [pc, #84]	@ (8001e3c <HAL_I2C_MspInit+0x70>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d123      	bne.n	8001e34 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dec:	4b14      	ldr	r3, [pc, #80]	@ (8001e40 <HAL_I2C_MspInit+0x74>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	4a13      	ldr	r2, [pc, #76]	@ (8001e40 <HAL_I2C_MspInit+0x74>)
 8001df2:	f043 0308 	orr.w	r3, r3, #8
 8001df6:	6193      	str	r3, [r2, #24]
 8001df8:	4b11      	ldr	r3, [pc, #68]	@ (8001e40 <HAL_I2C_MspInit+0x74>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e04:	23c0      	movs	r3, #192	@ 0xc0
 8001e06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e08:	2312      	movs	r3, #18
 8001e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e10:	f107 0310 	add.w	r3, r7, #16
 8001e14:	4619      	mov	r1, r3
 8001e16:	480b      	ldr	r0, [pc, #44]	@ (8001e44 <HAL_I2C_MspInit+0x78>)
 8001e18:	f000 fc32 	bl	8002680 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e1c:	4b08      	ldr	r3, [pc, #32]	@ (8001e40 <HAL_I2C_MspInit+0x74>)
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	4a07      	ldr	r2, [pc, #28]	@ (8001e40 <HAL_I2C_MspInit+0x74>)
 8001e22:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e26:	61d3      	str	r3, [r2, #28]
 8001e28:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <HAL_I2C_MspInit+0x74>)
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e34:	bf00      	nop
 8001e36:	3720      	adds	r7, #32
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40005400 	.word	0x40005400
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40010c00 	.word	0x40010c00

08001e48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	@ 0x28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 0318 	add.w	r3, r7, #24
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a40      	ldr	r2, [pc, #256]	@ (8001f64 <HAL_UART_MspInit+0x11c>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d13a      	bne.n	8001ede <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e68:	4b3f      	ldr	r3, [pc, #252]	@ (8001f68 <HAL_UART_MspInit+0x120>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	4a3e      	ldr	r2, [pc, #248]	@ (8001f68 <HAL_UART_MspInit+0x120>)
 8001e6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e72:	6193      	str	r3, [r2, #24]
 8001e74:	4b3c      	ldr	r3, [pc, #240]	@ (8001f68 <HAL_UART_MspInit+0x120>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e80:	4b39      	ldr	r3, [pc, #228]	@ (8001f68 <HAL_UART_MspInit+0x120>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	4a38      	ldr	r2, [pc, #224]	@ (8001f68 <HAL_UART_MspInit+0x120>)
 8001e86:	f043 0304 	orr.w	r3, r3, #4
 8001e8a:	6193      	str	r3, [r2, #24]
 8001e8c:	4b36      	ldr	r3, [pc, #216]	@ (8001f68 <HAL_UART_MspInit+0x120>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea6:	f107 0318 	add.w	r3, r7, #24
 8001eaa:	4619      	mov	r1, r3
 8001eac:	482f      	ldr	r0, [pc, #188]	@ (8001f6c <HAL_UART_MspInit+0x124>)
 8001eae:	f000 fbe7 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001eb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec0:	f107 0318 	add.w	r3, r7, #24
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4829      	ldr	r0, [pc, #164]	@ (8001f6c <HAL_UART_MspInit+0x124>)
 8001ec8:	f000 fbda 	bl	8002680 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2100      	movs	r1, #0
 8001ed0:	2025      	movs	r0, #37	@ 0x25
 8001ed2:	f000 faec 	bl	80024ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ed6:	2025      	movs	r0, #37	@ 0x25
 8001ed8:	f000 fb05 	bl	80024e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001edc:	e03e      	b.n	8001f5c <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART3)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a23      	ldr	r2, [pc, #140]	@ (8001f70 <HAL_UART_MspInit+0x128>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d139      	bne.n	8001f5c <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ee8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f68 <HAL_UART_MspInit+0x120>)
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	4a1e      	ldr	r2, [pc, #120]	@ (8001f68 <HAL_UART_MspInit+0x120>)
 8001eee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ef2:	61d3      	str	r3, [r2, #28]
 8001ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f68 <HAL_UART_MspInit+0x120>)
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f00:	4b19      	ldr	r3, [pc, #100]	@ (8001f68 <HAL_UART_MspInit+0x120>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	4a18      	ldr	r2, [pc, #96]	@ (8001f68 <HAL_UART_MspInit+0x120>)
 8001f06:	f043 0308 	orr.w	r3, r3, #8
 8001f0a:	6193      	str	r3, [r2, #24]
 8001f0c:	4b16      	ldr	r3, [pc, #88]	@ (8001f68 <HAL_UART_MspInit+0x120>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f22:	2303      	movs	r3, #3
 8001f24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f26:	f107 0318 	add.w	r3, r7, #24
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4811      	ldr	r0, [pc, #68]	@ (8001f74 <HAL_UART_MspInit+0x12c>)
 8001f2e:	f000 fba7 	bl	8002680 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f40:	f107 0318 	add.w	r3, r7, #24
 8001f44:	4619      	mov	r1, r3
 8001f46:	480b      	ldr	r0, [pc, #44]	@ (8001f74 <HAL_UART_MspInit+0x12c>)
 8001f48:	f000 fb9a 	bl	8002680 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2100      	movs	r1, #0
 8001f50:	2027      	movs	r0, #39	@ 0x27
 8001f52:	f000 faac 	bl	80024ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f56:	2027      	movs	r0, #39	@ 0x27
 8001f58:	f000 fac5 	bl	80024e6 <HAL_NVIC_EnableIRQ>
}
 8001f5c:	bf00      	nop
 8001f5e:	3728      	adds	r7, #40	@ 0x28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40013800 	.word	0x40013800
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40010800 	.word	0x40010800
 8001f70:	40004800 	.word	0x40004800
 8001f74:	40010c00 	.word	0x40010c00

08001f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f7c:	bf00      	nop
 8001f7e:	e7fd      	b.n	8001f7c <NMI_Handler+0x4>

08001f80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f84:	bf00      	nop
 8001f86:	e7fd      	b.n	8001f84 <HardFault_Handler+0x4>

08001f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f8c:	bf00      	nop
 8001f8e:	e7fd      	b.n	8001f8c <MemManage_Handler+0x4>

08001f90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f94:	bf00      	nop
 8001f96:	e7fd      	b.n	8001f94 <BusFault_Handler+0x4>

08001f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f9c:	bf00      	nop
 8001f9e:	e7fd      	b.n	8001f9c <UsageFault_Handler+0x4>

08001fa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr

08001fac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr

08001fb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	count_sys++;
 8001fc8:	4b04      	ldr	r3, [pc, #16]	@ (8001fdc <SysTick_Handler+0x18>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	4a03      	ldr	r2, [pc, #12]	@ (8001fdc <SysTick_Handler+0x18>)
 8001fd0:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd2:	f000 f955 	bl	8002280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	200005d8 	.word	0x200005d8

08001fe0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001fe4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001fe8:	f000 fce6 	bl	80029b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ff4:	4802      	ldr	r0, [pc, #8]	@ (8002000 <USART1_IRQHandler+0x10>)
 8001ff6:	f001 ffc9 	bl	8003f8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000390 	.word	0x20000390

08002004 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002008:	4802      	ldr	r0, [pc, #8]	@ (8002014 <USART3_IRQHandler+0x10>)
 800200a:	f001 ffbf 	bl	8003f8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	200003d8 	.word	0x200003d8

08002018 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
	return 1;
 800201c:	2301      	movs	r3, #1
}
 800201e:	4618      	mov	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr

08002026 <_kill>:

int _kill(int pid, int sig)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002030:	f003 fb02 	bl	8005638 <__errno>
 8002034:	4603      	mov	r3, r0
 8002036:	2216      	movs	r2, #22
 8002038:	601a      	str	r2, [r3, #0]
	return -1;
 800203a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <_exit>:

void _exit (int status)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800204e:	f04f 31ff 	mov.w	r1, #4294967295
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff ffe7 	bl	8002026 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002058:	bf00      	nop
 800205a:	e7fd      	b.n	8002058 <_exit+0x12>

0800205c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	e00a      	b.n	8002084 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800206e:	f3af 8000 	nop.w
 8002072:	4601      	mov	r1, r0
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	60ba      	str	r2, [r7, #8]
 800207a:	b2ca      	uxtb	r2, r1
 800207c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	3301      	adds	r3, #1
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	429a      	cmp	r2, r3
 800208a:	dbf0      	blt.n	800206e <_read+0x12>
	}

return len;
 800208c:	687b      	ldr	r3, [r7, #4]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b086      	sub	sp, #24
 800209a:	af00      	add	r7, sp, #0
 800209c:	60f8      	str	r0, [r7, #12]
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	e009      	b.n	80020bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	60ba      	str	r2, [r7, #8]
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	3301      	adds	r3, #1
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	dbf1      	blt.n	80020a8 <_write+0x12>
	}
	return len;
 80020c4:	687b      	ldr	r3, [r7, #4]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <_close>:

int _close(int file)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
	return -1;
 80020d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr

080020e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020f4:	605a      	str	r2, [r3, #4]
	return 0;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr

08002102 <_isatty>:

int _isatty(int file)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
	return 1;
 800210a:	2301      	movs	r3, #1
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr

08002116 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002116:	b480      	push	{r7}
 8002118:	b085      	sub	sp, #20
 800211a:	af00      	add	r7, sp, #0
 800211c:	60f8      	str	r0, [r7, #12]
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
	return 0;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
	...

08002130 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002138:	4a14      	ldr	r2, [pc, #80]	@ (800218c <_sbrk+0x5c>)
 800213a:	4b15      	ldr	r3, [pc, #84]	@ (8002190 <_sbrk+0x60>)
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002144:	4b13      	ldr	r3, [pc, #76]	@ (8002194 <_sbrk+0x64>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d102      	bne.n	8002152 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800214c:	4b11      	ldr	r3, [pc, #68]	@ (8002194 <_sbrk+0x64>)
 800214e:	4a12      	ldr	r2, [pc, #72]	@ (8002198 <_sbrk+0x68>)
 8002150:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002152:	4b10      	ldr	r3, [pc, #64]	@ (8002194 <_sbrk+0x64>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4413      	add	r3, r2
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	429a      	cmp	r2, r3
 800215e:	d207      	bcs.n	8002170 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002160:	f003 fa6a 	bl	8005638 <__errno>
 8002164:	4603      	mov	r3, r0
 8002166:	220c      	movs	r2, #12
 8002168:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800216a:	f04f 33ff 	mov.w	r3, #4294967295
 800216e:	e009      	b.n	8002184 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002170:	4b08      	ldr	r3, [pc, #32]	@ (8002194 <_sbrk+0x64>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002176:	4b07      	ldr	r3, [pc, #28]	@ (8002194 <_sbrk+0x64>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	4a05      	ldr	r2, [pc, #20]	@ (8002194 <_sbrk+0x64>)
 8002180:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002182:	68fb      	ldr	r3, [r7, #12]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20005000 	.word	0x20005000
 8002190:	00000400 	.word	0x00000400
 8002194:	200005dc 	.word	0x200005dc
 8002198:	20000730 	.word	0x20000730

0800219c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr

080021a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021a8:	f7ff fff8 	bl	800219c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021ac:	480b      	ldr	r0, [pc, #44]	@ (80021dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80021ae:	490c      	ldr	r1, [pc, #48]	@ (80021e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80021b0:	4a0c      	ldr	r2, [pc, #48]	@ (80021e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80021b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021b4:	e002      	b.n	80021bc <LoopCopyDataInit>

080021b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ba:	3304      	adds	r3, #4

080021bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021c0:	d3f9      	bcc.n	80021b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021c2:	4a09      	ldr	r2, [pc, #36]	@ (80021e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80021c4:	4c09      	ldr	r4, [pc, #36]	@ (80021ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021c8:	e001      	b.n	80021ce <LoopFillZerobss>

080021ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021cc:	3204      	adds	r2, #4

080021ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021d0:	d3fb      	bcc.n	80021ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021d2:	f003 fa37 	bl	8005644 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021d6:	f7fe ff91 	bl	80010fc <main>
  bx lr
 80021da:	4770      	bx	lr
  ldr r0, =_sdata
 80021dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021e0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80021e4:	080082ac 	.word	0x080082ac
  ldr r2, =_sbss
 80021e8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80021ec:	20000730 	.word	0x20000730

080021f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021f0:	e7fe      	b.n	80021f0 <ADC1_2_IRQHandler>
	...

080021f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021f8:	4b08      	ldr	r3, [pc, #32]	@ (800221c <HAL_Init+0x28>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a07      	ldr	r2, [pc, #28]	@ (800221c <HAL_Init+0x28>)
 80021fe:	f043 0310 	orr.w	r3, r3, #16
 8002202:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002204:	2003      	movs	r0, #3
 8002206:	f000 f947 	bl	8002498 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800220a:	200f      	movs	r0, #15
 800220c:	f000 f808 	bl	8002220 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002210:	f7ff fdaa 	bl	8001d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40022000 	.word	0x40022000

08002220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002228:	4b12      	ldr	r3, [pc, #72]	@ (8002274 <HAL_InitTick+0x54>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4b12      	ldr	r3, [pc, #72]	@ (8002278 <HAL_InitTick+0x58>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	4619      	mov	r1, r3
 8002232:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002236:	fbb3 f3f1 	udiv	r3, r3, r1
 800223a:	fbb2 f3f3 	udiv	r3, r2, r3
 800223e:	4618      	mov	r0, r3
 8002240:	f000 f95f 	bl	8002502 <HAL_SYSTICK_Config>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e00e      	b.n	800226c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b0f      	cmp	r3, #15
 8002252:	d80a      	bhi.n	800226a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002254:	2200      	movs	r2, #0
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	f04f 30ff 	mov.w	r0, #4294967295
 800225c:	f000 f927 	bl	80024ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002260:	4a06      	ldr	r2, [pc, #24]	@ (800227c <HAL_InitTick+0x5c>)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
 8002268:	e000      	b.n	800226c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
}
 800226c:	4618      	mov	r0, r3
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20000008 	.word	0x20000008
 8002278:	20000010 	.word	0x20000010
 800227c:	2000000c 	.word	0x2000000c

08002280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002284:	4b05      	ldr	r3, [pc, #20]	@ (800229c <HAL_IncTick+0x1c>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	461a      	mov	r2, r3
 800228a:	4b05      	ldr	r3, [pc, #20]	@ (80022a0 <HAL_IncTick+0x20>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4413      	add	r3, r2
 8002290:	4a03      	ldr	r2, [pc, #12]	@ (80022a0 <HAL_IncTick+0x20>)
 8002292:	6013      	str	r3, [r2, #0]
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr
 800229c:	20000010 	.word	0x20000010
 80022a0:	200005e0 	.word	0x200005e0

080022a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  return uwTick;
 80022a8:	4b02      	ldr	r3, [pc, #8]	@ (80022b4 <HAL_GetTick+0x10>)
 80022aa:	681b      	ldr	r3, [r3, #0]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr
 80022b4:	200005e0 	.word	0x200005e0

080022b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022c0:	f7ff fff0 	bl	80022a4 <HAL_GetTick>
 80022c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d0:	d005      	beq.n	80022de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022d2:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <HAL_Delay+0x44>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4413      	add	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022de:	bf00      	nop
 80022e0:	f7ff ffe0 	bl	80022a4 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d8f7      	bhi.n	80022e0 <HAL_Delay+0x28>
  {
  }
}
 80022f0:	bf00      	nop
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000010 	.word	0x20000010

08002300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002310:	4b0c      	ldr	r3, [pc, #48]	@ (8002344 <__NVIC_SetPriorityGrouping+0x44>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800231c:	4013      	ands	r3, r2
 800231e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002328:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800232c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002332:	4a04      	ldr	r2, [pc, #16]	@ (8002344 <__NVIC_SetPriorityGrouping+0x44>)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	60d3      	str	r3, [r2, #12]
}
 8002338:	bf00      	nop
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800234c:	4b04      	ldr	r3, [pc, #16]	@ (8002360 <__NVIC_GetPriorityGrouping+0x18>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	0a1b      	lsrs	r3, r3, #8
 8002352:	f003 0307 	and.w	r3, r3, #7
}
 8002356:	4618      	mov	r0, r3
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800236e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002372:	2b00      	cmp	r3, #0
 8002374:	db0b      	blt.n	800238e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	f003 021f 	and.w	r2, r3, #31
 800237c:	4906      	ldr	r1, [pc, #24]	@ (8002398 <__NVIC_EnableIRQ+0x34>)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	2001      	movs	r0, #1
 8002386:	fa00 f202 	lsl.w	r2, r0, r2
 800238a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr
 8002398:	e000e100 	.word	0xe000e100

0800239c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	6039      	str	r1, [r7, #0]
 80023a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	db0a      	blt.n	80023c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	490c      	ldr	r1, [pc, #48]	@ (80023e8 <__NVIC_SetPriority+0x4c>)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	0112      	lsls	r2, r2, #4
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	440b      	add	r3, r1
 80023c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c4:	e00a      	b.n	80023dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	4908      	ldr	r1, [pc, #32]	@ (80023ec <__NVIC_SetPriority+0x50>)
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	3b04      	subs	r3, #4
 80023d4:	0112      	lsls	r2, r2, #4
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	440b      	add	r3, r1
 80023da:	761a      	strb	r2, [r3, #24]
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	e000e100 	.word	0xe000e100
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b089      	sub	sp, #36	@ 0x24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f1c3 0307 	rsb	r3, r3, #7
 800240a:	2b04      	cmp	r3, #4
 800240c:	bf28      	it	cs
 800240e:	2304      	movcs	r3, #4
 8002410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3304      	adds	r3, #4
 8002416:	2b06      	cmp	r3, #6
 8002418:	d902      	bls.n	8002420 <NVIC_EncodePriority+0x30>
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3b03      	subs	r3, #3
 800241e:	e000      	b.n	8002422 <NVIC_EncodePriority+0x32>
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002424:	f04f 32ff 	mov.w	r2, #4294967295
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43da      	mvns	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	401a      	ands	r2, r3
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002438:	f04f 31ff 	mov.w	r1, #4294967295
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	fa01 f303 	lsl.w	r3, r1, r3
 8002442:	43d9      	mvns	r1, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002448:	4313      	orrs	r3, r2
         );
}
 800244a:	4618      	mov	r0, r3
 800244c:	3724      	adds	r7, #36	@ 0x24
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3b01      	subs	r3, #1
 8002460:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002464:	d301      	bcc.n	800246a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002466:	2301      	movs	r3, #1
 8002468:	e00f      	b.n	800248a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800246a:	4a0a      	ldr	r2, [pc, #40]	@ (8002494 <SysTick_Config+0x40>)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3b01      	subs	r3, #1
 8002470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002472:	210f      	movs	r1, #15
 8002474:	f04f 30ff 	mov.w	r0, #4294967295
 8002478:	f7ff ff90 	bl	800239c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800247c:	4b05      	ldr	r3, [pc, #20]	@ (8002494 <SysTick_Config+0x40>)
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002482:	4b04      	ldr	r3, [pc, #16]	@ (8002494 <SysTick_Config+0x40>)
 8002484:	2207      	movs	r2, #7
 8002486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	e000e010 	.word	0xe000e010

08002498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff ff2d 	bl	8002300 <__NVIC_SetPriorityGrouping>
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b086      	sub	sp, #24
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	4603      	mov	r3, r0
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	607a      	str	r2, [r7, #4]
 80024ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024c0:	f7ff ff42 	bl	8002348 <__NVIC_GetPriorityGrouping>
 80024c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	68b9      	ldr	r1, [r7, #8]
 80024ca:	6978      	ldr	r0, [r7, #20]
 80024cc:	f7ff ff90 	bl	80023f0 <NVIC_EncodePriority>
 80024d0:	4602      	mov	r2, r0
 80024d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d6:	4611      	mov	r1, r2
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff ff5f 	bl	800239c <__NVIC_SetPriority>
}
 80024de:	bf00      	nop
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	4603      	mov	r3, r0
 80024ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ff35 	bl	8002364 <__NVIC_EnableIRQ>
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff ffa2 	bl	8002454 <SysTick_Config>
 8002510:	4603      	mov	r3, r0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800251a:	b480      	push	{r7}
 800251c:	b085      	sub	sp, #20
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d008      	beq.n	8002544 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2204      	movs	r2, #4
 8002536:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e020      	b.n	8002586 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 020e 	bic.w	r2, r2, #14
 8002552:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0201 	bic.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800256c:	2101      	movs	r1, #1
 800256e:	fa01 f202 	lsl.w	r2, r1, r2
 8002572:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002584:	7bfb      	ldrb	r3, [r7, #15]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d005      	beq.n	80025b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2204      	movs	r2, #4
 80025ac:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	73fb      	strb	r3, [r7, #15]
 80025b2:	e051      	b.n	8002658 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 020e 	bic.w	r2, r2, #14
 80025c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0201 	bic.w	r2, r2, #1
 80025d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a22      	ldr	r2, [pc, #136]	@ (8002664 <HAL_DMA_Abort_IT+0xd4>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d029      	beq.n	8002632 <HAL_DMA_Abort_IT+0xa2>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a21      	ldr	r2, [pc, #132]	@ (8002668 <HAL_DMA_Abort_IT+0xd8>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d022      	beq.n	800262e <HAL_DMA_Abort_IT+0x9e>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a1f      	ldr	r2, [pc, #124]	@ (800266c <HAL_DMA_Abort_IT+0xdc>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d01a      	beq.n	8002628 <HAL_DMA_Abort_IT+0x98>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a1e      	ldr	r2, [pc, #120]	@ (8002670 <HAL_DMA_Abort_IT+0xe0>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d012      	beq.n	8002622 <HAL_DMA_Abort_IT+0x92>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a1c      	ldr	r2, [pc, #112]	@ (8002674 <HAL_DMA_Abort_IT+0xe4>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d00a      	beq.n	800261c <HAL_DMA_Abort_IT+0x8c>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a1b      	ldr	r2, [pc, #108]	@ (8002678 <HAL_DMA_Abort_IT+0xe8>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d102      	bne.n	8002616 <HAL_DMA_Abort_IT+0x86>
 8002610:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002614:	e00e      	b.n	8002634 <HAL_DMA_Abort_IT+0xa4>
 8002616:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800261a:	e00b      	b.n	8002634 <HAL_DMA_Abort_IT+0xa4>
 800261c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002620:	e008      	b.n	8002634 <HAL_DMA_Abort_IT+0xa4>
 8002622:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002626:	e005      	b.n	8002634 <HAL_DMA_Abort_IT+0xa4>
 8002628:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800262c:	e002      	b.n	8002634 <HAL_DMA_Abort_IT+0xa4>
 800262e:	2310      	movs	r3, #16
 8002630:	e000      	b.n	8002634 <HAL_DMA_Abort_IT+0xa4>
 8002632:	2301      	movs	r3, #1
 8002634:	4a11      	ldr	r2, [pc, #68]	@ (800267c <HAL_DMA_Abort_IT+0xec>)
 8002636:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	4798      	blx	r3
    } 
  }
  return status;
 8002658:	7bfb      	ldrb	r3, [r7, #15]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40020008 	.word	0x40020008
 8002668:	4002001c 	.word	0x4002001c
 800266c:	40020030 	.word	0x40020030
 8002670:	40020044 	.word	0x40020044
 8002674:	40020058 	.word	0x40020058
 8002678:	4002006c 	.word	0x4002006c
 800267c:	40020000 	.word	0x40020000

08002680 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002680:	b480      	push	{r7}
 8002682:	b08b      	sub	sp, #44	@ 0x2c
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800268a:	2300      	movs	r3, #0
 800268c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800268e:	2300      	movs	r3, #0
 8002690:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002692:	e169      	b.n	8002968 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002694:	2201      	movs	r2, #1
 8002696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	69fa      	ldr	r2, [r7, #28]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	f040 8158 	bne.w	8002962 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	4a9a      	ldr	r2, [pc, #616]	@ (8002920 <HAL_GPIO_Init+0x2a0>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d05e      	beq.n	800277a <HAL_GPIO_Init+0xfa>
 80026bc:	4a98      	ldr	r2, [pc, #608]	@ (8002920 <HAL_GPIO_Init+0x2a0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d875      	bhi.n	80027ae <HAL_GPIO_Init+0x12e>
 80026c2:	4a98      	ldr	r2, [pc, #608]	@ (8002924 <HAL_GPIO_Init+0x2a4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d058      	beq.n	800277a <HAL_GPIO_Init+0xfa>
 80026c8:	4a96      	ldr	r2, [pc, #600]	@ (8002924 <HAL_GPIO_Init+0x2a4>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d86f      	bhi.n	80027ae <HAL_GPIO_Init+0x12e>
 80026ce:	4a96      	ldr	r2, [pc, #600]	@ (8002928 <HAL_GPIO_Init+0x2a8>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d052      	beq.n	800277a <HAL_GPIO_Init+0xfa>
 80026d4:	4a94      	ldr	r2, [pc, #592]	@ (8002928 <HAL_GPIO_Init+0x2a8>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d869      	bhi.n	80027ae <HAL_GPIO_Init+0x12e>
 80026da:	4a94      	ldr	r2, [pc, #592]	@ (800292c <HAL_GPIO_Init+0x2ac>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d04c      	beq.n	800277a <HAL_GPIO_Init+0xfa>
 80026e0:	4a92      	ldr	r2, [pc, #584]	@ (800292c <HAL_GPIO_Init+0x2ac>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d863      	bhi.n	80027ae <HAL_GPIO_Init+0x12e>
 80026e6:	4a92      	ldr	r2, [pc, #584]	@ (8002930 <HAL_GPIO_Init+0x2b0>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d046      	beq.n	800277a <HAL_GPIO_Init+0xfa>
 80026ec:	4a90      	ldr	r2, [pc, #576]	@ (8002930 <HAL_GPIO_Init+0x2b0>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d85d      	bhi.n	80027ae <HAL_GPIO_Init+0x12e>
 80026f2:	2b12      	cmp	r3, #18
 80026f4:	d82a      	bhi.n	800274c <HAL_GPIO_Init+0xcc>
 80026f6:	2b12      	cmp	r3, #18
 80026f8:	d859      	bhi.n	80027ae <HAL_GPIO_Init+0x12e>
 80026fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002700 <HAL_GPIO_Init+0x80>)
 80026fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002700:	0800277b 	.word	0x0800277b
 8002704:	08002755 	.word	0x08002755
 8002708:	08002767 	.word	0x08002767
 800270c:	080027a9 	.word	0x080027a9
 8002710:	080027af 	.word	0x080027af
 8002714:	080027af 	.word	0x080027af
 8002718:	080027af 	.word	0x080027af
 800271c:	080027af 	.word	0x080027af
 8002720:	080027af 	.word	0x080027af
 8002724:	080027af 	.word	0x080027af
 8002728:	080027af 	.word	0x080027af
 800272c:	080027af 	.word	0x080027af
 8002730:	080027af 	.word	0x080027af
 8002734:	080027af 	.word	0x080027af
 8002738:	080027af 	.word	0x080027af
 800273c:	080027af 	.word	0x080027af
 8002740:	080027af 	.word	0x080027af
 8002744:	0800275d 	.word	0x0800275d
 8002748:	08002771 	.word	0x08002771
 800274c:	4a79      	ldr	r2, [pc, #484]	@ (8002934 <HAL_GPIO_Init+0x2b4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d013      	beq.n	800277a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002752:	e02c      	b.n	80027ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	623b      	str	r3, [r7, #32]
          break;
 800275a:	e029      	b.n	80027b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	3304      	adds	r3, #4
 8002762:	623b      	str	r3, [r7, #32]
          break;
 8002764:	e024      	b.n	80027b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	3308      	adds	r3, #8
 800276c:	623b      	str	r3, [r7, #32]
          break;
 800276e:	e01f      	b.n	80027b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	330c      	adds	r3, #12
 8002776:	623b      	str	r3, [r7, #32]
          break;
 8002778:	e01a      	b.n	80027b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d102      	bne.n	8002788 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002782:	2304      	movs	r3, #4
 8002784:	623b      	str	r3, [r7, #32]
          break;
 8002786:	e013      	b.n	80027b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d105      	bne.n	800279c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002790:	2308      	movs	r3, #8
 8002792:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	69fa      	ldr	r2, [r7, #28]
 8002798:	611a      	str	r2, [r3, #16]
          break;
 800279a:	e009      	b.n	80027b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800279c:	2308      	movs	r3, #8
 800279e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69fa      	ldr	r2, [r7, #28]
 80027a4:	615a      	str	r2, [r3, #20]
          break;
 80027a6:	e003      	b.n	80027b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027a8:	2300      	movs	r3, #0
 80027aa:	623b      	str	r3, [r7, #32]
          break;
 80027ac:	e000      	b.n	80027b0 <HAL_GPIO_Init+0x130>
          break;
 80027ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	2bff      	cmp	r3, #255	@ 0xff
 80027b4:	d801      	bhi.n	80027ba <HAL_GPIO_Init+0x13a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	e001      	b.n	80027be <HAL_GPIO_Init+0x13e>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	3304      	adds	r3, #4
 80027be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	2bff      	cmp	r3, #255	@ 0xff
 80027c4:	d802      	bhi.n	80027cc <HAL_GPIO_Init+0x14c>
 80027c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	e002      	b.n	80027d2 <HAL_GPIO_Init+0x152>
 80027cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ce:	3b08      	subs	r3, #8
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	210f      	movs	r1, #15
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	fa01 f303 	lsl.w	r3, r1, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	401a      	ands	r2, r3
 80027e4:	6a39      	ldr	r1, [r7, #32]
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ec:	431a      	orrs	r2, r3
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 80b1 	beq.w	8002962 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002800:	4b4d      	ldr	r3, [pc, #308]	@ (8002938 <HAL_GPIO_Init+0x2b8>)
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	4a4c      	ldr	r2, [pc, #304]	@ (8002938 <HAL_GPIO_Init+0x2b8>)
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	6193      	str	r3, [r2, #24]
 800280c:	4b4a      	ldr	r3, [pc, #296]	@ (8002938 <HAL_GPIO_Init+0x2b8>)
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002818:	4a48      	ldr	r2, [pc, #288]	@ (800293c <HAL_GPIO_Init+0x2bc>)
 800281a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281c:	089b      	lsrs	r3, r3, #2
 800281e:	3302      	adds	r3, #2
 8002820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002824:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	220f      	movs	r2, #15
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4013      	ands	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a40      	ldr	r2, [pc, #256]	@ (8002940 <HAL_GPIO_Init+0x2c0>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d013      	beq.n	800286c <HAL_GPIO_Init+0x1ec>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a3f      	ldr	r2, [pc, #252]	@ (8002944 <HAL_GPIO_Init+0x2c4>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d00d      	beq.n	8002868 <HAL_GPIO_Init+0x1e8>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a3e      	ldr	r2, [pc, #248]	@ (8002948 <HAL_GPIO_Init+0x2c8>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d007      	beq.n	8002864 <HAL_GPIO_Init+0x1e4>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a3d      	ldr	r2, [pc, #244]	@ (800294c <HAL_GPIO_Init+0x2cc>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d101      	bne.n	8002860 <HAL_GPIO_Init+0x1e0>
 800285c:	2303      	movs	r3, #3
 800285e:	e006      	b.n	800286e <HAL_GPIO_Init+0x1ee>
 8002860:	2304      	movs	r3, #4
 8002862:	e004      	b.n	800286e <HAL_GPIO_Init+0x1ee>
 8002864:	2302      	movs	r3, #2
 8002866:	e002      	b.n	800286e <HAL_GPIO_Init+0x1ee>
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <HAL_GPIO_Init+0x1ee>
 800286c:	2300      	movs	r3, #0
 800286e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002870:	f002 0203 	and.w	r2, r2, #3
 8002874:	0092      	lsls	r2, r2, #2
 8002876:	4093      	lsls	r3, r2
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	4313      	orrs	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800287e:	492f      	ldr	r1, [pc, #188]	@ (800293c <HAL_GPIO_Init+0x2bc>)
 8002880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002882:	089b      	lsrs	r3, r3, #2
 8002884:	3302      	adds	r3, #2
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d006      	beq.n	80028a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002898:	4b2d      	ldr	r3, [pc, #180]	@ (8002950 <HAL_GPIO_Init+0x2d0>)
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	492c      	ldr	r1, [pc, #176]	@ (8002950 <HAL_GPIO_Init+0x2d0>)
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	608b      	str	r3, [r1, #8]
 80028a4:	e006      	b.n	80028b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002950 <HAL_GPIO_Init+0x2d0>)
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	43db      	mvns	r3, r3
 80028ae:	4928      	ldr	r1, [pc, #160]	@ (8002950 <HAL_GPIO_Init+0x2d0>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d006      	beq.n	80028ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028c0:	4b23      	ldr	r3, [pc, #140]	@ (8002950 <HAL_GPIO_Init+0x2d0>)
 80028c2:	68da      	ldr	r2, [r3, #12]
 80028c4:	4922      	ldr	r1, [pc, #136]	@ (8002950 <HAL_GPIO_Init+0x2d0>)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	60cb      	str	r3, [r1, #12]
 80028cc:	e006      	b.n	80028dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028ce:	4b20      	ldr	r3, [pc, #128]	@ (8002950 <HAL_GPIO_Init+0x2d0>)
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	43db      	mvns	r3, r3
 80028d6:	491e      	ldr	r1, [pc, #120]	@ (8002950 <HAL_GPIO_Init+0x2d0>)
 80028d8:	4013      	ands	r3, r2
 80028da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d006      	beq.n	80028f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028e8:	4b19      	ldr	r3, [pc, #100]	@ (8002950 <HAL_GPIO_Init+0x2d0>)
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	4918      	ldr	r1, [pc, #96]	@ (8002950 <HAL_GPIO_Init+0x2d0>)
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	604b      	str	r3, [r1, #4]
 80028f4:	e006      	b.n	8002904 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028f6:	4b16      	ldr	r3, [pc, #88]	@ (8002950 <HAL_GPIO_Init+0x2d0>)
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	43db      	mvns	r3, r3
 80028fe:	4914      	ldr	r1, [pc, #80]	@ (8002950 <HAL_GPIO_Init+0x2d0>)
 8002900:	4013      	ands	r3, r2
 8002902:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d021      	beq.n	8002954 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002910:	4b0f      	ldr	r3, [pc, #60]	@ (8002950 <HAL_GPIO_Init+0x2d0>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	490e      	ldr	r1, [pc, #56]	@ (8002950 <HAL_GPIO_Init+0x2d0>)
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	4313      	orrs	r3, r2
 800291a:	600b      	str	r3, [r1, #0]
 800291c:	e021      	b.n	8002962 <HAL_GPIO_Init+0x2e2>
 800291e:	bf00      	nop
 8002920:	10320000 	.word	0x10320000
 8002924:	10310000 	.word	0x10310000
 8002928:	10220000 	.word	0x10220000
 800292c:	10210000 	.word	0x10210000
 8002930:	10120000 	.word	0x10120000
 8002934:	10110000 	.word	0x10110000
 8002938:	40021000 	.word	0x40021000
 800293c:	40010000 	.word	0x40010000
 8002940:	40010800 	.word	0x40010800
 8002944:	40010c00 	.word	0x40010c00
 8002948:	40011000 	.word	0x40011000
 800294c:	40011400 	.word	0x40011400
 8002950:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002954:	4b0b      	ldr	r3, [pc, #44]	@ (8002984 <HAL_GPIO_Init+0x304>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	43db      	mvns	r3, r3
 800295c:	4909      	ldr	r1, [pc, #36]	@ (8002984 <HAL_GPIO_Init+0x304>)
 800295e:	4013      	ands	r3, r2
 8002960:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002964:	3301      	adds	r3, #1
 8002966:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296e:	fa22 f303 	lsr.w	r3, r2, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	f47f ae8e 	bne.w	8002694 <HAL_GPIO_Init+0x14>
  }
}
 8002978:	bf00      	nop
 800297a:	bf00      	nop
 800297c:	372c      	adds	r7, #44	@ 0x2c
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr
 8002984:	40010400 	.word	0x40010400

08002988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	807b      	strh	r3, [r7, #2]
 8002994:	4613      	mov	r3, r2
 8002996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002998:	787b      	ldrb	r3, [r7, #1]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800299e:	887a      	ldrh	r2, [r7, #2]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029a4:	e003      	b.n	80029ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029a6:	887b      	ldrh	r3, [r7, #2]
 80029a8:	041a      	lsls	r2, r3, #16
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	611a      	str	r2, [r3, #16]
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr

080029b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029c2:	4b08      	ldr	r3, [pc, #32]	@ (80029e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029c4:	695a      	ldr	r2, [r3, #20]
 80029c6:	88fb      	ldrh	r3, [r7, #6]
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d006      	beq.n	80029dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029ce:	4a05      	ldr	r2, [pc, #20]	@ (80029e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029d4:	88fb      	ldrh	r3, [r7, #6]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fe fedc 	bl	8001794 <HAL_GPIO_EXTI_Callback>
  }
}
 80029dc:	bf00      	nop
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40010400 	.word	0x40010400

080029e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e12b      	b.n	8002c52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d106      	bne.n	8002a14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff f9dc 	bl	8001dcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2224      	movs	r2, #36	@ 0x24
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0201 	bic.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a4c:	f001 f960 	bl	8003d10 <HAL_RCC_GetPCLK1Freq>
 8002a50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	4a81      	ldr	r2, [pc, #516]	@ (8002c5c <HAL_I2C_Init+0x274>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d807      	bhi.n	8002a6c <HAL_I2C_Init+0x84>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4a80      	ldr	r2, [pc, #512]	@ (8002c60 <HAL_I2C_Init+0x278>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	bf94      	ite	ls
 8002a64:	2301      	movls	r3, #1
 8002a66:	2300      	movhi	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	e006      	b.n	8002a7a <HAL_I2C_Init+0x92>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4a7d      	ldr	r2, [pc, #500]	@ (8002c64 <HAL_I2C_Init+0x27c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	bf94      	ite	ls
 8002a74:	2301      	movls	r3, #1
 8002a76:	2300      	movhi	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e0e7      	b.n	8002c52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4a78      	ldr	r2, [pc, #480]	@ (8002c68 <HAL_I2C_Init+0x280>)
 8002a86:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8a:	0c9b      	lsrs	r3, r3, #18
 8002a8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	4a6a      	ldr	r2, [pc, #424]	@ (8002c5c <HAL_I2C_Init+0x274>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d802      	bhi.n	8002abc <HAL_I2C_Init+0xd4>
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	e009      	b.n	8002ad0 <HAL_I2C_Init+0xe8>
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002ac2:	fb02 f303 	mul.w	r3, r2, r3
 8002ac6:	4a69      	ldr	r2, [pc, #420]	@ (8002c6c <HAL_I2C_Init+0x284>)
 8002ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8002acc:	099b      	lsrs	r3, r3, #6
 8002ace:	3301      	adds	r3, #1
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6812      	ldr	r2, [r2, #0]
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ae2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	495c      	ldr	r1, [pc, #368]	@ (8002c5c <HAL_I2C_Init+0x274>)
 8002aec:	428b      	cmp	r3, r1
 8002aee:	d819      	bhi.n	8002b24 <HAL_I2C_Init+0x13c>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	1e59      	subs	r1, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002afe:	1c59      	adds	r1, r3, #1
 8002b00:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b04:	400b      	ands	r3, r1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00a      	beq.n	8002b20 <HAL_I2C_Init+0x138>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1e59      	subs	r1, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b18:	3301      	adds	r3, #1
 8002b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b1e:	e051      	b.n	8002bc4 <HAL_I2C_Init+0x1dc>
 8002b20:	2304      	movs	r3, #4
 8002b22:	e04f      	b.n	8002bc4 <HAL_I2C_Init+0x1dc>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d111      	bne.n	8002b50 <HAL_I2C_Init+0x168>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1e58      	subs	r0, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6859      	ldr	r1, [r3, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	440b      	add	r3, r1
 8002b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b3e:	3301      	adds	r3, #1
 8002b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	bf0c      	ite	eq
 8002b48:	2301      	moveq	r3, #1
 8002b4a:	2300      	movne	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	e012      	b.n	8002b76 <HAL_I2C_Init+0x18e>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	1e58      	subs	r0, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6859      	ldr	r1, [r3, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	0099      	lsls	r1, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b66:	3301      	adds	r3, #1
 8002b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	bf0c      	ite	eq
 8002b70:	2301      	moveq	r3, #1
 8002b72:	2300      	movne	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_I2C_Init+0x196>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e022      	b.n	8002bc4 <HAL_I2C_Init+0x1dc>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10e      	bne.n	8002ba4 <HAL_I2C_Init+0x1bc>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	1e58      	subs	r0, r3, #1
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6859      	ldr	r1, [r3, #4]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	440b      	add	r3, r1
 8002b94:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b98:	3301      	adds	r3, #1
 8002b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ba2:	e00f      	b.n	8002bc4 <HAL_I2C_Init+0x1dc>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	1e58      	subs	r0, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6859      	ldr	r1, [r3, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	0099      	lsls	r1, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bba:	3301      	adds	r3, #1
 8002bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	6809      	ldr	r1, [r1, #0]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69da      	ldr	r2, [r3, #28]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002bf2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6911      	ldr	r1, [r2, #16]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	68d2      	ldr	r2, [r2, #12]
 8002bfe:	4311      	orrs	r1, r2
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	430b      	orrs	r3, r1
 8002c06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	000186a0 	.word	0x000186a0
 8002c60:	001e847f 	.word	0x001e847f
 8002c64:	003d08ff 	.word	0x003d08ff
 8002c68:	431bde83 	.word	0x431bde83
 8002c6c:	10624dd3 	.word	0x10624dd3

08002c70 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	af02      	add	r7, sp, #8
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	607a      	str	r2, [r7, #4]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	817b      	strh	r3, [r7, #10]
 8002c80:	4613      	mov	r3, r2
 8002c82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c84:	f7ff fb0e 	bl	80022a4 <HAL_GetTick>
 8002c88:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	f040 80e0 	bne.w	8002e58 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	2319      	movs	r3, #25
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	4970      	ldr	r1, [pc, #448]	@ (8002e64 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 fa92 	bl	80031cc <I2C_WaitOnFlagUntilTimeout>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e0d3      	b.n	8002e5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_I2C_Master_Transmit+0x50>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e0cc      	b.n	8002e5a <HAL_I2C_Master_Transmit+0x1ea>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d007      	beq.n	8002ce6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f042 0201 	orr.w	r2, r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cf4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2221      	movs	r2, #33	@ 0x21
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2210      	movs	r2, #16
 8002d02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	893a      	ldrh	r2, [r7, #8]
 8002d16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4a50      	ldr	r2, [pc, #320]	@ (8002e68 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d26:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d28:	8979      	ldrh	r1, [r7, #10]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	6a3a      	ldr	r2, [r7, #32]
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f9ca 	bl	80030c8 <I2C_MasterRequestWrite>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e08d      	b.n	8002e5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d54:	e066      	b.n	8002e24 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	6a39      	ldr	r1, [r7, #32]
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 fb50 	bl	8003400 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00d      	beq.n	8002d82 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d107      	bne.n	8002d7e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e06b      	b.n	8002e5a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d86:	781a      	ldrb	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d11b      	bne.n	8002df8 <HAL_I2C_Master_Transmit+0x188>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d017      	beq.n	8002df8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dcc:	781a      	ldrb	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	3b01      	subs	r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	6a39      	ldr	r1, [r7, #32]
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 fb47 	bl	8003490 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00d      	beq.n	8002e24 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d107      	bne.n	8002e20 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e1e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e01a      	b.n	8002e5a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d194      	bne.n	8002d56 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	e000      	b.n	8002e5a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e58:	2302      	movs	r3, #2
  }
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	00100002 	.word	0x00100002
 8002e68:	ffff0000 	.word	0xffff0000

08002e6c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08a      	sub	sp, #40	@ 0x28
 8002e70:	af02      	add	r7, sp, #8
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	607a      	str	r2, [r7, #4]
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002e7c:	f7ff fa12 	bl	80022a4 <HAL_GetTick>
 8002e80:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b20      	cmp	r3, #32
 8002e90:	f040 8111 	bne.w	80030b6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	2319      	movs	r3, #25
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	4988      	ldr	r1, [pc, #544]	@ (80030c0 <HAL_I2C_IsDeviceReady+0x254>)
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f994 	bl	80031cc <I2C_WaitOnFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e104      	b.n	80030b8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_I2C_IsDeviceReady+0x50>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e0fd      	b.n	80030b8 <HAL_I2C_IsDeviceReady+0x24c>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d007      	beq.n	8002ee2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0201 	orr.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ef0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2224      	movs	r2, #36	@ 0x24
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4a70      	ldr	r2, [pc, #448]	@ (80030c4 <HAL_I2C_IsDeviceReady+0x258>)
 8002f04:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f14:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 f952 	bl	80031cc <I2C_WaitOnFlagUntilTimeout>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00d      	beq.n	8002f4a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f3c:	d103      	bne.n	8002f46 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f44:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e0b6      	b.n	80030b8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f4a:	897b      	ldrh	r3, [r7, #10]
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	461a      	mov	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f58:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002f5a:	f7ff f9a3 	bl	80022a4 <HAL_GetTick>
 8002f5e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	bf0c      	ite	eq
 8002f6e:	2301      	moveq	r3, #1
 8002f70:	2300      	movne	r3, #0
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f84:	bf0c      	ite	eq
 8002f86:	2301      	moveq	r3, #1
 8002f88:	2300      	movne	r3, #0
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f8e:	e025      	b.n	8002fdc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f90:	f7ff f988 	bl	80022a4 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d302      	bcc.n	8002fa6 <HAL_I2C_IsDeviceReady+0x13a>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d103      	bne.n	8002fae <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	22a0      	movs	r2, #160	@ 0xa0
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	bf0c      	ite	eq
 8002fbc:	2301      	moveq	r3, #1
 8002fbe:	2300      	movne	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fd2:	bf0c      	ite	eq
 8002fd4:	2301      	moveq	r3, #1
 8002fd6:	2300      	movne	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2ba0      	cmp	r3, #160	@ 0xa0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_I2C_IsDeviceReady+0x188>
 8002fe8:	7dfb      	ldrb	r3, [r7, #23]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d102      	bne.n	8002ff4 <HAL_I2C_IsDeviceReady+0x188>
 8002fee:	7dbb      	ldrb	r3, [r7, #22]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0cd      	beq.n	8002f90 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b02      	cmp	r3, #2
 8003008:	d129      	bne.n	800305e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003018:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	2319      	movs	r3, #25
 8003036:	2201      	movs	r2, #1
 8003038:	4921      	ldr	r1, [pc, #132]	@ (80030c0 <HAL_I2C_IsDeviceReady+0x254>)
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 f8c6 	bl	80031cc <I2C_WaitOnFlagUntilTimeout>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e036      	b.n	80030b8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2220      	movs	r2, #32
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800305a:	2300      	movs	r3, #0
 800305c:	e02c      	b.n	80030b8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800306c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003076:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	2319      	movs	r3, #25
 800307e:	2201      	movs	r2, #1
 8003080:	490f      	ldr	r1, [pc, #60]	@ (80030c0 <HAL_I2C_IsDeviceReady+0x254>)
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 f8a2 	bl	80031cc <I2C_WaitOnFlagUntilTimeout>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e012      	b.n	80030b8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	3301      	adds	r3, #1
 8003096:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	429a      	cmp	r2, r3
 800309e:	f4ff af32 	bcc.w	8002f06 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80030b6:	2302      	movs	r3, #2
  }
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3720      	adds	r7, #32
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	00100002 	.word	0x00100002
 80030c4:	ffff0000 	.word	0xffff0000

080030c8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af02      	add	r7, sp, #8
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	607a      	str	r2, [r7, #4]
 80030d2:	603b      	str	r3, [r7, #0]
 80030d4:	460b      	mov	r3, r1
 80030d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030dc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d006      	beq.n	80030f2 <I2C_MasterRequestWrite+0x2a>
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d003      	beq.n	80030f2 <I2C_MasterRequestWrite+0x2a>
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80030f0:	d108      	bne.n	8003104 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	e00b      	b.n	800311c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003108:	2b12      	cmp	r3, #18
 800310a:	d107      	bne.n	800311c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800311a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 f84f 	bl	80031cc <I2C_WaitOnFlagUntilTimeout>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00d      	beq.n	8003150 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800313e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003142:	d103      	bne.n	800314c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800314a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e035      	b.n	80031bc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003158:	d108      	bne.n	800316c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800315a:	897b      	ldrh	r3, [r7, #10]
 800315c:	b2db      	uxtb	r3, r3
 800315e:	461a      	mov	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003168:	611a      	str	r2, [r3, #16]
 800316a:	e01b      	b.n	80031a4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800316c:	897b      	ldrh	r3, [r7, #10]
 800316e:	11db      	asrs	r3, r3, #7
 8003170:	b2db      	uxtb	r3, r3
 8003172:	f003 0306 	and.w	r3, r3, #6
 8003176:	b2db      	uxtb	r3, r3
 8003178:	f063 030f 	orn	r3, r3, #15
 800317c:	b2da      	uxtb	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	490e      	ldr	r1, [pc, #56]	@ (80031c4 <I2C_MasterRequestWrite+0xfc>)
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 f898 	bl	80032c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e010      	b.n	80031bc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800319a:	897b      	ldrh	r3, [r7, #10]
 800319c:	b2da      	uxtb	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	4907      	ldr	r1, [pc, #28]	@ (80031c8 <I2C_MasterRequestWrite+0x100>)
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f888 	bl	80032c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3718      	adds	r7, #24
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	00010008 	.word	0x00010008
 80031c8:	00010002 	.word	0x00010002

080031cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	603b      	str	r3, [r7, #0]
 80031d8:	4613      	mov	r3, r2
 80031da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031dc:	e048      	b.n	8003270 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e4:	d044      	beq.n	8003270 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e6:	f7ff f85d 	bl	80022a4 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d302      	bcc.n	80031fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d139      	bne.n	8003270 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	0c1b      	lsrs	r3, r3, #16
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b01      	cmp	r3, #1
 8003204:	d10d      	bne.n	8003222 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	43da      	mvns	r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	4013      	ands	r3, r2
 8003212:	b29b      	uxth	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	bf0c      	ite	eq
 8003218:	2301      	moveq	r3, #1
 800321a:	2300      	movne	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	461a      	mov	r2, r3
 8003220:	e00c      	b.n	800323c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	43da      	mvns	r2, r3
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	4013      	ands	r3, r2
 800322e:	b29b      	uxth	r3, r3
 8003230:	2b00      	cmp	r3, #0
 8003232:	bf0c      	ite	eq
 8003234:	2301      	moveq	r3, #1
 8003236:	2300      	movne	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	461a      	mov	r2, r3
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	429a      	cmp	r2, r3
 8003240:	d116      	bne.n	8003270 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325c:	f043 0220 	orr.w	r2, r3, #32
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e023      	b.n	80032b8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	0c1b      	lsrs	r3, r3, #16
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b01      	cmp	r3, #1
 8003278:	d10d      	bne.n	8003296 <I2C_WaitOnFlagUntilTimeout+0xca>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	43da      	mvns	r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	4013      	ands	r3, r2
 8003286:	b29b      	uxth	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	bf0c      	ite	eq
 800328c:	2301      	moveq	r3, #1
 800328e:	2300      	movne	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	e00c      	b.n	80032b0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	43da      	mvns	r2, r3
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	4013      	ands	r3, r2
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	bf0c      	ite	eq
 80032a8:	2301      	moveq	r3, #1
 80032aa:	2300      	movne	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	461a      	mov	r2, r3
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d093      	beq.n	80031de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
 80032cc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032ce:	e071      	b.n	80033b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032de:	d123      	bne.n	8003328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003314:	f043 0204 	orr.w	r2, r3, #4
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e067      	b.n	80033f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332e:	d041      	beq.n	80033b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003330:	f7fe ffb8 	bl	80022a4 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	429a      	cmp	r2, r3
 800333e:	d302      	bcc.n	8003346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d136      	bne.n	80033b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	0c1b      	lsrs	r3, r3, #16
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b01      	cmp	r3, #1
 800334e:	d10c      	bne.n	800336a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	43da      	mvns	r2, r3
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	4013      	ands	r3, r2
 800335c:	b29b      	uxth	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	bf14      	ite	ne
 8003362:	2301      	movne	r3, #1
 8003364:	2300      	moveq	r3, #0
 8003366:	b2db      	uxtb	r3, r3
 8003368:	e00b      	b.n	8003382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	43da      	mvns	r2, r3
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	4013      	ands	r3, r2
 8003376:	b29b      	uxth	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	bf14      	ite	ne
 800337c:	2301      	movne	r3, #1
 800337e:	2300      	moveq	r3, #0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d016      	beq.n	80033b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a0:	f043 0220 	orr.w	r2, r3, #32
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e021      	b.n	80033f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	0c1b      	lsrs	r3, r3, #16
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d10c      	bne.n	80033d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	43da      	mvns	r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	4013      	ands	r3, r2
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	bf14      	ite	ne
 80033d0:	2301      	movne	r3, #1
 80033d2:	2300      	moveq	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	e00b      	b.n	80033f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	43da      	mvns	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	4013      	ands	r3, r2
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	bf14      	ite	ne
 80033ea:	2301      	movne	r3, #1
 80033ec:	2300      	moveq	r3, #0
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f47f af6d 	bne.w	80032d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800340c:	e034      	b.n	8003478 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 f886 	bl	8003520 <I2C_IsAcknowledgeFailed>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e034      	b.n	8003488 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003424:	d028      	beq.n	8003478 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003426:	f7fe ff3d 	bl	80022a4 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	429a      	cmp	r2, r3
 8003434:	d302      	bcc.n	800343c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d11d      	bne.n	8003478 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003446:	2b80      	cmp	r3, #128	@ 0x80
 8003448:	d016      	beq.n	8003478 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003464:	f043 0220 	orr.w	r2, r3, #32
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e007      	b.n	8003488 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003482:	2b80      	cmp	r3, #128	@ 0x80
 8003484:	d1c3      	bne.n	800340e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800349c:	e034      	b.n	8003508 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f83e 	bl	8003520 <I2C_IsAcknowledgeFailed>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e034      	b.n	8003518 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b4:	d028      	beq.n	8003508 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b6:	f7fe fef5 	bl	80022a4 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d302      	bcc.n	80034cc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d11d      	bne.n	8003508 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d016      	beq.n	8003508 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f4:	f043 0220 	orr.w	r2, r3, #32
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e007      	b.n	8003518 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	f003 0304 	and.w	r3, r3, #4
 8003512:	2b04      	cmp	r3, #4
 8003514:	d1c3      	bne.n	800349e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003536:	d11b      	bne.n	8003570 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003540:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2220      	movs	r2, #32
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355c:	f043 0204 	orr.w	r2, r3, #4
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr

0800357c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e272      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 8087 	beq.w	80036aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800359c:	4b92      	ldr	r3, [pc, #584]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f003 030c 	and.w	r3, r3, #12
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d00c      	beq.n	80035c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035a8:	4b8f      	ldr	r3, [pc, #572]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 030c 	and.w	r3, r3, #12
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d112      	bne.n	80035da <HAL_RCC_OscConfig+0x5e>
 80035b4:	4b8c      	ldr	r3, [pc, #560]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035c0:	d10b      	bne.n	80035da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c2:	4b89      	ldr	r3, [pc, #548]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d06c      	beq.n	80036a8 <HAL_RCC_OscConfig+0x12c>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d168      	bne.n	80036a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e24c      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035e2:	d106      	bne.n	80035f2 <HAL_RCC_OscConfig+0x76>
 80035e4:	4b80      	ldr	r3, [pc, #512]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a7f      	ldr	r2, [pc, #508]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 80035ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	e02e      	b.n	8003650 <HAL_RCC_OscConfig+0xd4>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10c      	bne.n	8003614 <HAL_RCC_OscConfig+0x98>
 80035fa:	4b7b      	ldr	r3, [pc, #492]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a7a      	ldr	r2, [pc, #488]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 8003600:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	4b78      	ldr	r3, [pc, #480]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a77      	ldr	r2, [pc, #476]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 800360c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	e01d      	b.n	8003650 <HAL_RCC_OscConfig+0xd4>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800361c:	d10c      	bne.n	8003638 <HAL_RCC_OscConfig+0xbc>
 800361e:	4b72      	ldr	r3, [pc, #456]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a71      	ldr	r2, [pc, #452]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 8003624:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	4b6f      	ldr	r3, [pc, #444]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a6e      	ldr	r2, [pc, #440]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 8003630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	e00b      	b.n	8003650 <HAL_RCC_OscConfig+0xd4>
 8003638:	4b6b      	ldr	r3, [pc, #428]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a6a      	ldr	r2, [pc, #424]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 800363e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	4b68      	ldr	r3, [pc, #416]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a67      	ldr	r2, [pc, #412]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 800364a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800364e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d013      	beq.n	8003680 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003658:	f7fe fe24 	bl	80022a4 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003660:	f7fe fe20 	bl	80022a4 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b64      	cmp	r3, #100	@ 0x64
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e200      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003672:	4b5d      	ldr	r3, [pc, #372]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f0      	beq.n	8003660 <HAL_RCC_OscConfig+0xe4>
 800367e:	e014      	b.n	80036aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003680:	f7fe fe10 	bl	80022a4 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003688:	f7fe fe0c 	bl	80022a4 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b64      	cmp	r3, #100	@ 0x64
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e1ec      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800369a:	4b53      	ldr	r3, [pc, #332]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f0      	bne.n	8003688 <HAL_RCC_OscConfig+0x10c>
 80036a6:	e000      	b.n	80036aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d063      	beq.n	800377e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036b6:	4b4c      	ldr	r3, [pc, #304]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f003 030c 	and.w	r3, r3, #12
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00b      	beq.n	80036da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036c2:	4b49      	ldr	r3, [pc, #292]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d11c      	bne.n	8003708 <HAL_RCC_OscConfig+0x18c>
 80036ce:	4b46      	ldr	r3, [pc, #280]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d116      	bne.n	8003708 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036da:	4b43      	ldr	r3, [pc, #268]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d005      	beq.n	80036f2 <HAL_RCC_OscConfig+0x176>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d001      	beq.n	80036f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e1c0      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f2:	4b3d      	ldr	r3, [pc, #244]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4939      	ldr	r1, [pc, #228]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 8003702:	4313      	orrs	r3, r2
 8003704:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003706:	e03a      	b.n	800377e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d020      	beq.n	8003752 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003710:	4b36      	ldr	r3, [pc, #216]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 8003712:	2201      	movs	r2, #1
 8003714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003716:	f7fe fdc5 	bl	80022a4 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800371e:	f7fe fdc1 	bl	80022a4 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e1a1      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003730:	4b2d      	ldr	r3, [pc, #180]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0f0      	beq.n	800371e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373c:	4b2a      	ldr	r3, [pc, #168]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	4927      	ldr	r1, [pc, #156]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 800374c:	4313      	orrs	r3, r2
 800374e:	600b      	str	r3, [r1, #0]
 8003750:	e015      	b.n	800377e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003752:	4b26      	ldr	r3, [pc, #152]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003758:	f7fe fda4 	bl	80022a4 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003760:	f7fe fda0 	bl	80022a4 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e180      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003772:	4b1d      	ldr	r3, [pc, #116]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d03a      	beq.n	8003800 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d019      	beq.n	80037c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003792:	4b17      	ldr	r3, [pc, #92]	@ (80037f0 <HAL_RCC_OscConfig+0x274>)
 8003794:	2201      	movs	r2, #1
 8003796:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003798:	f7fe fd84 	bl	80022a4 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037a0:	f7fe fd80 	bl	80022a4 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e160      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037b2:	4b0d      	ldr	r3, [pc, #52]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 80037b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80037be:	2001      	movs	r0, #1
 80037c0:	f000 face 	bl	8003d60 <RCC_Delay>
 80037c4:	e01c      	b.n	8003800 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037c6:	4b0a      	ldr	r3, [pc, #40]	@ (80037f0 <HAL_RCC_OscConfig+0x274>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037cc:	f7fe fd6a 	bl	80022a4 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d2:	e00f      	b.n	80037f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037d4:	f7fe fd66 	bl	80022a4 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d908      	bls.n	80037f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e146      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
 80037e6:	bf00      	nop
 80037e8:	40021000 	.word	0x40021000
 80037ec:	42420000 	.word	0x42420000
 80037f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f4:	4b92      	ldr	r3, [pc, #584]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80037f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1e9      	bne.n	80037d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 80a6 	beq.w	800395a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800380e:	2300      	movs	r3, #0
 8003810:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003812:	4b8b      	ldr	r3, [pc, #556]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10d      	bne.n	800383a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800381e:	4b88      	ldr	r3, [pc, #544]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	4a87      	ldr	r2, [pc, #540]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 8003824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003828:	61d3      	str	r3, [r2, #28]
 800382a:	4b85      	ldr	r3, [pc, #532]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003832:	60bb      	str	r3, [r7, #8]
 8003834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003836:	2301      	movs	r3, #1
 8003838:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383a:	4b82      	ldr	r3, [pc, #520]	@ (8003a44 <HAL_RCC_OscConfig+0x4c8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003842:	2b00      	cmp	r3, #0
 8003844:	d118      	bne.n	8003878 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003846:	4b7f      	ldr	r3, [pc, #508]	@ (8003a44 <HAL_RCC_OscConfig+0x4c8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a7e      	ldr	r2, [pc, #504]	@ (8003a44 <HAL_RCC_OscConfig+0x4c8>)
 800384c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003850:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003852:	f7fe fd27 	bl	80022a4 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800385a:	f7fe fd23 	bl	80022a4 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b64      	cmp	r3, #100	@ 0x64
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e103      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386c:	4b75      	ldr	r3, [pc, #468]	@ (8003a44 <HAL_RCC_OscConfig+0x4c8>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0f0      	beq.n	800385a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d106      	bne.n	800388e <HAL_RCC_OscConfig+0x312>
 8003880:	4b6f      	ldr	r3, [pc, #444]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	4a6e      	ldr	r2, [pc, #440]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 8003886:	f043 0301 	orr.w	r3, r3, #1
 800388a:	6213      	str	r3, [r2, #32]
 800388c:	e02d      	b.n	80038ea <HAL_RCC_OscConfig+0x36e>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10c      	bne.n	80038b0 <HAL_RCC_OscConfig+0x334>
 8003896:	4b6a      	ldr	r3, [pc, #424]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	4a69      	ldr	r2, [pc, #420]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 800389c:	f023 0301 	bic.w	r3, r3, #1
 80038a0:	6213      	str	r3, [r2, #32]
 80038a2:	4b67      	ldr	r3, [pc, #412]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	4a66      	ldr	r2, [pc, #408]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80038a8:	f023 0304 	bic.w	r3, r3, #4
 80038ac:	6213      	str	r3, [r2, #32]
 80038ae:	e01c      	b.n	80038ea <HAL_RCC_OscConfig+0x36e>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	2b05      	cmp	r3, #5
 80038b6:	d10c      	bne.n	80038d2 <HAL_RCC_OscConfig+0x356>
 80038b8:	4b61      	ldr	r3, [pc, #388]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	4a60      	ldr	r2, [pc, #384]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80038be:	f043 0304 	orr.w	r3, r3, #4
 80038c2:	6213      	str	r3, [r2, #32]
 80038c4:	4b5e      	ldr	r3, [pc, #376]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	4a5d      	ldr	r2, [pc, #372]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80038ca:	f043 0301 	orr.w	r3, r3, #1
 80038ce:	6213      	str	r3, [r2, #32]
 80038d0:	e00b      	b.n	80038ea <HAL_RCC_OscConfig+0x36e>
 80038d2:	4b5b      	ldr	r3, [pc, #364]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	4a5a      	ldr	r2, [pc, #360]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80038d8:	f023 0301 	bic.w	r3, r3, #1
 80038dc:	6213      	str	r3, [r2, #32]
 80038de:	4b58      	ldr	r3, [pc, #352]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	4a57      	ldr	r2, [pc, #348]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80038e4:	f023 0304 	bic.w	r3, r3, #4
 80038e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d015      	beq.n	800391e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f2:	f7fe fcd7 	bl	80022a4 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f8:	e00a      	b.n	8003910 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038fa:	f7fe fcd3 	bl	80022a4 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003908:	4293      	cmp	r3, r2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e0b1      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003910:	4b4b      	ldr	r3, [pc, #300]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0ee      	beq.n	80038fa <HAL_RCC_OscConfig+0x37e>
 800391c:	e014      	b.n	8003948 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800391e:	f7fe fcc1 	bl	80022a4 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003924:	e00a      	b.n	800393c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003926:	f7fe fcbd 	bl	80022a4 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003934:	4293      	cmp	r3, r2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e09b      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800393c:	4b40      	ldr	r3, [pc, #256]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1ee      	bne.n	8003926 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003948:	7dfb      	ldrb	r3, [r7, #23]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d105      	bne.n	800395a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800394e:	4b3c      	ldr	r3, [pc, #240]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	4a3b      	ldr	r2, [pc, #236]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 8003954:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003958:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 8087 	beq.w	8003a72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003964:	4b36      	ldr	r3, [pc, #216]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 030c 	and.w	r3, r3, #12
 800396c:	2b08      	cmp	r3, #8
 800396e:	d061      	beq.n	8003a34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	2b02      	cmp	r3, #2
 8003976:	d146      	bne.n	8003a06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003978:	4b33      	ldr	r3, [pc, #204]	@ (8003a48 <HAL_RCC_OscConfig+0x4cc>)
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397e:	f7fe fc91 	bl	80022a4 <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003986:	f7fe fc8d 	bl	80022a4 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e06d      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003998:	4b29      	ldr	r3, [pc, #164]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1f0      	bne.n	8003986 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039ac:	d108      	bne.n	80039c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039ae:	4b24      	ldr	r3, [pc, #144]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	4921      	ldr	r1, [pc, #132]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039c0:	4b1f      	ldr	r3, [pc, #124]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a19      	ldr	r1, [r3, #32]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	430b      	orrs	r3, r1
 80039d2:	491b      	ldr	r1, [pc, #108]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a48 <HAL_RCC_OscConfig+0x4cc>)
 80039da:	2201      	movs	r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039de:	f7fe fc61 	bl	80022a4 <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039e4:	e008      	b.n	80039f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e6:	f7fe fc5d 	bl	80022a4 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e03d      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039f8:	4b11      	ldr	r3, [pc, #68]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0f0      	beq.n	80039e6 <HAL_RCC_OscConfig+0x46a>
 8003a04:	e035      	b.n	8003a72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a06:	4b10      	ldr	r3, [pc, #64]	@ (8003a48 <HAL_RCC_OscConfig+0x4cc>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fe fc4a 	bl	80022a4 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a14:	f7fe fc46 	bl	80022a4 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e026      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a26:	4b06      	ldr	r3, [pc, #24]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f0      	bne.n	8003a14 <HAL_RCC_OscConfig+0x498>
 8003a32:	e01e      	b.n	8003a72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d107      	bne.n	8003a4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e019      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
 8003a40:	40021000 	.word	0x40021000
 8003a44:	40007000 	.word	0x40007000
 8003a48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a7c <HAL_RCC_OscConfig+0x500>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d106      	bne.n	8003a6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d001      	beq.n	8003a72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e000      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40021000 	.word	0x40021000

08003a80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e0d0      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a94:	4b6a      	ldr	r3, [pc, #424]	@ (8003c40 <HAL_RCC_ClockConfig+0x1c0>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d910      	bls.n	8003ac4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa2:	4b67      	ldr	r3, [pc, #412]	@ (8003c40 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f023 0207 	bic.w	r2, r3, #7
 8003aaa:	4965      	ldr	r1, [pc, #404]	@ (8003c40 <HAL_RCC_ClockConfig+0x1c0>)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab2:	4b63      	ldr	r3, [pc, #396]	@ (8003c40 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0307 	and.w	r3, r3, #7
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d001      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e0b8      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d020      	beq.n	8003b12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d005      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003adc:	4b59      	ldr	r3, [pc, #356]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	4a58      	ldr	r2, [pc, #352]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003ae6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0308 	and.w	r3, r3, #8
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d005      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003af4:	4b53      	ldr	r3, [pc, #332]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	4a52      	ldr	r2, [pc, #328]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003afa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003afe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b00:	4b50      	ldr	r3, [pc, #320]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	494d      	ldr	r1, [pc, #308]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d040      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d107      	bne.n	8003b36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b26:	4b47      	ldr	r3, [pc, #284]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d115      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e07f      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d107      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b3e:	4b41      	ldr	r3, [pc, #260]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d109      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e073      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b4e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e06b      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b5e:	4b39      	ldr	r3, [pc, #228]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f023 0203 	bic.w	r2, r3, #3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	4936      	ldr	r1, [pc, #216]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b70:	f7fe fb98 	bl	80022a4 <HAL_GetTick>
 8003b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b76:	e00a      	b.n	8003b8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b78:	f7fe fb94 	bl	80022a4 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e053      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8e:	4b2d      	ldr	r3, [pc, #180]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f003 020c 	and.w	r2, r3, #12
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d1eb      	bne.n	8003b78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ba0:	4b27      	ldr	r3, [pc, #156]	@ (8003c40 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d210      	bcs.n	8003bd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bae:	4b24      	ldr	r3, [pc, #144]	@ (8003c40 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f023 0207 	bic.w	r2, r3, #7
 8003bb6:	4922      	ldr	r1, [pc, #136]	@ (8003c40 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bbe:	4b20      	ldr	r3, [pc, #128]	@ (8003c40 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d001      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e032      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d008      	beq.n	8003bee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bdc:	4b19      	ldr	r3, [pc, #100]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	4916      	ldr	r1, [pc, #88]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d009      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bfa:	4b12      	ldr	r3, [pc, #72]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	490e      	ldr	r1, [pc, #56]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c0e:	f000 f821 	bl	8003c54 <HAL_RCC_GetSysClockFreq>
 8003c12:	4602      	mov	r2, r0
 8003c14:	4b0b      	ldr	r3, [pc, #44]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	091b      	lsrs	r3, r3, #4
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	490a      	ldr	r1, [pc, #40]	@ (8003c48 <HAL_RCC_ClockConfig+0x1c8>)
 8003c20:	5ccb      	ldrb	r3, [r1, r3]
 8003c22:	fa22 f303 	lsr.w	r3, r2, r3
 8003c26:	4a09      	ldr	r2, [pc, #36]	@ (8003c4c <HAL_RCC_ClockConfig+0x1cc>)
 8003c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c2a:	4b09      	ldr	r3, [pc, #36]	@ (8003c50 <HAL_RCC_ClockConfig+0x1d0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fe faf6 	bl	8002220 <HAL_InitTick>

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40022000 	.word	0x40022000
 8003c44:	40021000 	.word	0x40021000
 8003c48:	08007f00 	.word	0x08007f00
 8003c4c:	20000008 	.word	0x20000008
 8003c50:	2000000c 	.word	0x2000000c

08003c54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60bb      	str	r3, [r7, #8]
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	2300      	movs	r3, #0
 8003c68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ce8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f003 030c 	and.w	r3, r3, #12
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d002      	beq.n	8003c84 <HAL_RCC_GetSysClockFreq+0x30>
 8003c7e:	2b08      	cmp	r3, #8
 8003c80:	d003      	beq.n	8003c8a <HAL_RCC_GetSysClockFreq+0x36>
 8003c82:	e027      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c84:	4b19      	ldr	r3, [pc, #100]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x98>)
 8003c86:	613b      	str	r3, [r7, #16]
      break;
 8003c88:	e027      	b.n	8003cda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	0c9b      	lsrs	r3, r3, #18
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	4a17      	ldr	r2, [pc, #92]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c94:	5cd3      	ldrb	r3, [r2, r3]
 8003c96:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d010      	beq.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ca2:	4b11      	ldr	r3, [pc, #68]	@ (8003ce8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	0c5b      	lsrs	r3, r3, #17
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	4a11      	ldr	r2, [pc, #68]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003cae:	5cd3      	ldrb	r3, [r2, r3]
 8003cb0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x98>)
 8003cb6:	fb03 f202 	mul.w	r2, r3, r2
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc0:	617b      	str	r3, [r7, #20]
 8003cc2:	e004      	b.n	8003cce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003cc8:	fb02 f303 	mul.w	r3, r2, r3
 8003ccc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	613b      	str	r3, [r7, #16]
      break;
 8003cd2:	e002      	b.n	8003cda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cd4:	4b05      	ldr	r3, [pc, #20]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x98>)
 8003cd6:	613b      	str	r3, [r7, #16]
      break;
 8003cd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cda:	693b      	ldr	r3, [r7, #16]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	371c      	adds	r7, #28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	007a1200 	.word	0x007a1200
 8003cf0:	08007f18 	.word	0x08007f18
 8003cf4:	08007f28 	.word	0x08007f28
 8003cf8:	003d0900 	.word	0x003d0900

08003cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d00:	4b02      	ldr	r3, [pc, #8]	@ (8003d0c <HAL_RCC_GetHCLKFreq+0x10>)
 8003d02:	681b      	ldr	r3, [r3, #0]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr
 8003d0c:	20000008 	.word	0x20000008

08003d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d14:	f7ff fff2 	bl	8003cfc <HAL_RCC_GetHCLKFreq>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	4b05      	ldr	r3, [pc, #20]	@ (8003d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	0a1b      	lsrs	r3, r3, #8
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	4903      	ldr	r1, [pc, #12]	@ (8003d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d26:	5ccb      	ldrb	r3, [r1, r3]
 8003d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40021000 	.word	0x40021000
 8003d34:	08007f10 	.word	0x08007f10

08003d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d3c:	f7ff ffde 	bl	8003cfc <HAL_RCC_GetHCLKFreq>
 8003d40:	4602      	mov	r2, r0
 8003d42:	4b05      	ldr	r3, [pc, #20]	@ (8003d58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	0adb      	lsrs	r3, r3, #11
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	4903      	ldr	r1, [pc, #12]	@ (8003d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d4e:	5ccb      	ldrb	r3, [r1, r3]
 8003d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	08007f10 	.word	0x08007f10

08003d60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d68:	4b0a      	ldr	r3, [pc, #40]	@ (8003d94 <RCC_Delay+0x34>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8003d98 <RCC_Delay+0x38>)
 8003d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d72:	0a5b      	lsrs	r3, r3, #9
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	fb02 f303 	mul.w	r3, r2, r3
 8003d7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d7c:	bf00      	nop
  }
  while (Delay --);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	1e5a      	subs	r2, r3, #1
 8003d82:	60fa      	str	r2, [r7, #12]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1f9      	bne.n	8003d7c <RCC_Delay+0x1c>
}
 8003d88:	bf00      	nop
 8003d8a:	bf00      	nop
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bc80      	pop	{r7}
 8003d92:	4770      	bx	lr
 8003d94:	20000008 	.word	0x20000008
 8003d98:	10624dd3 	.word	0x10624dd3

08003d9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e042      	b.n	8003e34 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d106      	bne.n	8003dc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7fe f840 	bl	8001e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2224      	movs	r2, #36	@ 0x24
 8003dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68da      	ldr	r2, [r3, #12]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fdc7 	bl	8004974 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	691a      	ldr	r2, [r3, #16]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003df4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	695a      	ldr	r2, [r3, #20]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b08a      	sub	sp, #40	@ 0x28
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b20      	cmp	r3, #32
 8003e5a:	d16d      	bne.n	8003f38 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <HAL_UART_Transmit+0x2c>
 8003e62:	88fb      	ldrh	r3, [r7, #6]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e066      	b.n	8003f3a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2221      	movs	r2, #33	@ 0x21
 8003e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e7a:	f7fe fa13 	bl	80022a4 <HAL_GetTick>
 8003e7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	88fa      	ldrh	r2, [r7, #6]
 8003e84:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	88fa      	ldrh	r2, [r7, #6]
 8003e8a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e94:	d108      	bne.n	8003ea8 <HAL_UART_Transmit+0x6c>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d104      	bne.n	8003ea8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	61bb      	str	r3, [r7, #24]
 8003ea6:	e003      	b.n	8003eb0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003eac:	2300      	movs	r3, #0
 8003eae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003eb0:	e02a      	b.n	8003f08 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2180      	movs	r1, #128	@ 0x80
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 fb16 	bl	80044ee <UART_WaitOnFlagUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e036      	b.n	8003f3a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10b      	bne.n	8003eea <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ee0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	3302      	adds	r3, #2
 8003ee6:	61bb      	str	r3, [r7, #24]
 8003ee8:	e007      	b.n	8003efa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	781a      	ldrb	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1cf      	bne.n	8003eb2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	2140      	movs	r1, #64	@ 0x40
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 fae6 	bl	80044ee <UART_WaitOnFlagUntilTimeout>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e006      	b.n	8003f3a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	e000      	b.n	8003f3a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003f38:	2302      	movs	r3, #2
  }
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3720      	adds	r7, #32
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b084      	sub	sp, #16
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	60f8      	str	r0, [r7, #12]
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b20      	cmp	r3, #32
 8003f5a:	d112      	bne.n	8003f82 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <HAL_UART_Receive_IT+0x26>
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e00b      	b.n	8003f84 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f72:	88fb      	ldrh	r3, [r7, #6]
 8003f74:	461a      	mov	r2, r3
 8003f76:	68b9      	ldr	r1, [r7, #8]
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 fb26 	bl	80045ca <UART_Start_Receive_IT>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	e000      	b.n	8003f84 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003f82:	2302      	movs	r3, #2
  }
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b0ba      	sub	sp, #232	@ 0xe8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003fca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10f      	bne.n	8003ff2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d009      	beq.n	8003ff2 <HAL_UART_IRQHandler+0x66>
 8003fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 fc03 	bl	80047f6 <UART_Receive_IT>
      return;
 8003ff0:	e25b      	b.n	80044aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ff2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 80de 	beq.w	80041b8 <HAL_UART_IRQHandler+0x22c>
 8003ffc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d106      	bne.n	8004016 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800400c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 80d1 	beq.w	80041b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00b      	beq.n	800403a <HAL_UART_IRQHandler+0xae>
 8004022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800402a:	2b00      	cmp	r3, #0
 800402c:	d005      	beq.n	800403a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004032:	f043 0201 	orr.w	r2, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800403a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800403e:	f003 0304 	and.w	r3, r3, #4
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00b      	beq.n	800405e <HAL_UART_IRQHandler+0xd2>
 8004046:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d005      	beq.n	800405e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004056:	f043 0202 	orr.w	r2, r3, #2
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800405e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00b      	beq.n	8004082 <HAL_UART_IRQHandler+0xf6>
 800406a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d005      	beq.n	8004082 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407a:	f043 0204 	orr.w	r2, r3, #4
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b00      	cmp	r3, #0
 800408c:	d011      	beq.n	80040b2 <HAL_UART_IRQHandler+0x126>
 800408e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004092:	f003 0320 	and.w	r3, r3, #32
 8004096:	2b00      	cmp	r3, #0
 8004098:	d105      	bne.n	80040a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800409a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d005      	beq.n	80040b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040aa:	f043 0208 	orr.w	r2, r3, #8
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 81f2 	beq.w	80044a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040c0:	f003 0320 	and.w	r3, r3, #32
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d008      	beq.n	80040da <HAL_UART_IRQHandler+0x14e>
 80040c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 fb8e 	bl	80047f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	bf14      	ite	ne
 80040e8:	2301      	movne	r3, #1
 80040ea:	2300      	moveq	r3, #0
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d103      	bne.n	8004106 <HAL_UART_IRQHandler+0x17a>
 80040fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004102:	2b00      	cmp	r3, #0
 8004104:	d04f      	beq.n	80041a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 fa98 	bl	800463c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004116:	2b00      	cmp	r3, #0
 8004118:	d041      	beq.n	800419e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	3314      	adds	r3, #20
 8004120:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004124:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004128:	e853 3f00 	ldrex	r3, [r3]
 800412c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004130:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004134:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004138:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3314      	adds	r3, #20
 8004142:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004146:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800414a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004152:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004156:	e841 2300 	strex	r3, r2, [r1]
 800415a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800415e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1d9      	bne.n	800411a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800416a:	2b00      	cmp	r3, #0
 800416c:	d013      	beq.n	8004196 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004172:	4a7e      	ldr	r2, [pc, #504]	@ (800436c <HAL_UART_IRQHandler+0x3e0>)
 8004174:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800417a:	4618      	mov	r0, r3
 800417c:	f7fe fa08 	bl	8002590 <HAL_DMA_Abort_IT>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d016      	beq.n	80041b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800418a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004190:	4610      	mov	r0, r2
 8004192:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004194:	e00e      	b.n	80041b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7fd fade 	bl	8001758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800419c:	e00a      	b.n	80041b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7fd fada 	bl	8001758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a4:	e006      	b.n	80041b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fd fad6 	bl	8001758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80041b2:	e175      	b.n	80044a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b4:	bf00      	nop
    return;
 80041b6:	e173      	b.n	80044a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041bc:	2b01      	cmp	r3, #1
 80041be:	f040 814f 	bne.w	8004460 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80041c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041c6:	f003 0310 	and.w	r3, r3, #16
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 8148 	beq.w	8004460 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80041d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 8141 	beq.w	8004460 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041de:	2300      	movs	r3, #0
 80041e0:	60bb      	str	r3, [r7, #8]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	60bb      	str	r3, [r7, #8]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	60bb      	str	r3, [r7, #8]
 80041f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 80b6 	beq.w	8004370 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004210:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 8145 	beq.w	80044a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800421e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004222:	429a      	cmp	r2, r3
 8004224:	f080 813e 	bcs.w	80044a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800422e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	2b20      	cmp	r3, #32
 8004238:	f000 8088 	beq.w	800434c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	330c      	adds	r3, #12
 8004242:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004246:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800424a:	e853 3f00 	ldrex	r3, [r3]
 800424e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004252:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004256:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800425a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	330c      	adds	r3, #12
 8004264:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004268:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800426c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004270:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004274:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004278:	e841 2300 	strex	r3, r2, [r1]
 800427c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004280:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1d9      	bne.n	800423c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3314      	adds	r3, #20
 800428e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004290:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004292:	e853 3f00 	ldrex	r3, [r3]
 8004296:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004298:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800429a:	f023 0301 	bic.w	r3, r3, #1
 800429e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3314      	adds	r3, #20
 80042a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042ac:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80042b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80042b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80042b8:	e841 2300 	strex	r3, r2, [r1]
 80042bc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80042be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e1      	bne.n	8004288 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3314      	adds	r3, #20
 80042ca:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80042d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3314      	adds	r3, #20
 80042e4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80042e8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80042ea:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ec:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80042ee:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80042f0:	e841 2300 	strex	r3, r2, [r1]
 80042f4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80042f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e3      	bne.n	80042c4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2220      	movs	r2, #32
 8004300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	330c      	adds	r3, #12
 8004310:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004312:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004314:	e853 3f00 	ldrex	r3, [r3]
 8004318:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800431a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800431c:	f023 0310 	bic.w	r3, r3, #16
 8004320:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	330c      	adds	r3, #12
 800432a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800432e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004330:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004332:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004334:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004336:	e841 2300 	strex	r3, r2, [r1]
 800433a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800433c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1e3      	bne.n	800430a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004346:	4618      	mov	r0, r3
 8004348:	f7fe f8e7 	bl	800251a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800435a:	b29b      	uxth	r3, r3
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	b29b      	uxth	r3, r3
 8004360:	4619      	mov	r1, r3
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f8ad 	bl	80044c2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004368:	e09c      	b.n	80044a4 <HAL_UART_IRQHandler+0x518>
 800436a:	bf00      	nop
 800436c:	08004701 	.word	0x08004701
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004378:	b29b      	uxth	r3, r3
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004384:	b29b      	uxth	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 808e 	beq.w	80044a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800438c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 8089 	beq.w	80044a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	330c      	adds	r3, #12
 800439c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a0:	e853 3f00 	ldrex	r3, [r3]
 80043a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	330c      	adds	r3, #12
 80043b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80043ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80043bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043c2:	e841 2300 	strex	r3, r2, [r1]
 80043c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1e3      	bne.n	8004396 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3314      	adds	r3, #20
 80043d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d8:	e853 3f00 	ldrex	r3, [r3]
 80043dc:	623b      	str	r3, [r7, #32]
   return(result);
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	f023 0301 	bic.w	r3, r3, #1
 80043e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3314      	adds	r3, #20
 80043ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80043f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80043f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043fa:	e841 2300 	strex	r3, r2, [r1]
 80043fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1e3      	bne.n	80043ce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	330c      	adds	r3, #12
 800441a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	e853 3f00 	ldrex	r3, [r3]
 8004422:	60fb      	str	r3, [r7, #12]
   return(result);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 0310 	bic.w	r3, r3, #16
 800442a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	330c      	adds	r3, #12
 8004434:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004438:	61fa      	str	r2, [r7, #28]
 800443a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443c:	69b9      	ldr	r1, [r7, #24]
 800443e:	69fa      	ldr	r2, [r7, #28]
 8004440:	e841 2300 	strex	r3, r2, [r1]
 8004444:	617b      	str	r3, [r7, #20]
   return(result);
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1e3      	bne.n	8004414 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2202      	movs	r2, #2
 8004450:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004452:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004456:	4619      	mov	r1, r3
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 f832 	bl	80044c2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800445e:	e023      	b.n	80044a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004468:	2b00      	cmp	r3, #0
 800446a:	d009      	beq.n	8004480 <HAL_UART_IRQHandler+0x4f4>
 800446c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004470:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f955 	bl	8004728 <UART_Transmit_IT>
    return;
 800447e:	e014      	b.n	80044aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00e      	beq.n	80044aa <HAL_UART_IRQHandler+0x51e>
 800448c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004494:	2b00      	cmp	r3, #0
 8004496:	d008      	beq.n	80044aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f994 	bl	80047c6 <UART_EndTransmit_IT>
    return;
 800449e:	e004      	b.n	80044aa <HAL_UART_IRQHandler+0x51e>
    return;
 80044a0:	bf00      	nop
 80044a2:	e002      	b.n	80044aa <HAL_UART_IRQHandler+0x51e>
      return;
 80044a4:	bf00      	nop
 80044a6:	e000      	b.n	80044aa <HAL_UART_IRQHandler+0x51e>
      return;
 80044a8:	bf00      	nop
  }
}
 80044aa:	37e8      	adds	r7, #232	@ 0xe8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	bc80      	pop	{r7}
 80044c0:	4770      	bx	lr

080044c2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	460b      	mov	r3, r1
 80044cc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr

080044d8 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bc80      	pop	{r7}
 80044ec:	4770      	bx	lr

080044ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b090      	sub	sp, #64	@ 0x40
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	60f8      	str	r0, [r7, #12]
 80044f6:	60b9      	str	r1, [r7, #8]
 80044f8:	603b      	str	r3, [r7, #0]
 80044fa:	4613      	mov	r3, r2
 80044fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044fe:	e050      	b.n	80045a2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004500:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004506:	d04c      	beq.n	80045a2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004508:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800450a:	2b00      	cmp	r3, #0
 800450c:	d007      	beq.n	800451e <UART_WaitOnFlagUntilTimeout+0x30>
 800450e:	f7fd fec9 	bl	80022a4 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800451a:	429a      	cmp	r2, r3
 800451c:	d241      	bcs.n	80045a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	330c      	adds	r3, #12
 8004524:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004528:	e853 3f00 	ldrex	r3, [r3]
 800452c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800452e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004530:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004534:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	330c      	adds	r3, #12
 800453c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800453e:	637a      	str	r2, [r7, #52]	@ 0x34
 8004540:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004542:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004544:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004546:	e841 2300 	strex	r3, r2, [r1]
 800454a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800454c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1e5      	bne.n	800451e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	3314      	adds	r3, #20
 8004558:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	e853 3f00 	ldrex	r3, [r3]
 8004560:	613b      	str	r3, [r7, #16]
   return(result);
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f023 0301 	bic.w	r3, r3, #1
 8004568:	63bb      	str	r3, [r7, #56]	@ 0x38
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3314      	adds	r3, #20
 8004570:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004572:	623a      	str	r2, [r7, #32]
 8004574:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004576:	69f9      	ldr	r1, [r7, #28]
 8004578:	6a3a      	ldr	r2, [r7, #32]
 800457a:	e841 2300 	strex	r3, r2, [r1]
 800457e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1e5      	bne.n	8004552 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2220      	movs	r2, #32
 800458a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2220      	movs	r2, #32
 8004592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e00f      	b.n	80045c2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	4013      	ands	r3, r2
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	bf0c      	ite	eq
 80045b2:	2301      	moveq	r3, #1
 80045b4:	2300      	movne	r3, #0
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	461a      	mov	r2, r3
 80045ba:	79fb      	ldrb	r3, [r7, #7]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d09f      	beq.n	8004500 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3740      	adds	r7, #64	@ 0x40
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b085      	sub	sp, #20
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	4613      	mov	r3, r2
 80045d6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	88fa      	ldrh	r2, [r7, #6]
 80045e2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	88fa      	ldrh	r2, [r7, #6]
 80045e8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2222      	movs	r2, #34	@ 0x22
 80045f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d007      	beq.n	8004610 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800460e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695a      	ldr	r2, [r3, #20]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0201 	orr.w	r2, r2, #1
 800461e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0220 	orr.w	r2, r2, #32
 800462e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr

0800463c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800463c:	b480      	push	{r7}
 800463e:	b095      	sub	sp, #84	@ 0x54
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	330c      	adds	r3, #12
 800464a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800464e:	e853 3f00 	ldrex	r3, [r3]
 8004652:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004656:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800465a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	330c      	adds	r3, #12
 8004662:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004664:	643a      	str	r2, [r7, #64]	@ 0x40
 8004666:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004668:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800466a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800466c:	e841 2300 	strex	r3, r2, [r1]
 8004670:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1e5      	bne.n	8004644 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	3314      	adds	r3, #20
 800467e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	e853 3f00 	ldrex	r3, [r3]
 8004686:	61fb      	str	r3, [r7, #28]
   return(result);
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	f023 0301 	bic.w	r3, r3, #1
 800468e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3314      	adds	r3, #20
 8004696:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004698:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800469a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800469e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046a0:	e841 2300 	strex	r3, r2, [r1]
 80046a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1e5      	bne.n	8004678 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d119      	bne.n	80046e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	330c      	adds	r3, #12
 80046ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	e853 3f00 	ldrex	r3, [r3]
 80046c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f023 0310 	bic.w	r3, r3, #16
 80046ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	330c      	adds	r3, #12
 80046d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046d4:	61ba      	str	r2, [r7, #24]
 80046d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d8:	6979      	ldr	r1, [r7, #20]
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	e841 2300 	strex	r3, r2, [r1]
 80046e0:	613b      	str	r3, [r7, #16]
   return(result);
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1e5      	bne.n	80046b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80046f6:	bf00      	nop
 80046f8:	3754      	adds	r7, #84	@ 0x54
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr

08004700 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f7fd f81c 	bl	8001758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004720:	bf00      	nop
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b21      	cmp	r3, #33	@ 0x21
 800473a:	d13e      	bne.n	80047ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004744:	d114      	bne.n	8004770 <UART_Transmit_IT+0x48>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d110      	bne.n	8004770 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	461a      	mov	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004762:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	1c9a      	adds	r2, r3, #2
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	621a      	str	r2, [r3, #32]
 800476e:	e008      	b.n	8004782 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	1c59      	adds	r1, r3, #1
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	6211      	str	r1, [r2, #32]
 800477a:	781a      	ldrb	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004786:	b29b      	uxth	r3, r3
 8004788:	3b01      	subs	r3, #1
 800478a:	b29b      	uxth	r3, r3
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	4619      	mov	r1, r3
 8004790:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10f      	bne.n	80047b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68da      	ldr	r2, [r3, #12]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	e000      	b.n	80047bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047ba:	2302      	movs	r3, #2
  }
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr

080047c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b082      	sub	sp, #8
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68da      	ldr	r2, [r3, #12]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2220      	movs	r2, #32
 80047e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7ff fe62 	bl	80044b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b08c      	sub	sp, #48	@ 0x30
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b22      	cmp	r3, #34	@ 0x22
 8004808:	f040 80ae 	bne.w	8004968 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004814:	d117      	bne.n	8004846 <UART_Receive_IT+0x50>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d113      	bne.n	8004846 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800481e:	2300      	movs	r3, #0
 8004820:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004826:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	b29b      	uxth	r3, r3
 8004830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004834:	b29a      	uxth	r2, r3
 8004836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004838:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483e:	1c9a      	adds	r2, r3, #2
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	629a      	str	r2, [r3, #40]	@ 0x28
 8004844:	e026      	b.n	8004894 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800484c:	2300      	movs	r3, #0
 800484e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004858:	d007      	beq.n	800486a <UART_Receive_IT+0x74>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10a      	bne.n	8004878 <UART_Receive_IT+0x82>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d106      	bne.n	8004878 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	b2da      	uxtb	r2, r3
 8004872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004874:	701a      	strb	r2, [r3, #0]
 8004876:	e008      	b.n	800488a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	b2db      	uxtb	r3, r3
 8004880:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004884:	b2da      	uxtb	r2, r3
 8004886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004888:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800488e:	1c5a      	adds	r2, r3, #1
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004898:	b29b      	uxth	r3, r3
 800489a:	3b01      	subs	r3, #1
 800489c:	b29b      	uxth	r3, r3
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	4619      	mov	r1, r3
 80048a2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d15d      	bne.n	8004964 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0220 	bic.w	r2, r2, #32
 80048b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68da      	ldr	r2, [r3, #12]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	695a      	ldr	r2, [r3, #20]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0201 	bic.w	r2, r2, #1
 80048d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2220      	movs	r2, #32
 80048dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d135      	bne.n	800495a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	330c      	adds	r3, #12
 80048fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	e853 3f00 	ldrex	r3, [r3]
 8004902:	613b      	str	r3, [r7, #16]
   return(result);
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f023 0310 	bic.w	r3, r3, #16
 800490a:	627b      	str	r3, [r7, #36]	@ 0x24
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	330c      	adds	r3, #12
 8004912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004914:	623a      	str	r2, [r7, #32]
 8004916:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004918:	69f9      	ldr	r1, [r7, #28]
 800491a:	6a3a      	ldr	r2, [r7, #32]
 800491c:	e841 2300 	strex	r3, r2, [r1]
 8004920:	61bb      	str	r3, [r7, #24]
   return(result);
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1e5      	bne.n	80048f4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0310 	and.w	r3, r3, #16
 8004932:	2b10      	cmp	r3, #16
 8004934:	d10a      	bne.n	800494c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004936:	2300      	movs	r3, #0
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004950:	4619      	mov	r1, r3
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7ff fdb5 	bl	80044c2 <HAL_UARTEx_RxEventCallback>
 8004958:	e002      	b.n	8004960 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7fc fde6 	bl	800152c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004960:	2300      	movs	r3, #0
 8004962:	e002      	b.n	800496a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004964:	2300      	movs	r3, #0
 8004966:	e000      	b.n	800496a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004968:	2302      	movs	r3, #2
  }
}
 800496a:	4618      	mov	r0, r3
 800496c:	3730      	adds	r7, #48	@ 0x30
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
	...

08004974 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68da      	ldr	r2, [r3, #12]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689a      	ldr	r2, [r3, #8]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	431a      	orrs	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80049ae:	f023 030c 	bic.w	r3, r3, #12
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6812      	ldr	r2, [r2, #0]
 80049b6:	68b9      	ldr	r1, [r7, #8]
 80049b8:	430b      	orrs	r3, r1
 80049ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699a      	ldr	r2, [r3, #24]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a2c      	ldr	r2, [pc, #176]	@ (8004a88 <UART_SetConfig+0x114>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d103      	bne.n	80049e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80049dc:	f7ff f9ac 	bl	8003d38 <HAL_RCC_GetPCLK2Freq>
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	e002      	b.n	80049ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80049e4:	f7ff f994 	bl	8003d10 <HAL_RCC_GetPCLK1Freq>
 80049e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	4613      	mov	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	009a      	lsls	r2, r3, #2
 80049f4:	441a      	add	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a00:	4a22      	ldr	r2, [pc, #136]	@ (8004a8c <UART_SetConfig+0x118>)
 8004a02:	fba2 2303 	umull	r2, r3, r2, r3
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	0119      	lsls	r1, r3, #4
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	009a      	lsls	r2, r3, #2
 8004a14:	441a      	add	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a20:	4b1a      	ldr	r3, [pc, #104]	@ (8004a8c <UART_SetConfig+0x118>)
 8004a22:	fba3 0302 	umull	r0, r3, r3, r2
 8004a26:	095b      	lsrs	r3, r3, #5
 8004a28:	2064      	movs	r0, #100	@ 0x64
 8004a2a:	fb00 f303 	mul.w	r3, r0, r3
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	011b      	lsls	r3, r3, #4
 8004a32:	3332      	adds	r3, #50	@ 0x32
 8004a34:	4a15      	ldr	r2, [pc, #84]	@ (8004a8c <UART_SetConfig+0x118>)
 8004a36:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3a:	095b      	lsrs	r3, r3, #5
 8004a3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a40:	4419      	add	r1, r3
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	4613      	mov	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	009a      	lsls	r2, r3, #2
 8004a4c:	441a      	add	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a58:	4b0c      	ldr	r3, [pc, #48]	@ (8004a8c <UART_SetConfig+0x118>)
 8004a5a:	fba3 0302 	umull	r0, r3, r3, r2
 8004a5e:	095b      	lsrs	r3, r3, #5
 8004a60:	2064      	movs	r0, #100	@ 0x64
 8004a62:	fb00 f303 	mul.w	r3, r0, r3
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	3332      	adds	r3, #50	@ 0x32
 8004a6c:	4a07      	ldr	r2, [pc, #28]	@ (8004a8c <UART_SetConfig+0x118>)
 8004a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a72:	095b      	lsrs	r3, r3, #5
 8004a74:	f003 020f 	and.w	r2, r3, #15
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	440a      	add	r2, r1
 8004a7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a80:	bf00      	nop
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	40013800 	.word	0x40013800
 8004a8c:	51eb851f 	.word	0x51eb851f

08004a90 <__cvt>:
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a96:	461d      	mov	r5, r3
 8004a98:	bfbb      	ittet	lt
 8004a9a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004a9e:	461d      	movlt	r5, r3
 8004aa0:	2300      	movge	r3, #0
 8004aa2:	232d      	movlt	r3, #45	@ 0x2d
 8004aa4:	b088      	sub	sp, #32
 8004aa6:	4614      	mov	r4, r2
 8004aa8:	bfb8      	it	lt
 8004aaa:	4614      	movlt	r4, r2
 8004aac:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004aae:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004ab0:	7013      	strb	r3, [r2, #0]
 8004ab2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004ab4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004ab8:	f023 0820 	bic.w	r8, r3, #32
 8004abc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004ac0:	d005      	beq.n	8004ace <__cvt+0x3e>
 8004ac2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004ac6:	d100      	bne.n	8004aca <__cvt+0x3a>
 8004ac8:	3601      	adds	r6, #1
 8004aca:	2302      	movs	r3, #2
 8004acc:	e000      	b.n	8004ad0 <__cvt+0x40>
 8004ace:	2303      	movs	r3, #3
 8004ad0:	aa07      	add	r2, sp, #28
 8004ad2:	9204      	str	r2, [sp, #16]
 8004ad4:	aa06      	add	r2, sp, #24
 8004ad6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004ada:	e9cd 3600 	strd	r3, r6, [sp]
 8004ade:	4622      	mov	r2, r4
 8004ae0:	462b      	mov	r3, r5
 8004ae2:	f000 fe6d 	bl	80057c0 <_dtoa_r>
 8004ae6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004aea:	4607      	mov	r7, r0
 8004aec:	d119      	bne.n	8004b22 <__cvt+0x92>
 8004aee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004af0:	07db      	lsls	r3, r3, #31
 8004af2:	d50e      	bpl.n	8004b12 <__cvt+0x82>
 8004af4:	eb00 0906 	add.w	r9, r0, r6
 8004af8:	2200      	movs	r2, #0
 8004afa:	2300      	movs	r3, #0
 8004afc:	4620      	mov	r0, r4
 8004afe:	4629      	mov	r1, r5
 8004b00:	f7fb ff52 	bl	80009a8 <__aeabi_dcmpeq>
 8004b04:	b108      	cbz	r0, 8004b0a <__cvt+0x7a>
 8004b06:	f8cd 901c 	str.w	r9, [sp, #28]
 8004b0a:	2230      	movs	r2, #48	@ 0x30
 8004b0c:	9b07      	ldr	r3, [sp, #28]
 8004b0e:	454b      	cmp	r3, r9
 8004b10:	d31e      	bcc.n	8004b50 <__cvt+0xc0>
 8004b12:	4638      	mov	r0, r7
 8004b14:	9b07      	ldr	r3, [sp, #28]
 8004b16:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004b18:	1bdb      	subs	r3, r3, r7
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	b008      	add	sp, #32
 8004b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b22:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004b26:	eb00 0906 	add.w	r9, r0, r6
 8004b2a:	d1e5      	bne.n	8004af8 <__cvt+0x68>
 8004b2c:	7803      	ldrb	r3, [r0, #0]
 8004b2e:	2b30      	cmp	r3, #48	@ 0x30
 8004b30:	d10a      	bne.n	8004b48 <__cvt+0xb8>
 8004b32:	2200      	movs	r2, #0
 8004b34:	2300      	movs	r3, #0
 8004b36:	4620      	mov	r0, r4
 8004b38:	4629      	mov	r1, r5
 8004b3a:	f7fb ff35 	bl	80009a8 <__aeabi_dcmpeq>
 8004b3e:	b918      	cbnz	r0, 8004b48 <__cvt+0xb8>
 8004b40:	f1c6 0601 	rsb	r6, r6, #1
 8004b44:	f8ca 6000 	str.w	r6, [sl]
 8004b48:	f8da 3000 	ldr.w	r3, [sl]
 8004b4c:	4499      	add	r9, r3
 8004b4e:	e7d3      	b.n	8004af8 <__cvt+0x68>
 8004b50:	1c59      	adds	r1, r3, #1
 8004b52:	9107      	str	r1, [sp, #28]
 8004b54:	701a      	strb	r2, [r3, #0]
 8004b56:	e7d9      	b.n	8004b0c <__cvt+0x7c>

08004b58 <__exponent>:
 8004b58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b5a:	2900      	cmp	r1, #0
 8004b5c:	bfb6      	itet	lt
 8004b5e:	232d      	movlt	r3, #45	@ 0x2d
 8004b60:	232b      	movge	r3, #43	@ 0x2b
 8004b62:	4249      	neglt	r1, r1
 8004b64:	2909      	cmp	r1, #9
 8004b66:	7002      	strb	r2, [r0, #0]
 8004b68:	7043      	strb	r3, [r0, #1]
 8004b6a:	dd29      	ble.n	8004bc0 <__exponent+0x68>
 8004b6c:	f10d 0307 	add.w	r3, sp, #7
 8004b70:	461d      	mov	r5, r3
 8004b72:	270a      	movs	r7, #10
 8004b74:	fbb1 f6f7 	udiv	r6, r1, r7
 8004b78:	461a      	mov	r2, r3
 8004b7a:	fb07 1416 	mls	r4, r7, r6, r1
 8004b7e:	3430      	adds	r4, #48	@ 0x30
 8004b80:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004b84:	460c      	mov	r4, r1
 8004b86:	2c63      	cmp	r4, #99	@ 0x63
 8004b88:	4631      	mov	r1, r6
 8004b8a:	f103 33ff 	add.w	r3, r3, #4294967295
 8004b8e:	dcf1      	bgt.n	8004b74 <__exponent+0x1c>
 8004b90:	3130      	adds	r1, #48	@ 0x30
 8004b92:	1e94      	subs	r4, r2, #2
 8004b94:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004b98:	4623      	mov	r3, r4
 8004b9a:	1c41      	adds	r1, r0, #1
 8004b9c:	42ab      	cmp	r3, r5
 8004b9e:	d30a      	bcc.n	8004bb6 <__exponent+0x5e>
 8004ba0:	f10d 0309 	add.w	r3, sp, #9
 8004ba4:	1a9b      	subs	r3, r3, r2
 8004ba6:	42ac      	cmp	r4, r5
 8004ba8:	bf88      	it	hi
 8004baa:	2300      	movhi	r3, #0
 8004bac:	3302      	adds	r3, #2
 8004bae:	4403      	add	r3, r0
 8004bb0:	1a18      	subs	r0, r3, r0
 8004bb2:	b003      	add	sp, #12
 8004bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bb6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004bba:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004bbe:	e7ed      	b.n	8004b9c <__exponent+0x44>
 8004bc0:	2330      	movs	r3, #48	@ 0x30
 8004bc2:	3130      	adds	r1, #48	@ 0x30
 8004bc4:	7083      	strb	r3, [r0, #2]
 8004bc6:	70c1      	strb	r1, [r0, #3]
 8004bc8:	1d03      	adds	r3, r0, #4
 8004bca:	e7f1      	b.n	8004bb0 <__exponent+0x58>

08004bcc <_printf_float>:
 8004bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd0:	b091      	sub	sp, #68	@ 0x44
 8004bd2:	460c      	mov	r4, r1
 8004bd4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004bd8:	4616      	mov	r6, r2
 8004bda:	461f      	mov	r7, r3
 8004bdc:	4605      	mov	r5, r0
 8004bde:	f000 fce1 	bl	80055a4 <_localeconv_r>
 8004be2:	6803      	ldr	r3, [r0, #0]
 8004be4:	4618      	mov	r0, r3
 8004be6:	9308      	str	r3, [sp, #32]
 8004be8:	f7fb fab2 	bl	8000150 <strlen>
 8004bec:	2300      	movs	r3, #0
 8004bee:	930e      	str	r3, [sp, #56]	@ 0x38
 8004bf0:	f8d8 3000 	ldr.w	r3, [r8]
 8004bf4:	9009      	str	r0, [sp, #36]	@ 0x24
 8004bf6:	3307      	adds	r3, #7
 8004bf8:	f023 0307 	bic.w	r3, r3, #7
 8004bfc:	f103 0208 	add.w	r2, r3, #8
 8004c00:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004c04:	f8d4 b000 	ldr.w	fp, [r4]
 8004c08:	f8c8 2000 	str.w	r2, [r8]
 8004c0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c10:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004c14:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c16:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004c22:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004c26:	4b9c      	ldr	r3, [pc, #624]	@ (8004e98 <_printf_float+0x2cc>)
 8004c28:	f7fb fef0 	bl	8000a0c <__aeabi_dcmpun>
 8004c2c:	bb70      	cbnz	r0, 8004c8c <_printf_float+0xc0>
 8004c2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004c32:	f04f 32ff 	mov.w	r2, #4294967295
 8004c36:	4b98      	ldr	r3, [pc, #608]	@ (8004e98 <_printf_float+0x2cc>)
 8004c38:	f7fb feca 	bl	80009d0 <__aeabi_dcmple>
 8004c3c:	bb30      	cbnz	r0, 8004c8c <_printf_float+0xc0>
 8004c3e:	2200      	movs	r2, #0
 8004c40:	2300      	movs	r3, #0
 8004c42:	4640      	mov	r0, r8
 8004c44:	4649      	mov	r1, r9
 8004c46:	f7fb feb9 	bl	80009bc <__aeabi_dcmplt>
 8004c4a:	b110      	cbz	r0, 8004c52 <_printf_float+0x86>
 8004c4c:	232d      	movs	r3, #45	@ 0x2d
 8004c4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c52:	4a92      	ldr	r2, [pc, #584]	@ (8004e9c <_printf_float+0x2d0>)
 8004c54:	4b92      	ldr	r3, [pc, #584]	@ (8004ea0 <_printf_float+0x2d4>)
 8004c56:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004c5a:	bf8c      	ite	hi
 8004c5c:	4690      	movhi	r8, r2
 8004c5e:	4698      	movls	r8, r3
 8004c60:	2303      	movs	r3, #3
 8004c62:	f04f 0900 	mov.w	r9, #0
 8004c66:	6123      	str	r3, [r4, #16]
 8004c68:	f02b 0304 	bic.w	r3, fp, #4
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	4633      	mov	r3, r6
 8004c70:	4621      	mov	r1, r4
 8004c72:	4628      	mov	r0, r5
 8004c74:	9700      	str	r7, [sp, #0]
 8004c76:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004c78:	f000 f9d4 	bl	8005024 <_printf_common>
 8004c7c:	3001      	adds	r0, #1
 8004c7e:	f040 8090 	bne.w	8004da2 <_printf_float+0x1d6>
 8004c82:	f04f 30ff 	mov.w	r0, #4294967295
 8004c86:	b011      	add	sp, #68	@ 0x44
 8004c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c8c:	4642      	mov	r2, r8
 8004c8e:	464b      	mov	r3, r9
 8004c90:	4640      	mov	r0, r8
 8004c92:	4649      	mov	r1, r9
 8004c94:	f7fb feba 	bl	8000a0c <__aeabi_dcmpun>
 8004c98:	b148      	cbz	r0, 8004cae <_printf_float+0xe2>
 8004c9a:	464b      	mov	r3, r9
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	bfb8      	it	lt
 8004ca0:	232d      	movlt	r3, #45	@ 0x2d
 8004ca2:	4a80      	ldr	r2, [pc, #512]	@ (8004ea4 <_printf_float+0x2d8>)
 8004ca4:	bfb8      	it	lt
 8004ca6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004caa:	4b7f      	ldr	r3, [pc, #508]	@ (8004ea8 <_printf_float+0x2dc>)
 8004cac:	e7d3      	b.n	8004c56 <_printf_float+0x8a>
 8004cae:	6863      	ldr	r3, [r4, #4]
 8004cb0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	d13f      	bne.n	8004d38 <_printf_float+0x16c>
 8004cb8:	2306      	movs	r3, #6
 8004cba:	6063      	str	r3, [r4, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004cc2:	6023      	str	r3, [r4, #0]
 8004cc4:	9206      	str	r2, [sp, #24]
 8004cc6:	aa0e      	add	r2, sp, #56	@ 0x38
 8004cc8:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004ccc:	aa0d      	add	r2, sp, #52	@ 0x34
 8004cce:	9203      	str	r2, [sp, #12]
 8004cd0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004cd4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004cd8:	6863      	ldr	r3, [r4, #4]
 8004cda:	4642      	mov	r2, r8
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	4628      	mov	r0, r5
 8004ce0:	464b      	mov	r3, r9
 8004ce2:	910a      	str	r1, [sp, #40]	@ 0x28
 8004ce4:	f7ff fed4 	bl	8004a90 <__cvt>
 8004ce8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004cea:	4680      	mov	r8, r0
 8004cec:	2947      	cmp	r1, #71	@ 0x47
 8004cee:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004cf0:	d128      	bne.n	8004d44 <_printf_float+0x178>
 8004cf2:	1cc8      	adds	r0, r1, #3
 8004cf4:	db02      	blt.n	8004cfc <_printf_float+0x130>
 8004cf6:	6863      	ldr	r3, [r4, #4]
 8004cf8:	4299      	cmp	r1, r3
 8004cfa:	dd40      	ble.n	8004d7e <_printf_float+0x1b2>
 8004cfc:	f1aa 0a02 	sub.w	sl, sl, #2
 8004d00:	fa5f fa8a 	uxtb.w	sl, sl
 8004d04:	4652      	mov	r2, sl
 8004d06:	3901      	subs	r1, #1
 8004d08:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004d0c:	910d      	str	r1, [sp, #52]	@ 0x34
 8004d0e:	f7ff ff23 	bl	8004b58 <__exponent>
 8004d12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004d14:	4681      	mov	r9, r0
 8004d16:	1813      	adds	r3, r2, r0
 8004d18:	2a01      	cmp	r2, #1
 8004d1a:	6123      	str	r3, [r4, #16]
 8004d1c:	dc02      	bgt.n	8004d24 <_printf_float+0x158>
 8004d1e:	6822      	ldr	r2, [r4, #0]
 8004d20:	07d2      	lsls	r2, r2, #31
 8004d22:	d501      	bpl.n	8004d28 <_printf_float+0x15c>
 8004d24:	3301      	adds	r3, #1
 8004d26:	6123      	str	r3, [r4, #16]
 8004d28:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d09e      	beq.n	8004c6e <_printf_float+0xa2>
 8004d30:	232d      	movs	r3, #45	@ 0x2d
 8004d32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d36:	e79a      	b.n	8004c6e <_printf_float+0xa2>
 8004d38:	2947      	cmp	r1, #71	@ 0x47
 8004d3a:	d1bf      	bne.n	8004cbc <_printf_float+0xf0>
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1bd      	bne.n	8004cbc <_printf_float+0xf0>
 8004d40:	2301      	movs	r3, #1
 8004d42:	e7ba      	b.n	8004cba <_printf_float+0xee>
 8004d44:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004d48:	d9dc      	bls.n	8004d04 <_printf_float+0x138>
 8004d4a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004d4e:	d118      	bne.n	8004d82 <_printf_float+0x1b6>
 8004d50:	2900      	cmp	r1, #0
 8004d52:	6863      	ldr	r3, [r4, #4]
 8004d54:	dd0b      	ble.n	8004d6e <_printf_float+0x1a2>
 8004d56:	6121      	str	r1, [r4, #16]
 8004d58:	b913      	cbnz	r3, 8004d60 <_printf_float+0x194>
 8004d5a:	6822      	ldr	r2, [r4, #0]
 8004d5c:	07d0      	lsls	r0, r2, #31
 8004d5e:	d502      	bpl.n	8004d66 <_printf_float+0x19a>
 8004d60:	3301      	adds	r3, #1
 8004d62:	440b      	add	r3, r1
 8004d64:	6123      	str	r3, [r4, #16]
 8004d66:	f04f 0900 	mov.w	r9, #0
 8004d6a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004d6c:	e7dc      	b.n	8004d28 <_printf_float+0x15c>
 8004d6e:	b913      	cbnz	r3, 8004d76 <_printf_float+0x1aa>
 8004d70:	6822      	ldr	r2, [r4, #0]
 8004d72:	07d2      	lsls	r2, r2, #31
 8004d74:	d501      	bpl.n	8004d7a <_printf_float+0x1ae>
 8004d76:	3302      	adds	r3, #2
 8004d78:	e7f4      	b.n	8004d64 <_printf_float+0x198>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e7f2      	b.n	8004d64 <_printf_float+0x198>
 8004d7e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004d82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d84:	4299      	cmp	r1, r3
 8004d86:	db05      	blt.n	8004d94 <_printf_float+0x1c8>
 8004d88:	6823      	ldr	r3, [r4, #0]
 8004d8a:	6121      	str	r1, [r4, #16]
 8004d8c:	07d8      	lsls	r0, r3, #31
 8004d8e:	d5ea      	bpl.n	8004d66 <_printf_float+0x19a>
 8004d90:	1c4b      	adds	r3, r1, #1
 8004d92:	e7e7      	b.n	8004d64 <_printf_float+0x198>
 8004d94:	2900      	cmp	r1, #0
 8004d96:	bfcc      	ite	gt
 8004d98:	2201      	movgt	r2, #1
 8004d9a:	f1c1 0202 	rsble	r2, r1, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	e7e0      	b.n	8004d64 <_printf_float+0x198>
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	055a      	lsls	r2, r3, #21
 8004da6:	d407      	bmi.n	8004db8 <_printf_float+0x1ec>
 8004da8:	6923      	ldr	r3, [r4, #16]
 8004daa:	4642      	mov	r2, r8
 8004dac:	4631      	mov	r1, r6
 8004dae:	4628      	mov	r0, r5
 8004db0:	47b8      	blx	r7
 8004db2:	3001      	adds	r0, #1
 8004db4:	d12b      	bne.n	8004e0e <_printf_float+0x242>
 8004db6:	e764      	b.n	8004c82 <_printf_float+0xb6>
 8004db8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004dbc:	f240 80dc 	bls.w	8004f78 <_printf_float+0x3ac>
 8004dc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	f7fb fdee 	bl	80009a8 <__aeabi_dcmpeq>
 8004dcc:	2800      	cmp	r0, #0
 8004dce:	d033      	beq.n	8004e38 <_printf_float+0x26c>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	4631      	mov	r1, r6
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	4a35      	ldr	r2, [pc, #212]	@ (8004eac <_printf_float+0x2e0>)
 8004dd8:	47b8      	blx	r7
 8004dda:	3001      	adds	r0, #1
 8004ddc:	f43f af51 	beq.w	8004c82 <_printf_float+0xb6>
 8004de0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004de4:	4543      	cmp	r3, r8
 8004de6:	db02      	blt.n	8004dee <_printf_float+0x222>
 8004de8:	6823      	ldr	r3, [r4, #0]
 8004dea:	07d8      	lsls	r0, r3, #31
 8004dec:	d50f      	bpl.n	8004e0e <_printf_float+0x242>
 8004dee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004df2:	4631      	mov	r1, r6
 8004df4:	4628      	mov	r0, r5
 8004df6:	47b8      	blx	r7
 8004df8:	3001      	adds	r0, #1
 8004dfa:	f43f af42 	beq.w	8004c82 <_printf_float+0xb6>
 8004dfe:	f04f 0900 	mov.w	r9, #0
 8004e02:	f108 38ff 	add.w	r8, r8, #4294967295
 8004e06:	f104 0a1a 	add.w	sl, r4, #26
 8004e0a:	45c8      	cmp	r8, r9
 8004e0c:	dc09      	bgt.n	8004e22 <_printf_float+0x256>
 8004e0e:	6823      	ldr	r3, [r4, #0]
 8004e10:	079b      	lsls	r3, r3, #30
 8004e12:	f100 8102 	bmi.w	800501a <_printf_float+0x44e>
 8004e16:	68e0      	ldr	r0, [r4, #12]
 8004e18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004e1a:	4298      	cmp	r0, r3
 8004e1c:	bfb8      	it	lt
 8004e1e:	4618      	movlt	r0, r3
 8004e20:	e731      	b.n	8004c86 <_printf_float+0xba>
 8004e22:	2301      	movs	r3, #1
 8004e24:	4652      	mov	r2, sl
 8004e26:	4631      	mov	r1, r6
 8004e28:	4628      	mov	r0, r5
 8004e2a:	47b8      	blx	r7
 8004e2c:	3001      	adds	r0, #1
 8004e2e:	f43f af28 	beq.w	8004c82 <_printf_float+0xb6>
 8004e32:	f109 0901 	add.w	r9, r9, #1
 8004e36:	e7e8      	b.n	8004e0a <_printf_float+0x23e>
 8004e38:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	dc38      	bgt.n	8004eb0 <_printf_float+0x2e4>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	4631      	mov	r1, r6
 8004e42:	4628      	mov	r0, r5
 8004e44:	4a19      	ldr	r2, [pc, #100]	@ (8004eac <_printf_float+0x2e0>)
 8004e46:	47b8      	blx	r7
 8004e48:	3001      	adds	r0, #1
 8004e4a:	f43f af1a 	beq.w	8004c82 <_printf_float+0xb6>
 8004e4e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004e52:	ea59 0303 	orrs.w	r3, r9, r3
 8004e56:	d102      	bne.n	8004e5e <_printf_float+0x292>
 8004e58:	6823      	ldr	r3, [r4, #0]
 8004e5a:	07d9      	lsls	r1, r3, #31
 8004e5c:	d5d7      	bpl.n	8004e0e <_printf_float+0x242>
 8004e5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004e62:	4631      	mov	r1, r6
 8004e64:	4628      	mov	r0, r5
 8004e66:	47b8      	blx	r7
 8004e68:	3001      	adds	r0, #1
 8004e6a:	f43f af0a 	beq.w	8004c82 <_printf_float+0xb6>
 8004e6e:	f04f 0a00 	mov.w	sl, #0
 8004e72:	f104 0b1a 	add.w	fp, r4, #26
 8004e76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e78:	425b      	negs	r3, r3
 8004e7a:	4553      	cmp	r3, sl
 8004e7c:	dc01      	bgt.n	8004e82 <_printf_float+0x2b6>
 8004e7e:	464b      	mov	r3, r9
 8004e80:	e793      	b.n	8004daa <_printf_float+0x1de>
 8004e82:	2301      	movs	r3, #1
 8004e84:	465a      	mov	r2, fp
 8004e86:	4631      	mov	r1, r6
 8004e88:	4628      	mov	r0, r5
 8004e8a:	47b8      	blx	r7
 8004e8c:	3001      	adds	r0, #1
 8004e8e:	f43f aef8 	beq.w	8004c82 <_printf_float+0xb6>
 8004e92:	f10a 0a01 	add.w	sl, sl, #1
 8004e96:	e7ee      	b.n	8004e76 <_printf_float+0x2aa>
 8004e98:	7fefffff 	.word	0x7fefffff
 8004e9c:	08007f2e 	.word	0x08007f2e
 8004ea0:	08007f2a 	.word	0x08007f2a
 8004ea4:	08007f36 	.word	0x08007f36
 8004ea8:	08007f32 	.word	0x08007f32
 8004eac:	08007f3a 	.word	0x08007f3a
 8004eb0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004eb2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004eb6:	4553      	cmp	r3, sl
 8004eb8:	bfa8      	it	ge
 8004eba:	4653      	movge	r3, sl
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	4699      	mov	r9, r3
 8004ec0:	dc36      	bgt.n	8004f30 <_printf_float+0x364>
 8004ec2:	f04f 0b00 	mov.w	fp, #0
 8004ec6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004eca:	f104 021a 	add.w	r2, r4, #26
 8004ece:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ed0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ed2:	eba3 0309 	sub.w	r3, r3, r9
 8004ed6:	455b      	cmp	r3, fp
 8004ed8:	dc31      	bgt.n	8004f3e <_printf_float+0x372>
 8004eda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004edc:	459a      	cmp	sl, r3
 8004ede:	dc3a      	bgt.n	8004f56 <_printf_float+0x38a>
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	07da      	lsls	r2, r3, #31
 8004ee4:	d437      	bmi.n	8004f56 <_printf_float+0x38a>
 8004ee6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ee8:	ebaa 0903 	sub.w	r9, sl, r3
 8004eec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004eee:	ebaa 0303 	sub.w	r3, sl, r3
 8004ef2:	4599      	cmp	r9, r3
 8004ef4:	bfa8      	it	ge
 8004ef6:	4699      	movge	r9, r3
 8004ef8:	f1b9 0f00 	cmp.w	r9, #0
 8004efc:	dc33      	bgt.n	8004f66 <_printf_float+0x39a>
 8004efe:	f04f 0800 	mov.w	r8, #0
 8004f02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f06:	f104 0b1a 	add.w	fp, r4, #26
 8004f0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f0c:	ebaa 0303 	sub.w	r3, sl, r3
 8004f10:	eba3 0309 	sub.w	r3, r3, r9
 8004f14:	4543      	cmp	r3, r8
 8004f16:	f77f af7a 	ble.w	8004e0e <_printf_float+0x242>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	465a      	mov	r2, fp
 8004f1e:	4631      	mov	r1, r6
 8004f20:	4628      	mov	r0, r5
 8004f22:	47b8      	blx	r7
 8004f24:	3001      	adds	r0, #1
 8004f26:	f43f aeac 	beq.w	8004c82 <_printf_float+0xb6>
 8004f2a:	f108 0801 	add.w	r8, r8, #1
 8004f2e:	e7ec      	b.n	8004f0a <_printf_float+0x33e>
 8004f30:	4642      	mov	r2, r8
 8004f32:	4631      	mov	r1, r6
 8004f34:	4628      	mov	r0, r5
 8004f36:	47b8      	blx	r7
 8004f38:	3001      	adds	r0, #1
 8004f3a:	d1c2      	bne.n	8004ec2 <_printf_float+0x2f6>
 8004f3c:	e6a1      	b.n	8004c82 <_printf_float+0xb6>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	4631      	mov	r1, r6
 8004f42:	4628      	mov	r0, r5
 8004f44:	920a      	str	r2, [sp, #40]	@ 0x28
 8004f46:	47b8      	blx	r7
 8004f48:	3001      	adds	r0, #1
 8004f4a:	f43f ae9a 	beq.w	8004c82 <_printf_float+0xb6>
 8004f4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004f50:	f10b 0b01 	add.w	fp, fp, #1
 8004f54:	e7bb      	b.n	8004ece <_printf_float+0x302>
 8004f56:	4631      	mov	r1, r6
 8004f58:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	47b8      	blx	r7
 8004f60:	3001      	adds	r0, #1
 8004f62:	d1c0      	bne.n	8004ee6 <_printf_float+0x31a>
 8004f64:	e68d      	b.n	8004c82 <_printf_float+0xb6>
 8004f66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004f68:	464b      	mov	r3, r9
 8004f6a:	4631      	mov	r1, r6
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	4442      	add	r2, r8
 8004f70:	47b8      	blx	r7
 8004f72:	3001      	adds	r0, #1
 8004f74:	d1c3      	bne.n	8004efe <_printf_float+0x332>
 8004f76:	e684      	b.n	8004c82 <_printf_float+0xb6>
 8004f78:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004f7c:	f1ba 0f01 	cmp.w	sl, #1
 8004f80:	dc01      	bgt.n	8004f86 <_printf_float+0x3ba>
 8004f82:	07db      	lsls	r3, r3, #31
 8004f84:	d536      	bpl.n	8004ff4 <_printf_float+0x428>
 8004f86:	2301      	movs	r3, #1
 8004f88:	4642      	mov	r2, r8
 8004f8a:	4631      	mov	r1, r6
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	47b8      	blx	r7
 8004f90:	3001      	adds	r0, #1
 8004f92:	f43f ae76 	beq.w	8004c82 <_printf_float+0xb6>
 8004f96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004f9a:	4631      	mov	r1, r6
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	47b8      	blx	r7
 8004fa0:	3001      	adds	r0, #1
 8004fa2:	f43f ae6e 	beq.w	8004c82 <_printf_float+0xb6>
 8004fa6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004faa:	2200      	movs	r2, #0
 8004fac:	2300      	movs	r3, #0
 8004fae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fb2:	f7fb fcf9 	bl	80009a8 <__aeabi_dcmpeq>
 8004fb6:	b9c0      	cbnz	r0, 8004fea <_printf_float+0x41e>
 8004fb8:	4653      	mov	r3, sl
 8004fba:	f108 0201 	add.w	r2, r8, #1
 8004fbe:	4631      	mov	r1, r6
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	47b8      	blx	r7
 8004fc4:	3001      	adds	r0, #1
 8004fc6:	d10c      	bne.n	8004fe2 <_printf_float+0x416>
 8004fc8:	e65b      	b.n	8004c82 <_printf_float+0xb6>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	465a      	mov	r2, fp
 8004fce:	4631      	mov	r1, r6
 8004fd0:	4628      	mov	r0, r5
 8004fd2:	47b8      	blx	r7
 8004fd4:	3001      	adds	r0, #1
 8004fd6:	f43f ae54 	beq.w	8004c82 <_printf_float+0xb6>
 8004fda:	f108 0801 	add.w	r8, r8, #1
 8004fde:	45d0      	cmp	r8, sl
 8004fe0:	dbf3      	blt.n	8004fca <_printf_float+0x3fe>
 8004fe2:	464b      	mov	r3, r9
 8004fe4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004fe8:	e6e0      	b.n	8004dac <_printf_float+0x1e0>
 8004fea:	f04f 0800 	mov.w	r8, #0
 8004fee:	f104 0b1a 	add.w	fp, r4, #26
 8004ff2:	e7f4      	b.n	8004fde <_printf_float+0x412>
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	4642      	mov	r2, r8
 8004ff8:	e7e1      	b.n	8004fbe <_printf_float+0x3f2>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	464a      	mov	r2, r9
 8004ffe:	4631      	mov	r1, r6
 8005000:	4628      	mov	r0, r5
 8005002:	47b8      	blx	r7
 8005004:	3001      	adds	r0, #1
 8005006:	f43f ae3c 	beq.w	8004c82 <_printf_float+0xb6>
 800500a:	f108 0801 	add.w	r8, r8, #1
 800500e:	68e3      	ldr	r3, [r4, #12]
 8005010:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005012:	1a5b      	subs	r3, r3, r1
 8005014:	4543      	cmp	r3, r8
 8005016:	dcf0      	bgt.n	8004ffa <_printf_float+0x42e>
 8005018:	e6fd      	b.n	8004e16 <_printf_float+0x24a>
 800501a:	f04f 0800 	mov.w	r8, #0
 800501e:	f104 0919 	add.w	r9, r4, #25
 8005022:	e7f4      	b.n	800500e <_printf_float+0x442>

08005024 <_printf_common>:
 8005024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005028:	4616      	mov	r6, r2
 800502a:	4698      	mov	r8, r3
 800502c:	688a      	ldr	r2, [r1, #8]
 800502e:	690b      	ldr	r3, [r1, #16]
 8005030:	4607      	mov	r7, r0
 8005032:	4293      	cmp	r3, r2
 8005034:	bfb8      	it	lt
 8005036:	4613      	movlt	r3, r2
 8005038:	6033      	str	r3, [r6, #0]
 800503a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800503e:	460c      	mov	r4, r1
 8005040:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005044:	b10a      	cbz	r2, 800504a <_printf_common+0x26>
 8005046:	3301      	adds	r3, #1
 8005048:	6033      	str	r3, [r6, #0]
 800504a:	6823      	ldr	r3, [r4, #0]
 800504c:	0699      	lsls	r1, r3, #26
 800504e:	bf42      	ittt	mi
 8005050:	6833      	ldrmi	r3, [r6, #0]
 8005052:	3302      	addmi	r3, #2
 8005054:	6033      	strmi	r3, [r6, #0]
 8005056:	6825      	ldr	r5, [r4, #0]
 8005058:	f015 0506 	ands.w	r5, r5, #6
 800505c:	d106      	bne.n	800506c <_printf_common+0x48>
 800505e:	f104 0a19 	add.w	sl, r4, #25
 8005062:	68e3      	ldr	r3, [r4, #12]
 8005064:	6832      	ldr	r2, [r6, #0]
 8005066:	1a9b      	subs	r3, r3, r2
 8005068:	42ab      	cmp	r3, r5
 800506a:	dc2b      	bgt.n	80050c4 <_printf_common+0xa0>
 800506c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005070:	6822      	ldr	r2, [r4, #0]
 8005072:	3b00      	subs	r3, #0
 8005074:	bf18      	it	ne
 8005076:	2301      	movne	r3, #1
 8005078:	0692      	lsls	r2, r2, #26
 800507a:	d430      	bmi.n	80050de <_printf_common+0xba>
 800507c:	4641      	mov	r1, r8
 800507e:	4638      	mov	r0, r7
 8005080:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005084:	47c8      	blx	r9
 8005086:	3001      	adds	r0, #1
 8005088:	d023      	beq.n	80050d2 <_printf_common+0xae>
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	6922      	ldr	r2, [r4, #16]
 800508e:	f003 0306 	and.w	r3, r3, #6
 8005092:	2b04      	cmp	r3, #4
 8005094:	bf14      	ite	ne
 8005096:	2500      	movne	r5, #0
 8005098:	6833      	ldreq	r3, [r6, #0]
 800509a:	f04f 0600 	mov.w	r6, #0
 800509e:	bf08      	it	eq
 80050a0:	68e5      	ldreq	r5, [r4, #12]
 80050a2:	f104 041a 	add.w	r4, r4, #26
 80050a6:	bf08      	it	eq
 80050a8:	1aed      	subeq	r5, r5, r3
 80050aa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80050ae:	bf08      	it	eq
 80050b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050b4:	4293      	cmp	r3, r2
 80050b6:	bfc4      	itt	gt
 80050b8:	1a9b      	subgt	r3, r3, r2
 80050ba:	18ed      	addgt	r5, r5, r3
 80050bc:	42b5      	cmp	r5, r6
 80050be:	d11a      	bne.n	80050f6 <_printf_common+0xd2>
 80050c0:	2000      	movs	r0, #0
 80050c2:	e008      	b.n	80050d6 <_printf_common+0xb2>
 80050c4:	2301      	movs	r3, #1
 80050c6:	4652      	mov	r2, sl
 80050c8:	4641      	mov	r1, r8
 80050ca:	4638      	mov	r0, r7
 80050cc:	47c8      	blx	r9
 80050ce:	3001      	adds	r0, #1
 80050d0:	d103      	bne.n	80050da <_printf_common+0xb6>
 80050d2:	f04f 30ff 	mov.w	r0, #4294967295
 80050d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050da:	3501      	adds	r5, #1
 80050dc:	e7c1      	b.n	8005062 <_printf_common+0x3e>
 80050de:	2030      	movs	r0, #48	@ 0x30
 80050e0:	18e1      	adds	r1, r4, r3
 80050e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80050ec:	4422      	add	r2, r4
 80050ee:	3302      	adds	r3, #2
 80050f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80050f4:	e7c2      	b.n	800507c <_printf_common+0x58>
 80050f6:	2301      	movs	r3, #1
 80050f8:	4622      	mov	r2, r4
 80050fa:	4641      	mov	r1, r8
 80050fc:	4638      	mov	r0, r7
 80050fe:	47c8      	blx	r9
 8005100:	3001      	adds	r0, #1
 8005102:	d0e6      	beq.n	80050d2 <_printf_common+0xae>
 8005104:	3601      	adds	r6, #1
 8005106:	e7d9      	b.n	80050bc <_printf_common+0x98>

08005108 <_printf_i>:
 8005108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800510c:	7e0f      	ldrb	r7, [r1, #24]
 800510e:	4691      	mov	r9, r2
 8005110:	2f78      	cmp	r7, #120	@ 0x78
 8005112:	4680      	mov	r8, r0
 8005114:	460c      	mov	r4, r1
 8005116:	469a      	mov	sl, r3
 8005118:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800511a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800511e:	d807      	bhi.n	8005130 <_printf_i+0x28>
 8005120:	2f62      	cmp	r7, #98	@ 0x62
 8005122:	d80a      	bhi.n	800513a <_printf_i+0x32>
 8005124:	2f00      	cmp	r7, #0
 8005126:	f000 80d1 	beq.w	80052cc <_printf_i+0x1c4>
 800512a:	2f58      	cmp	r7, #88	@ 0x58
 800512c:	f000 80b8 	beq.w	80052a0 <_printf_i+0x198>
 8005130:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005134:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005138:	e03a      	b.n	80051b0 <_printf_i+0xa8>
 800513a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800513e:	2b15      	cmp	r3, #21
 8005140:	d8f6      	bhi.n	8005130 <_printf_i+0x28>
 8005142:	a101      	add	r1, pc, #4	@ (adr r1, 8005148 <_printf_i+0x40>)
 8005144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005148:	080051a1 	.word	0x080051a1
 800514c:	080051b5 	.word	0x080051b5
 8005150:	08005131 	.word	0x08005131
 8005154:	08005131 	.word	0x08005131
 8005158:	08005131 	.word	0x08005131
 800515c:	08005131 	.word	0x08005131
 8005160:	080051b5 	.word	0x080051b5
 8005164:	08005131 	.word	0x08005131
 8005168:	08005131 	.word	0x08005131
 800516c:	08005131 	.word	0x08005131
 8005170:	08005131 	.word	0x08005131
 8005174:	080052b3 	.word	0x080052b3
 8005178:	080051df 	.word	0x080051df
 800517c:	0800526d 	.word	0x0800526d
 8005180:	08005131 	.word	0x08005131
 8005184:	08005131 	.word	0x08005131
 8005188:	080052d5 	.word	0x080052d5
 800518c:	08005131 	.word	0x08005131
 8005190:	080051df 	.word	0x080051df
 8005194:	08005131 	.word	0x08005131
 8005198:	08005131 	.word	0x08005131
 800519c:	08005275 	.word	0x08005275
 80051a0:	6833      	ldr	r3, [r6, #0]
 80051a2:	1d1a      	adds	r2, r3, #4
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6032      	str	r2, [r6, #0]
 80051a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051b0:	2301      	movs	r3, #1
 80051b2:	e09c      	b.n	80052ee <_printf_i+0x1e6>
 80051b4:	6833      	ldr	r3, [r6, #0]
 80051b6:	6820      	ldr	r0, [r4, #0]
 80051b8:	1d19      	adds	r1, r3, #4
 80051ba:	6031      	str	r1, [r6, #0]
 80051bc:	0606      	lsls	r6, r0, #24
 80051be:	d501      	bpl.n	80051c4 <_printf_i+0xbc>
 80051c0:	681d      	ldr	r5, [r3, #0]
 80051c2:	e003      	b.n	80051cc <_printf_i+0xc4>
 80051c4:	0645      	lsls	r5, r0, #25
 80051c6:	d5fb      	bpl.n	80051c0 <_printf_i+0xb8>
 80051c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051cc:	2d00      	cmp	r5, #0
 80051ce:	da03      	bge.n	80051d8 <_printf_i+0xd0>
 80051d0:	232d      	movs	r3, #45	@ 0x2d
 80051d2:	426d      	negs	r5, r5
 80051d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051d8:	230a      	movs	r3, #10
 80051da:	4858      	ldr	r0, [pc, #352]	@ (800533c <_printf_i+0x234>)
 80051dc:	e011      	b.n	8005202 <_printf_i+0xfa>
 80051de:	6821      	ldr	r1, [r4, #0]
 80051e0:	6833      	ldr	r3, [r6, #0]
 80051e2:	0608      	lsls	r0, r1, #24
 80051e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80051e8:	d402      	bmi.n	80051f0 <_printf_i+0xe8>
 80051ea:	0649      	lsls	r1, r1, #25
 80051ec:	bf48      	it	mi
 80051ee:	b2ad      	uxthmi	r5, r5
 80051f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80051f2:	6033      	str	r3, [r6, #0]
 80051f4:	bf14      	ite	ne
 80051f6:	230a      	movne	r3, #10
 80051f8:	2308      	moveq	r3, #8
 80051fa:	4850      	ldr	r0, [pc, #320]	@ (800533c <_printf_i+0x234>)
 80051fc:	2100      	movs	r1, #0
 80051fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005202:	6866      	ldr	r6, [r4, #4]
 8005204:	2e00      	cmp	r6, #0
 8005206:	60a6      	str	r6, [r4, #8]
 8005208:	db05      	blt.n	8005216 <_printf_i+0x10e>
 800520a:	6821      	ldr	r1, [r4, #0]
 800520c:	432e      	orrs	r6, r5
 800520e:	f021 0104 	bic.w	r1, r1, #4
 8005212:	6021      	str	r1, [r4, #0]
 8005214:	d04b      	beq.n	80052ae <_printf_i+0x1a6>
 8005216:	4616      	mov	r6, r2
 8005218:	fbb5 f1f3 	udiv	r1, r5, r3
 800521c:	fb03 5711 	mls	r7, r3, r1, r5
 8005220:	5dc7      	ldrb	r7, [r0, r7]
 8005222:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005226:	462f      	mov	r7, r5
 8005228:	42bb      	cmp	r3, r7
 800522a:	460d      	mov	r5, r1
 800522c:	d9f4      	bls.n	8005218 <_printf_i+0x110>
 800522e:	2b08      	cmp	r3, #8
 8005230:	d10b      	bne.n	800524a <_printf_i+0x142>
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	07df      	lsls	r7, r3, #31
 8005236:	d508      	bpl.n	800524a <_printf_i+0x142>
 8005238:	6923      	ldr	r3, [r4, #16]
 800523a:	6861      	ldr	r1, [r4, #4]
 800523c:	4299      	cmp	r1, r3
 800523e:	bfde      	ittt	le
 8005240:	2330      	movle	r3, #48	@ 0x30
 8005242:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005246:	f106 36ff 	addle.w	r6, r6, #4294967295
 800524a:	1b92      	subs	r2, r2, r6
 800524c:	6122      	str	r2, [r4, #16]
 800524e:	464b      	mov	r3, r9
 8005250:	4621      	mov	r1, r4
 8005252:	4640      	mov	r0, r8
 8005254:	f8cd a000 	str.w	sl, [sp]
 8005258:	aa03      	add	r2, sp, #12
 800525a:	f7ff fee3 	bl	8005024 <_printf_common>
 800525e:	3001      	adds	r0, #1
 8005260:	d14a      	bne.n	80052f8 <_printf_i+0x1f0>
 8005262:	f04f 30ff 	mov.w	r0, #4294967295
 8005266:	b004      	add	sp, #16
 8005268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	f043 0320 	orr.w	r3, r3, #32
 8005272:	6023      	str	r3, [r4, #0]
 8005274:	2778      	movs	r7, #120	@ 0x78
 8005276:	4832      	ldr	r0, [pc, #200]	@ (8005340 <_printf_i+0x238>)
 8005278:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800527c:	6823      	ldr	r3, [r4, #0]
 800527e:	6831      	ldr	r1, [r6, #0]
 8005280:	061f      	lsls	r7, r3, #24
 8005282:	f851 5b04 	ldr.w	r5, [r1], #4
 8005286:	d402      	bmi.n	800528e <_printf_i+0x186>
 8005288:	065f      	lsls	r7, r3, #25
 800528a:	bf48      	it	mi
 800528c:	b2ad      	uxthmi	r5, r5
 800528e:	6031      	str	r1, [r6, #0]
 8005290:	07d9      	lsls	r1, r3, #31
 8005292:	bf44      	itt	mi
 8005294:	f043 0320 	orrmi.w	r3, r3, #32
 8005298:	6023      	strmi	r3, [r4, #0]
 800529a:	b11d      	cbz	r5, 80052a4 <_printf_i+0x19c>
 800529c:	2310      	movs	r3, #16
 800529e:	e7ad      	b.n	80051fc <_printf_i+0xf4>
 80052a0:	4826      	ldr	r0, [pc, #152]	@ (800533c <_printf_i+0x234>)
 80052a2:	e7e9      	b.n	8005278 <_printf_i+0x170>
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	f023 0320 	bic.w	r3, r3, #32
 80052aa:	6023      	str	r3, [r4, #0]
 80052ac:	e7f6      	b.n	800529c <_printf_i+0x194>
 80052ae:	4616      	mov	r6, r2
 80052b0:	e7bd      	b.n	800522e <_printf_i+0x126>
 80052b2:	6833      	ldr	r3, [r6, #0]
 80052b4:	6825      	ldr	r5, [r4, #0]
 80052b6:	1d18      	adds	r0, r3, #4
 80052b8:	6961      	ldr	r1, [r4, #20]
 80052ba:	6030      	str	r0, [r6, #0]
 80052bc:	062e      	lsls	r6, r5, #24
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	d501      	bpl.n	80052c6 <_printf_i+0x1be>
 80052c2:	6019      	str	r1, [r3, #0]
 80052c4:	e002      	b.n	80052cc <_printf_i+0x1c4>
 80052c6:	0668      	lsls	r0, r5, #25
 80052c8:	d5fb      	bpl.n	80052c2 <_printf_i+0x1ba>
 80052ca:	8019      	strh	r1, [r3, #0]
 80052cc:	2300      	movs	r3, #0
 80052ce:	4616      	mov	r6, r2
 80052d0:	6123      	str	r3, [r4, #16]
 80052d2:	e7bc      	b.n	800524e <_printf_i+0x146>
 80052d4:	6833      	ldr	r3, [r6, #0]
 80052d6:	2100      	movs	r1, #0
 80052d8:	1d1a      	adds	r2, r3, #4
 80052da:	6032      	str	r2, [r6, #0]
 80052dc:	681e      	ldr	r6, [r3, #0]
 80052de:	6862      	ldr	r2, [r4, #4]
 80052e0:	4630      	mov	r0, r6
 80052e2:	f000 f9d6 	bl	8005692 <memchr>
 80052e6:	b108      	cbz	r0, 80052ec <_printf_i+0x1e4>
 80052e8:	1b80      	subs	r0, r0, r6
 80052ea:	6060      	str	r0, [r4, #4]
 80052ec:	6863      	ldr	r3, [r4, #4]
 80052ee:	6123      	str	r3, [r4, #16]
 80052f0:	2300      	movs	r3, #0
 80052f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052f6:	e7aa      	b.n	800524e <_printf_i+0x146>
 80052f8:	4632      	mov	r2, r6
 80052fa:	4649      	mov	r1, r9
 80052fc:	4640      	mov	r0, r8
 80052fe:	6923      	ldr	r3, [r4, #16]
 8005300:	47d0      	blx	sl
 8005302:	3001      	adds	r0, #1
 8005304:	d0ad      	beq.n	8005262 <_printf_i+0x15a>
 8005306:	6823      	ldr	r3, [r4, #0]
 8005308:	079b      	lsls	r3, r3, #30
 800530a:	d413      	bmi.n	8005334 <_printf_i+0x22c>
 800530c:	68e0      	ldr	r0, [r4, #12]
 800530e:	9b03      	ldr	r3, [sp, #12]
 8005310:	4298      	cmp	r0, r3
 8005312:	bfb8      	it	lt
 8005314:	4618      	movlt	r0, r3
 8005316:	e7a6      	b.n	8005266 <_printf_i+0x15e>
 8005318:	2301      	movs	r3, #1
 800531a:	4632      	mov	r2, r6
 800531c:	4649      	mov	r1, r9
 800531e:	4640      	mov	r0, r8
 8005320:	47d0      	blx	sl
 8005322:	3001      	adds	r0, #1
 8005324:	d09d      	beq.n	8005262 <_printf_i+0x15a>
 8005326:	3501      	adds	r5, #1
 8005328:	68e3      	ldr	r3, [r4, #12]
 800532a:	9903      	ldr	r1, [sp, #12]
 800532c:	1a5b      	subs	r3, r3, r1
 800532e:	42ab      	cmp	r3, r5
 8005330:	dcf2      	bgt.n	8005318 <_printf_i+0x210>
 8005332:	e7eb      	b.n	800530c <_printf_i+0x204>
 8005334:	2500      	movs	r5, #0
 8005336:	f104 0619 	add.w	r6, r4, #25
 800533a:	e7f5      	b.n	8005328 <_printf_i+0x220>
 800533c:	08007f3c 	.word	0x08007f3c
 8005340:	08007f4d 	.word	0x08007f4d

08005344 <std>:
 8005344:	2300      	movs	r3, #0
 8005346:	b510      	push	{r4, lr}
 8005348:	4604      	mov	r4, r0
 800534a:	e9c0 3300 	strd	r3, r3, [r0]
 800534e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005352:	6083      	str	r3, [r0, #8]
 8005354:	8181      	strh	r1, [r0, #12]
 8005356:	6643      	str	r3, [r0, #100]	@ 0x64
 8005358:	81c2      	strh	r2, [r0, #14]
 800535a:	6183      	str	r3, [r0, #24]
 800535c:	4619      	mov	r1, r3
 800535e:	2208      	movs	r2, #8
 8005360:	305c      	adds	r0, #92	@ 0x5c
 8005362:	f000 f916 	bl	8005592 <memset>
 8005366:	4b0d      	ldr	r3, [pc, #52]	@ (800539c <std+0x58>)
 8005368:	6224      	str	r4, [r4, #32]
 800536a:	6263      	str	r3, [r4, #36]	@ 0x24
 800536c:	4b0c      	ldr	r3, [pc, #48]	@ (80053a0 <std+0x5c>)
 800536e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005370:	4b0c      	ldr	r3, [pc, #48]	@ (80053a4 <std+0x60>)
 8005372:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005374:	4b0c      	ldr	r3, [pc, #48]	@ (80053a8 <std+0x64>)
 8005376:	6323      	str	r3, [r4, #48]	@ 0x30
 8005378:	4b0c      	ldr	r3, [pc, #48]	@ (80053ac <std+0x68>)
 800537a:	429c      	cmp	r4, r3
 800537c:	d006      	beq.n	800538c <std+0x48>
 800537e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005382:	4294      	cmp	r4, r2
 8005384:	d002      	beq.n	800538c <std+0x48>
 8005386:	33d0      	adds	r3, #208	@ 0xd0
 8005388:	429c      	cmp	r4, r3
 800538a:	d105      	bne.n	8005398 <std+0x54>
 800538c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005394:	f000 b97a 	b.w	800568c <__retarget_lock_init_recursive>
 8005398:	bd10      	pop	{r4, pc}
 800539a:	bf00      	nop
 800539c:	0800550d 	.word	0x0800550d
 80053a0:	0800552f 	.word	0x0800552f
 80053a4:	08005567 	.word	0x08005567
 80053a8:	0800558b 	.word	0x0800558b
 80053ac:	200005e4 	.word	0x200005e4

080053b0 <stdio_exit_handler>:
 80053b0:	4a02      	ldr	r2, [pc, #8]	@ (80053bc <stdio_exit_handler+0xc>)
 80053b2:	4903      	ldr	r1, [pc, #12]	@ (80053c0 <stdio_exit_handler+0x10>)
 80053b4:	4803      	ldr	r0, [pc, #12]	@ (80053c4 <stdio_exit_handler+0x14>)
 80053b6:	f000 b869 	b.w	800548c <_fwalk_sglue>
 80053ba:	bf00      	nop
 80053bc:	20000014 	.word	0x20000014
 80053c0:	08007009 	.word	0x08007009
 80053c4:	20000024 	.word	0x20000024

080053c8 <cleanup_stdio>:
 80053c8:	6841      	ldr	r1, [r0, #4]
 80053ca:	4b0c      	ldr	r3, [pc, #48]	@ (80053fc <cleanup_stdio+0x34>)
 80053cc:	b510      	push	{r4, lr}
 80053ce:	4299      	cmp	r1, r3
 80053d0:	4604      	mov	r4, r0
 80053d2:	d001      	beq.n	80053d8 <cleanup_stdio+0x10>
 80053d4:	f001 fe18 	bl	8007008 <_fflush_r>
 80053d8:	68a1      	ldr	r1, [r4, #8]
 80053da:	4b09      	ldr	r3, [pc, #36]	@ (8005400 <cleanup_stdio+0x38>)
 80053dc:	4299      	cmp	r1, r3
 80053de:	d002      	beq.n	80053e6 <cleanup_stdio+0x1e>
 80053e0:	4620      	mov	r0, r4
 80053e2:	f001 fe11 	bl	8007008 <_fflush_r>
 80053e6:	68e1      	ldr	r1, [r4, #12]
 80053e8:	4b06      	ldr	r3, [pc, #24]	@ (8005404 <cleanup_stdio+0x3c>)
 80053ea:	4299      	cmp	r1, r3
 80053ec:	d004      	beq.n	80053f8 <cleanup_stdio+0x30>
 80053ee:	4620      	mov	r0, r4
 80053f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053f4:	f001 be08 	b.w	8007008 <_fflush_r>
 80053f8:	bd10      	pop	{r4, pc}
 80053fa:	bf00      	nop
 80053fc:	200005e4 	.word	0x200005e4
 8005400:	2000064c 	.word	0x2000064c
 8005404:	200006b4 	.word	0x200006b4

08005408 <global_stdio_init.part.0>:
 8005408:	b510      	push	{r4, lr}
 800540a:	4b0b      	ldr	r3, [pc, #44]	@ (8005438 <global_stdio_init.part.0+0x30>)
 800540c:	4c0b      	ldr	r4, [pc, #44]	@ (800543c <global_stdio_init.part.0+0x34>)
 800540e:	4a0c      	ldr	r2, [pc, #48]	@ (8005440 <global_stdio_init.part.0+0x38>)
 8005410:	4620      	mov	r0, r4
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	2104      	movs	r1, #4
 8005416:	2200      	movs	r2, #0
 8005418:	f7ff ff94 	bl	8005344 <std>
 800541c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005420:	2201      	movs	r2, #1
 8005422:	2109      	movs	r1, #9
 8005424:	f7ff ff8e 	bl	8005344 <std>
 8005428:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800542c:	2202      	movs	r2, #2
 800542e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005432:	2112      	movs	r1, #18
 8005434:	f7ff bf86 	b.w	8005344 <std>
 8005438:	2000071c 	.word	0x2000071c
 800543c:	200005e4 	.word	0x200005e4
 8005440:	080053b1 	.word	0x080053b1

08005444 <__sfp_lock_acquire>:
 8005444:	4801      	ldr	r0, [pc, #4]	@ (800544c <__sfp_lock_acquire+0x8>)
 8005446:	f000 b922 	b.w	800568e <__retarget_lock_acquire_recursive>
 800544a:	bf00      	nop
 800544c:	20000725 	.word	0x20000725

08005450 <__sfp_lock_release>:
 8005450:	4801      	ldr	r0, [pc, #4]	@ (8005458 <__sfp_lock_release+0x8>)
 8005452:	f000 b91d 	b.w	8005690 <__retarget_lock_release_recursive>
 8005456:	bf00      	nop
 8005458:	20000725 	.word	0x20000725

0800545c <__sinit>:
 800545c:	b510      	push	{r4, lr}
 800545e:	4604      	mov	r4, r0
 8005460:	f7ff fff0 	bl	8005444 <__sfp_lock_acquire>
 8005464:	6a23      	ldr	r3, [r4, #32]
 8005466:	b11b      	cbz	r3, 8005470 <__sinit+0x14>
 8005468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800546c:	f7ff bff0 	b.w	8005450 <__sfp_lock_release>
 8005470:	4b04      	ldr	r3, [pc, #16]	@ (8005484 <__sinit+0x28>)
 8005472:	6223      	str	r3, [r4, #32]
 8005474:	4b04      	ldr	r3, [pc, #16]	@ (8005488 <__sinit+0x2c>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1f5      	bne.n	8005468 <__sinit+0xc>
 800547c:	f7ff ffc4 	bl	8005408 <global_stdio_init.part.0>
 8005480:	e7f2      	b.n	8005468 <__sinit+0xc>
 8005482:	bf00      	nop
 8005484:	080053c9 	.word	0x080053c9
 8005488:	2000071c 	.word	0x2000071c

0800548c <_fwalk_sglue>:
 800548c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005490:	4607      	mov	r7, r0
 8005492:	4688      	mov	r8, r1
 8005494:	4614      	mov	r4, r2
 8005496:	2600      	movs	r6, #0
 8005498:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800549c:	f1b9 0901 	subs.w	r9, r9, #1
 80054a0:	d505      	bpl.n	80054ae <_fwalk_sglue+0x22>
 80054a2:	6824      	ldr	r4, [r4, #0]
 80054a4:	2c00      	cmp	r4, #0
 80054a6:	d1f7      	bne.n	8005498 <_fwalk_sglue+0xc>
 80054a8:	4630      	mov	r0, r6
 80054aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054ae:	89ab      	ldrh	r3, [r5, #12]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d907      	bls.n	80054c4 <_fwalk_sglue+0x38>
 80054b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054b8:	3301      	adds	r3, #1
 80054ba:	d003      	beq.n	80054c4 <_fwalk_sglue+0x38>
 80054bc:	4629      	mov	r1, r5
 80054be:	4638      	mov	r0, r7
 80054c0:	47c0      	blx	r8
 80054c2:	4306      	orrs	r6, r0
 80054c4:	3568      	adds	r5, #104	@ 0x68
 80054c6:	e7e9      	b.n	800549c <_fwalk_sglue+0x10>

080054c8 <siprintf>:
 80054c8:	b40e      	push	{r1, r2, r3}
 80054ca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80054ce:	b510      	push	{r4, lr}
 80054d0:	2400      	movs	r4, #0
 80054d2:	b09d      	sub	sp, #116	@ 0x74
 80054d4:	ab1f      	add	r3, sp, #124	@ 0x7c
 80054d6:	9002      	str	r0, [sp, #8]
 80054d8:	9006      	str	r0, [sp, #24]
 80054da:	9107      	str	r1, [sp, #28]
 80054dc:	9104      	str	r1, [sp, #16]
 80054de:	4809      	ldr	r0, [pc, #36]	@ (8005504 <siprintf+0x3c>)
 80054e0:	4909      	ldr	r1, [pc, #36]	@ (8005508 <siprintf+0x40>)
 80054e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80054e6:	9105      	str	r1, [sp, #20]
 80054e8:	6800      	ldr	r0, [r0, #0]
 80054ea:	a902      	add	r1, sp, #8
 80054ec:	9301      	str	r3, [sp, #4]
 80054ee:	941b      	str	r4, [sp, #108]	@ 0x6c
 80054f0:	f001 fc0e 	bl	8006d10 <_svfiprintf_r>
 80054f4:	9b02      	ldr	r3, [sp, #8]
 80054f6:	701c      	strb	r4, [r3, #0]
 80054f8:	b01d      	add	sp, #116	@ 0x74
 80054fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054fe:	b003      	add	sp, #12
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	20000020 	.word	0x20000020
 8005508:	ffff0208 	.word	0xffff0208

0800550c <__sread>:
 800550c:	b510      	push	{r4, lr}
 800550e:	460c      	mov	r4, r1
 8005510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005514:	f000 f86c 	bl	80055f0 <_read_r>
 8005518:	2800      	cmp	r0, #0
 800551a:	bfab      	itete	ge
 800551c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800551e:	89a3      	ldrhlt	r3, [r4, #12]
 8005520:	181b      	addge	r3, r3, r0
 8005522:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005526:	bfac      	ite	ge
 8005528:	6563      	strge	r3, [r4, #84]	@ 0x54
 800552a:	81a3      	strhlt	r3, [r4, #12]
 800552c:	bd10      	pop	{r4, pc}

0800552e <__swrite>:
 800552e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005532:	461f      	mov	r7, r3
 8005534:	898b      	ldrh	r3, [r1, #12]
 8005536:	4605      	mov	r5, r0
 8005538:	05db      	lsls	r3, r3, #23
 800553a:	460c      	mov	r4, r1
 800553c:	4616      	mov	r6, r2
 800553e:	d505      	bpl.n	800554c <__swrite+0x1e>
 8005540:	2302      	movs	r3, #2
 8005542:	2200      	movs	r2, #0
 8005544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005548:	f000 f840 	bl	80055cc <_lseek_r>
 800554c:	89a3      	ldrh	r3, [r4, #12]
 800554e:	4632      	mov	r2, r6
 8005550:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005554:	81a3      	strh	r3, [r4, #12]
 8005556:	4628      	mov	r0, r5
 8005558:	463b      	mov	r3, r7
 800555a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800555e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005562:	f000 b857 	b.w	8005614 <_write_r>

08005566 <__sseek>:
 8005566:	b510      	push	{r4, lr}
 8005568:	460c      	mov	r4, r1
 800556a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800556e:	f000 f82d 	bl	80055cc <_lseek_r>
 8005572:	1c43      	adds	r3, r0, #1
 8005574:	89a3      	ldrh	r3, [r4, #12]
 8005576:	bf15      	itete	ne
 8005578:	6560      	strne	r0, [r4, #84]	@ 0x54
 800557a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800557e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005582:	81a3      	strheq	r3, [r4, #12]
 8005584:	bf18      	it	ne
 8005586:	81a3      	strhne	r3, [r4, #12]
 8005588:	bd10      	pop	{r4, pc}

0800558a <__sclose>:
 800558a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800558e:	f000 b80d 	b.w	80055ac <_close_r>

08005592 <memset>:
 8005592:	4603      	mov	r3, r0
 8005594:	4402      	add	r2, r0
 8005596:	4293      	cmp	r3, r2
 8005598:	d100      	bne.n	800559c <memset+0xa>
 800559a:	4770      	bx	lr
 800559c:	f803 1b01 	strb.w	r1, [r3], #1
 80055a0:	e7f9      	b.n	8005596 <memset+0x4>
	...

080055a4 <_localeconv_r>:
 80055a4:	4800      	ldr	r0, [pc, #0]	@ (80055a8 <_localeconv_r+0x4>)
 80055a6:	4770      	bx	lr
 80055a8:	20000160 	.word	0x20000160

080055ac <_close_r>:
 80055ac:	b538      	push	{r3, r4, r5, lr}
 80055ae:	2300      	movs	r3, #0
 80055b0:	4d05      	ldr	r5, [pc, #20]	@ (80055c8 <_close_r+0x1c>)
 80055b2:	4604      	mov	r4, r0
 80055b4:	4608      	mov	r0, r1
 80055b6:	602b      	str	r3, [r5, #0]
 80055b8:	f7fc fd89 	bl	80020ce <_close>
 80055bc:	1c43      	adds	r3, r0, #1
 80055be:	d102      	bne.n	80055c6 <_close_r+0x1a>
 80055c0:	682b      	ldr	r3, [r5, #0]
 80055c2:	b103      	cbz	r3, 80055c6 <_close_r+0x1a>
 80055c4:	6023      	str	r3, [r4, #0]
 80055c6:	bd38      	pop	{r3, r4, r5, pc}
 80055c8:	20000720 	.word	0x20000720

080055cc <_lseek_r>:
 80055cc:	b538      	push	{r3, r4, r5, lr}
 80055ce:	4604      	mov	r4, r0
 80055d0:	4608      	mov	r0, r1
 80055d2:	4611      	mov	r1, r2
 80055d4:	2200      	movs	r2, #0
 80055d6:	4d05      	ldr	r5, [pc, #20]	@ (80055ec <_lseek_r+0x20>)
 80055d8:	602a      	str	r2, [r5, #0]
 80055da:	461a      	mov	r2, r3
 80055dc:	f7fc fd9b 	bl	8002116 <_lseek>
 80055e0:	1c43      	adds	r3, r0, #1
 80055e2:	d102      	bne.n	80055ea <_lseek_r+0x1e>
 80055e4:	682b      	ldr	r3, [r5, #0]
 80055e6:	b103      	cbz	r3, 80055ea <_lseek_r+0x1e>
 80055e8:	6023      	str	r3, [r4, #0]
 80055ea:	bd38      	pop	{r3, r4, r5, pc}
 80055ec:	20000720 	.word	0x20000720

080055f0 <_read_r>:
 80055f0:	b538      	push	{r3, r4, r5, lr}
 80055f2:	4604      	mov	r4, r0
 80055f4:	4608      	mov	r0, r1
 80055f6:	4611      	mov	r1, r2
 80055f8:	2200      	movs	r2, #0
 80055fa:	4d05      	ldr	r5, [pc, #20]	@ (8005610 <_read_r+0x20>)
 80055fc:	602a      	str	r2, [r5, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	f7fc fd2c 	bl	800205c <_read>
 8005604:	1c43      	adds	r3, r0, #1
 8005606:	d102      	bne.n	800560e <_read_r+0x1e>
 8005608:	682b      	ldr	r3, [r5, #0]
 800560a:	b103      	cbz	r3, 800560e <_read_r+0x1e>
 800560c:	6023      	str	r3, [r4, #0]
 800560e:	bd38      	pop	{r3, r4, r5, pc}
 8005610:	20000720 	.word	0x20000720

08005614 <_write_r>:
 8005614:	b538      	push	{r3, r4, r5, lr}
 8005616:	4604      	mov	r4, r0
 8005618:	4608      	mov	r0, r1
 800561a:	4611      	mov	r1, r2
 800561c:	2200      	movs	r2, #0
 800561e:	4d05      	ldr	r5, [pc, #20]	@ (8005634 <_write_r+0x20>)
 8005620:	602a      	str	r2, [r5, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	f7fc fd37 	bl	8002096 <_write>
 8005628:	1c43      	adds	r3, r0, #1
 800562a:	d102      	bne.n	8005632 <_write_r+0x1e>
 800562c:	682b      	ldr	r3, [r5, #0]
 800562e:	b103      	cbz	r3, 8005632 <_write_r+0x1e>
 8005630:	6023      	str	r3, [r4, #0]
 8005632:	bd38      	pop	{r3, r4, r5, pc}
 8005634:	20000720 	.word	0x20000720

08005638 <__errno>:
 8005638:	4b01      	ldr	r3, [pc, #4]	@ (8005640 <__errno+0x8>)
 800563a:	6818      	ldr	r0, [r3, #0]
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	20000020 	.word	0x20000020

08005644 <__libc_init_array>:
 8005644:	b570      	push	{r4, r5, r6, lr}
 8005646:	2600      	movs	r6, #0
 8005648:	4d0c      	ldr	r5, [pc, #48]	@ (800567c <__libc_init_array+0x38>)
 800564a:	4c0d      	ldr	r4, [pc, #52]	@ (8005680 <__libc_init_array+0x3c>)
 800564c:	1b64      	subs	r4, r4, r5
 800564e:	10a4      	asrs	r4, r4, #2
 8005650:	42a6      	cmp	r6, r4
 8005652:	d109      	bne.n	8005668 <__libc_init_array+0x24>
 8005654:	f002 f874 	bl	8007740 <_init>
 8005658:	2600      	movs	r6, #0
 800565a:	4d0a      	ldr	r5, [pc, #40]	@ (8005684 <__libc_init_array+0x40>)
 800565c:	4c0a      	ldr	r4, [pc, #40]	@ (8005688 <__libc_init_array+0x44>)
 800565e:	1b64      	subs	r4, r4, r5
 8005660:	10a4      	asrs	r4, r4, #2
 8005662:	42a6      	cmp	r6, r4
 8005664:	d105      	bne.n	8005672 <__libc_init_array+0x2e>
 8005666:	bd70      	pop	{r4, r5, r6, pc}
 8005668:	f855 3b04 	ldr.w	r3, [r5], #4
 800566c:	4798      	blx	r3
 800566e:	3601      	adds	r6, #1
 8005670:	e7ee      	b.n	8005650 <__libc_init_array+0xc>
 8005672:	f855 3b04 	ldr.w	r3, [r5], #4
 8005676:	4798      	blx	r3
 8005678:	3601      	adds	r6, #1
 800567a:	e7f2      	b.n	8005662 <__libc_init_array+0x1e>
 800567c:	080082a4 	.word	0x080082a4
 8005680:	080082a4 	.word	0x080082a4
 8005684:	080082a4 	.word	0x080082a4
 8005688:	080082a8 	.word	0x080082a8

0800568c <__retarget_lock_init_recursive>:
 800568c:	4770      	bx	lr

0800568e <__retarget_lock_acquire_recursive>:
 800568e:	4770      	bx	lr

08005690 <__retarget_lock_release_recursive>:
 8005690:	4770      	bx	lr

08005692 <memchr>:
 8005692:	4603      	mov	r3, r0
 8005694:	b510      	push	{r4, lr}
 8005696:	b2c9      	uxtb	r1, r1
 8005698:	4402      	add	r2, r0
 800569a:	4293      	cmp	r3, r2
 800569c:	4618      	mov	r0, r3
 800569e:	d101      	bne.n	80056a4 <memchr+0x12>
 80056a0:	2000      	movs	r0, #0
 80056a2:	e003      	b.n	80056ac <memchr+0x1a>
 80056a4:	7804      	ldrb	r4, [r0, #0]
 80056a6:	3301      	adds	r3, #1
 80056a8:	428c      	cmp	r4, r1
 80056aa:	d1f6      	bne.n	800569a <memchr+0x8>
 80056ac:	bd10      	pop	{r4, pc}

080056ae <quorem>:
 80056ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b2:	6903      	ldr	r3, [r0, #16]
 80056b4:	690c      	ldr	r4, [r1, #16]
 80056b6:	4607      	mov	r7, r0
 80056b8:	42a3      	cmp	r3, r4
 80056ba:	db7e      	blt.n	80057ba <quorem+0x10c>
 80056bc:	3c01      	subs	r4, #1
 80056be:	00a3      	lsls	r3, r4, #2
 80056c0:	f100 0514 	add.w	r5, r0, #20
 80056c4:	f101 0814 	add.w	r8, r1, #20
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056ce:	9301      	str	r3, [sp, #4]
 80056d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80056d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056d8:	3301      	adds	r3, #1
 80056da:	429a      	cmp	r2, r3
 80056dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80056e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80056e4:	d32e      	bcc.n	8005744 <quorem+0x96>
 80056e6:	f04f 0a00 	mov.w	sl, #0
 80056ea:	46c4      	mov	ip, r8
 80056ec:	46ae      	mov	lr, r5
 80056ee:	46d3      	mov	fp, sl
 80056f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80056f4:	b298      	uxth	r0, r3
 80056f6:	fb06 a000 	mla	r0, r6, r0, sl
 80056fa:	0c1b      	lsrs	r3, r3, #16
 80056fc:	0c02      	lsrs	r2, r0, #16
 80056fe:	fb06 2303 	mla	r3, r6, r3, r2
 8005702:	f8de 2000 	ldr.w	r2, [lr]
 8005706:	b280      	uxth	r0, r0
 8005708:	b292      	uxth	r2, r2
 800570a:	1a12      	subs	r2, r2, r0
 800570c:	445a      	add	r2, fp
 800570e:	f8de 0000 	ldr.w	r0, [lr]
 8005712:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005716:	b29b      	uxth	r3, r3
 8005718:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800571c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005720:	b292      	uxth	r2, r2
 8005722:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005726:	45e1      	cmp	r9, ip
 8005728:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800572c:	f84e 2b04 	str.w	r2, [lr], #4
 8005730:	d2de      	bcs.n	80056f0 <quorem+0x42>
 8005732:	9b00      	ldr	r3, [sp, #0]
 8005734:	58eb      	ldr	r3, [r5, r3]
 8005736:	b92b      	cbnz	r3, 8005744 <quorem+0x96>
 8005738:	9b01      	ldr	r3, [sp, #4]
 800573a:	3b04      	subs	r3, #4
 800573c:	429d      	cmp	r5, r3
 800573e:	461a      	mov	r2, r3
 8005740:	d32f      	bcc.n	80057a2 <quorem+0xf4>
 8005742:	613c      	str	r4, [r7, #16]
 8005744:	4638      	mov	r0, r7
 8005746:	f001 f97f 	bl	8006a48 <__mcmp>
 800574a:	2800      	cmp	r0, #0
 800574c:	db25      	blt.n	800579a <quorem+0xec>
 800574e:	4629      	mov	r1, r5
 8005750:	2000      	movs	r0, #0
 8005752:	f858 2b04 	ldr.w	r2, [r8], #4
 8005756:	f8d1 c000 	ldr.w	ip, [r1]
 800575a:	fa1f fe82 	uxth.w	lr, r2
 800575e:	fa1f f38c 	uxth.w	r3, ip
 8005762:	eba3 030e 	sub.w	r3, r3, lr
 8005766:	4403      	add	r3, r0
 8005768:	0c12      	lsrs	r2, r2, #16
 800576a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800576e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005772:	b29b      	uxth	r3, r3
 8005774:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005778:	45c1      	cmp	r9, r8
 800577a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800577e:	f841 3b04 	str.w	r3, [r1], #4
 8005782:	d2e6      	bcs.n	8005752 <quorem+0xa4>
 8005784:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005788:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800578c:	b922      	cbnz	r2, 8005798 <quorem+0xea>
 800578e:	3b04      	subs	r3, #4
 8005790:	429d      	cmp	r5, r3
 8005792:	461a      	mov	r2, r3
 8005794:	d30b      	bcc.n	80057ae <quorem+0x100>
 8005796:	613c      	str	r4, [r7, #16]
 8005798:	3601      	adds	r6, #1
 800579a:	4630      	mov	r0, r6
 800579c:	b003      	add	sp, #12
 800579e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057a2:	6812      	ldr	r2, [r2, #0]
 80057a4:	3b04      	subs	r3, #4
 80057a6:	2a00      	cmp	r2, #0
 80057a8:	d1cb      	bne.n	8005742 <quorem+0x94>
 80057aa:	3c01      	subs	r4, #1
 80057ac:	e7c6      	b.n	800573c <quorem+0x8e>
 80057ae:	6812      	ldr	r2, [r2, #0]
 80057b0:	3b04      	subs	r3, #4
 80057b2:	2a00      	cmp	r2, #0
 80057b4:	d1ef      	bne.n	8005796 <quorem+0xe8>
 80057b6:	3c01      	subs	r4, #1
 80057b8:	e7ea      	b.n	8005790 <quorem+0xe2>
 80057ba:	2000      	movs	r0, #0
 80057bc:	e7ee      	b.n	800579c <quorem+0xee>
	...

080057c0 <_dtoa_r>:
 80057c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c4:	4614      	mov	r4, r2
 80057c6:	461d      	mov	r5, r3
 80057c8:	69c7      	ldr	r7, [r0, #28]
 80057ca:	b097      	sub	sp, #92	@ 0x5c
 80057cc:	4681      	mov	r9, r0
 80057ce:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80057d2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80057d4:	b97f      	cbnz	r7, 80057f6 <_dtoa_r+0x36>
 80057d6:	2010      	movs	r0, #16
 80057d8:	f000 fe0e 	bl	80063f8 <malloc>
 80057dc:	4602      	mov	r2, r0
 80057de:	f8c9 001c 	str.w	r0, [r9, #28]
 80057e2:	b920      	cbnz	r0, 80057ee <_dtoa_r+0x2e>
 80057e4:	21ef      	movs	r1, #239	@ 0xef
 80057e6:	4bac      	ldr	r3, [pc, #688]	@ (8005a98 <_dtoa_r+0x2d8>)
 80057e8:	48ac      	ldr	r0, [pc, #688]	@ (8005a9c <_dtoa_r+0x2dc>)
 80057ea:	f001 fc6d 	bl	80070c8 <__assert_func>
 80057ee:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80057f2:	6007      	str	r7, [r0, #0]
 80057f4:	60c7      	str	r7, [r0, #12]
 80057f6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80057fa:	6819      	ldr	r1, [r3, #0]
 80057fc:	b159      	cbz	r1, 8005816 <_dtoa_r+0x56>
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	2301      	movs	r3, #1
 8005802:	4093      	lsls	r3, r2
 8005804:	604a      	str	r2, [r1, #4]
 8005806:	608b      	str	r3, [r1, #8]
 8005808:	4648      	mov	r0, r9
 800580a:	f000 feeb 	bl	80065e4 <_Bfree>
 800580e:	2200      	movs	r2, #0
 8005810:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	1e2b      	subs	r3, r5, #0
 8005818:	bfaf      	iteee	ge
 800581a:	2300      	movge	r3, #0
 800581c:	2201      	movlt	r2, #1
 800581e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005822:	9307      	strlt	r3, [sp, #28]
 8005824:	bfa8      	it	ge
 8005826:	6033      	strge	r3, [r6, #0]
 8005828:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800582c:	4b9c      	ldr	r3, [pc, #624]	@ (8005aa0 <_dtoa_r+0x2e0>)
 800582e:	bfb8      	it	lt
 8005830:	6032      	strlt	r2, [r6, #0]
 8005832:	ea33 0308 	bics.w	r3, r3, r8
 8005836:	d112      	bne.n	800585e <_dtoa_r+0x9e>
 8005838:	f242 730f 	movw	r3, #9999	@ 0x270f
 800583c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800583e:	6013      	str	r3, [r2, #0]
 8005840:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005844:	4323      	orrs	r3, r4
 8005846:	f000 855e 	beq.w	8006306 <_dtoa_r+0xb46>
 800584a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800584c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005aa4 <_dtoa_r+0x2e4>
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 8560 	beq.w	8006316 <_dtoa_r+0xb56>
 8005856:	f10a 0303 	add.w	r3, sl, #3
 800585a:	f000 bd5a 	b.w	8006312 <_dtoa_r+0xb52>
 800585e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005862:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005866:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800586a:	2200      	movs	r2, #0
 800586c:	2300      	movs	r3, #0
 800586e:	f7fb f89b 	bl	80009a8 <__aeabi_dcmpeq>
 8005872:	4607      	mov	r7, r0
 8005874:	b158      	cbz	r0, 800588e <_dtoa_r+0xce>
 8005876:	2301      	movs	r3, #1
 8005878:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800587a:	6013      	str	r3, [r2, #0]
 800587c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800587e:	b113      	cbz	r3, 8005886 <_dtoa_r+0xc6>
 8005880:	4b89      	ldr	r3, [pc, #548]	@ (8005aa8 <_dtoa_r+0x2e8>)
 8005882:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005884:	6013      	str	r3, [r2, #0]
 8005886:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8005aac <_dtoa_r+0x2ec>
 800588a:	f000 bd44 	b.w	8006316 <_dtoa_r+0xb56>
 800588e:	ab14      	add	r3, sp, #80	@ 0x50
 8005890:	9301      	str	r3, [sp, #4]
 8005892:	ab15      	add	r3, sp, #84	@ 0x54
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	4648      	mov	r0, r9
 8005898:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800589c:	f001 f984 	bl	8006ba8 <__d2b>
 80058a0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80058a4:	9003      	str	r0, [sp, #12]
 80058a6:	2e00      	cmp	r6, #0
 80058a8:	d078      	beq.n	800599c <_dtoa_r+0x1dc>
 80058aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80058ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80058b0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80058b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058b8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80058bc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80058c0:	9712      	str	r7, [sp, #72]	@ 0x48
 80058c2:	4619      	mov	r1, r3
 80058c4:	2200      	movs	r2, #0
 80058c6:	4b7a      	ldr	r3, [pc, #488]	@ (8005ab0 <_dtoa_r+0x2f0>)
 80058c8:	f7fa fc4e 	bl	8000168 <__aeabi_dsub>
 80058cc:	a36c      	add	r3, pc, #432	@ (adr r3, 8005a80 <_dtoa_r+0x2c0>)
 80058ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d2:	f7fa fe01 	bl	80004d8 <__aeabi_dmul>
 80058d6:	a36c      	add	r3, pc, #432	@ (adr r3, 8005a88 <_dtoa_r+0x2c8>)
 80058d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058dc:	f7fa fc46 	bl	800016c <__adddf3>
 80058e0:	4604      	mov	r4, r0
 80058e2:	4630      	mov	r0, r6
 80058e4:	460d      	mov	r5, r1
 80058e6:	f7fa fd8d 	bl	8000404 <__aeabi_i2d>
 80058ea:	a369      	add	r3, pc, #420	@ (adr r3, 8005a90 <_dtoa_r+0x2d0>)
 80058ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f0:	f7fa fdf2 	bl	80004d8 <__aeabi_dmul>
 80058f4:	4602      	mov	r2, r0
 80058f6:	460b      	mov	r3, r1
 80058f8:	4620      	mov	r0, r4
 80058fa:	4629      	mov	r1, r5
 80058fc:	f7fa fc36 	bl	800016c <__adddf3>
 8005900:	4604      	mov	r4, r0
 8005902:	460d      	mov	r5, r1
 8005904:	f7fb f898 	bl	8000a38 <__aeabi_d2iz>
 8005908:	2200      	movs	r2, #0
 800590a:	4607      	mov	r7, r0
 800590c:	2300      	movs	r3, #0
 800590e:	4620      	mov	r0, r4
 8005910:	4629      	mov	r1, r5
 8005912:	f7fb f853 	bl	80009bc <__aeabi_dcmplt>
 8005916:	b140      	cbz	r0, 800592a <_dtoa_r+0x16a>
 8005918:	4638      	mov	r0, r7
 800591a:	f7fa fd73 	bl	8000404 <__aeabi_i2d>
 800591e:	4622      	mov	r2, r4
 8005920:	462b      	mov	r3, r5
 8005922:	f7fb f841 	bl	80009a8 <__aeabi_dcmpeq>
 8005926:	b900      	cbnz	r0, 800592a <_dtoa_r+0x16a>
 8005928:	3f01      	subs	r7, #1
 800592a:	2f16      	cmp	r7, #22
 800592c:	d854      	bhi.n	80059d8 <_dtoa_r+0x218>
 800592e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005932:	4b60      	ldr	r3, [pc, #384]	@ (8005ab4 <_dtoa_r+0x2f4>)
 8005934:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593c:	f7fb f83e 	bl	80009bc <__aeabi_dcmplt>
 8005940:	2800      	cmp	r0, #0
 8005942:	d04b      	beq.n	80059dc <_dtoa_r+0x21c>
 8005944:	2300      	movs	r3, #0
 8005946:	3f01      	subs	r7, #1
 8005948:	930f      	str	r3, [sp, #60]	@ 0x3c
 800594a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800594c:	1b9b      	subs	r3, r3, r6
 800594e:	1e5a      	subs	r2, r3, #1
 8005950:	bf49      	itett	mi
 8005952:	f1c3 0301 	rsbmi	r3, r3, #1
 8005956:	2300      	movpl	r3, #0
 8005958:	9304      	strmi	r3, [sp, #16]
 800595a:	2300      	movmi	r3, #0
 800595c:	9209      	str	r2, [sp, #36]	@ 0x24
 800595e:	bf54      	ite	pl
 8005960:	9304      	strpl	r3, [sp, #16]
 8005962:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005964:	2f00      	cmp	r7, #0
 8005966:	db3b      	blt.n	80059e0 <_dtoa_r+0x220>
 8005968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800596a:	970e      	str	r7, [sp, #56]	@ 0x38
 800596c:	443b      	add	r3, r7
 800596e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005970:	2300      	movs	r3, #0
 8005972:	930a      	str	r3, [sp, #40]	@ 0x28
 8005974:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005976:	2b09      	cmp	r3, #9
 8005978:	d865      	bhi.n	8005a46 <_dtoa_r+0x286>
 800597a:	2b05      	cmp	r3, #5
 800597c:	bfc4      	itt	gt
 800597e:	3b04      	subgt	r3, #4
 8005980:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005982:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005984:	bfc8      	it	gt
 8005986:	2400      	movgt	r4, #0
 8005988:	f1a3 0302 	sub.w	r3, r3, #2
 800598c:	bfd8      	it	le
 800598e:	2401      	movle	r4, #1
 8005990:	2b03      	cmp	r3, #3
 8005992:	d864      	bhi.n	8005a5e <_dtoa_r+0x29e>
 8005994:	e8df f003 	tbb	[pc, r3]
 8005998:	2c385553 	.word	0x2c385553
 800599c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80059a0:	441e      	add	r6, r3
 80059a2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80059a6:	2b20      	cmp	r3, #32
 80059a8:	bfc1      	itttt	gt
 80059aa:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80059ae:	fa08 f803 	lslgt.w	r8, r8, r3
 80059b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80059b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80059ba:	bfd6      	itet	le
 80059bc:	f1c3 0320 	rsble	r3, r3, #32
 80059c0:	ea48 0003 	orrgt.w	r0, r8, r3
 80059c4:	fa04 f003 	lslle.w	r0, r4, r3
 80059c8:	f7fa fd0c 	bl	80003e4 <__aeabi_ui2d>
 80059cc:	2201      	movs	r2, #1
 80059ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80059d2:	3e01      	subs	r6, #1
 80059d4:	9212      	str	r2, [sp, #72]	@ 0x48
 80059d6:	e774      	b.n	80058c2 <_dtoa_r+0x102>
 80059d8:	2301      	movs	r3, #1
 80059da:	e7b5      	b.n	8005948 <_dtoa_r+0x188>
 80059dc:	900f      	str	r0, [sp, #60]	@ 0x3c
 80059de:	e7b4      	b.n	800594a <_dtoa_r+0x18a>
 80059e0:	9b04      	ldr	r3, [sp, #16]
 80059e2:	1bdb      	subs	r3, r3, r7
 80059e4:	9304      	str	r3, [sp, #16]
 80059e6:	427b      	negs	r3, r7
 80059e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80059ea:	2300      	movs	r3, #0
 80059ec:	930e      	str	r3, [sp, #56]	@ 0x38
 80059ee:	e7c1      	b.n	8005974 <_dtoa_r+0x1b4>
 80059f0:	2301      	movs	r3, #1
 80059f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80059f6:	eb07 0b03 	add.w	fp, r7, r3
 80059fa:	f10b 0301 	add.w	r3, fp, #1
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	9308      	str	r3, [sp, #32]
 8005a02:	bfb8      	it	lt
 8005a04:	2301      	movlt	r3, #1
 8005a06:	e006      	b.n	8005a16 <_dtoa_r+0x256>
 8005a08:	2301      	movs	r3, #1
 8005a0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a0c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	dd28      	ble.n	8005a64 <_dtoa_r+0x2a4>
 8005a12:	469b      	mov	fp, r3
 8005a14:	9308      	str	r3, [sp, #32]
 8005a16:	2100      	movs	r1, #0
 8005a18:	2204      	movs	r2, #4
 8005a1a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005a1e:	f102 0514 	add.w	r5, r2, #20
 8005a22:	429d      	cmp	r5, r3
 8005a24:	d926      	bls.n	8005a74 <_dtoa_r+0x2b4>
 8005a26:	6041      	str	r1, [r0, #4]
 8005a28:	4648      	mov	r0, r9
 8005a2a:	f000 fd9b 	bl	8006564 <_Balloc>
 8005a2e:	4682      	mov	sl, r0
 8005a30:	2800      	cmp	r0, #0
 8005a32:	d143      	bne.n	8005abc <_dtoa_r+0x2fc>
 8005a34:	4602      	mov	r2, r0
 8005a36:	f240 11af 	movw	r1, #431	@ 0x1af
 8005a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8005ab8 <_dtoa_r+0x2f8>)
 8005a3c:	e6d4      	b.n	80057e8 <_dtoa_r+0x28>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	e7e3      	b.n	8005a0a <_dtoa_r+0x24a>
 8005a42:	2300      	movs	r3, #0
 8005a44:	e7d5      	b.n	80059f2 <_dtoa_r+0x232>
 8005a46:	2401      	movs	r4, #1
 8005a48:	2300      	movs	r3, #0
 8005a4a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005a4c:	9320      	str	r3, [sp, #128]	@ 0x80
 8005a4e:	f04f 3bff 	mov.w	fp, #4294967295
 8005a52:	2200      	movs	r2, #0
 8005a54:	2312      	movs	r3, #18
 8005a56:	f8cd b020 	str.w	fp, [sp, #32]
 8005a5a:	9221      	str	r2, [sp, #132]	@ 0x84
 8005a5c:	e7db      	b.n	8005a16 <_dtoa_r+0x256>
 8005a5e:	2301      	movs	r3, #1
 8005a60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a62:	e7f4      	b.n	8005a4e <_dtoa_r+0x28e>
 8005a64:	f04f 0b01 	mov.w	fp, #1
 8005a68:	465b      	mov	r3, fp
 8005a6a:	f8cd b020 	str.w	fp, [sp, #32]
 8005a6e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8005a72:	e7d0      	b.n	8005a16 <_dtoa_r+0x256>
 8005a74:	3101      	adds	r1, #1
 8005a76:	0052      	lsls	r2, r2, #1
 8005a78:	e7d1      	b.n	8005a1e <_dtoa_r+0x25e>
 8005a7a:	bf00      	nop
 8005a7c:	f3af 8000 	nop.w
 8005a80:	636f4361 	.word	0x636f4361
 8005a84:	3fd287a7 	.word	0x3fd287a7
 8005a88:	8b60c8b3 	.word	0x8b60c8b3
 8005a8c:	3fc68a28 	.word	0x3fc68a28
 8005a90:	509f79fb 	.word	0x509f79fb
 8005a94:	3fd34413 	.word	0x3fd34413
 8005a98:	08007f6b 	.word	0x08007f6b
 8005a9c:	08007f82 	.word	0x08007f82
 8005aa0:	7ff00000 	.word	0x7ff00000
 8005aa4:	08007f67 	.word	0x08007f67
 8005aa8:	08007f3b 	.word	0x08007f3b
 8005aac:	08007f3a 	.word	0x08007f3a
 8005ab0:	3ff80000 	.word	0x3ff80000
 8005ab4:	080080d0 	.word	0x080080d0
 8005ab8:	08007fda 	.word	0x08007fda
 8005abc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005ac0:	6018      	str	r0, [r3, #0]
 8005ac2:	9b08      	ldr	r3, [sp, #32]
 8005ac4:	2b0e      	cmp	r3, #14
 8005ac6:	f200 80a1 	bhi.w	8005c0c <_dtoa_r+0x44c>
 8005aca:	2c00      	cmp	r4, #0
 8005acc:	f000 809e 	beq.w	8005c0c <_dtoa_r+0x44c>
 8005ad0:	2f00      	cmp	r7, #0
 8005ad2:	dd33      	ble.n	8005b3c <_dtoa_r+0x37c>
 8005ad4:	4b9c      	ldr	r3, [pc, #624]	@ (8005d48 <_dtoa_r+0x588>)
 8005ad6:	f007 020f 	and.w	r2, r7, #15
 8005ada:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ade:	05f8      	lsls	r0, r7, #23
 8005ae0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ae4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8005ae8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005aec:	d516      	bpl.n	8005b1c <_dtoa_r+0x35c>
 8005aee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005af2:	4b96      	ldr	r3, [pc, #600]	@ (8005d4c <_dtoa_r+0x58c>)
 8005af4:	2603      	movs	r6, #3
 8005af6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005afa:	f7fa fe17 	bl	800072c <__aeabi_ddiv>
 8005afe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005b02:	f004 040f 	and.w	r4, r4, #15
 8005b06:	4d91      	ldr	r5, [pc, #580]	@ (8005d4c <_dtoa_r+0x58c>)
 8005b08:	b954      	cbnz	r4, 8005b20 <_dtoa_r+0x360>
 8005b0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005b0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b12:	f7fa fe0b 	bl	800072c <__aeabi_ddiv>
 8005b16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005b1a:	e028      	b.n	8005b6e <_dtoa_r+0x3ae>
 8005b1c:	2602      	movs	r6, #2
 8005b1e:	e7f2      	b.n	8005b06 <_dtoa_r+0x346>
 8005b20:	07e1      	lsls	r1, r4, #31
 8005b22:	d508      	bpl.n	8005b36 <_dtoa_r+0x376>
 8005b24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005b28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b2c:	f7fa fcd4 	bl	80004d8 <__aeabi_dmul>
 8005b30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005b34:	3601      	adds	r6, #1
 8005b36:	1064      	asrs	r4, r4, #1
 8005b38:	3508      	adds	r5, #8
 8005b3a:	e7e5      	b.n	8005b08 <_dtoa_r+0x348>
 8005b3c:	f000 80af 	beq.w	8005c9e <_dtoa_r+0x4de>
 8005b40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b44:	427c      	negs	r4, r7
 8005b46:	4b80      	ldr	r3, [pc, #512]	@ (8005d48 <_dtoa_r+0x588>)
 8005b48:	f004 020f 	and.w	r2, r4, #15
 8005b4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b54:	f7fa fcc0 	bl	80004d8 <__aeabi_dmul>
 8005b58:	2602      	movs	r6, #2
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005b60:	4d7a      	ldr	r5, [pc, #488]	@ (8005d4c <_dtoa_r+0x58c>)
 8005b62:	1124      	asrs	r4, r4, #4
 8005b64:	2c00      	cmp	r4, #0
 8005b66:	f040 808f 	bne.w	8005c88 <_dtoa_r+0x4c8>
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1d3      	bne.n	8005b16 <_dtoa_r+0x356>
 8005b6e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005b72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 8094 	beq.w	8005ca2 <_dtoa_r+0x4e2>
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	4629      	mov	r1, r5
 8005b80:	4b73      	ldr	r3, [pc, #460]	@ (8005d50 <_dtoa_r+0x590>)
 8005b82:	f7fa ff1b 	bl	80009bc <__aeabi_dcmplt>
 8005b86:	2800      	cmp	r0, #0
 8005b88:	f000 808b 	beq.w	8005ca2 <_dtoa_r+0x4e2>
 8005b8c:	9b08      	ldr	r3, [sp, #32]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 8087 	beq.w	8005ca2 <_dtoa_r+0x4e2>
 8005b94:	f1bb 0f00 	cmp.w	fp, #0
 8005b98:	dd34      	ble.n	8005c04 <_dtoa_r+0x444>
 8005b9a:	4620      	mov	r0, r4
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	4629      	mov	r1, r5
 8005ba0:	4b6c      	ldr	r3, [pc, #432]	@ (8005d54 <_dtoa_r+0x594>)
 8005ba2:	f7fa fc99 	bl	80004d8 <__aeabi_dmul>
 8005ba6:	465c      	mov	r4, fp
 8005ba8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005bac:	f107 38ff 	add.w	r8, r7, #4294967295
 8005bb0:	3601      	adds	r6, #1
 8005bb2:	4630      	mov	r0, r6
 8005bb4:	f7fa fc26 	bl	8000404 <__aeabi_i2d>
 8005bb8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005bbc:	f7fa fc8c 	bl	80004d8 <__aeabi_dmul>
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	4b65      	ldr	r3, [pc, #404]	@ (8005d58 <_dtoa_r+0x598>)
 8005bc4:	f7fa fad2 	bl	800016c <__adddf3>
 8005bc8:	4605      	mov	r5, r0
 8005bca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005bce:	2c00      	cmp	r4, #0
 8005bd0:	d16a      	bne.n	8005ca8 <_dtoa_r+0x4e8>
 8005bd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	4b60      	ldr	r3, [pc, #384]	@ (8005d5c <_dtoa_r+0x59c>)
 8005bda:	f7fa fac5 	bl	8000168 <__aeabi_dsub>
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005be6:	462a      	mov	r2, r5
 8005be8:	4633      	mov	r3, r6
 8005bea:	f7fa ff05 	bl	80009f8 <__aeabi_dcmpgt>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	f040 8298 	bne.w	8006124 <_dtoa_r+0x964>
 8005bf4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bf8:	462a      	mov	r2, r5
 8005bfa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005bfe:	f7fa fedd 	bl	80009bc <__aeabi_dcmplt>
 8005c02:	bb38      	cbnz	r0, 8005c54 <_dtoa_r+0x494>
 8005c04:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005c08:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005c0c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f2c0 8157 	blt.w	8005ec2 <_dtoa_r+0x702>
 8005c14:	2f0e      	cmp	r7, #14
 8005c16:	f300 8154 	bgt.w	8005ec2 <_dtoa_r+0x702>
 8005c1a:	4b4b      	ldr	r3, [pc, #300]	@ (8005d48 <_dtoa_r+0x588>)
 8005c1c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005c20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c24:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005c28:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f280 80e5 	bge.w	8005dfa <_dtoa_r+0x63a>
 8005c30:	9b08      	ldr	r3, [sp, #32]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f300 80e1 	bgt.w	8005dfa <_dtoa_r+0x63a>
 8005c38:	d10c      	bne.n	8005c54 <_dtoa_r+0x494>
 8005c3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	4b46      	ldr	r3, [pc, #280]	@ (8005d5c <_dtoa_r+0x59c>)
 8005c42:	f7fa fc49 	bl	80004d8 <__aeabi_dmul>
 8005c46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c4a:	f7fa fecb 	bl	80009e4 <__aeabi_dcmpge>
 8005c4e:	2800      	cmp	r0, #0
 8005c50:	f000 8266 	beq.w	8006120 <_dtoa_r+0x960>
 8005c54:	2400      	movs	r4, #0
 8005c56:	4625      	mov	r5, r4
 8005c58:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005c5a:	4656      	mov	r6, sl
 8005c5c:	ea6f 0803 	mvn.w	r8, r3
 8005c60:	2700      	movs	r7, #0
 8005c62:	4621      	mov	r1, r4
 8005c64:	4648      	mov	r0, r9
 8005c66:	f000 fcbd 	bl	80065e4 <_Bfree>
 8005c6a:	2d00      	cmp	r5, #0
 8005c6c:	f000 80bd 	beq.w	8005dea <_dtoa_r+0x62a>
 8005c70:	b12f      	cbz	r7, 8005c7e <_dtoa_r+0x4be>
 8005c72:	42af      	cmp	r7, r5
 8005c74:	d003      	beq.n	8005c7e <_dtoa_r+0x4be>
 8005c76:	4639      	mov	r1, r7
 8005c78:	4648      	mov	r0, r9
 8005c7a:	f000 fcb3 	bl	80065e4 <_Bfree>
 8005c7e:	4629      	mov	r1, r5
 8005c80:	4648      	mov	r0, r9
 8005c82:	f000 fcaf 	bl	80065e4 <_Bfree>
 8005c86:	e0b0      	b.n	8005dea <_dtoa_r+0x62a>
 8005c88:	07e2      	lsls	r2, r4, #31
 8005c8a:	d505      	bpl.n	8005c98 <_dtoa_r+0x4d8>
 8005c8c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005c90:	f7fa fc22 	bl	80004d8 <__aeabi_dmul>
 8005c94:	2301      	movs	r3, #1
 8005c96:	3601      	adds	r6, #1
 8005c98:	1064      	asrs	r4, r4, #1
 8005c9a:	3508      	adds	r5, #8
 8005c9c:	e762      	b.n	8005b64 <_dtoa_r+0x3a4>
 8005c9e:	2602      	movs	r6, #2
 8005ca0:	e765      	b.n	8005b6e <_dtoa_r+0x3ae>
 8005ca2:	46b8      	mov	r8, r7
 8005ca4:	9c08      	ldr	r4, [sp, #32]
 8005ca6:	e784      	b.n	8005bb2 <_dtoa_r+0x3f2>
 8005ca8:	4b27      	ldr	r3, [pc, #156]	@ (8005d48 <_dtoa_r+0x588>)
 8005caa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005cac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005cb0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005cb4:	4454      	add	r4, sl
 8005cb6:	2900      	cmp	r1, #0
 8005cb8:	d054      	beq.n	8005d64 <_dtoa_r+0x5a4>
 8005cba:	2000      	movs	r0, #0
 8005cbc:	4928      	ldr	r1, [pc, #160]	@ (8005d60 <_dtoa_r+0x5a0>)
 8005cbe:	f7fa fd35 	bl	800072c <__aeabi_ddiv>
 8005cc2:	4633      	mov	r3, r6
 8005cc4:	462a      	mov	r2, r5
 8005cc6:	f7fa fa4f 	bl	8000168 <__aeabi_dsub>
 8005cca:	4656      	mov	r6, sl
 8005ccc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005cd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cd4:	f7fa feb0 	bl	8000a38 <__aeabi_d2iz>
 8005cd8:	4605      	mov	r5, r0
 8005cda:	f7fa fb93 	bl	8000404 <__aeabi_i2d>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ce6:	f7fa fa3f 	bl	8000168 <__aeabi_dsub>
 8005cea:	4602      	mov	r2, r0
 8005cec:	460b      	mov	r3, r1
 8005cee:	3530      	adds	r5, #48	@ 0x30
 8005cf0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005cf4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005cf8:	f806 5b01 	strb.w	r5, [r6], #1
 8005cfc:	f7fa fe5e 	bl	80009bc <__aeabi_dcmplt>
 8005d00:	2800      	cmp	r0, #0
 8005d02:	d172      	bne.n	8005dea <_dtoa_r+0x62a>
 8005d04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d08:	2000      	movs	r0, #0
 8005d0a:	4911      	ldr	r1, [pc, #68]	@ (8005d50 <_dtoa_r+0x590>)
 8005d0c:	f7fa fa2c 	bl	8000168 <__aeabi_dsub>
 8005d10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d14:	f7fa fe52 	bl	80009bc <__aeabi_dcmplt>
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	f040 80b4 	bne.w	8005e86 <_dtoa_r+0x6c6>
 8005d1e:	42a6      	cmp	r6, r4
 8005d20:	f43f af70 	beq.w	8005c04 <_dtoa_r+0x444>
 8005d24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005d28:	2200      	movs	r2, #0
 8005d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8005d54 <_dtoa_r+0x594>)
 8005d2c:	f7fa fbd4 	bl	80004d8 <__aeabi_dmul>
 8005d30:	2200      	movs	r2, #0
 8005d32:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d3a:	4b06      	ldr	r3, [pc, #24]	@ (8005d54 <_dtoa_r+0x594>)
 8005d3c:	f7fa fbcc 	bl	80004d8 <__aeabi_dmul>
 8005d40:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005d44:	e7c4      	b.n	8005cd0 <_dtoa_r+0x510>
 8005d46:	bf00      	nop
 8005d48:	080080d0 	.word	0x080080d0
 8005d4c:	080080a8 	.word	0x080080a8
 8005d50:	3ff00000 	.word	0x3ff00000
 8005d54:	40240000 	.word	0x40240000
 8005d58:	401c0000 	.word	0x401c0000
 8005d5c:	40140000 	.word	0x40140000
 8005d60:	3fe00000 	.word	0x3fe00000
 8005d64:	4631      	mov	r1, r6
 8005d66:	4628      	mov	r0, r5
 8005d68:	f7fa fbb6 	bl	80004d8 <__aeabi_dmul>
 8005d6c:	4656      	mov	r6, sl
 8005d6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d72:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005d74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d78:	f7fa fe5e 	bl	8000a38 <__aeabi_d2iz>
 8005d7c:	4605      	mov	r5, r0
 8005d7e:	f7fa fb41 	bl	8000404 <__aeabi_i2d>
 8005d82:	4602      	mov	r2, r0
 8005d84:	460b      	mov	r3, r1
 8005d86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d8a:	f7fa f9ed 	bl	8000168 <__aeabi_dsub>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	460b      	mov	r3, r1
 8005d92:	3530      	adds	r5, #48	@ 0x30
 8005d94:	f806 5b01 	strb.w	r5, [r6], #1
 8005d98:	42a6      	cmp	r6, r4
 8005d9a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005d9e:	f04f 0200 	mov.w	r2, #0
 8005da2:	d124      	bne.n	8005dee <_dtoa_r+0x62e>
 8005da4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005da8:	4bae      	ldr	r3, [pc, #696]	@ (8006064 <_dtoa_r+0x8a4>)
 8005daa:	f7fa f9df 	bl	800016c <__adddf3>
 8005dae:	4602      	mov	r2, r0
 8005db0:	460b      	mov	r3, r1
 8005db2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005db6:	f7fa fe1f 	bl	80009f8 <__aeabi_dcmpgt>
 8005dba:	2800      	cmp	r0, #0
 8005dbc:	d163      	bne.n	8005e86 <_dtoa_r+0x6c6>
 8005dbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005dc2:	2000      	movs	r0, #0
 8005dc4:	49a7      	ldr	r1, [pc, #668]	@ (8006064 <_dtoa_r+0x8a4>)
 8005dc6:	f7fa f9cf 	bl	8000168 <__aeabi_dsub>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	460b      	mov	r3, r1
 8005dce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dd2:	f7fa fdf3 	bl	80009bc <__aeabi_dcmplt>
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	f43f af14 	beq.w	8005c04 <_dtoa_r+0x444>
 8005ddc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005dde:	1e73      	subs	r3, r6, #1
 8005de0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005de2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005de6:	2b30      	cmp	r3, #48	@ 0x30
 8005de8:	d0f8      	beq.n	8005ddc <_dtoa_r+0x61c>
 8005dea:	4647      	mov	r7, r8
 8005dec:	e03b      	b.n	8005e66 <_dtoa_r+0x6a6>
 8005dee:	4b9e      	ldr	r3, [pc, #632]	@ (8006068 <_dtoa_r+0x8a8>)
 8005df0:	f7fa fb72 	bl	80004d8 <__aeabi_dmul>
 8005df4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005df8:	e7bc      	b.n	8005d74 <_dtoa_r+0x5b4>
 8005dfa:	4656      	mov	r6, sl
 8005dfc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005e00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e04:	4620      	mov	r0, r4
 8005e06:	4629      	mov	r1, r5
 8005e08:	f7fa fc90 	bl	800072c <__aeabi_ddiv>
 8005e0c:	f7fa fe14 	bl	8000a38 <__aeabi_d2iz>
 8005e10:	4680      	mov	r8, r0
 8005e12:	f7fa faf7 	bl	8000404 <__aeabi_i2d>
 8005e16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e1a:	f7fa fb5d 	bl	80004d8 <__aeabi_dmul>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	460b      	mov	r3, r1
 8005e22:	4620      	mov	r0, r4
 8005e24:	4629      	mov	r1, r5
 8005e26:	f7fa f99f 	bl	8000168 <__aeabi_dsub>
 8005e2a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005e2e:	9d08      	ldr	r5, [sp, #32]
 8005e30:	f806 4b01 	strb.w	r4, [r6], #1
 8005e34:	eba6 040a 	sub.w	r4, r6, sl
 8005e38:	42a5      	cmp	r5, r4
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	d133      	bne.n	8005ea8 <_dtoa_r+0x6e8>
 8005e40:	f7fa f994 	bl	800016c <__adddf3>
 8005e44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e48:	4604      	mov	r4, r0
 8005e4a:	460d      	mov	r5, r1
 8005e4c:	f7fa fdd4 	bl	80009f8 <__aeabi_dcmpgt>
 8005e50:	b9c0      	cbnz	r0, 8005e84 <_dtoa_r+0x6c4>
 8005e52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e56:	4620      	mov	r0, r4
 8005e58:	4629      	mov	r1, r5
 8005e5a:	f7fa fda5 	bl	80009a8 <__aeabi_dcmpeq>
 8005e5e:	b110      	cbz	r0, 8005e66 <_dtoa_r+0x6a6>
 8005e60:	f018 0f01 	tst.w	r8, #1
 8005e64:	d10e      	bne.n	8005e84 <_dtoa_r+0x6c4>
 8005e66:	4648      	mov	r0, r9
 8005e68:	9903      	ldr	r1, [sp, #12]
 8005e6a:	f000 fbbb 	bl	80065e4 <_Bfree>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	7033      	strb	r3, [r6, #0]
 8005e72:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005e74:	3701      	adds	r7, #1
 8005e76:	601f      	str	r7, [r3, #0]
 8005e78:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 824b 	beq.w	8006316 <_dtoa_r+0xb56>
 8005e80:	601e      	str	r6, [r3, #0]
 8005e82:	e248      	b.n	8006316 <_dtoa_r+0xb56>
 8005e84:	46b8      	mov	r8, r7
 8005e86:	4633      	mov	r3, r6
 8005e88:	461e      	mov	r6, r3
 8005e8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e8e:	2a39      	cmp	r2, #57	@ 0x39
 8005e90:	d106      	bne.n	8005ea0 <_dtoa_r+0x6e0>
 8005e92:	459a      	cmp	sl, r3
 8005e94:	d1f8      	bne.n	8005e88 <_dtoa_r+0x6c8>
 8005e96:	2230      	movs	r2, #48	@ 0x30
 8005e98:	f108 0801 	add.w	r8, r8, #1
 8005e9c:	f88a 2000 	strb.w	r2, [sl]
 8005ea0:	781a      	ldrb	r2, [r3, #0]
 8005ea2:	3201      	adds	r2, #1
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	e7a0      	b.n	8005dea <_dtoa_r+0x62a>
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	4b6f      	ldr	r3, [pc, #444]	@ (8006068 <_dtoa_r+0x8a8>)
 8005eac:	f7fa fb14 	bl	80004d8 <__aeabi_dmul>
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	460d      	mov	r5, r1
 8005eb8:	f7fa fd76 	bl	80009a8 <__aeabi_dcmpeq>
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	d09f      	beq.n	8005e00 <_dtoa_r+0x640>
 8005ec0:	e7d1      	b.n	8005e66 <_dtoa_r+0x6a6>
 8005ec2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005ec4:	2a00      	cmp	r2, #0
 8005ec6:	f000 80ea 	beq.w	800609e <_dtoa_r+0x8de>
 8005eca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005ecc:	2a01      	cmp	r2, #1
 8005ece:	f300 80cd 	bgt.w	800606c <_dtoa_r+0x8ac>
 8005ed2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005ed4:	2a00      	cmp	r2, #0
 8005ed6:	f000 80c1 	beq.w	800605c <_dtoa_r+0x89c>
 8005eda:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005ede:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005ee0:	9e04      	ldr	r6, [sp, #16]
 8005ee2:	9a04      	ldr	r2, [sp, #16]
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	441a      	add	r2, r3
 8005ee8:	9204      	str	r2, [sp, #16]
 8005eea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005eec:	4648      	mov	r0, r9
 8005eee:	441a      	add	r2, r3
 8005ef0:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ef2:	f000 fc2b 	bl	800674c <__i2b>
 8005ef6:	4605      	mov	r5, r0
 8005ef8:	b166      	cbz	r6, 8005f14 <_dtoa_r+0x754>
 8005efa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	dd09      	ble.n	8005f14 <_dtoa_r+0x754>
 8005f00:	42b3      	cmp	r3, r6
 8005f02:	bfa8      	it	ge
 8005f04:	4633      	movge	r3, r6
 8005f06:	9a04      	ldr	r2, [sp, #16]
 8005f08:	1af6      	subs	r6, r6, r3
 8005f0a:	1ad2      	subs	r2, r2, r3
 8005f0c:	9204      	str	r2, [sp, #16]
 8005f0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f16:	b30b      	cbz	r3, 8005f5c <_dtoa_r+0x79c>
 8005f18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f000 80c6 	beq.w	80060ac <_dtoa_r+0x8ec>
 8005f20:	2c00      	cmp	r4, #0
 8005f22:	f000 80c0 	beq.w	80060a6 <_dtoa_r+0x8e6>
 8005f26:	4629      	mov	r1, r5
 8005f28:	4622      	mov	r2, r4
 8005f2a:	4648      	mov	r0, r9
 8005f2c:	f000 fcc6 	bl	80068bc <__pow5mult>
 8005f30:	9a03      	ldr	r2, [sp, #12]
 8005f32:	4601      	mov	r1, r0
 8005f34:	4605      	mov	r5, r0
 8005f36:	4648      	mov	r0, r9
 8005f38:	f000 fc1e 	bl	8006778 <__multiply>
 8005f3c:	9903      	ldr	r1, [sp, #12]
 8005f3e:	4680      	mov	r8, r0
 8005f40:	4648      	mov	r0, r9
 8005f42:	f000 fb4f 	bl	80065e4 <_Bfree>
 8005f46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f48:	1b1b      	subs	r3, r3, r4
 8005f4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f4c:	f000 80b1 	beq.w	80060b2 <_dtoa_r+0x8f2>
 8005f50:	4641      	mov	r1, r8
 8005f52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f54:	4648      	mov	r0, r9
 8005f56:	f000 fcb1 	bl	80068bc <__pow5mult>
 8005f5a:	9003      	str	r0, [sp, #12]
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	4648      	mov	r0, r9
 8005f60:	f000 fbf4 	bl	800674c <__i2b>
 8005f64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f66:	4604      	mov	r4, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 81d8 	beq.w	800631e <_dtoa_r+0xb5e>
 8005f6e:	461a      	mov	r2, r3
 8005f70:	4601      	mov	r1, r0
 8005f72:	4648      	mov	r0, r9
 8005f74:	f000 fca2 	bl	80068bc <__pow5mult>
 8005f78:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	f300 809f 	bgt.w	80060c0 <_dtoa_r+0x900>
 8005f82:	9b06      	ldr	r3, [sp, #24]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f040 8097 	bne.w	80060b8 <_dtoa_r+0x8f8>
 8005f8a:	9b07      	ldr	r3, [sp, #28]
 8005f8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f040 8093 	bne.w	80060bc <_dtoa_r+0x8fc>
 8005f96:	9b07      	ldr	r3, [sp, #28]
 8005f98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f9c:	0d1b      	lsrs	r3, r3, #20
 8005f9e:	051b      	lsls	r3, r3, #20
 8005fa0:	b133      	cbz	r3, 8005fb0 <_dtoa_r+0x7f0>
 8005fa2:	9b04      	ldr	r3, [sp, #16]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	9304      	str	r3, [sp, #16]
 8005fa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005faa:	3301      	adds	r3, #1
 8005fac:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fae:	2301      	movs	r3, #1
 8005fb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f000 81b8 	beq.w	800632a <_dtoa_r+0xb6a>
 8005fba:	6923      	ldr	r3, [r4, #16]
 8005fbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005fc0:	6918      	ldr	r0, [r3, #16]
 8005fc2:	f000 fb77 	bl	80066b4 <__hi0bits>
 8005fc6:	f1c0 0020 	rsb	r0, r0, #32
 8005fca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fcc:	4418      	add	r0, r3
 8005fce:	f010 001f 	ands.w	r0, r0, #31
 8005fd2:	f000 8082 	beq.w	80060da <_dtoa_r+0x91a>
 8005fd6:	f1c0 0320 	rsb	r3, r0, #32
 8005fda:	2b04      	cmp	r3, #4
 8005fdc:	dd73      	ble.n	80060c6 <_dtoa_r+0x906>
 8005fde:	9b04      	ldr	r3, [sp, #16]
 8005fe0:	f1c0 001c 	rsb	r0, r0, #28
 8005fe4:	4403      	add	r3, r0
 8005fe6:	9304      	str	r3, [sp, #16]
 8005fe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fea:	4406      	add	r6, r0
 8005fec:	4403      	add	r3, r0
 8005fee:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ff0:	9b04      	ldr	r3, [sp, #16]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	dd05      	ble.n	8006002 <_dtoa_r+0x842>
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	4648      	mov	r0, r9
 8005ffa:	9903      	ldr	r1, [sp, #12]
 8005ffc:	f000 fcb8 	bl	8006970 <__lshift>
 8006000:	9003      	str	r0, [sp, #12]
 8006002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006004:	2b00      	cmp	r3, #0
 8006006:	dd05      	ble.n	8006014 <_dtoa_r+0x854>
 8006008:	4621      	mov	r1, r4
 800600a:	461a      	mov	r2, r3
 800600c:	4648      	mov	r0, r9
 800600e:	f000 fcaf 	bl	8006970 <__lshift>
 8006012:	4604      	mov	r4, r0
 8006014:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006016:	2b00      	cmp	r3, #0
 8006018:	d061      	beq.n	80060de <_dtoa_r+0x91e>
 800601a:	4621      	mov	r1, r4
 800601c:	9803      	ldr	r0, [sp, #12]
 800601e:	f000 fd13 	bl	8006a48 <__mcmp>
 8006022:	2800      	cmp	r0, #0
 8006024:	da5b      	bge.n	80060de <_dtoa_r+0x91e>
 8006026:	2300      	movs	r3, #0
 8006028:	220a      	movs	r2, #10
 800602a:	4648      	mov	r0, r9
 800602c:	9903      	ldr	r1, [sp, #12]
 800602e:	f000 fafb 	bl	8006628 <__multadd>
 8006032:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006034:	f107 38ff 	add.w	r8, r7, #4294967295
 8006038:	9003      	str	r0, [sp, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	f000 8177 	beq.w	800632e <_dtoa_r+0xb6e>
 8006040:	4629      	mov	r1, r5
 8006042:	2300      	movs	r3, #0
 8006044:	220a      	movs	r2, #10
 8006046:	4648      	mov	r0, r9
 8006048:	f000 faee 	bl	8006628 <__multadd>
 800604c:	f1bb 0f00 	cmp.w	fp, #0
 8006050:	4605      	mov	r5, r0
 8006052:	dc6f      	bgt.n	8006134 <_dtoa_r+0x974>
 8006054:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006056:	2b02      	cmp	r3, #2
 8006058:	dc49      	bgt.n	80060ee <_dtoa_r+0x92e>
 800605a:	e06b      	b.n	8006134 <_dtoa_r+0x974>
 800605c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800605e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006062:	e73c      	b.n	8005ede <_dtoa_r+0x71e>
 8006064:	3fe00000 	.word	0x3fe00000
 8006068:	40240000 	.word	0x40240000
 800606c:	9b08      	ldr	r3, [sp, #32]
 800606e:	1e5c      	subs	r4, r3, #1
 8006070:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006072:	42a3      	cmp	r3, r4
 8006074:	db09      	blt.n	800608a <_dtoa_r+0x8ca>
 8006076:	1b1c      	subs	r4, r3, r4
 8006078:	9b08      	ldr	r3, [sp, #32]
 800607a:	2b00      	cmp	r3, #0
 800607c:	f6bf af30 	bge.w	8005ee0 <_dtoa_r+0x720>
 8006080:	9b04      	ldr	r3, [sp, #16]
 8006082:	9a08      	ldr	r2, [sp, #32]
 8006084:	1a9e      	subs	r6, r3, r2
 8006086:	2300      	movs	r3, #0
 8006088:	e72b      	b.n	8005ee2 <_dtoa_r+0x722>
 800608a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800608c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800608e:	1ae3      	subs	r3, r4, r3
 8006090:	441a      	add	r2, r3
 8006092:	940a      	str	r4, [sp, #40]	@ 0x28
 8006094:	9e04      	ldr	r6, [sp, #16]
 8006096:	2400      	movs	r4, #0
 8006098:	9b08      	ldr	r3, [sp, #32]
 800609a:	920e      	str	r2, [sp, #56]	@ 0x38
 800609c:	e721      	b.n	8005ee2 <_dtoa_r+0x722>
 800609e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80060a0:	9e04      	ldr	r6, [sp, #16]
 80060a2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80060a4:	e728      	b.n	8005ef8 <_dtoa_r+0x738>
 80060a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80060aa:	e751      	b.n	8005f50 <_dtoa_r+0x790>
 80060ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80060ae:	9903      	ldr	r1, [sp, #12]
 80060b0:	e750      	b.n	8005f54 <_dtoa_r+0x794>
 80060b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80060b6:	e751      	b.n	8005f5c <_dtoa_r+0x79c>
 80060b8:	2300      	movs	r3, #0
 80060ba:	e779      	b.n	8005fb0 <_dtoa_r+0x7f0>
 80060bc:	9b06      	ldr	r3, [sp, #24]
 80060be:	e777      	b.n	8005fb0 <_dtoa_r+0x7f0>
 80060c0:	2300      	movs	r3, #0
 80060c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80060c4:	e779      	b.n	8005fba <_dtoa_r+0x7fa>
 80060c6:	d093      	beq.n	8005ff0 <_dtoa_r+0x830>
 80060c8:	9a04      	ldr	r2, [sp, #16]
 80060ca:	331c      	adds	r3, #28
 80060cc:	441a      	add	r2, r3
 80060ce:	9204      	str	r2, [sp, #16]
 80060d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060d2:	441e      	add	r6, r3
 80060d4:	441a      	add	r2, r3
 80060d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80060d8:	e78a      	b.n	8005ff0 <_dtoa_r+0x830>
 80060da:	4603      	mov	r3, r0
 80060dc:	e7f4      	b.n	80060c8 <_dtoa_r+0x908>
 80060de:	9b08      	ldr	r3, [sp, #32]
 80060e0:	46b8      	mov	r8, r7
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	dc20      	bgt.n	8006128 <_dtoa_r+0x968>
 80060e6:	469b      	mov	fp, r3
 80060e8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	dd1e      	ble.n	800612c <_dtoa_r+0x96c>
 80060ee:	f1bb 0f00 	cmp.w	fp, #0
 80060f2:	f47f adb1 	bne.w	8005c58 <_dtoa_r+0x498>
 80060f6:	4621      	mov	r1, r4
 80060f8:	465b      	mov	r3, fp
 80060fa:	2205      	movs	r2, #5
 80060fc:	4648      	mov	r0, r9
 80060fe:	f000 fa93 	bl	8006628 <__multadd>
 8006102:	4601      	mov	r1, r0
 8006104:	4604      	mov	r4, r0
 8006106:	9803      	ldr	r0, [sp, #12]
 8006108:	f000 fc9e 	bl	8006a48 <__mcmp>
 800610c:	2800      	cmp	r0, #0
 800610e:	f77f ada3 	ble.w	8005c58 <_dtoa_r+0x498>
 8006112:	4656      	mov	r6, sl
 8006114:	2331      	movs	r3, #49	@ 0x31
 8006116:	f108 0801 	add.w	r8, r8, #1
 800611a:	f806 3b01 	strb.w	r3, [r6], #1
 800611e:	e59f      	b.n	8005c60 <_dtoa_r+0x4a0>
 8006120:	46b8      	mov	r8, r7
 8006122:	9c08      	ldr	r4, [sp, #32]
 8006124:	4625      	mov	r5, r4
 8006126:	e7f4      	b.n	8006112 <_dtoa_r+0x952>
 8006128:	f8dd b020 	ldr.w	fp, [sp, #32]
 800612c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800612e:	2b00      	cmp	r3, #0
 8006130:	f000 8101 	beq.w	8006336 <_dtoa_r+0xb76>
 8006134:	2e00      	cmp	r6, #0
 8006136:	dd05      	ble.n	8006144 <_dtoa_r+0x984>
 8006138:	4629      	mov	r1, r5
 800613a:	4632      	mov	r2, r6
 800613c:	4648      	mov	r0, r9
 800613e:	f000 fc17 	bl	8006970 <__lshift>
 8006142:	4605      	mov	r5, r0
 8006144:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006146:	2b00      	cmp	r3, #0
 8006148:	d05c      	beq.n	8006204 <_dtoa_r+0xa44>
 800614a:	4648      	mov	r0, r9
 800614c:	6869      	ldr	r1, [r5, #4]
 800614e:	f000 fa09 	bl	8006564 <_Balloc>
 8006152:	4606      	mov	r6, r0
 8006154:	b928      	cbnz	r0, 8006162 <_dtoa_r+0x9a2>
 8006156:	4602      	mov	r2, r0
 8006158:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800615c:	4b80      	ldr	r3, [pc, #512]	@ (8006360 <_dtoa_r+0xba0>)
 800615e:	f7ff bb43 	b.w	80057e8 <_dtoa_r+0x28>
 8006162:	692a      	ldr	r2, [r5, #16]
 8006164:	f105 010c 	add.w	r1, r5, #12
 8006168:	3202      	adds	r2, #2
 800616a:	0092      	lsls	r2, r2, #2
 800616c:	300c      	adds	r0, #12
 800616e:	f000 ff9d 	bl	80070ac <memcpy>
 8006172:	2201      	movs	r2, #1
 8006174:	4631      	mov	r1, r6
 8006176:	4648      	mov	r0, r9
 8006178:	f000 fbfa 	bl	8006970 <__lshift>
 800617c:	462f      	mov	r7, r5
 800617e:	4605      	mov	r5, r0
 8006180:	f10a 0301 	add.w	r3, sl, #1
 8006184:	9304      	str	r3, [sp, #16]
 8006186:	eb0a 030b 	add.w	r3, sl, fp
 800618a:	930a      	str	r3, [sp, #40]	@ 0x28
 800618c:	9b06      	ldr	r3, [sp, #24]
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	9309      	str	r3, [sp, #36]	@ 0x24
 8006194:	9b04      	ldr	r3, [sp, #16]
 8006196:	4621      	mov	r1, r4
 8006198:	9803      	ldr	r0, [sp, #12]
 800619a:	f103 3bff 	add.w	fp, r3, #4294967295
 800619e:	f7ff fa86 	bl	80056ae <quorem>
 80061a2:	4603      	mov	r3, r0
 80061a4:	4639      	mov	r1, r7
 80061a6:	3330      	adds	r3, #48	@ 0x30
 80061a8:	9006      	str	r0, [sp, #24]
 80061aa:	9803      	ldr	r0, [sp, #12]
 80061ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80061ae:	f000 fc4b 	bl	8006a48 <__mcmp>
 80061b2:	462a      	mov	r2, r5
 80061b4:	9008      	str	r0, [sp, #32]
 80061b6:	4621      	mov	r1, r4
 80061b8:	4648      	mov	r0, r9
 80061ba:	f000 fc61 	bl	8006a80 <__mdiff>
 80061be:	68c2      	ldr	r2, [r0, #12]
 80061c0:	4606      	mov	r6, r0
 80061c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061c4:	bb02      	cbnz	r2, 8006208 <_dtoa_r+0xa48>
 80061c6:	4601      	mov	r1, r0
 80061c8:	9803      	ldr	r0, [sp, #12]
 80061ca:	f000 fc3d 	bl	8006a48 <__mcmp>
 80061ce:	4602      	mov	r2, r0
 80061d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061d2:	4631      	mov	r1, r6
 80061d4:	4648      	mov	r0, r9
 80061d6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80061da:	f000 fa03 	bl	80065e4 <_Bfree>
 80061de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80061e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80061e2:	9e04      	ldr	r6, [sp, #16]
 80061e4:	ea42 0103 	orr.w	r1, r2, r3
 80061e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061ea:	4319      	orrs	r1, r3
 80061ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061ee:	d10d      	bne.n	800620c <_dtoa_r+0xa4c>
 80061f0:	2b39      	cmp	r3, #57	@ 0x39
 80061f2:	d027      	beq.n	8006244 <_dtoa_r+0xa84>
 80061f4:	9a08      	ldr	r2, [sp, #32]
 80061f6:	2a00      	cmp	r2, #0
 80061f8:	dd01      	ble.n	80061fe <_dtoa_r+0xa3e>
 80061fa:	9b06      	ldr	r3, [sp, #24]
 80061fc:	3331      	adds	r3, #49	@ 0x31
 80061fe:	f88b 3000 	strb.w	r3, [fp]
 8006202:	e52e      	b.n	8005c62 <_dtoa_r+0x4a2>
 8006204:	4628      	mov	r0, r5
 8006206:	e7b9      	b.n	800617c <_dtoa_r+0x9bc>
 8006208:	2201      	movs	r2, #1
 800620a:	e7e2      	b.n	80061d2 <_dtoa_r+0xa12>
 800620c:	9908      	ldr	r1, [sp, #32]
 800620e:	2900      	cmp	r1, #0
 8006210:	db04      	blt.n	800621c <_dtoa_r+0xa5c>
 8006212:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8006214:	4301      	orrs	r1, r0
 8006216:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006218:	4301      	orrs	r1, r0
 800621a:	d120      	bne.n	800625e <_dtoa_r+0xa9e>
 800621c:	2a00      	cmp	r2, #0
 800621e:	ddee      	ble.n	80061fe <_dtoa_r+0xa3e>
 8006220:	2201      	movs	r2, #1
 8006222:	9903      	ldr	r1, [sp, #12]
 8006224:	4648      	mov	r0, r9
 8006226:	9304      	str	r3, [sp, #16]
 8006228:	f000 fba2 	bl	8006970 <__lshift>
 800622c:	4621      	mov	r1, r4
 800622e:	9003      	str	r0, [sp, #12]
 8006230:	f000 fc0a 	bl	8006a48 <__mcmp>
 8006234:	2800      	cmp	r0, #0
 8006236:	9b04      	ldr	r3, [sp, #16]
 8006238:	dc02      	bgt.n	8006240 <_dtoa_r+0xa80>
 800623a:	d1e0      	bne.n	80061fe <_dtoa_r+0xa3e>
 800623c:	07da      	lsls	r2, r3, #31
 800623e:	d5de      	bpl.n	80061fe <_dtoa_r+0xa3e>
 8006240:	2b39      	cmp	r3, #57	@ 0x39
 8006242:	d1da      	bne.n	80061fa <_dtoa_r+0xa3a>
 8006244:	2339      	movs	r3, #57	@ 0x39
 8006246:	f88b 3000 	strb.w	r3, [fp]
 800624a:	4633      	mov	r3, r6
 800624c:	461e      	mov	r6, r3
 800624e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006252:	3b01      	subs	r3, #1
 8006254:	2a39      	cmp	r2, #57	@ 0x39
 8006256:	d04e      	beq.n	80062f6 <_dtoa_r+0xb36>
 8006258:	3201      	adds	r2, #1
 800625a:	701a      	strb	r2, [r3, #0]
 800625c:	e501      	b.n	8005c62 <_dtoa_r+0x4a2>
 800625e:	2a00      	cmp	r2, #0
 8006260:	dd03      	ble.n	800626a <_dtoa_r+0xaaa>
 8006262:	2b39      	cmp	r3, #57	@ 0x39
 8006264:	d0ee      	beq.n	8006244 <_dtoa_r+0xa84>
 8006266:	3301      	adds	r3, #1
 8006268:	e7c9      	b.n	80061fe <_dtoa_r+0xa3e>
 800626a:	9a04      	ldr	r2, [sp, #16]
 800626c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800626e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006272:	428a      	cmp	r2, r1
 8006274:	d028      	beq.n	80062c8 <_dtoa_r+0xb08>
 8006276:	2300      	movs	r3, #0
 8006278:	220a      	movs	r2, #10
 800627a:	9903      	ldr	r1, [sp, #12]
 800627c:	4648      	mov	r0, r9
 800627e:	f000 f9d3 	bl	8006628 <__multadd>
 8006282:	42af      	cmp	r7, r5
 8006284:	9003      	str	r0, [sp, #12]
 8006286:	f04f 0300 	mov.w	r3, #0
 800628a:	f04f 020a 	mov.w	r2, #10
 800628e:	4639      	mov	r1, r7
 8006290:	4648      	mov	r0, r9
 8006292:	d107      	bne.n	80062a4 <_dtoa_r+0xae4>
 8006294:	f000 f9c8 	bl	8006628 <__multadd>
 8006298:	4607      	mov	r7, r0
 800629a:	4605      	mov	r5, r0
 800629c:	9b04      	ldr	r3, [sp, #16]
 800629e:	3301      	adds	r3, #1
 80062a0:	9304      	str	r3, [sp, #16]
 80062a2:	e777      	b.n	8006194 <_dtoa_r+0x9d4>
 80062a4:	f000 f9c0 	bl	8006628 <__multadd>
 80062a8:	4629      	mov	r1, r5
 80062aa:	4607      	mov	r7, r0
 80062ac:	2300      	movs	r3, #0
 80062ae:	220a      	movs	r2, #10
 80062b0:	4648      	mov	r0, r9
 80062b2:	f000 f9b9 	bl	8006628 <__multadd>
 80062b6:	4605      	mov	r5, r0
 80062b8:	e7f0      	b.n	800629c <_dtoa_r+0xadc>
 80062ba:	f1bb 0f00 	cmp.w	fp, #0
 80062be:	bfcc      	ite	gt
 80062c0:	465e      	movgt	r6, fp
 80062c2:	2601      	movle	r6, #1
 80062c4:	2700      	movs	r7, #0
 80062c6:	4456      	add	r6, sl
 80062c8:	2201      	movs	r2, #1
 80062ca:	9903      	ldr	r1, [sp, #12]
 80062cc:	4648      	mov	r0, r9
 80062ce:	9304      	str	r3, [sp, #16]
 80062d0:	f000 fb4e 	bl	8006970 <__lshift>
 80062d4:	4621      	mov	r1, r4
 80062d6:	9003      	str	r0, [sp, #12]
 80062d8:	f000 fbb6 	bl	8006a48 <__mcmp>
 80062dc:	2800      	cmp	r0, #0
 80062de:	dcb4      	bgt.n	800624a <_dtoa_r+0xa8a>
 80062e0:	d102      	bne.n	80062e8 <_dtoa_r+0xb28>
 80062e2:	9b04      	ldr	r3, [sp, #16]
 80062e4:	07db      	lsls	r3, r3, #31
 80062e6:	d4b0      	bmi.n	800624a <_dtoa_r+0xa8a>
 80062e8:	4633      	mov	r3, r6
 80062ea:	461e      	mov	r6, r3
 80062ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062f0:	2a30      	cmp	r2, #48	@ 0x30
 80062f2:	d0fa      	beq.n	80062ea <_dtoa_r+0xb2a>
 80062f4:	e4b5      	b.n	8005c62 <_dtoa_r+0x4a2>
 80062f6:	459a      	cmp	sl, r3
 80062f8:	d1a8      	bne.n	800624c <_dtoa_r+0xa8c>
 80062fa:	2331      	movs	r3, #49	@ 0x31
 80062fc:	f108 0801 	add.w	r8, r8, #1
 8006300:	f88a 3000 	strb.w	r3, [sl]
 8006304:	e4ad      	b.n	8005c62 <_dtoa_r+0x4a2>
 8006306:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006308:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006364 <_dtoa_r+0xba4>
 800630c:	b11b      	cbz	r3, 8006316 <_dtoa_r+0xb56>
 800630e:	f10a 0308 	add.w	r3, sl, #8
 8006312:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006314:	6013      	str	r3, [r2, #0]
 8006316:	4650      	mov	r0, sl
 8006318:	b017      	add	sp, #92	@ 0x5c
 800631a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800631e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006320:	2b01      	cmp	r3, #1
 8006322:	f77f ae2e 	ble.w	8005f82 <_dtoa_r+0x7c2>
 8006326:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006328:	930a      	str	r3, [sp, #40]	@ 0x28
 800632a:	2001      	movs	r0, #1
 800632c:	e64d      	b.n	8005fca <_dtoa_r+0x80a>
 800632e:	f1bb 0f00 	cmp.w	fp, #0
 8006332:	f77f aed9 	ble.w	80060e8 <_dtoa_r+0x928>
 8006336:	4656      	mov	r6, sl
 8006338:	4621      	mov	r1, r4
 800633a:	9803      	ldr	r0, [sp, #12]
 800633c:	f7ff f9b7 	bl	80056ae <quorem>
 8006340:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006344:	f806 3b01 	strb.w	r3, [r6], #1
 8006348:	eba6 020a 	sub.w	r2, r6, sl
 800634c:	4593      	cmp	fp, r2
 800634e:	ddb4      	ble.n	80062ba <_dtoa_r+0xafa>
 8006350:	2300      	movs	r3, #0
 8006352:	220a      	movs	r2, #10
 8006354:	4648      	mov	r0, r9
 8006356:	9903      	ldr	r1, [sp, #12]
 8006358:	f000 f966 	bl	8006628 <__multadd>
 800635c:	9003      	str	r0, [sp, #12]
 800635e:	e7eb      	b.n	8006338 <_dtoa_r+0xb78>
 8006360:	08007fda 	.word	0x08007fda
 8006364:	08007f5e 	.word	0x08007f5e

08006368 <_free_r>:
 8006368:	b538      	push	{r3, r4, r5, lr}
 800636a:	4605      	mov	r5, r0
 800636c:	2900      	cmp	r1, #0
 800636e:	d040      	beq.n	80063f2 <_free_r+0x8a>
 8006370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006374:	1f0c      	subs	r4, r1, #4
 8006376:	2b00      	cmp	r3, #0
 8006378:	bfb8      	it	lt
 800637a:	18e4      	addlt	r4, r4, r3
 800637c:	f000 f8e6 	bl	800654c <__malloc_lock>
 8006380:	4a1c      	ldr	r2, [pc, #112]	@ (80063f4 <_free_r+0x8c>)
 8006382:	6813      	ldr	r3, [r2, #0]
 8006384:	b933      	cbnz	r3, 8006394 <_free_r+0x2c>
 8006386:	6063      	str	r3, [r4, #4]
 8006388:	6014      	str	r4, [r2, #0]
 800638a:	4628      	mov	r0, r5
 800638c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006390:	f000 b8e2 	b.w	8006558 <__malloc_unlock>
 8006394:	42a3      	cmp	r3, r4
 8006396:	d908      	bls.n	80063aa <_free_r+0x42>
 8006398:	6820      	ldr	r0, [r4, #0]
 800639a:	1821      	adds	r1, r4, r0
 800639c:	428b      	cmp	r3, r1
 800639e:	bf01      	itttt	eq
 80063a0:	6819      	ldreq	r1, [r3, #0]
 80063a2:	685b      	ldreq	r3, [r3, #4]
 80063a4:	1809      	addeq	r1, r1, r0
 80063a6:	6021      	streq	r1, [r4, #0]
 80063a8:	e7ed      	b.n	8006386 <_free_r+0x1e>
 80063aa:	461a      	mov	r2, r3
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	b10b      	cbz	r3, 80063b4 <_free_r+0x4c>
 80063b0:	42a3      	cmp	r3, r4
 80063b2:	d9fa      	bls.n	80063aa <_free_r+0x42>
 80063b4:	6811      	ldr	r1, [r2, #0]
 80063b6:	1850      	adds	r0, r2, r1
 80063b8:	42a0      	cmp	r0, r4
 80063ba:	d10b      	bne.n	80063d4 <_free_r+0x6c>
 80063bc:	6820      	ldr	r0, [r4, #0]
 80063be:	4401      	add	r1, r0
 80063c0:	1850      	adds	r0, r2, r1
 80063c2:	4283      	cmp	r3, r0
 80063c4:	6011      	str	r1, [r2, #0]
 80063c6:	d1e0      	bne.n	800638a <_free_r+0x22>
 80063c8:	6818      	ldr	r0, [r3, #0]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	4408      	add	r0, r1
 80063ce:	6010      	str	r0, [r2, #0]
 80063d0:	6053      	str	r3, [r2, #4]
 80063d2:	e7da      	b.n	800638a <_free_r+0x22>
 80063d4:	d902      	bls.n	80063dc <_free_r+0x74>
 80063d6:	230c      	movs	r3, #12
 80063d8:	602b      	str	r3, [r5, #0]
 80063da:	e7d6      	b.n	800638a <_free_r+0x22>
 80063dc:	6820      	ldr	r0, [r4, #0]
 80063de:	1821      	adds	r1, r4, r0
 80063e0:	428b      	cmp	r3, r1
 80063e2:	bf01      	itttt	eq
 80063e4:	6819      	ldreq	r1, [r3, #0]
 80063e6:	685b      	ldreq	r3, [r3, #4]
 80063e8:	1809      	addeq	r1, r1, r0
 80063ea:	6021      	streq	r1, [r4, #0]
 80063ec:	6063      	str	r3, [r4, #4]
 80063ee:	6054      	str	r4, [r2, #4]
 80063f0:	e7cb      	b.n	800638a <_free_r+0x22>
 80063f2:	bd38      	pop	{r3, r4, r5, pc}
 80063f4:	2000072c 	.word	0x2000072c

080063f8 <malloc>:
 80063f8:	4b02      	ldr	r3, [pc, #8]	@ (8006404 <malloc+0xc>)
 80063fa:	4601      	mov	r1, r0
 80063fc:	6818      	ldr	r0, [r3, #0]
 80063fe:	f000 b825 	b.w	800644c <_malloc_r>
 8006402:	bf00      	nop
 8006404:	20000020 	.word	0x20000020

08006408 <sbrk_aligned>:
 8006408:	b570      	push	{r4, r5, r6, lr}
 800640a:	4e0f      	ldr	r6, [pc, #60]	@ (8006448 <sbrk_aligned+0x40>)
 800640c:	460c      	mov	r4, r1
 800640e:	6831      	ldr	r1, [r6, #0]
 8006410:	4605      	mov	r5, r0
 8006412:	b911      	cbnz	r1, 800641a <sbrk_aligned+0x12>
 8006414:	f000 fe3a 	bl	800708c <_sbrk_r>
 8006418:	6030      	str	r0, [r6, #0]
 800641a:	4621      	mov	r1, r4
 800641c:	4628      	mov	r0, r5
 800641e:	f000 fe35 	bl	800708c <_sbrk_r>
 8006422:	1c43      	adds	r3, r0, #1
 8006424:	d103      	bne.n	800642e <sbrk_aligned+0x26>
 8006426:	f04f 34ff 	mov.w	r4, #4294967295
 800642a:	4620      	mov	r0, r4
 800642c:	bd70      	pop	{r4, r5, r6, pc}
 800642e:	1cc4      	adds	r4, r0, #3
 8006430:	f024 0403 	bic.w	r4, r4, #3
 8006434:	42a0      	cmp	r0, r4
 8006436:	d0f8      	beq.n	800642a <sbrk_aligned+0x22>
 8006438:	1a21      	subs	r1, r4, r0
 800643a:	4628      	mov	r0, r5
 800643c:	f000 fe26 	bl	800708c <_sbrk_r>
 8006440:	3001      	adds	r0, #1
 8006442:	d1f2      	bne.n	800642a <sbrk_aligned+0x22>
 8006444:	e7ef      	b.n	8006426 <sbrk_aligned+0x1e>
 8006446:	bf00      	nop
 8006448:	20000728 	.word	0x20000728

0800644c <_malloc_r>:
 800644c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006450:	1ccd      	adds	r5, r1, #3
 8006452:	f025 0503 	bic.w	r5, r5, #3
 8006456:	3508      	adds	r5, #8
 8006458:	2d0c      	cmp	r5, #12
 800645a:	bf38      	it	cc
 800645c:	250c      	movcc	r5, #12
 800645e:	2d00      	cmp	r5, #0
 8006460:	4606      	mov	r6, r0
 8006462:	db01      	blt.n	8006468 <_malloc_r+0x1c>
 8006464:	42a9      	cmp	r1, r5
 8006466:	d904      	bls.n	8006472 <_malloc_r+0x26>
 8006468:	230c      	movs	r3, #12
 800646a:	6033      	str	r3, [r6, #0]
 800646c:	2000      	movs	r0, #0
 800646e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006472:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006548 <_malloc_r+0xfc>
 8006476:	f000 f869 	bl	800654c <__malloc_lock>
 800647a:	f8d8 3000 	ldr.w	r3, [r8]
 800647e:	461c      	mov	r4, r3
 8006480:	bb44      	cbnz	r4, 80064d4 <_malloc_r+0x88>
 8006482:	4629      	mov	r1, r5
 8006484:	4630      	mov	r0, r6
 8006486:	f7ff ffbf 	bl	8006408 <sbrk_aligned>
 800648a:	1c43      	adds	r3, r0, #1
 800648c:	4604      	mov	r4, r0
 800648e:	d158      	bne.n	8006542 <_malloc_r+0xf6>
 8006490:	f8d8 4000 	ldr.w	r4, [r8]
 8006494:	4627      	mov	r7, r4
 8006496:	2f00      	cmp	r7, #0
 8006498:	d143      	bne.n	8006522 <_malloc_r+0xd6>
 800649a:	2c00      	cmp	r4, #0
 800649c:	d04b      	beq.n	8006536 <_malloc_r+0xea>
 800649e:	6823      	ldr	r3, [r4, #0]
 80064a0:	4639      	mov	r1, r7
 80064a2:	4630      	mov	r0, r6
 80064a4:	eb04 0903 	add.w	r9, r4, r3
 80064a8:	f000 fdf0 	bl	800708c <_sbrk_r>
 80064ac:	4581      	cmp	r9, r0
 80064ae:	d142      	bne.n	8006536 <_malloc_r+0xea>
 80064b0:	6821      	ldr	r1, [r4, #0]
 80064b2:	4630      	mov	r0, r6
 80064b4:	1a6d      	subs	r5, r5, r1
 80064b6:	4629      	mov	r1, r5
 80064b8:	f7ff ffa6 	bl	8006408 <sbrk_aligned>
 80064bc:	3001      	adds	r0, #1
 80064be:	d03a      	beq.n	8006536 <_malloc_r+0xea>
 80064c0:	6823      	ldr	r3, [r4, #0]
 80064c2:	442b      	add	r3, r5
 80064c4:	6023      	str	r3, [r4, #0]
 80064c6:	f8d8 3000 	ldr.w	r3, [r8]
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	bb62      	cbnz	r2, 8006528 <_malloc_r+0xdc>
 80064ce:	f8c8 7000 	str.w	r7, [r8]
 80064d2:	e00f      	b.n	80064f4 <_malloc_r+0xa8>
 80064d4:	6822      	ldr	r2, [r4, #0]
 80064d6:	1b52      	subs	r2, r2, r5
 80064d8:	d420      	bmi.n	800651c <_malloc_r+0xd0>
 80064da:	2a0b      	cmp	r2, #11
 80064dc:	d917      	bls.n	800650e <_malloc_r+0xc2>
 80064de:	1961      	adds	r1, r4, r5
 80064e0:	42a3      	cmp	r3, r4
 80064e2:	6025      	str	r5, [r4, #0]
 80064e4:	bf18      	it	ne
 80064e6:	6059      	strne	r1, [r3, #4]
 80064e8:	6863      	ldr	r3, [r4, #4]
 80064ea:	bf08      	it	eq
 80064ec:	f8c8 1000 	streq.w	r1, [r8]
 80064f0:	5162      	str	r2, [r4, r5]
 80064f2:	604b      	str	r3, [r1, #4]
 80064f4:	4630      	mov	r0, r6
 80064f6:	f000 f82f 	bl	8006558 <__malloc_unlock>
 80064fa:	f104 000b 	add.w	r0, r4, #11
 80064fe:	1d23      	adds	r3, r4, #4
 8006500:	f020 0007 	bic.w	r0, r0, #7
 8006504:	1ac2      	subs	r2, r0, r3
 8006506:	bf1c      	itt	ne
 8006508:	1a1b      	subne	r3, r3, r0
 800650a:	50a3      	strne	r3, [r4, r2]
 800650c:	e7af      	b.n	800646e <_malloc_r+0x22>
 800650e:	6862      	ldr	r2, [r4, #4]
 8006510:	42a3      	cmp	r3, r4
 8006512:	bf0c      	ite	eq
 8006514:	f8c8 2000 	streq.w	r2, [r8]
 8006518:	605a      	strne	r2, [r3, #4]
 800651a:	e7eb      	b.n	80064f4 <_malloc_r+0xa8>
 800651c:	4623      	mov	r3, r4
 800651e:	6864      	ldr	r4, [r4, #4]
 8006520:	e7ae      	b.n	8006480 <_malloc_r+0x34>
 8006522:	463c      	mov	r4, r7
 8006524:	687f      	ldr	r7, [r7, #4]
 8006526:	e7b6      	b.n	8006496 <_malloc_r+0x4a>
 8006528:	461a      	mov	r2, r3
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	42a3      	cmp	r3, r4
 800652e:	d1fb      	bne.n	8006528 <_malloc_r+0xdc>
 8006530:	2300      	movs	r3, #0
 8006532:	6053      	str	r3, [r2, #4]
 8006534:	e7de      	b.n	80064f4 <_malloc_r+0xa8>
 8006536:	230c      	movs	r3, #12
 8006538:	4630      	mov	r0, r6
 800653a:	6033      	str	r3, [r6, #0]
 800653c:	f000 f80c 	bl	8006558 <__malloc_unlock>
 8006540:	e794      	b.n	800646c <_malloc_r+0x20>
 8006542:	6005      	str	r5, [r0, #0]
 8006544:	e7d6      	b.n	80064f4 <_malloc_r+0xa8>
 8006546:	bf00      	nop
 8006548:	2000072c 	.word	0x2000072c

0800654c <__malloc_lock>:
 800654c:	4801      	ldr	r0, [pc, #4]	@ (8006554 <__malloc_lock+0x8>)
 800654e:	f7ff b89e 	b.w	800568e <__retarget_lock_acquire_recursive>
 8006552:	bf00      	nop
 8006554:	20000724 	.word	0x20000724

08006558 <__malloc_unlock>:
 8006558:	4801      	ldr	r0, [pc, #4]	@ (8006560 <__malloc_unlock+0x8>)
 800655a:	f7ff b899 	b.w	8005690 <__retarget_lock_release_recursive>
 800655e:	bf00      	nop
 8006560:	20000724 	.word	0x20000724

08006564 <_Balloc>:
 8006564:	b570      	push	{r4, r5, r6, lr}
 8006566:	69c6      	ldr	r6, [r0, #28]
 8006568:	4604      	mov	r4, r0
 800656a:	460d      	mov	r5, r1
 800656c:	b976      	cbnz	r6, 800658c <_Balloc+0x28>
 800656e:	2010      	movs	r0, #16
 8006570:	f7ff ff42 	bl	80063f8 <malloc>
 8006574:	4602      	mov	r2, r0
 8006576:	61e0      	str	r0, [r4, #28]
 8006578:	b920      	cbnz	r0, 8006584 <_Balloc+0x20>
 800657a:	216b      	movs	r1, #107	@ 0x6b
 800657c:	4b17      	ldr	r3, [pc, #92]	@ (80065dc <_Balloc+0x78>)
 800657e:	4818      	ldr	r0, [pc, #96]	@ (80065e0 <_Balloc+0x7c>)
 8006580:	f000 fda2 	bl	80070c8 <__assert_func>
 8006584:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006588:	6006      	str	r6, [r0, #0]
 800658a:	60c6      	str	r6, [r0, #12]
 800658c:	69e6      	ldr	r6, [r4, #28]
 800658e:	68f3      	ldr	r3, [r6, #12]
 8006590:	b183      	cbz	r3, 80065b4 <_Balloc+0x50>
 8006592:	69e3      	ldr	r3, [r4, #28]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800659a:	b9b8      	cbnz	r0, 80065cc <_Balloc+0x68>
 800659c:	2101      	movs	r1, #1
 800659e:	fa01 f605 	lsl.w	r6, r1, r5
 80065a2:	1d72      	adds	r2, r6, #5
 80065a4:	4620      	mov	r0, r4
 80065a6:	0092      	lsls	r2, r2, #2
 80065a8:	f000 fdac 	bl	8007104 <_calloc_r>
 80065ac:	b160      	cbz	r0, 80065c8 <_Balloc+0x64>
 80065ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80065b2:	e00e      	b.n	80065d2 <_Balloc+0x6e>
 80065b4:	2221      	movs	r2, #33	@ 0x21
 80065b6:	2104      	movs	r1, #4
 80065b8:	4620      	mov	r0, r4
 80065ba:	f000 fda3 	bl	8007104 <_calloc_r>
 80065be:	69e3      	ldr	r3, [r4, #28]
 80065c0:	60f0      	str	r0, [r6, #12]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1e4      	bne.n	8006592 <_Balloc+0x2e>
 80065c8:	2000      	movs	r0, #0
 80065ca:	bd70      	pop	{r4, r5, r6, pc}
 80065cc:	6802      	ldr	r2, [r0, #0]
 80065ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80065d2:	2300      	movs	r3, #0
 80065d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065d8:	e7f7      	b.n	80065ca <_Balloc+0x66>
 80065da:	bf00      	nop
 80065dc:	08007f6b 	.word	0x08007f6b
 80065e0:	08007feb 	.word	0x08007feb

080065e4 <_Bfree>:
 80065e4:	b570      	push	{r4, r5, r6, lr}
 80065e6:	69c6      	ldr	r6, [r0, #28]
 80065e8:	4605      	mov	r5, r0
 80065ea:	460c      	mov	r4, r1
 80065ec:	b976      	cbnz	r6, 800660c <_Bfree+0x28>
 80065ee:	2010      	movs	r0, #16
 80065f0:	f7ff ff02 	bl	80063f8 <malloc>
 80065f4:	4602      	mov	r2, r0
 80065f6:	61e8      	str	r0, [r5, #28]
 80065f8:	b920      	cbnz	r0, 8006604 <_Bfree+0x20>
 80065fa:	218f      	movs	r1, #143	@ 0x8f
 80065fc:	4b08      	ldr	r3, [pc, #32]	@ (8006620 <_Bfree+0x3c>)
 80065fe:	4809      	ldr	r0, [pc, #36]	@ (8006624 <_Bfree+0x40>)
 8006600:	f000 fd62 	bl	80070c8 <__assert_func>
 8006604:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006608:	6006      	str	r6, [r0, #0]
 800660a:	60c6      	str	r6, [r0, #12]
 800660c:	b13c      	cbz	r4, 800661e <_Bfree+0x3a>
 800660e:	69eb      	ldr	r3, [r5, #28]
 8006610:	6862      	ldr	r2, [r4, #4]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006618:	6021      	str	r1, [r4, #0]
 800661a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800661e:	bd70      	pop	{r4, r5, r6, pc}
 8006620:	08007f6b 	.word	0x08007f6b
 8006624:	08007feb 	.word	0x08007feb

08006628 <__multadd>:
 8006628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800662c:	4607      	mov	r7, r0
 800662e:	460c      	mov	r4, r1
 8006630:	461e      	mov	r6, r3
 8006632:	2000      	movs	r0, #0
 8006634:	690d      	ldr	r5, [r1, #16]
 8006636:	f101 0c14 	add.w	ip, r1, #20
 800663a:	f8dc 3000 	ldr.w	r3, [ip]
 800663e:	3001      	adds	r0, #1
 8006640:	b299      	uxth	r1, r3
 8006642:	fb02 6101 	mla	r1, r2, r1, r6
 8006646:	0c1e      	lsrs	r6, r3, #16
 8006648:	0c0b      	lsrs	r3, r1, #16
 800664a:	fb02 3306 	mla	r3, r2, r6, r3
 800664e:	b289      	uxth	r1, r1
 8006650:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006654:	4285      	cmp	r5, r0
 8006656:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800665a:	f84c 1b04 	str.w	r1, [ip], #4
 800665e:	dcec      	bgt.n	800663a <__multadd+0x12>
 8006660:	b30e      	cbz	r6, 80066a6 <__multadd+0x7e>
 8006662:	68a3      	ldr	r3, [r4, #8]
 8006664:	42ab      	cmp	r3, r5
 8006666:	dc19      	bgt.n	800669c <__multadd+0x74>
 8006668:	6861      	ldr	r1, [r4, #4]
 800666a:	4638      	mov	r0, r7
 800666c:	3101      	adds	r1, #1
 800666e:	f7ff ff79 	bl	8006564 <_Balloc>
 8006672:	4680      	mov	r8, r0
 8006674:	b928      	cbnz	r0, 8006682 <__multadd+0x5a>
 8006676:	4602      	mov	r2, r0
 8006678:	21ba      	movs	r1, #186	@ 0xba
 800667a:	4b0c      	ldr	r3, [pc, #48]	@ (80066ac <__multadd+0x84>)
 800667c:	480c      	ldr	r0, [pc, #48]	@ (80066b0 <__multadd+0x88>)
 800667e:	f000 fd23 	bl	80070c8 <__assert_func>
 8006682:	6922      	ldr	r2, [r4, #16]
 8006684:	f104 010c 	add.w	r1, r4, #12
 8006688:	3202      	adds	r2, #2
 800668a:	0092      	lsls	r2, r2, #2
 800668c:	300c      	adds	r0, #12
 800668e:	f000 fd0d 	bl	80070ac <memcpy>
 8006692:	4621      	mov	r1, r4
 8006694:	4638      	mov	r0, r7
 8006696:	f7ff ffa5 	bl	80065e4 <_Bfree>
 800669a:	4644      	mov	r4, r8
 800669c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80066a0:	3501      	adds	r5, #1
 80066a2:	615e      	str	r6, [r3, #20]
 80066a4:	6125      	str	r5, [r4, #16]
 80066a6:	4620      	mov	r0, r4
 80066a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066ac:	08007fda 	.word	0x08007fda
 80066b0:	08007feb 	.word	0x08007feb

080066b4 <__hi0bits>:
 80066b4:	4603      	mov	r3, r0
 80066b6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80066ba:	bf3a      	itte	cc
 80066bc:	0403      	lslcc	r3, r0, #16
 80066be:	2010      	movcc	r0, #16
 80066c0:	2000      	movcs	r0, #0
 80066c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80066c6:	bf3c      	itt	cc
 80066c8:	021b      	lslcc	r3, r3, #8
 80066ca:	3008      	addcc	r0, #8
 80066cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066d0:	bf3c      	itt	cc
 80066d2:	011b      	lslcc	r3, r3, #4
 80066d4:	3004      	addcc	r0, #4
 80066d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066da:	bf3c      	itt	cc
 80066dc:	009b      	lslcc	r3, r3, #2
 80066de:	3002      	addcc	r0, #2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	db05      	blt.n	80066f0 <__hi0bits+0x3c>
 80066e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80066e8:	f100 0001 	add.w	r0, r0, #1
 80066ec:	bf08      	it	eq
 80066ee:	2020      	moveq	r0, #32
 80066f0:	4770      	bx	lr

080066f2 <__lo0bits>:
 80066f2:	6803      	ldr	r3, [r0, #0]
 80066f4:	4602      	mov	r2, r0
 80066f6:	f013 0007 	ands.w	r0, r3, #7
 80066fa:	d00b      	beq.n	8006714 <__lo0bits+0x22>
 80066fc:	07d9      	lsls	r1, r3, #31
 80066fe:	d421      	bmi.n	8006744 <__lo0bits+0x52>
 8006700:	0798      	lsls	r0, r3, #30
 8006702:	bf49      	itett	mi
 8006704:	085b      	lsrmi	r3, r3, #1
 8006706:	089b      	lsrpl	r3, r3, #2
 8006708:	2001      	movmi	r0, #1
 800670a:	6013      	strmi	r3, [r2, #0]
 800670c:	bf5c      	itt	pl
 800670e:	2002      	movpl	r0, #2
 8006710:	6013      	strpl	r3, [r2, #0]
 8006712:	4770      	bx	lr
 8006714:	b299      	uxth	r1, r3
 8006716:	b909      	cbnz	r1, 800671c <__lo0bits+0x2a>
 8006718:	2010      	movs	r0, #16
 800671a:	0c1b      	lsrs	r3, r3, #16
 800671c:	b2d9      	uxtb	r1, r3
 800671e:	b909      	cbnz	r1, 8006724 <__lo0bits+0x32>
 8006720:	3008      	adds	r0, #8
 8006722:	0a1b      	lsrs	r3, r3, #8
 8006724:	0719      	lsls	r1, r3, #28
 8006726:	bf04      	itt	eq
 8006728:	091b      	lsreq	r3, r3, #4
 800672a:	3004      	addeq	r0, #4
 800672c:	0799      	lsls	r1, r3, #30
 800672e:	bf04      	itt	eq
 8006730:	089b      	lsreq	r3, r3, #2
 8006732:	3002      	addeq	r0, #2
 8006734:	07d9      	lsls	r1, r3, #31
 8006736:	d403      	bmi.n	8006740 <__lo0bits+0x4e>
 8006738:	085b      	lsrs	r3, r3, #1
 800673a:	f100 0001 	add.w	r0, r0, #1
 800673e:	d003      	beq.n	8006748 <__lo0bits+0x56>
 8006740:	6013      	str	r3, [r2, #0]
 8006742:	4770      	bx	lr
 8006744:	2000      	movs	r0, #0
 8006746:	4770      	bx	lr
 8006748:	2020      	movs	r0, #32
 800674a:	4770      	bx	lr

0800674c <__i2b>:
 800674c:	b510      	push	{r4, lr}
 800674e:	460c      	mov	r4, r1
 8006750:	2101      	movs	r1, #1
 8006752:	f7ff ff07 	bl	8006564 <_Balloc>
 8006756:	4602      	mov	r2, r0
 8006758:	b928      	cbnz	r0, 8006766 <__i2b+0x1a>
 800675a:	f240 1145 	movw	r1, #325	@ 0x145
 800675e:	4b04      	ldr	r3, [pc, #16]	@ (8006770 <__i2b+0x24>)
 8006760:	4804      	ldr	r0, [pc, #16]	@ (8006774 <__i2b+0x28>)
 8006762:	f000 fcb1 	bl	80070c8 <__assert_func>
 8006766:	2301      	movs	r3, #1
 8006768:	6144      	str	r4, [r0, #20]
 800676a:	6103      	str	r3, [r0, #16]
 800676c:	bd10      	pop	{r4, pc}
 800676e:	bf00      	nop
 8006770:	08007fda 	.word	0x08007fda
 8006774:	08007feb 	.word	0x08007feb

08006778 <__multiply>:
 8006778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800677c:	4617      	mov	r7, r2
 800677e:	690a      	ldr	r2, [r1, #16]
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	4689      	mov	r9, r1
 8006784:	429a      	cmp	r2, r3
 8006786:	bfa2      	ittt	ge
 8006788:	463b      	movge	r3, r7
 800678a:	460f      	movge	r7, r1
 800678c:	4699      	movge	r9, r3
 800678e:	693d      	ldr	r5, [r7, #16]
 8006790:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	6879      	ldr	r1, [r7, #4]
 8006798:	eb05 060a 	add.w	r6, r5, sl
 800679c:	42b3      	cmp	r3, r6
 800679e:	b085      	sub	sp, #20
 80067a0:	bfb8      	it	lt
 80067a2:	3101      	addlt	r1, #1
 80067a4:	f7ff fede 	bl	8006564 <_Balloc>
 80067a8:	b930      	cbnz	r0, 80067b8 <__multiply+0x40>
 80067aa:	4602      	mov	r2, r0
 80067ac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80067b0:	4b40      	ldr	r3, [pc, #256]	@ (80068b4 <__multiply+0x13c>)
 80067b2:	4841      	ldr	r0, [pc, #260]	@ (80068b8 <__multiply+0x140>)
 80067b4:	f000 fc88 	bl	80070c8 <__assert_func>
 80067b8:	f100 0414 	add.w	r4, r0, #20
 80067bc:	4623      	mov	r3, r4
 80067be:	2200      	movs	r2, #0
 80067c0:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80067c4:	4573      	cmp	r3, lr
 80067c6:	d320      	bcc.n	800680a <__multiply+0x92>
 80067c8:	f107 0814 	add.w	r8, r7, #20
 80067cc:	f109 0114 	add.w	r1, r9, #20
 80067d0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80067d4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80067d8:	9302      	str	r3, [sp, #8]
 80067da:	1beb      	subs	r3, r5, r7
 80067dc:	3b15      	subs	r3, #21
 80067de:	f023 0303 	bic.w	r3, r3, #3
 80067e2:	3304      	adds	r3, #4
 80067e4:	3715      	adds	r7, #21
 80067e6:	42bd      	cmp	r5, r7
 80067e8:	bf38      	it	cc
 80067ea:	2304      	movcc	r3, #4
 80067ec:	9301      	str	r3, [sp, #4]
 80067ee:	9b02      	ldr	r3, [sp, #8]
 80067f0:	9103      	str	r1, [sp, #12]
 80067f2:	428b      	cmp	r3, r1
 80067f4:	d80c      	bhi.n	8006810 <__multiply+0x98>
 80067f6:	2e00      	cmp	r6, #0
 80067f8:	dd03      	ble.n	8006802 <__multiply+0x8a>
 80067fa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d055      	beq.n	80068ae <__multiply+0x136>
 8006802:	6106      	str	r6, [r0, #16]
 8006804:	b005      	add	sp, #20
 8006806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800680a:	f843 2b04 	str.w	r2, [r3], #4
 800680e:	e7d9      	b.n	80067c4 <__multiply+0x4c>
 8006810:	f8b1 a000 	ldrh.w	sl, [r1]
 8006814:	f1ba 0f00 	cmp.w	sl, #0
 8006818:	d01f      	beq.n	800685a <__multiply+0xe2>
 800681a:	46c4      	mov	ip, r8
 800681c:	46a1      	mov	r9, r4
 800681e:	2700      	movs	r7, #0
 8006820:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006824:	f8d9 3000 	ldr.w	r3, [r9]
 8006828:	fa1f fb82 	uxth.w	fp, r2
 800682c:	b29b      	uxth	r3, r3
 800682e:	fb0a 330b 	mla	r3, sl, fp, r3
 8006832:	443b      	add	r3, r7
 8006834:	f8d9 7000 	ldr.w	r7, [r9]
 8006838:	0c12      	lsrs	r2, r2, #16
 800683a:	0c3f      	lsrs	r7, r7, #16
 800683c:	fb0a 7202 	mla	r2, sl, r2, r7
 8006840:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006844:	b29b      	uxth	r3, r3
 8006846:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800684a:	4565      	cmp	r5, ip
 800684c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006850:	f849 3b04 	str.w	r3, [r9], #4
 8006854:	d8e4      	bhi.n	8006820 <__multiply+0xa8>
 8006856:	9b01      	ldr	r3, [sp, #4]
 8006858:	50e7      	str	r7, [r4, r3]
 800685a:	9b03      	ldr	r3, [sp, #12]
 800685c:	3104      	adds	r1, #4
 800685e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006862:	f1b9 0f00 	cmp.w	r9, #0
 8006866:	d020      	beq.n	80068aa <__multiply+0x132>
 8006868:	4647      	mov	r7, r8
 800686a:	46a4      	mov	ip, r4
 800686c:	f04f 0a00 	mov.w	sl, #0
 8006870:	6823      	ldr	r3, [r4, #0]
 8006872:	f8b7 b000 	ldrh.w	fp, [r7]
 8006876:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800687a:	b29b      	uxth	r3, r3
 800687c:	fb09 220b 	mla	r2, r9, fp, r2
 8006880:	4452      	add	r2, sl
 8006882:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006886:	f84c 3b04 	str.w	r3, [ip], #4
 800688a:	f857 3b04 	ldr.w	r3, [r7], #4
 800688e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006892:	f8bc 3000 	ldrh.w	r3, [ip]
 8006896:	42bd      	cmp	r5, r7
 8006898:	fb09 330a 	mla	r3, r9, sl, r3
 800689c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80068a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80068a4:	d8e5      	bhi.n	8006872 <__multiply+0xfa>
 80068a6:	9a01      	ldr	r2, [sp, #4]
 80068a8:	50a3      	str	r3, [r4, r2]
 80068aa:	3404      	adds	r4, #4
 80068ac:	e79f      	b.n	80067ee <__multiply+0x76>
 80068ae:	3e01      	subs	r6, #1
 80068b0:	e7a1      	b.n	80067f6 <__multiply+0x7e>
 80068b2:	bf00      	nop
 80068b4:	08007fda 	.word	0x08007fda
 80068b8:	08007feb 	.word	0x08007feb

080068bc <__pow5mult>:
 80068bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068c0:	4615      	mov	r5, r2
 80068c2:	f012 0203 	ands.w	r2, r2, #3
 80068c6:	4607      	mov	r7, r0
 80068c8:	460e      	mov	r6, r1
 80068ca:	d007      	beq.n	80068dc <__pow5mult+0x20>
 80068cc:	4c25      	ldr	r4, [pc, #148]	@ (8006964 <__pow5mult+0xa8>)
 80068ce:	3a01      	subs	r2, #1
 80068d0:	2300      	movs	r3, #0
 80068d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80068d6:	f7ff fea7 	bl	8006628 <__multadd>
 80068da:	4606      	mov	r6, r0
 80068dc:	10ad      	asrs	r5, r5, #2
 80068de:	d03d      	beq.n	800695c <__pow5mult+0xa0>
 80068e0:	69fc      	ldr	r4, [r7, #28]
 80068e2:	b97c      	cbnz	r4, 8006904 <__pow5mult+0x48>
 80068e4:	2010      	movs	r0, #16
 80068e6:	f7ff fd87 	bl	80063f8 <malloc>
 80068ea:	4602      	mov	r2, r0
 80068ec:	61f8      	str	r0, [r7, #28]
 80068ee:	b928      	cbnz	r0, 80068fc <__pow5mult+0x40>
 80068f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80068f4:	4b1c      	ldr	r3, [pc, #112]	@ (8006968 <__pow5mult+0xac>)
 80068f6:	481d      	ldr	r0, [pc, #116]	@ (800696c <__pow5mult+0xb0>)
 80068f8:	f000 fbe6 	bl	80070c8 <__assert_func>
 80068fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006900:	6004      	str	r4, [r0, #0]
 8006902:	60c4      	str	r4, [r0, #12]
 8006904:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006908:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800690c:	b94c      	cbnz	r4, 8006922 <__pow5mult+0x66>
 800690e:	f240 2171 	movw	r1, #625	@ 0x271
 8006912:	4638      	mov	r0, r7
 8006914:	f7ff ff1a 	bl	800674c <__i2b>
 8006918:	2300      	movs	r3, #0
 800691a:	4604      	mov	r4, r0
 800691c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006920:	6003      	str	r3, [r0, #0]
 8006922:	f04f 0900 	mov.w	r9, #0
 8006926:	07eb      	lsls	r3, r5, #31
 8006928:	d50a      	bpl.n	8006940 <__pow5mult+0x84>
 800692a:	4631      	mov	r1, r6
 800692c:	4622      	mov	r2, r4
 800692e:	4638      	mov	r0, r7
 8006930:	f7ff ff22 	bl	8006778 <__multiply>
 8006934:	4680      	mov	r8, r0
 8006936:	4631      	mov	r1, r6
 8006938:	4638      	mov	r0, r7
 800693a:	f7ff fe53 	bl	80065e4 <_Bfree>
 800693e:	4646      	mov	r6, r8
 8006940:	106d      	asrs	r5, r5, #1
 8006942:	d00b      	beq.n	800695c <__pow5mult+0xa0>
 8006944:	6820      	ldr	r0, [r4, #0]
 8006946:	b938      	cbnz	r0, 8006958 <__pow5mult+0x9c>
 8006948:	4622      	mov	r2, r4
 800694a:	4621      	mov	r1, r4
 800694c:	4638      	mov	r0, r7
 800694e:	f7ff ff13 	bl	8006778 <__multiply>
 8006952:	6020      	str	r0, [r4, #0]
 8006954:	f8c0 9000 	str.w	r9, [r0]
 8006958:	4604      	mov	r4, r0
 800695a:	e7e4      	b.n	8006926 <__pow5mult+0x6a>
 800695c:	4630      	mov	r0, r6
 800695e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006962:	bf00      	nop
 8006964:	0800809c 	.word	0x0800809c
 8006968:	08007f6b 	.word	0x08007f6b
 800696c:	08007feb 	.word	0x08007feb

08006970 <__lshift>:
 8006970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006974:	460c      	mov	r4, r1
 8006976:	4607      	mov	r7, r0
 8006978:	4691      	mov	r9, r2
 800697a:	6923      	ldr	r3, [r4, #16]
 800697c:	6849      	ldr	r1, [r1, #4]
 800697e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006982:	68a3      	ldr	r3, [r4, #8]
 8006984:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006988:	f108 0601 	add.w	r6, r8, #1
 800698c:	42b3      	cmp	r3, r6
 800698e:	db0b      	blt.n	80069a8 <__lshift+0x38>
 8006990:	4638      	mov	r0, r7
 8006992:	f7ff fde7 	bl	8006564 <_Balloc>
 8006996:	4605      	mov	r5, r0
 8006998:	b948      	cbnz	r0, 80069ae <__lshift+0x3e>
 800699a:	4602      	mov	r2, r0
 800699c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80069a0:	4b27      	ldr	r3, [pc, #156]	@ (8006a40 <__lshift+0xd0>)
 80069a2:	4828      	ldr	r0, [pc, #160]	@ (8006a44 <__lshift+0xd4>)
 80069a4:	f000 fb90 	bl	80070c8 <__assert_func>
 80069a8:	3101      	adds	r1, #1
 80069aa:	005b      	lsls	r3, r3, #1
 80069ac:	e7ee      	b.n	800698c <__lshift+0x1c>
 80069ae:	2300      	movs	r3, #0
 80069b0:	f100 0114 	add.w	r1, r0, #20
 80069b4:	f100 0210 	add.w	r2, r0, #16
 80069b8:	4618      	mov	r0, r3
 80069ba:	4553      	cmp	r3, sl
 80069bc:	db33      	blt.n	8006a26 <__lshift+0xb6>
 80069be:	6920      	ldr	r0, [r4, #16]
 80069c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069c4:	f104 0314 	add.w	r3, r4, #20
 80069c8:	f019 091f 	ands.w	r9, r9, #31
 80069cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80069d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80069d4:	d02b      	beq.n	8006a2e <__lshift+0xbe>
 80069d6:	468a      	mov	sl, r1
 80069d8:	2200      	movs	r2, #0
 80069da:	f1c9 0e20 	rsb	lr, r9, #32
 80069de:	6818      	ldr	r0, [r3, #0]
 80069e0:	fa00 f009 	lsl.w	r0, r0, r9
 80069e4:	4310      	orrs	r0, r2
 80069e6:	f84a 0b04 	str.w	r0, [sl], #4
 80069ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80069ee:	459c      	cmp	ip, r3
 80069f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80069f4:	d8f3      	bhi.n	80069de <__lshift+0x6e>
 80069f6:	ebac 0304 	sub.w	r3, ip, r4
 80069fa:	3b15      	subs	r3, #21
 80069fc:	f023 0303 	bic.w	r3, r3, #3
 8006a00:	3304      	adds	r3, #4
 8006a02:	f104 0015 	add.w	r0, r4, #21
 8006a06:	4560      	cmp	r0, ip
 8006a08:	bf88      	it	hi
 8006a0a:	2304      	movhi	r3, #4
 8006a0c:	50ca      	str	r2, [r1, r3]
 8006a0e:	b10a      	cbz	r2, 8006a14 <__lshift+0xa4>
 8006a10:	f108 0602 	add.w	r6, r8, #2
 8006a14:	3e01      	subs	r6, #1
 8006a16:	4638      	mov	r0, r7
 8006a18:	4621      	mov	r1, r4
 8006a1a:	612e      	str	r6, [r5, #16]
 8006a1c:	f7ff fde2 	bl	80065e4 <_Bfree>
 8006a20:	4628      	mov	r0, r5
 8006a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a26:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	e7c5      	b.n	80069ba <__lshift+0x4a>
 8006a2e:	3904      	subs	r1, #4
 8006a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a34:	459c      	cmp	ip, r3
 8006a36:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a3a:	d8f9      	bhi.n	8006a30 <__lshift+0xc0>
 8006a3c:	e7ea      	b.n	8006a14 <__lshift+0xa4>
 8006a3e:	bf00      	nop
 8006a40:	08007fda 	.word	0x08007fda
 8006a44:	08007feb 	.word	0x08007feb

08006a48 <__mcmp>:
 8006a48:	4603      	mov	r3, r0
 8006a4a:	690a      	ldr	r2, [r1, #16]
 8006a4c:	6900      	ldr	r0, [r0, #16]
 8006a4e:	b530      	push	{r4, r5, lr}
 8006a50:	1a80      	subs	r0, r0, r2
 8006a52:	d10e      	bne.n	8006a72 <__mcmp+0x2a>
 8006a54:	3314      	adds	r3, #20
 8006a56:	3114      	adds	r1, #20
 8006a58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006a5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006a60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006a64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006a68:	4295      	cmp	r5, r2
 8006a6a:	d003      	beq.n	8006a74 <__mcmp+0x2c>
 8006a6c:	d205      	bcs.n	8006a7a <__mcmp+0x32>
 8006a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a72:	bd30      	pop	{r4, r5, pc}
 8006a74:	42a3      	cmp	r3, r4
 8006a76:	d3f3      	bcc.n	8006a60 <__mcmp+0x18>
 8006a78:	e7fb      	b.n	8006a72 <__mcmp+0x2a>
 8006a7a:	2001      	movs	r0, #1
 8006a7c:	e7f9      	b.n	8006a72 <__mcmp+0x2a>
	...

08006a80 <__mdiff>:
 8006a80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a84:	4689      	mov	r9, r1
 8006a86:	4606      	mov	r6, r0
 8006a88:	4611      	mov	r1, r2
 8006a8a:	4648      	mov	r0, r9
 8006a8c:	4614      	mov	r4, r2
 8006a8e:	f7ff ffdb 	bl	8006a48 <__mcmp>
 8006a92:	1e05      	subs	r5, r0, #0
 8006a94:	d112      	bne.n	8006abc <__mdiff+0x3c>
 8006a96:	4629      	mov	r1, r5
 8006a98:	4630      	mov	r0, r6
 8006a9a:	f7ff fd63 	bl	8006564 <_Balloc>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	b928      	cbnz	r0, 8006aae <__mdiff+0x2e>
 8006aa2:	f240 2137 	movw	r1, #567	@ 0x237
 8006aa6:	4b3e      	ldr	r3, [pc, #248]	@ (8006ba0 <__mdiff+0x120>)
 8006aa8:	483e      	ldr	r0, [pc, #248]	@ (8006ba4 <__mdiff+0x124>)
 8006aaa:	f000 fb0d 	bl	80070c8 <__assert_func>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	b003      	add	sp, #12
 8006ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006abc:	bfbc      	itt	lt
 8006abe:	464b      	movlt	r3, r9
 8006ac0:	46a1      	movlt	r9, r4
 8006ac2:	4630      	mov	r0, r6
 8006ac4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006ac8:	bfba      	itte	lt
 8006aca:	461c      	movlt	r4, r3
 8006acc:	2501      	movlt	r5, #1
 8006ace:	2500      	movge	r5, #0
 8006ad0:	f7ff fd48 	bl	8006564 <_Balloc>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	b918      	cbnz	r0, 8006ae0 <__mdiff+0x60>
 8006ad8:	f240 2145 	movw	r1, #581	@ 0x245
 8006adc:	4b30      	ldr	r3, [pc, #192]	@ (8006ba0 <__mdiff+0x120>)
 8006ade:	e7e3      	b.n	8006aa8 <__mdiff+0x28>
 8006ae0:	f100 0b14 	add.w	fp, r0, #20
 8006ae4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006ae8:	f109 0310 	add.w	r3, r9, #16
 8006aec:	60c5      	str	r5, [r0, #12]
 8006aee:	f04f 0c00 	mov.w	ip, #0
 8006af2:	f109 0514 	add.w	r5, r9, #20
 8006af6:	46d9      	mov	r9, fp
 8006af8:	6926      	ldr	r6, [r4, #16]
 8006afa:	f104 0e14 	add.w	lr, r4, #20
 8006afe:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006b02:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006b06:	9301      	str	r3, [sp, #4]
 8006b08:	9b01      	ldr	r3, [sp, #4]
 8006b0a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006b0e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006b12:	b281      	uxth	r1, r0
 8006b14:	9301      	str	r3, [sp, #4]
 8006b16:	fa1f f38a 	uxth.w	r3, sl
 8006b1a:	1a5b      	subs	r3, r3, r1
 8006b1c:	0c00      	lsrs	r0, r0, #16
 8006b1e:	4463      	add	r3, ip
 8006b20:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006b24:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006b2e:	4576      	cmp	r6, lr
 8006b30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b34:	f849 3b04 	str.w	r3, [r9], #4
 8006b38:	d8e6      	bhi.n	8006b08 <__mdiff+0x88>
 8006b3a:	1b33      	subs	r3, r6, r4
 8006b3c:	3b15      	subs	r3, #21
 8006b3e:	f023 0303 	bic.w	r3, r3, #3
 8006b42:	3415      	adds	r4, #21
 8006b44:	3304      	adds	r3, #4
 8006b46:	42a6      	cmp	r6, r4
 8006b48:	bf38      	it	cc
 8006b4a:	2304      	movcc	r3, #4
 8006b4c:	441d      	add	r5, r3
 8006b4e:	445b      	add	r3, fp
 8006b50:	461e      	mov	r6, r3
 8006b52:	462c      	mov	r4, r5
 8006b54:	4544      	cmp	r4, r8
 8006b56:	d30e      	bcc.n	8006b76 <__mdiff+0xf6>
 8006b58:	f108 0103 	add.w	r1, r8, #3
 8006b5c:	1b49      	subs	r1, r1, r5
 8006b5e:	f021 0103 	bic.w	r1, r1, #3
 8006b62:	3d03      	subs	r5, #3
 8006b64:	45a8      	cmp	r8, r5
 8006b66:	bf38      	it	cc
 8006b68:	2100      	movcc	r1, #0
 8006b6a:	440b      	add	r3, r1
 8006b6c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006b70:	b199      	cbz	r1, 8006b9a <__mdiff+0x11a>
 8006b72:	6117      	str	r7, [r2, #16]
 8006b74:	e79e      	b.n	8006ab4 <__mdiff+0x34>
 8006b76:	46e6      	mov	lr, ip
 8006b78:	f854 1b04 	ldr.w	r1, [r4], #4
 8006b7c:	fa1f fc81 	uxth.w	ip, r1
 8006b80:	44f4      	add	ip, lr
 8006b82:	0c08      	lsrs	r0, r1, #16
 8006b84:	4471      	add	r1, lr
 8006b86:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006b8a:	b289      	uxth	r1, r1
 8006b8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006b90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b94:	f846 1b04 	str.w	r1, [r6], #4
 8006b98:	e7dc      	b.n	8006b54 <__mdiff+0xd4>
 8006b9a:	3f01      	subs	r7, #1
 8006b9c:	e7e6      	b.n	8006b6c <__mdiff+0xec>
 8006b9e:	bf00      	nop
 8006ba0:	08007fda 	.word	0x08007fda
 8006ba4:	08007feb 	.word	0x08007feb

08006ba8 <__d2b>:
 8006ba8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006bac:	2101      	movs	r1, #1
 8006bae:	4690      	mov	r8, r2
 8006bb0:	4699      	mov	r9, r3
 8006bb2:	9e08      	ldr	r6, [sp, #32]
 8006bb4:	f7ff fcd6 	bl	8006564 <_Balloc>
 8006bb8:	4604      	mov	r4, r0
 8006bba:	b930      	cbnz	r0, 8006bca <__d2b+0x22>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	f240 310f 	movw	r1, #783	@ 0x30f
 8006bc2:	4b23      	ldr	r3, [pc, #140]	@ (8006c50 <__d2b+0xa8>)
 8006bc4:	4823      	ldr	r0, [pc, #140]	@ (8006c54 <__d2b+0xac>)
 8006bc6:	f000 fa7f 	bl	80070c8 <__assert_func>
 8006bca:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006bce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006bd2:	b10d      	cbz	r5, 8006bd8 <__d2b+0x30>
 8006bd4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bd8:	9301      	str	r3, [sp, #4]
 8006bda:	f1b8 0300 	subs.w	r3, r8, #0
 8006bde:	d024      	beq.n	8006c2a <__d2b+0x82>
 8006be0:	4668      	mov	r0, sp
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	f7ff fd85 	bl	80066f2 <__lo0bits>
 8006be8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006bec:	b1d8      	cbz	r0, 8006c26 <__d2b+0x7e>
 8006bee:	f1c0 0320 	rsb	r3, r0, #32
 8006bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf6:	430b      	orrs	r3, r1
 8006bf8:	40c2      	lsrs	r2, r0
 8006bfa:	6163      	str	r3, [r4, #20]
 8006bfc:	9201      	str	r2, [sp, #4]
 8006bfe:	9b01      	ldr	r3, [sp, #4]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	bf0c      	ite	eq
 8006c04:	2201      	moveq	r2, #1
 8006c06:	2202      	movne	r2, #2
 8006c08:	61a3      	str	r3, [r4, #24]
 8006c0a:	6122      	str	r2, [r4, #16]
 8006c0c:	b1ad      	cbz	r5, 8006c3a <__d2b+0x92>
 8006c0e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006c12:	4405      	add	r5, r0
 8006c14:	6035      	str	r5, [r6, #0]
 8006c16:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006c1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c1c:	6018      	str	r0, [r3, #0]
 8006c1e:	4620      	mov	r0, r4
 8006c20:	b002      	add	sp, #8
 8006c22:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006c26:	6161      	str	r1, [r4, #20]
 8006c28:	e7e9      	b.n	8006bfe <__d2b+0x56>
 8006c2a:	a801      	add	r0, sp, #4
 8006c2c:	f7ff fd61 	bl	80066f2 <__lo0bits>
 8006c30:	9b01      	ldr	r3, [sp, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	6163      	str	r3, [r4, #20]
 8006c36:	3020      	adds	r0, #32
 8006c38:	e7e7      	b.n	8006c0a <__d2b+0x62>
 8006c3a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006c3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006c42:	6030      	str	r0, [r6, #0]
 8006c44:	6918      	ldr	r0, [r3, #16]
 8006c46:	f7ff fd35 	bl	80066b4 <__hi0bits>
 8006c4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c4e:	e7e4      	b.n	8006c1a <__d2b+0x72>
 8006c50:	08007fda 	.word	0x08007fda
 8006c54:	08007feb 	.word	0x08007feb

08006c58 <__ssputs_r>:
 8006c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c5c:	461f      	mov	r7, r3
 8006c5e:	688e      	ldr	r6, [r1, #8]
 8006c60:	4682      	mov	sl, r0
 8006c62:	42be      	cmp	r6, r7
 8006c64:	460c      	mov	r4, r1
 8006c66:	4690      	mov	r8, r2
 8006c68:	680b      	ldr	r3, [r1, #0]
 8006c6a:	d82d      	bhi.n	8006cc8 <__ssputs_r+0x70>
 8006c6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006c74:	d026      	beq.n	8006cc4 <__ssputs_r+0x6c>
 8006c76:	6965      	ldr	r5, [r4, #20]
 8006c78:	6909      	ldr	r1, [r1, #16]
 8006c7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c7e:	eba3 0901 	sub.w	r9, r3, r1
 8006c82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c86:	1c7b      	adds	r3, r7, #1
 8006c88:	444b      	add	r3, r9
 8006c8a:	106d      	asrs	r5, r5, #1
 8006c8c:	429d      	cmp	r5, r3
 8006c8e:	bf38      	it	cc
 8006c90:	461d      	movcc	r5, r3
 8006c92:	0553      	lsls	r3, r2, #21
 8006c94:	d527      	bpl.n	8006ce6 <__ssputs_r+0x8e>
 8006c96:	4629      	mov	r1, r5
 8006c98:	f7ff fbd8 	bl	800644c <_malloc_r>
 8006c9c:	4606      	mov	r6, r0
 8006c9e:	b360      	cbz	r0, 8006cfa <__ssputs_r+0xa2>
 8006ca0:	464a      	mov	r2, r9
 8006ca2:	6921      	ldr	r1, [r4, #16]
 8006ca4:	f000 fa02 	bl	80070ac <memcpy>
 8006ca8:	89a3      	ldrh	r3, [r4, #12]
 8006caa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cb2:	81a3      	strh	r3, [r4, #12]
 8006cb4:	6126      	str	r6, [r4, #16]
 8006cb6:	444e      	add	r6, r9
 8006cb8:	6026      	str	r6, [r4, #0]
 8006cba:	463e      	mov	r6, r7
 8006cbc:	6165      	str	r5, [r4, #20]
 8006cbe:	eba5 0509 	sub.w	r5, r5, r9
 8006cc2:	60a5      	str	r5, [r4, #8]
 8006cc4:	42be      	cmp	r6, r7
 8006cc6:	d900      	bls.n	8006cca <__ssputs_r+0x72>
 8006cc8:	463e      	mov	r6, r7
 8006cca:	4632      	mov	r2, r6
 8006ccc:	4641      	mov	r1, r8
 8006cce:	6820      	ldr	r0, [r4, #0]
 8006cd0:	f000 f9c2 	bl	8007058 <memmove>
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	68a3      	ldr	r3, [r4, #8]
 8006cd8:	1b9b      	subs	r3, r3, r6
 8006cda:	60a3      	str	r3, [r4, #8]
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	4433      	add	r3, r6
 8006ce0:	6023      	str	r3, [r4, #0]
 8006ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce6:	462a      	mov	r2, r5
 8006ce8:	f000 fa32 	bl	8007150 <_realloc_r>
 8006cec:	4606      	mov	r6, r0
 8006cee:	2800      	cmp	r0, #0
 8006cf0:	d1e0      	bne.n	8006cb4 <__ssputs_r+0x5c>
 8006cf2:	4650      	mov	r0, sl
 8006cf4:	6921      	ldr	r1, [r4, #16]
 8006cf6:	f7ff fb37 	bl	8006368 <_free_r>
 8006cfa:	230c      	movs	r3, #12
 8006cfc:	f8ca 3000 	str.w	r3, [sl]
 8006d00:	89a3      	ldrh	r3, [r4, #12]
 8006d02:	f04f 30ff 	mov.w	r0, #4294967295
 8006d06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d0a:	81a3      	strh	r3, [r4, #12]
 8006d0c:	e7e9      	b.n	8006ce2 <__ssputs_r+0x8a>
	...

08006d10 <_svfiprintf_r>:
 8006d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d14:	4698      	mov	r8, r3
 8006d16:	898b      	ldrh	r3, [r1, #12]
 8006d18:	4607      	mov	r7, r0
 8006d1a:	061b      	lsls	r3, r3, #24
 8006d1c:	460d      	mov	r5, r1
 8006d1e:	4614      	mov	r4, r2
 8006d20:	b09d      	sub	sp, #116	@ 0x74
 8006d22:	d510      	bpl.n	8006d46 <_svfiprintf_r+0x36>
 8006d24:	690b      	ldr	r3, [r1, #16]
 8006d26:	b973      	cbnz	r3, 8006d46 <_svfiprintf_r+0x36>
 8006d28:	2140      	movs	r1, #64	@ 0x40
 8006d2a:	f7ff fb8f 	bl	800644c <_malloc_r>
 8006d2e:	6028      	str	r0, [r5, #0]
 8006d30:	6128      	str	r0, [r5, #16]
 8006d32:	b930      	cbnz	r0, 8006d42 <_svfiprintf_r+0x32>
 8006d34:	230c      	movs	r3, #12
 8006d36:	603b      	str	r3, [r7, #0]
 8006d38:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3c:	b01d      	add	sp, #116	@ 0x74
 8006d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d42:	2340      	movs	r3, #64	@ 0x40
 8006d44:	616b      	str	r3, [r5, #20]
 8006d46:	2300      	movs	r3, #0
 8006d48:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d4a:	2320      	movs	r3, #32
 8006d4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d50:	2330      	movs	r3, #48	@ 0x30
 8006d52:	f04f 0901 	mov.w	r9, #1
 8006d56:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d5a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006ef4 <_svfiprintf_r+0x1e4>
 8006d5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d62:	4623      	mov	r3, r4
 8006d64:	469a      	mov	sl, r3
 8006d66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d6a:	b10a      	cbz	r2, 8006d70 <_svfiprintf_r+0x60>
 8006d6c:	2a25      	cmp	r2, #37	@ 0x25
 8006d6e:	d1f9      	bne.n	8006d64 <_svfiprintf_r+0x54>
 8006d70:	ebba 0b04 	subs.w	fp, sl, r4
 8006d74:	d00b      	beq.n	8006d8e <_svfiprintf_r+0x7e>
 8006d76:	465b      	mov	r3, fp
 8006d78:	4622      	mov	r2, r4
 8006d7a:	4629      	mov	r1, r5
 8006d7c:	4638      	mov	r0, r7
 8006d7e:	f7ff ff6b 	bl	8006c58 <__ssputs_r>
 8006d82:	3001      	adds	r0, #1
 8006d84:	f000 80a7 	beq.w	8006ed6 <_svfiprintf_r+0x1c6>
 8006d88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d8a:	445a      	add	r2, fp
 8006d8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d8e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f000 809f 	beq.w	8006ed6 <_svfiprintf_r+0x1c6>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006da2:	f10a 0a01 	add.w	sl, sl, #1
 8006da6:	9304      	str	r3, [sp, #16]
 8006da8:	9307      	str	r3, [sp, #28]
 8006daa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006dae:	931a      	str	r3, [sp, #104]	@ 0x68
 8006db0:	4654      	mov	r4, sl
 8006db2:	2205      	movs	r2, #5
 8006db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006db8:	484e      	ldr	r0, [pc, #312]	@ (8006ef4 <_svfiprintf_r+0x1e4>)
 8006dba:	f7fe fc6a 	bl	8005692 <memchr>
 8006dbe:	9a04      	ldr	r2, [sp, #16]
 8006dc0:	b9d8      	cbnz	r0, 8006dfa <_svfiprintf_r+0xea>
 8006dc2:	06d0      	lsls	r0, r2, #27
 8006dc4:	bf44      	itt	mi
 8006dc6:	2320      	movmi	r3, #32
 8006dc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006dcc:	0711      	lsls	r1, r2, #28
 8006dce:	bf44      	itt	mi
 8006dd0:	232b      	movmi	r3, #43	@ 0x2b
 8006dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006dd6:	f89a 3000 	ldrb.w	r3, [sl]
 8006dda:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ddc:	d015      	beq.n	8006e0a <_svfiprintf_r+0xfa>
 8006dde:	4654      	mov	r4, sl
 8006de0:	2000      	movs	r0, #0
 8006de2:	f04f 0c0a 	mov.w	ip, #10
 8006de6:	9a07      	ldr	r2, [sp, #28]
 8006de8:	4621      	mov	r1, r4
 8006dea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dee:	3b30      	subs	r3, #48	@ 0x30
 8006df0:	2b09      	cmp	r3, #9
 8006df2:	d94b      	bls.n	8006e8c <_svfiprintf_r+0x17c>
 8006df4:	b1b0      	cbz	r0, 8006e24 <_svfiprintf_r+0x114>
 8006df6:	9207      	str	r2, [sp, #28]
 8006df8:	e014      	b.n	8006e24 <_svfiprintf_r+0x114>
 8006dfa:	eba0 0308 	sub.w	r3, r0, r8
 8006dfe:	fa09 f303 	lsl.w	r3, r9, r3
 8006e02:	4313      	orrs	r3, r2
 8006e04:	46a2      	mov	sl, r4
 8006e06:	9304      	str	r3, [sp, #16]
 8006e08:	e7d2      	b.n	8006db0 <_svfiprintf_r+0xa0>
 8006e0a:	9b03      	ldr	r3, [sp, #12]
 8006e0c:	1d19      	adds	r1, r3, #4
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	9103      	str	r1, [sp, #12]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	bfbb      	ittet	lt
 8006e16:	425b      	neglt	r3, r3
 8006e18:	f042 0202 	orrlt.w	r2, r2, #2
 8006e1c:	9307      	strge	r3, [sp, #28]
 8006e1e:	9307      	strlt	r3, [sp, #28]
 8006e20:	bfb8      	it	lt
 8006e22:	9204      	strlt	r2, [sp, #16]
 8006e24:	7823      	ldrb	r3, [r4, #0]
 8006e26:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e28:	d10a      	bne.n	8006e40 <_svfiprintf_r+0x130>
 8006e2a:	7863      	ldrb	r3, [r4, #1]
 8006e2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e2e:	d132      	bne.n	8006e96 <_svfiprintf_r+0x186>
 8006e30:	9b03      	ldr	r3, [sp, #12]
 8006e32:	3402      	adds	r4, #2
 8006e34:	1d1a      	adds	r2, r3, #4
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	9203      	str	r2, [sp, #12]
 8006e3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e3e:	9305      	str	r3, [sp, #20]
 8006e40:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006ef8 <_svfiprintf_r+0x1e8>
 8006e44:	2203      	movs	r2, #3
 8006e46:	4650      	mov	r0, sl
 8006e48:	7821      	ldrb	r1, [r4, #0]
 8006e4a:	f7fe fc22 	bl	8005692 <memchr>
 8006e4e:	b138      	cbz	r0, 8006e60 <_svfiprintf_r+0x150>
 8006e50:	2240      	movs	r2, #64	@ 0x40
 8006e52:	9b04      	ldr	r3, [sp, #16]
 8006e54:	eba0 000a 	sub.w	r0, r0, sl
 8006e58:	4082      	lsls	r2, r0
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	3401      	adds	r4, #1
 8006e5e:	9304      	str	r3, [sp, #16]
 8006e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e64:	2206      	movs	r2, #6
 8006e66:	4825      	ldr	r0, [pc, #148]	@ (8006efc <_svfiprintf_r+0x1ec>)
 8006e68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e6c:	f7fe fc11 	bl	8005692 <memchr>
 8006e70:	2800      	cmp	r0, #0
 8006e72:	d036      	beq.n	8006ee2 <_svfiprintf_r+0x1d2>
 8006e74:	4b22      	ldr	r3, [pc, #136]	@ (8006f00 <_svfiprintf_r+0x1f0>)
 8006e76:	bb1b      	cbnz	r3, 8006ec0 <_svfiprintf_r+0x1b0>
 8006e78:	9b03      	ldr	r3, [sp, #12]
 8006e7a:	3307      	adds	r3, #7
 8006e7c:	f023 0307 	bic.w	r3, r3, #7
 8006e80:	3308      	adds	r3, #8
 8006e82:	9303      	str	r3, [sp, #12]
 8006e84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e86:	4433      	add	r3, r6
 8006e88:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e8a:	e76a      	b.n	8006d62 <_svfiprintf_r+0x52>
 8006e8c:	460c      	mov	r4, r1
 8006e8e:	2001      	movs	r0, #1
 8006e90:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e94:	e7a8      	b.n	8006de8 <_svfiprintf_r+0xd8>
 8006e96:	2300      	movs	r3, #0
 8006e98:	f04f 0c0a 	mov.w	ip, #10
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	3401      	adds	r4, #1
 8006ea0:	9305      	str	r3, [sp, #20]
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ea8:	3a30      	subs	r2, #48	@ 0x30
 8006eaa:	2a09      	cmp	r2, #9
 8006eac:	d903      	bls.n	8006eb6 <_svfiprintf_r+0x1a6>
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d0c6      	beq.n	8006e40 <_svfiprintf_r+0x130>
 8006eb2:	9105      	str	r1, [sp, #20]
 8006eb4:	e7c4      	b.n	8006e40 <_svfiprintf_r+0x130>
 8006eb6:	4604      	mov	r4, r0
 8006eb8:	2301      	movs	r3, #1
 8006eba:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ebe:	e7f0      	b.n	8006ea2 <_svfiprintf_r+0x192>
 8006ec0:	ab03      	add	r3, sp, #12
 8006ec2:	9300      	str	r3, [sp, #0]
 8006ec4:	462a      	mov	r2, r5
 8006ec6:	4638      	mov	r0, r7
 8006ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8006f04 <_svfiprintf_r+0x1f4>)
 8006eca:	a904      	add	r1, sp, #16
 8006ecc:	f7fd fe7e 	bl	8004bcc <_printf_float>
 8006ed0:	1c42      	adds	r2, r0, #1
 8006ed2:	4606      	mov	r6, r0
 8006ed4:	d1d6      	bne.n	8006e84 <_svfiprintf_r+0x174>
 8006ed6:	89ab      	ldrh	r3, [r5, #12]
 8006ed8:	065b      	lsls	r3, r3, #25
 8006eda:	f53f af2d 	bmi.w	8006d38 <_svfiprintf_r+0x28>
 8006ede:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ee0:	e72c      	b.n	8006d3c <_svfiprintf_r+0x2c>
 8006ee2:	ab03      	add	r3, sp, #12
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	462a      	mov	r2, r5
 8006ee8:	4638      	mov	r0, r7
 8006eea:	4b06      	ldr	r3, [pc, #24]	@ (8006f04 <_svfiprintf_r+0x1f4>)
 8006eec:	a904      	add	r1, sp, #16
 8006eee:	f7fe f90b 	bl	8005108 <_printf_i>
 8006ef2:	e7ed      	b.n	8006ed0 <_svfiprintf_r+0x1c0>
 8006ef4:	08008044 	.word	0x08008044
 8006ef8:	0800804a 	.word	0x0800804a
 8006efc:	0800804e 	.word	0x0800804e
 8006f00:	08004bcd 	.word	0x08004bcd
 8006f04:	08006c59 	.word	0x08006c59

08006f08 <__sflush_r>:
 8006f08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0e:	0716      	lsls	r6, r2, #28
 8006f10:	4605      	mov	r5, r0
 8006f12:	460c      	mov	r4, r1
 8006f14:	d454      	bmi.n	8006fc0 <__sflush_r+0xb8>
 8006f16:	684b      	ldr	r3, [r1, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	dc02      	bgt.n	8006f22 <__sflush_r+0x1a>
 8006f1c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	dd48      	ble.n	8006fb4 <__sflush_r+0xac>
 8006f22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f24:	2e00      	cmp	r6, #0
 8006f26:	d045      	beq.n	8006fb4 <__sflush_r+0xac>
 8006f28:	2300      	movs	r3, #0
 8006f2a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006f2e:	682f      	ldr	r7, [r5, #0]
 8006f30:	6a21      	ldr	r1, [r4, #32]
 8006f32:	602b      	str	r3, [r5, #0]
 8006f34:	d030      	beq.n	8006f98 <__sflush_r+0x90>
 8006f36:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f38:	89a3      	ldrh	r3, [r4, #12]
 8006f3a:	0759      	lsls	r1, r3, #29
 8006f3c:	d505      	bpl.n	8006f4a <__sflush_r+0x42>
 8006f3e:	6863      	ldr	r3, [r4, #4]
 8006f40:	1ad2      	subs	r2, r2, r3
 8006f42:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f44:	b10b      	cbz	r3, 8006f4a <__sflush_r+0x42>
 8006f46:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f48:	1ad2      	subs	r2, r2, r3
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f50:	6a21      	ldr	r1, [r4, #32]
 8006f52:	47b0      	blx	r6
 8006f54:	1c43      	adds	r3, r0, #1
 8006f56:	89a3      	ldrh	r3, [r4, #12]
 8006f58:	d106      	bne.n	8006f68 <__sflush_r+0x60>
 8006f5a:	6829      	ldr	r1, [r5, #0]
 8006f5c:	291d      	cmp	r1, #29
 8006f5e:	d82b      	bhi.n	8006fb8 <__sflush_r+0xb0>
 8006f60:	4a28      	ldr	r2, [pc, #160]	@ (8007004 <__sflush_r+0xfc>)
 8006f62:	40ca      	lsrs	r2, r1
 8006f64:	07d6      	lsls	r6, r2, #31
 8006f66:	d527      	bpl.n	8006fb8 <__sflush_r+0xb0>
 8006f68:	2200      	movs	r2, #0
 8006f6a:	6062      	str	r2, [r4, #4]
 8006f6c:	6922      	ldr	r2, [r4, #16]
 8006f6e:	04d9      	lsls	r1, r3, #19
 8006f70:	6022      	str	r2, [r4, #0]
 8006f72:	d504      	bpl.n	8006f7e <__sflush_r+0x76>
 8006f74:	1c42      	adds	r2, r0, #1
 8006f76:	d101      	bne.n	8006f7c <__sflush_r+0x74>
 8006f78:	682b      	ldr	r3, [r5, #0]
 8006f7a:	b903      	cbnz	r3, 8006f7e <__sflush_r+0x76>
 8006f7c:	6560      	str	r0, [r4, #84]	@ 0x54
 8006f7e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f80:	602f      	str	r7, [r5, #0]
 8006f82:	b1b9      	cbz	r1, 8006fb4 <__sflush_r+0xac>
 8006f84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f88:	4299      	cmp	r1, r3
 8006f8a:	d002      	beq.n	8006f92 <__sflush_r+0x8a>
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	f7ff f9eb 	bl	8006368 <_free_r>
 8006f92:	2300      	movs	r3, #0
 8006f94:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f96:	e00d      	b.n	8006fb4 <__sflush_r+0xac>
 8006f98:	2301      	movs	r3, #1
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	47b0      	blx	r6
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	1c50      	adds	r0, r2, #1
 8006fa2:	d1c9      	bne.n	8006f38 <__sflush_r+0x30>
 8006fa4:	682b      	ldr	r3, [r5, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d0c6      	beq.n	8006f38 <__sflush_r+0x30>
 8006faa:	2b1d      	cmp	r3, #29
 8006fac:	d001      	beq.n	8006fb2 <__sflush_r+0xaa>
 8006fae:	2b16      	cmp	r3, #22
 8006fb0:	d11d      	bne.n	8006fee <__sflush_r+0xe6>
 8006fb2:	602f      	str	r7, [r5, #0]
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	e021      	b.n	8006ffc <__sflush_r+0xf4>
 8006fb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fbc:	b21b      	sxth	r3, r3
 8006fbe:	e01a      	b.n	8006ff6 <__sflush_r+0xee>
 8006fc0:	690f      	ldr	r7, [r1, #16]
 8006fc2:	2f00      	cmp	r7, #0
 8006fc4:	d0f6      	beq.n	8006fb4 <__sflush_r+0xac>
 8006fc6:	0793      	lsls	r3, r2, #30
 8006fc8:	bf18      	it	ne
 8006fca:	2300      	movne	r3, #0
 8006fcc:	680e      	ldr	r6, [r1, #0]
 8006fce:	bf08      	it	eq
 8006fd0:	694b      	ldreq	r3, [r1, #20]
 8006fd2:	1bf6      	subs	r6, r6, r7
 8006fd4:	600f      	str	r7, [r1, #0]
 8006fd6:	608b      	str	r3, [r1, #8]
 8006fd8:	2e00      	cmp	r6, #0
 8006fda:	ddeb      	ble.n	8006fb4 <__sflush_r+0xac>
 8006fdc:	4633      	mov	r3, r6
 8006fde:	463a      	mov	r2, r7
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	6a21      	ldr	r1, [r4, #32]
 8006fe4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006fe8:	47e0      	blx	ip
 8006fea:	2800      	cmp	r0, #0
 8006fec:	dc07      	bgt.n	8006ffe <__sflush_r+0xf6>
 8006fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ff2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8006ffa:	81a3      	strh	r3, [r4, #12]
 8006ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ffe:	4407      	add	r7, r0
 8007000:	1a36      	subs	r6, r6, r0
 8007002:	e7e9      	b.n	8006fd8 <__sflush_r+0xd0>
 8007004:	20400001 	.word	0x20400001

08007008 <_fflush_r>:
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	690b      	ldr	r3, [r1, #16]
 800700c:	4605      	mov	r5, r0
 800700e:	460c      	mov	r4, r1
 8007010:	b913      	cbnz	r3, 8007018 <_fflush_r+0x10>
 8007012:	2500      	movs	r5, #0
 8007014:	4628      	mov	r0, r5
 8007016:	bd38      	pop	{r3, r4, r5, pc}
 8007018:	b118      	cbz	r0, 8007022 <_fflush_r+0x1a>
 800701a:	6a03      	ldr	r3, [r0, #32]
 800701c:	b90b      	cbnz	r3, 8007022 <_fflush_r+0x1a>
 800701e:	f7fe fa1d 	bl	800545c <__sinit>
 8007022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d0f3      	beq.n	8007012 <_fflush_r+0xa>
 800702a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800702c:	07d0      	lsls	r0, r2, #31
 800702e:	d404      	bmi.n	800703a <_fflush_r+0x32>
 8007030:	0599      	lsls	r1, r3, #22
 8007032:	d402      	bmi.n	800703a <_fflush_r+0x32>
 8007034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007036:	f7fe fb2a 	bl	800568e <__retarget_lock_acquire_recursive>
 800703a:	4628      	mov	r0, r5
 800703c:	4621      	mov	r1, r4
 800703e:	f7ff ff63 	bl	8006f08 <__sflush_r>
 8007042:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007044:	4605      	mov	r5, r0
 8007046:	07da      	lsls	r2, r3, #31
 8007048:	d4e4      	bmi.n	8007014 <_fflush_r+0xc>
 800704a:	89a3      	ldrh	r3, [r4, #12]
 800704c:	059b      	lsls	r3, r3, #22
 800704e:	d4e1      	bmi.n	8007014 <_fflush_r+0xc>
 8007050:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007052:	f7fe fb1d 	bl	8005690 <__retarget_lock_release_recursive>
 8007056:	e7dd      	b.n	8007014 <_fflush_r+0xc>

08007058 <memmove>:
 8007058:	4288      	cmp	r0, r1
 800705a:	b510      	push	{r4, lr}
 800705c:	eb01 0402 	add.w	r4, r1, r2
 8007060:	d902      	bls.n	8007068 <memmove+0x10>
 8007062:	4284      	cmp	r4, r0
 8007064:	4623      	mov	r3, r4
 8007066:	d807      	bhi.n	8007078 <memmove+0x20>
 8007068:	1e43      	subs	r3, r0, #1
 800706a:	42a1      	cmp	r1, r4
 800706c:	d008      	beq.n	8007080 <memmove+0x28>
 800706e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007072:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007076:	e7f8      	b.n	800706a <memmove+0x12>
 8007078:	4601      	mov	r1, r0
 800707a:	4402      	add	r2, r0
 800707c:	428a      	cmp	r2, r1
 800707e:	d100      	bne.n	8007082 <memmove+0x2a>
 8007080:	bd10      	pop	{r4, pc}
 8007082:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007086:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800708a:	e7f7      	b.n	800707c <memmove+0x24>

0800708c <_sbrk_r>:
 800708c:	b538      	push	{r3, r4, r5, lr}
 800708e:	2300      	movs	r3, #0
 8007090:	4d05      	ldr	r5, [pc, #20]	@ (80070a8 <_sbrk_r+0x1c>)
 8007092:	4604      	mov	r4, r0
 8007094:	4608      	mov	r0, r1
 8007096:	602b      	str	r3, [r5, #0]
 8007098:	f7fb f84a 	bl	8002130 <_sbrk>
 800709c:	1c43      	adds	r3, r0, #1
 800709e:	d102      	bne.n	80070a6 <_sbrk_r+0x1a>
 80070a0:	682b      	ldr	r3, [r5, #0]
 80070a2:	b103      	cbz	r3, 80070a6 <_sbrk_r+0x1a>
 80070a4:	6023      	str	r3, [r4, #0]
 80070a6:	bd38      	pop	{r3, r4, r5, pc}
 80070a8:	20000720 	.word	0x20000720

080070ac <memcpy>:
 80070ac:	440a      	add	r2, r1
 80070ae:	4291      	cmp	r1, r2
 80070b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80070b4:	d100      	bne.n	80070b8 <memcpy+0xc>
 80070b6:	4770      	bx	lr
 80070b8:	b510      	push	{r4, lr}
 80070ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070be:	4291      	cmp	r1, r2
 80070c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070c4:	d1f9      	bne.n	80070ba <memcpy+0xe>
 80070c6:	bd10      	pop	{r4, pc}

080070c8 <__assert_func>:
 80070c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070ca:	4614      	mov	r4, r2
 80070cc:	461a      	mov	r2, r3
 80070ce:	4b09      	ldr	r3, [pc, #36]	@ (80070f4 <__assert_func+0x2c>)
 80070d0:	4605      	mov	r5, r0
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68d8      	ldr	r0, [r3, #12]
 80070d6:	b14c      	cbz	r4, 80070ec <__assert_func+0x24>
 80070d8:	4b07      	ldr	r3, [pc, #28]	@ (80070f8 <__assert_func+0x30>)
 80070da:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80070de:	9100      	str	r1, [sp, #0]
 80070e0:	462b      	mov	r3, r5
 80070e2:	4906      	ldr	r1, [pc, #24]	@ (80070fc <__assert_func+0x34>)
 80070e4:	f000 f870 	bl	80071c8 <fiprintf>
 80070e8:	f000 f880 	bl	80071ec <abort>
 80070ec:	4b04      	ldr	r3, [pc, #16]	@ (8007100 <__assert_func+0x38>)
 80070ee:	461c      	mov	r4, r3
 80070f0:	e7f3      	b.n	80070da <__assert_func+0x12>
 80070f2:	bf00      	nop
 80070f4:	20000020 	.word	0x20000020
 80070f8:	0800805f 	.word	0x0800805f
 80070fc:	0800806c 	.word	0x0800806c
 8007100:	0800809a 	.word	0x0800809a

08007104 <_calloc_r>:
 8007104:	b570      	push	{r4, r5, r6, lr}
 8007106:	fba1 5402 	umull	r5, r4, r1, r2
 800710a:	b934      	cbnz	r4, 800711a <_calloc_r+0x16>
 800710c:	4629      	mov	r1, r5
 800710e:	f7ff f99d 	bl	800644c <_malloc_r>
 8007112:	4606      	mov	r6, r0
 8007114:	b928      	cbnz	r0, 8007122 <_calloc_r+0x1e>
 8007116:	4630      	mov	r0, r6
 8007118:	bd70      	pop	{r4, r5, r6, pc}
 800711a:	220c      	movs	r2, #12
 800711c:	2600      	movs	r6, #0
 800711e:	6002      	str	r2, [r0, #0]
 8007120:	e7f9      	b.n	8007116 <_calloc_r+0x12>
 8007122:	462a      	mov	r2, r5
 8007124:	4621      	mov	r1, r4
 8007126:	f7fe fa34 	bl	8005592 <memset>
 800712a:	e7f4      	b.n	8007116 <_calloc_r+0x12>

0800712c <__ascii_mbtowc>:
 800712c:	b082      	sub	sp, #8
 800712e:	b901      	cbnz	r1, 8007132 <__ascii_mbtowc+0x6>
 8007130:	a901      	add	r1, sp, #4
 8007132:	b142      	cbz	r2, 8007146 <__ascii_mbtowc+0x1a>
 8007134:	b14b      	cbz	r3, 800714a <__ascii_mbtowc+0x1e>
 8007136:	7813      	ldrb	r3, [r2, #0]
 8007138:	600b      	str	r3, [r1, #0]
 800713a:	7812      	ldrb	r2, [r2, #0]
 800713c:	1e10      	subs	r0, r2, #0
 800713e:	bf18      	it	ne
 8007140:	2001      	movne	r0, #1
 8007142:	b002      	add	sp, #8
 8007144:	4770      	bx	lr
 8007146:	4610      	mov	r0, r2
 8007148:	e7fb      	b.n	8007142 <__ascii_mbtowc+0x16>
 800714a:	f06f 0001 	mvn.w	r0, #1
 800714e:	e7f8      	b.n	8007142 <__ascii_mbtowc+0x16>

08007150 <_realloc_r>:
 8007150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007154:	4607      	mov	r7, r0
 8007156:	4614      	mov	r4, r2
 8007158:	460d      	mov	r5, r1
 800715a:	b921      	cbnz	r1, 8007166 <_realloc_r+0x16>
 800715c:	4611      	mov	r1, r2
 800715e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007162:	f7ff b973 	b.w	800644c <_malloc_r>
 8007166:	b92a      	cbnz	r2, 8007174 <_realloc_r+0x24>
 8007168:	f7ff f8fe 	bl	8006368 <_free_r>
 800716c:	4625      	mov	r5, r4
 800716e:	4628      	mov	r0, r5
 8007170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007174:	f000 f841 	bl	80071fa <_malloc_usable_size_r>
 8007178:	4284      	cmp	r4, r0
 800717a:	4606      	mov	r6, r0
 800717c:	d802      	bhi.n	8007184 <_realloc_r+0x34>
 800717e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007182:	d8f4      	bhi.n	800716e <_realloc_r+0x1e>
 8007184:	4621      	mov	r1, r4
 8007186:	4638      	mov	r0, r7
 8007188:	f7ff f960 	bl	800644c <_malloc_r>
 800718c:	4680      	mov	r8, r0
 800718e:	b908      	cbnz	r0, 8007194 <_realloc_r+0x44>
 8007190:	4645      	mov	r5, r8
 8007192:	e7ec      	b.n	800716e <_realloc_r+0x1e>
 8007194:	42b4      	cmp	r4, r6
 8007196:	4622      	mov	r2, r4
 8007198:	4629      	mov	r1, r5
 800719a:	bf28      	it	cs
 800719c:	4632      	movcs	r2, r6
 800719e:	f7ff ff85 	bl	80070ac <memcpy>
 80071a2:	4629      	mov	r1, r5
 80071a4:	4638      	mov	r0, r7
 80071a6:	f7ff f8df 	bl	8006368 <_free_r>
 80071aa:	e7f1      	b.n	8007190 <_realloc_r+0x40>

080071ac <__ascii_wctomb>:
 80071ac:	4603      	mov	r3, r0
 80071ae:	4608      	mov	r0, r1
 80071b0:	b141      	cbz	r1, 80071c4 <__ascii_wctomb+0x18>
 80071b2:	2aff      	cmp	r2, #255	@ 0xff
 80071b4:	d904      	bls.n	80071c0 <__ascii_wctomb+0x14>
 80071b6:	228a      	movs	r2, #138	@ 0x8a
 80071b8:	f04f 30ff 	mov.w	r0, #4294967295
 80071bc:	601a      	str	r2, [r3, #0]
 80071be:	4770      	bx	lr
 80071c0:	2001      	movs	r0, #1
 80071c2:	700a      	strb	r2, [r1, #0]
 80071c4:	4770      	bx	lr
	...

080071c8 <fiprintf>:
 80071c8:	b40e      	push	{r1, r2, r3}
 80071ca:	b503      	push	{r0, r1, lr}
 80071cc:	4601      	mov	r1, r0
 80071ce:	ab03      	add	r3, sp, #12
 80071d0:	4805      	ldr	r0, [pc, #20]	@ (80071e8 <fiprintf+0x20>)
 80071d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80071d6:	6800      	ldr	r0, [r0, #0]
 80071d8:	9301      	str	r3, [sp, #4]
 80071da:	f000 f83d 	bl	8007258 <_vfiprintf_r>
 80071de:	b002      	add	sp, #8
 80071e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80071e4:	b003      	add	sp, #12
 80071e6:	4770      	bx	lr
 80071e8:	20000020 	.word	0x20000020

080071ec <abort>:
 80071ec:	2006      	movs	r0, #6
 80071ee:	b508      	push	{r3, lr}
 80071f0:	f000 fa06 	bl	8007600 <raise>
 80071f4:	2001      	movs	r0, #1
 80071f6:	f7fa ff26 	bl	8002046 <_exit>

080071fa <_malloc_usable_size_r>:
 80071fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071fe:	1f18      	subs	r0, r3, #4
 8007200:	2b00      	cmp	r3, #0
 8007202:	bfbc      	itt	lt
 8007204:	580b      	ldrlt	r3, [r1, r0]
 8007206:	18c0      	addlt	r0, r0, r3
 8007208:	4770      	bx	lr

0800720a <__sfputc_r>:
 800720a:	6893      	ldr	r3, [r2, #8]
 800720c:	b410      	push	{r4}
 800720e:	3b01      	subs	r3, #1
 8007210:	2b00      	cmp	r3, #0
 8007212:	6093      	str	r3, [r2, #8]
 8007214:	da07      	bge.n	8007226 <__sfputc_r+0x1c>
 8007216:	6994      	ldr	r4, [r2, #24]
 8007218:	42a3      	cmp	r3, r4
 800721a:	db01      	blt.n	8007220 <__sfputc_r+0x16>
 800721c:	290a      	cmp	r1, #10
 800721e:	d102      	bne.n	8007226 <__sfputc_r+0x1c>
 8007220:	bc10      	pop	{r4}
 8007222:	f000 b931 	b.w	8007488 <__swbuf_r>
 8007226:	6813      	ldr	r3, [r2, #0]
 8007228:	1c58      	adds	r0, r3, #1
 800722a:	6010      	str	r0, [r2, #0]
 800722c:	7019      	strb	r1, [r3, #0]
 800722e:	4608      	mov	r0, r1
 8007230:	bc10      	pop	{r4}
 8007232:	4770      	bx	lr

08007234 <__sfputs_r>:
 8007234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007236:	4606      	mov	r6, r0
 8007238:	460f      	mov	r7, r1
 800723a:	4614      	mov	r4, r2
 800723c:	18d5      	adds	r5, r2, r3
 800723e:	42ac      	cmp	r4, r5
 8007240:	d101      	bne.n	8007246 <__sfputs_r+0x12>
 8007242:	2000      	movs	r0, #0
 8007244:	e007      	b.n	8007256 <__sfputs_r+0x22>
 8007246:	463a      	mov	r2, r7
 8007248:	4630      	mov	r0, r6
 800724a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800724e:	f7ff ffdc 	bl	800720a <__sfputc_r>
 8007252:	1c43      	adds	r3, r0, #1
 8007254:	d1f3      	bne.n	800723e <__sfputs_r+0xa>
 8007256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007258 <_vfiprintf_r>:
 8007258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800725c:	460d      	mov	r5, r1
 800725e:	4614      	mov	r4, r2
 8007260:	4698      	mov	r8, r3
 8007262:	4606      	mov	r6, r0
 8007264:	b09d      	sub	sp, #116	@ 0x74
 8007266:	b118      	cbz	r0, 8007270 <_vfiprintf_r+0x18>
 8007268:	6a03      	ldr	r3, [r0, #32]
 800726a:	b90b      	cbnz	r3, 8007270 <_vfiprintf_r+0x18>
 800726c:	f7fe f8f6 	bl	800545c <__sinit>
 8007270:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007272:	07d9      	lsls	r1, r3, #31
 8007274:	d405      	bmi.n	8007282 <_vfiprintf_r+0x2a>
 8007276:	89ab      	ldrh	r3, [r5, #12]
 8007278:	059a      	lsls	r2, r3, #22
 800727a:	d402      	bmi.n	8007282 <_vfiprintf_r+0x2a>
 800727c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800727e:	f7fe fa06 	bl	800568e <__retarget_lock_acquire_recursive>
 8007282:	89ab      	ldrh	r3, [r5, #12]
 8007284:	071b      	lsls	r3, r3, #28
 8007286:	d501      	bpl.n	800728c <_vfiprintf_r+0x34>
 8007288:	692b      	ldr	r3, [r5, #16]
 800728a:	b99b      	cbnz	r3, 80072b4 <_vfiprintf_r+0x5c>
 800728c:	4629      	mov	r1, r5
 800728e:	4630      	mov	r0, r6
 8007290:	f000 f938 	bl	8007504 <__swsetup_r>
 8007294:	b170      	cbz	r0, 80072b4 <_vfiprintf_r+0x5c>
 8007296:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007298:	07dc      	lsls	r4, r3, #31
 800729a:	d504      	bpl.n	80072a6 <_vfiprintf_r+0x4e>
 800729c:	f04f 30ff 	mov.w	r0, #4294967295
 80072a0:	b01d      	add	sp, #116	@ 0x74
 80072a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a6:	89ab      	ldrh	r3, [r5, #12]
 80072a8:	0598      	lsls	r0, r3, #22
 80072aa:	d4f7      	bmi.n	800729c <_vfiprintf_r+0x44>
 80072ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072ae:	f7fe f9ef 	bl	8005690 <__retarget_lock_release_recursive>
 80072b2:	e7f3      	b.n	800729c <_vfiprintf_r+0x44>
 80072b4:	2300      	movs	r3, #0
 80072b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80072b8:	2320      	movs	r3, #32
 80072ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80072be:	2330      	movs	r3, #48	@ 0x30
 80072c0:	f04f 0901 	mov.w	r9, #1
 80072c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80072c8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007474 <_vfiprintf_r+0x21c>
 80072cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072d0:	4623      	mov	r3, r4
 80072d2:	469a      	mov	sl, r3
 80072d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072d8:	b10a      	cbz	r2, 80072de <_vfiprintf_r+0x86>
 80072da:	2a25      	cmp	r2, #37	@ 0x25
 80072dc:	d1f9      	bne.n	80072d2 <_vfiprintf_r+0x7a>
 80072de:	ebba 0b04 	subs.w	fp, sl, r4
 80072e2:	d00b      	beq.n	80072fc <_vfiprintf_r+0xa4>
 80072e4:	465b      	mov	r3, fp
 80072e6:	4622      	mov	r2, r4
 80072e8:	4629      	mov	r1, r5
 80072ea:	4630      	mov	r0, r6
 80072ec:	f7ff ffa2 	bl	8007234 <__sfputs_r>
 80072f0:	3001      	adds	r0, #1
 80072f2:	f000 80a7 	beq.w	8007444 <_vfiprintf_r+0x1ec>
 80072f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072f8:	445a      	add	r2, fp
 80072fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80072fc:	f89a 3000 	ldrb.w	r3, [sl]
 8007300:	2b00      	cmp	r3, #0
 8007302:	f000 809f 	beq.w	8007444 <_vfiprintf_r+0x1ec>
 8007306:	2300      	movs	r3, #0
 8007308:	f04f 32ff 	mov.w	r2, #4294967295
 800730c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007310:	f10a 0a01 	add.w	sl, sl, #1
 8007314:	9304      	str	r3, [sp, #16]
 8007316:	9307      	str	r3, [sp, #28]
 8007318:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800731c:	931a      	str	r3, [sp, #104]	@ 0x68
 800731e:	4654      	mov	r4, sl
 8007320:	2205      	movs	r2, #5
 8007322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007326:	4853      	ldr	r0, [pc, #332]	@ (8007474 <_vfiprintf_r+0x21c>)
 8007328:	f7fe f9b3 	bl	8005692 <memchr>
 800732c:	9a04      	ldr	r2, [sp, #16]
 800732e:	b9d8      	cbnz	r0, 8007368 <_vfiprintf_r+0x110>
 8007330:	06d1      	lsls	r1, r2, #27
 8007332:	bf44      	itt	mi
 8007334:	2320      	movmi	r3, #32
 8007336:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800733a:	0713      	lsls	r3, r2, #28
 800733c:	bf44      	itt	mi
 800733e:	232b      	movmi	r3, #43	@ 0x2b
 8007340:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007344:	f89a 3000 	ldrb.w	r3, [sl]
 8007348:	2b2a      	cmp	r3, #42	@ 0x2a
 800734a:	d015      	beq.n	8007378 <_vfiprintf_r+0x120>
 800734c:	4654      	mov	r4, sl
 800734e:	2000      	movs	r0, #0
 8007350:	f04f 0c0a 	mov.w	ip, #10
 8007354:	9a07      	ldr	r2, [sp, #28]
 8007356:	4621      	mov	r1, r4
 8007358:	f811 3b01 	ldrb.w	r3, [r1], #1
 800735c:	3b30      	subs	r3, #48	@ 0x30
 800735e:	2b09      	cmp	r3, #9
 8007360:	d94b      	bls.n	80073fa <_vfiprintf_r+0x1a2>
 8007362:	b1b0      	cbz	r0, 8007392 <_vfiprintf_r+0x13a>
 8007364:	9207      	str	r2, [sp, #28]
 8007366:	e014      	b.n	8007392 <_vfiprintf_r+0x13a>
 8007368:	eba0 0308 	sub.w	r3, r0, r8
 800736c:	fa09 f303 	lsl.w	r3, r9, r3
 8007370:	4313      	orrs	r3, r2
 8007372:	46a2      	mov	sl, r4
 8007374:	9304      	str	r3, [sp, #16]
 8007376:	e7d2      	b.n	800731e <_vfiprintf_r+0xc6>
 8007378:	9b03      	ldr	r3, [sp, #12]
 800737a:	1d19      	adds	r1, r3, #4
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	9103      	str	r1, [sp, #12]
 8007380:	2b00      	cmp	r3, #0
 8007382:	bfbb      	ittet	lt
 8007384:	425b      	neglt	r3, r3
 8007386:	f042 0202 	orrlt.w	r2, r2, #2
 800738a:	9307      	strge	r3, [sp, #28]
 800738c:	9307      	strlt	r3, [sp, #28]
 800738e:	bfb8      	it	lt
 8007390:	9204      	strlt	r2, [sp, #16]
 8007392:	7823      	ldrb	r3, [r4, #0]
 8007394:	2b2e      	cmp	r3, #46	@ 0x2e
 8007396:	d10a      	bne.n	80073ae <_vfiprintf_r+0x156>
 8007398:	7863      	ldrb	r3, [r4, #1]
 800739a:	2b2a      	cmp	r3, #42	@ 0x2a
 800739c:	d132      	bne.n	8007404 <_vfiprintf_r+0x1ac>
 800739e:	9b03      	ldr	r3, [sp, #12]
 80073a0:	3402      	adds	r4, #2
 80073a2:	1d1a      	adds	r2, r3, #4
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	9203      	str	r2, [sp, #12]
 80073a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80073ac:	9305      	str	r3, [sp, #20]
 80073ae:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007478 <_vfiprintf_r+0x220>
 80073b2:	2203      	movs	r2, #3
 80073b4:	4650      	mov	r0, sl
 80073b6:	7821      	ldrb	r1, [r4, #0]
 80073b8:	f7fe f96b 	bl	8005692 <memchr>
 80073bc:	b138      	cbz	r0, 80073ce <_vfiprintf_r+0x176>
 80073be:	2240      	movs	r2, #64	@ 0x40
 80073c0:	9b04      	ldr	r3, [sp, #16]
 80073c2:	eba0 000a 	sub.w	r0, r0, sl
 80073c6:	4082      	lsls	r2, r0
 80073c8:	4313      	orrs	r3, r2
 80073ca:	3401      	adds	r4, #1
 80073cc:	9304      	str	r3, [sp, #16]
 80073ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073d2:	2206      	movs	r2, #6
 80073d4:	4829      	ldr	r0, [pc, #164]	@ (800747c <_vfiprintf_r+0x224>)
 80073d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073da:	f7fe f95a 	bl	8005692 <memchr>
 80073de:	2800      	cmp	r0, #0
 80073e0:	d03f      	beq.n	8007462 <_vfiprintf_r+0x20a>
 80073e2:	4b27      	ldr	r3, [pc, #156]	@ (8007480 <_vfiprintf_r+0x228>)
 80073e4:	bb1b      	cbnz	r3, 800742e <_vfiprintf_r+0x1d6>
 80073e6:	9b03      	ldr	r3, [sp, #12]
 80073e8:	3307      	adds	r3, #7
 80073ea:	f023 0307 	bic.w	r3, r3, #7
 80073ee:	3308      	adds	r3, #8
 80073f0:	9303      	str	r3, [sp, #12]
 80073f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073f4:	443b      	add	r3, r7
 80073f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80073f8:	e76a      	b.n	80072d0 <_vfiprintf_r+0x78>
 80073fa:	460c      	mov	r4, r1
 80073fc:	2001      	movs	r0, #1
 80073fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007402:	e7a8      	b.n	8007356 <_vfiprintf_r+0xfe>
 8007404:	2300      	movs	r3, #0
 8007406:	f04f 0c0a 	mov.w	ip, #10
 800740a:	4619      	mov	r1, r3
 800740c:	3401      	adds	r4, #1
 800740e:	9305      	str	r3, [sp, #20]
 8007410:	4620      	mov	r0, r4
 8007412:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007416:	3a30      	subs	r2, #48	@ 0x30
 8007418:	2a09      	cmp	r2, #9
 800741a:	d903      	bls.n	8007424 <_vfiprintf_r+0x1cc>
 800741c:	2b00      	cmp	r3, #0
 800741e:	d0c6      	beq.n	80073ae <_vfiprintf_r+0x156>
 8007420:	9105      	str	r1, [sp, #20]
 8007422:	e7c4      	b.n	80073ae <_vfiprintf_r+0x156>
 8007424:	4604      	mov	r4, r0
 8007426:	2301      	movs	r3, #1
 8007428:	fb0c 2101 	mla	r1, ip, r1, r2
 800742c:	e7f0      	b.n	8007410 <_vfiprintf_r+0x1b8>
 800742e:	ab03      	add	r3, sp, #12
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	462a      	mov	r2, r5
 8007434:	4630      	mov	r0, r6
 8007436:	4b13      	ldr	r3, [pc, #76]	@ (8007484 <_vfiprintf_r+0x22c>)
 8007438:	a904      	add	r1, sp, #16
 800743a:	f7fd fbc7 	bl	8004bcc <_printf_float>
 800743e:	4607      	mov	r7, r0
 8007440:	1c78      	adds	r0, r7, #1
 8007442:	d1d6      	bne.n	80073f2 <_vfiprintf_r+0x19a>
 8007444:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007446:	07d9      	lsls	r1, r3, #31
 8007448:	d405      	bmi.n	8007456 <_vfiprintf_r+0x1fe>
 800744a:	89ab      	ldrh	r3, [r5, #12]
 800744c:	059a      	lsls	r2, r3, #22
 800744e:	d402      	bmi.n	8007456 <_vfiprintf_r+0x1fe>
 8007450:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007452:	f7fe f91d 	bl	8005690 <__retarget_lock_release_recursive>
 8007456:	89ab      	ldrh	r3, [r5, #12]
 8007458:	065b      	lsls	r3, r3, #25
 800745a:	f53f af1f 	bmi.w	800729c <_vfiprintf_r+0x44>
 800745e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007460:	e71e      	b.n	80072a0 <_vfiprintf_r+0x48>
 8007462:	ab03      	add	r3, sp, #12
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	462a      	mov	r2, r5
 8007468:	4630      	mov	r0, r6
 800746a:	4b06      	ldr	r3, [pc, #24]	@ (8007484 <_vfiprintf_r+0x22c>)
 800746c:	a904      	add	r1, sp, #16
 800746e:	f7fd fe4b 	bl	8005108 <_printf_i>
 8007472:	e7e4      	b.n	800743e <_vfiprintf_r+0x1e6>
 8007474:	08008044 	.word	0x08008044
 8007478:	0800804a 	.word	0x0800804a
 800747c:	0800804e 	.word	0x0800804e
 8007480:	08004bcd 	.word	0x08004bcd
 8007484:	08007235 	.word	0x08007235

08007488 <__swbuf_r>:
 8007488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748a:	460e      	mov	r6, r1
 800748c:	4614      	mov	r4, r2
 800748e:	4605      	mov	r5, r0
 8007490:	b118      	cbz	r0, 800749a <__swbuf_r+0x12>
 8007492:	6a03      	ldr	r3, [r0, #32]
 8007494:	b90b      	cbnz	r3, 800749a <__swbuf_r+0x12>
 8007496:	f7fd ffe1 	bl	800545c <__sinit>
 800749a:	69a3      	ldr	r3, [r4, #24]
 800749c:	60a3      	str	r3, [r4, #8]
 800749e:	89a3      	ldrh	r3, [r4, #12]
 80074a0:	071a      	lsls	r2, r3, #28
 80074a2:	d501      	bpl.n	80074a8 <__swbuf_r+0x20>
 80074a4:	6923      	ldr	r3, [r4, #16]
 80074a6:	b943      	cbnz	r3, 80074ba <__swbuf_r+0x32>
 80074a8:	4621      	mov	r1, r4
 80074aa:	4628      	mov	r0, r5
 80074ac:	f000 f82a 	bl	8007504 <__swsetup_r>
 80074b0:	b118      	cbz	r0, 80074ba <__swbuf_r+0x32>
 80074b2:	f04f 37ff 	mov.w	r7, #4294967295
 80074b6:	4638      	mov	r0, r7
 80074b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	6922      	ldr	r2, [r4, #16]
 80074be:	b2f6      	uxtb	r6, r6
 80074c0:	1a98      	subs	r0, r3, r2
 80074c2:	6963      	ldr	r3, [r4, #20]
 80074c4:	4637      	mov	r7, r6
 80074c6:	4283      	cmp	r3, r0
 80074c8:	dc05      	bgt.n	80074d6 <__swbuf_r+0x4e>
 80074ca:	4621      	mov	r1, r4
 80074cc:	4628      	mov	r0, r5
 80074ce:	f7ff fd9b 	bl	8007008 <_fflush_r>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	d1ed      	bne.n	80074b2 <__swbuf_r+0x2a>
 80074d6:	68a3      	ldr	r3, [r4, #8]
 80074d8:	3b01      	subs	r3, #1
 80074da:	60a3      	str	r3, [r4, #8]
 80074dc:	6823      	ldr	r3, [r4, #0]
 80074de:	1c5a      	adds	r2, r3, #1
 80074e0:	6022      	str	r2, [r4, #0]
 80074e2:	701e      	strb	r6, [r3, #0]
 80074e4:	6962      	ldr	r2, [r4, #20]
 80074e6:	1c43      	adds	r3, r0, #1
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d004      	beq.n	80074f6 <__swbuf_r+0x6e>
 80074ec:	89a3      	ldrh	r3, [r4, #12]
 80074ee:	07db      	lsls	r3, r3, #31
 80074f0:	d5e1      	bpl.n	80074b6 <__swbuf_r+0x2e>
 80074f2:	2e0a      	cmp	r6, #10
 80074f4:	d1df      	bne.n	80074b6 <__swbuf_r+0x2e>
 80074f6:	4621      	mov	r1, r4
 80074f8:	4628      	mov	r0, r5
 80074fa:	f7ff fd85 	bl	8007008 <_fflush_r>
 80074fe:	2800      	cmp	r0, #0
 8007500:	d0d9      	beq.n	80074b6 <__swbuf_r+0x2e>
 8007502:	e7d6      	b.n	80074b2 <__swbuf_r+0x2a>

08007504 <__swsetup_r>:
 8007504:	b538      	push	{r3, r4, r5, lr}
 8007506:	4b29      	ldr	r3, [pc, #164]	@ (80075ac <__swsetup_r+0xa8>)
 8007508:	4605      	mov	r5, r0
 800750a:	6818      	ldr	r0, [r3, #0]
 800750c:	460c      	mov	r4, r1
 800750e:	b118      	cbz	r0, 8007518 <__swsetup_r+0x14>
 8007510:	6a03      	ldr	r3, [r0, #32]
 8007512:	b90b      	cbnz	r3, 8007518 <__swsetup_r+0x14>
 8007514:	f7fd ffa2 	bl	800545c <__sinit>
 8007518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800751c:	0719      	lsls	r1, r3, #28
 800751e:	d422      	bmi.n	8007566 <__swsetup_r+0x62>
 8007520:	06da      	lsls	r2, r3, #27
 8007522:	d407      	bmi.n	8007534 <__swsetup_r+0x30>
 8007524:	2209      	movs	r2, #9
 8007526:	602a      	str	r2, [r5, #0]
 8007528:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800752c:	f04f 30ff 	mov.w	r0, #4294967295
 8007530:	81a3      	strh	r3, [r4, #12]
 8007532:	e033      	b.n	800759c <__swsetup_r+0x98>
 8007534:	0758      	lsls	r0, r3, #29
 8007536:	d512      	bpl.n	800755e <__swsetup_r+0x5a>
 8007538:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800753a:	b141      	cbz	r1, 800754e <__swsetup_r+0x4a>
 800753c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007540:	4299      	cmp	r1, r3
 8007542:	d002      	beq.n	800754a <__swsetup_r+0x46>
 8007544:	4628      	mov	r0, r5
 8007546:	f7fe ff0f 	bl	8006368 <_free_r>
 800754a:	2300      	movs	r3, #0
 800754c:	6363      	str	r3, [r4, #52]	@ 0x34
 800754e:	89a3      	ldrh	r3, [r4, #12]
 8007550:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007554:	81a3      	strh	r3, [r4, #12]
 8007556:	2300      	movs	r3, #0
 8007558:	6063      	str	r3, [r4, #4]
 800755a:	6923      	ldr	r3, [r4, #16]
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	89a3      	ldrh	r3, [r4, #12]
 8007560:	f043 0308 	orr.w	r3, r3, #8
 8007564:	81a3      	strh	r3, [r4, #12]
 8007566:	6923      	ldr	r3, [r4, #16]
 8007568:	b94b      	cbnz	r3, 800757e <__swsetup_r+0x7a>
 800756a:	89a3      	ldrh	r3, [r4, #12]
 800756c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007570:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007574:	d003      	beq.n	800757e <__swsetup_r+0x7a>
 8007576:	4621      	mov	r1, r4
 8007578:	4628      	mov	r0, r5
 800757a:	f000 f882 	bl	8007682 <__smakebuf_r>
 800757e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007582:	f013 0201 	ands.w	r2, r3, #1
 8007586:	d00a      	beq.n	800759e <__swsetup_r+0x9a>
 8007588:	2200      	movs	r2, #0
 800758a:	60a2      	str	r2, [r4, #8]
 800758c:	6962      	ldr	r2, [r4, #20]
 800758e:	4252      	negs	r2, r2
 8007590:	61a2      	str	r2, [r4, #24]
 8007592:	6922      	ldr	r2, [r4, #16]
 8007594:	b942      	cbnz	r2, 80075a8 <__swsetup_r+0xa4>
 8007596:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800759a:	d1c5      	bne.n	8007528 <__swsetup_r+0x24>
 800759c:	bd38      	pop	{r3, r4, r5, pc}
 800759e:	0799      	lsls	r1, r3, #30
 80075a0:	bf58      	it	pl
 80075a2:	6962      	ldrpl	r2, [r4, #20]
 80075a4:	60a2      	str	r2, [r4, #8]
 80075a6:	e7f4      	b.n	8007592 <__swsetup_r+0x8e>
 80075a8:	2000      	movs	r0, #0
 80075aa:	e7f7      	b.n	800759c <__swsetup_r+0x98>
 80075ac:	20000020 	.word	0x20000020

080075b0 <_raise_r>:
 80075b0:	291f      	cmp	r1, #31
 80075b2:	b538      	push	{r3, r4, r5, lr}
 80075b4:	4605      	mov	r5, r0
 80075b6:	460c      	mov	r4, r1
 80075b8:	d904      	bls.n	80075c4 <_raise_r+0x14>
 80075ba:	2316      	movs	r3, #22
 80075bc:	6003      	str	r3, [r0, #0]
 80075be:	f04f 30ff 	mov.w	r0, #4294967295
 80075c2:	bd38      	pop	{r3, r4, r5, pc}
 80075c4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80075c6:	b112      	cbz	r2, 80075ce <_raise_r+0x1e>
 80075c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80075cc:	b94b      	cbnz	r3, 80075e2 <_raise_r+0x32>
 80075ce:	4628      	mov	r0, r5
 80075d0:	f000 f830 	bl	8007634 <_getpid_r>
 80075d4:	4622      	mov	r2, r4
 80075d6:	4601      	mov	r1, r0
 80075d8:	4628      	mov	r0, r5
 80075da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075de:	f000 b817 	b.w	8007610 <_kill_r>
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d00a      	beq.n	80075fc <_raise_r+0x4c>
 80075e6:	1c59      	adds	r1, r3, #1
 80075e8:	d103      	bne.n	80075f2 <_raise_r+0x42>
 80075ea:	2316      	movs	r3, #22
 80075ec:	6003      	str	r3, [r0, #0]
 80075ee:	2001      	movs	r0, #1
 80075f0:	e7e7      	b.n	80075c2 <_raise_r+0x12>
 80075f2:	2100      	movs	r1, #0
 80075f4:	4620      	mov	r0, r4
 80075f6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80075fa:	4798      	blx	r3
 80075fc:	2000      	movs	r0, #0
 80075fe:	e7e0      	b.n	80075c2 <_raise_r+0x12>

08007600 <raise>:
 8007600:	4b02      	ldr	r3, [pc, #8]	@ (800760c <raise+0xc>)
 8007602:	4601      	mov	r1, r0
 8007604:	6818      	ldr	r0, [r3, #0]
 8007606:	f7ff bfd3 	b.w	80075b0 <_raise_r>
 800760a:	bf00      	nop
 800760c:	20000020 	.word	0x20000020

08007610 <_kill_r>:
 8007610:	b538      	push	{r3, r4, r5, lr}
 8007612:	2300      	movs	r3, #0
 8007614:	4d06      	ldr	r5, [pc, #24]	@ (8007630 <_kill_r+0x20>)
 8007616:	4604      	mov	r4, r0
 8007618:	4608      	mov	r0, r1
 800761a:	4611      	mov	r1, r2
 800761c:	602b      	str	r3, [r5, #0]
 800761e:	f7fa fd02 	bl	8002026 <_kill>
 8007622:	1c43      	adds	r3, r0, #1
 8007624:	d102      	bne.n	800762c <_kill_r+0x1c>
 8007626:	682b      	ldr	r3, [r5, #0]
 8007628:	b103      	cbz	r3, 800762c <_kill_r+0x1c>
 800762a:	6023      	str	r3, [r4, #0]
 800762c:	bd38      	pop	{r3, r4, r5, pc}
 800762e:	bf00      	nop
 8007630:	20000720 	.word	0x20000720

08007634 <_getpid_r>:
 8007634:	f7fa bcf0 	b.w	8002018 <_getpid>

08007638 <__swhatbuf_r>:
 8007638:	b570      	push	{r4, r5, r6, lr}
 800763a:	460c      	mov	r4, r1
 800763c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007640:	4615      	mov	r5, r2
 8007642:	2900      	cmp	r1, #0
 8007644:	461e      	mov	r6, r3
 8007646:	b096      	sub	sp, #88	@ 0x58
 8007648:	da0c      	bge.n	8007664 <__swhatbuf_r+0x2c>
 800764a:	89a3      	ldrh	r3, [r4, #12]
 800764c:	2100      	movs	r1, #0
 800764e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007652:	bf14      	ite	ne
 8007654:	2340      	movne	r3, #64	@ 0x40
 8007656:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800765a:	2000      	movs	r0, #0
 800765c:	6031      	str	r1, [r6, #0]
 800765e:	602b      	str	r3, [r5, #0]
 8007660:	b016      	add	sp, #88	@ 0x58
 8007662:	bd70      	pop	{r4, r5, r6, pc}
 8007664:	466a      	mov	r2, sp
 8007666:	f000 f849 	bl	80076fc <_fstat_r>
 800766a:	2800      	cmp	r0, #0
 800766c:	dbed      	blt.n	800764a <__swhatbuf_r+0x12>
 800766e:	9901      	ldr	r1, [sp, #4]
 8007670:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007674:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007678:	4259      	negs	r1, r3
 800767a:	4159      	adcs	r1, r3
 800767c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007680:	e7eb      	b.n	800765a <__swhatbuf_r+0x22>

08007682 <__smakebuf_r>:
 8007682:	898b      	ldrh	r3, [r1, #12]
 8007684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007686:	079d      	lsls	r5, r3, #30
 8007688:	4606      	mov	r6, r0
 800768a:	460c      	mov	r4, r1
 800768c:	d507      	bpl.n	800769e <__smakebuf_r+0x1c>
 800768e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007692:	6023      	str	r3, [r4, #0]
 8007694:	6123      	str	r3, [r4, #16]
 8007696:	2301      	movs	r3, #1
 8007698:	6163      	str	r3, [r4, #20]
 800769a:	b003      	add	sp, #12
 800769c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800769e:	466a      	mov	r2, sp
 80076a0:	ab01      	add	r3, sp, #4
 80076a2:	f7ff ffc9 	bl	8007638 <__swhatbuf_r>
 80076a6:	9f00      	ldr	r7, [sp, #0]
 80076a8:	4605      	mov	r5, r0
 80076aa:	4639      	mov	r1, r7
 80076ac:	4630      	mov	r0, r6
 80076ae:	f7fe fecd 	bl	800644c <_malloc_r>
 80076b2:	b948      	cbnz	r0, 80076c8 <__smakebuf_r+0x46>
 80076b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076b8:	059a      	lsls	r2, r3, #22
 80076ba:	d4ee      	bmi.n	800769a <__smakebuf_r+0x18>
 80076bc:	f023 0303 	bic.w	r3, r3, #3
 80076c0:	f043 0302 	orr.w	r3, r3, #2
 80076c4:	81a3      	strh	r3, [r4, #12]
 80076c6:	e7e2      	b.n	800768e <__smakebuf_r+0xc>
 80076c8:	89a3      	ldrh	r3, [r4, #12]
 80076ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80076ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076d2:	81a3      	strh	r3, [r4, #12]
 80076d4:	9b01      	ldr	r3, [sp, #4]
 80076d6:	6020      	str	r0, [r4, #0]
 80076d8:	b15b      	cbz	r3, 80076f2 <__smakebuf_r+0x70>
 80076da:	4630      	mov	r0, r6
 80076dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076e0:	f000 f81e 	bl	8007720 <_isatty_r>
 80076e4:	b128      	cbz	r0, 80076f2 <__smakebuf_r+0x70>
 80076e6:	89a3      	ldrh	r3, [r4, #12]
 80076e8:	f023 0303 	bic.w	r3, r3, #3
 80076ec:	f043 0301 	orr.w	r3, r3, #1
 80076f0:	81a3      	strh	r3, [r4, #12]
 80076f2:	89a3      	ldrh	r3, [r4, #12]
 80076f4:	431d      	orrs	r5, r3
 80076f6:	81a5      	strh	r5, [r4, #12]
 80076f8:	e7cf      	b.n	800769a <__smakebuf_r+0x18>
	...

080076fc <_fstat_r>:
 80076fc:	b538      	push	{r3, r4, r5, lr}
 80076fe:	2300      	movs	r3, #0
 8007700:	4d06      	ldr	r5, [pc, #24]	@ (800771c <_fstat_r+0x20>)
 8007702:	4604      	mov	r4, r0
 8007704:	4608      	mov	r0, r1
 8007706:	4611      	mov	r1, r2
 8007708:	602b      	str	r3, [r5, #0]
 800770a:	f7fa fceb 	bl	80020e4 <_fstat>
 800770e:	1c43      	adds	r3, r0, #1
 8007710:	d102      	bne.n	8007718 <_fstat_r+0x1c>
 8007712:	682b      	ldr	r3, [r5, #0]
 8007714:	b103      	cbz	r3, 8007718 <_fstat_r+0x1c>
 8007716:	6023      	str	r3, [r4, #0]
 8007718:	bd38      	pop	{r3, r4, r5, pc}
 800771a:	bf00      	nop
 800771c:	20000720 	.word	0x20000720

08007720 <_isatty_r>:
 8007720:	b538      	push	{r3, r4, r5, lr}
 8007722:	2300      	movs	r3, #0
 8007724:	4d05      	ldr	r5, [pc, #20]	@ (800773c <_isatty_r+0x1c>)
 8007726:	4604      	mov	r4, r0
 8007728:	4608      	mov	r0, r1
 800772a:	602b      	str	r3, [r5, #0]
 800772c:	f7fa fce9 	bl	8002102 <_isatty>
 8007730:	1c43      	adds	r3, r0, #1
 8007732:	d102      	bne.n	800773a <_isatty_r+0x1a>
 8007734:	682b      	ldr	r3, [r5, #0]
 8007736:	b103      	cbz	r3, 800773a <_isatty_r+0x1a>
 8007738:	6023      	str	r3, [r4, #0]
 800773a:	bd38      	pop	{r3, r4, r5, pc}
 800773c:	20000720 	.word	0x20000720

08007740 <_init>:
 8007740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007742:	bf00      	nop
 8007744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007746:	bc08      	pop	{r3}
 8007748:	469e      	mov	lr, r3
 800774a:	4770      	bx	lr

0800774c <_fini>:
 800774c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774e:	bf00      	nop
 8007750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007752:	bc08      	pop	{r3}
 8007754:	469e      	mov	lr, r3
 8007756:	4770      	bx	lr
