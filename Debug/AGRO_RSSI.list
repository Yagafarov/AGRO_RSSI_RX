
AGRO_RSSI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008330  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b24  08008440  08008440  00009440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f64  08008f64  0000a1dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008f64  08008f64  00009f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f6c  08008f6c  0000a1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f6c  08008f6c  00009f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f70  08008f70  00009f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008f74  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000500  200001dc  08009150  0000a1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006dc  08009150  0000a6dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b7f  00000000  00000000  0000a205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ed  00000000  00000000  0001bd84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  0001e678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e30  00000000  00000000  0001f888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b80  00000000  00000000  000206b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015178  00000000  00000000  0003a238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000902f6  00000000  00000000  0004f3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df6a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005da4  00000000  00000000  000df6ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000e5490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08008428 	.word	0x08008428

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08008428 	.word	0x08008428

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <E220_WaitReady>:

/*------------------------------------------*/
extern uint8_t recv[50];
/*------------------------------------------*/
GPIO_PinState E220_WaitReady(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
	while(!(AUX_Flag == true)) {};
 8000a8c:	bf00      	nop
 8000a8e:	4b07      	ldr	r3, [pc, #28]	@ (8000aac <E220_WaitReady+0x24>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	f083 0301 	eor.w	r3, r3, #1
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1f8      	bne.n	8000a8e <E220_WaitReady+0x6>
	//while(!(HAL_GPIO_ReadPin(E220_AUX_PORT, E220_AUX_PIN))) {};
	AUX_Flag = false;
 8000a9c:	4b03      	ldr	r3, [pc, #12]	@ (8000aac <E220_WaitReady+0x24>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
	return GPIO_PIN_SET;
 8000aa2:	2301      	movs	r3, #1
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	20000278 	.word	0x20000278

08000ab0 <E220_CheckSentReadPacket>:
/*------------------------------------------*/
GPIO_PinState E220_CheckSentReadPacket(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
	while(!(AUX_Flag == true)) {};
 8000ab4:	bf00      	nop
 8000ab6:	4b07      	ldr	r3, [pc, #28]	@ (8000ad4 <E220_CheckSentReadPacket+0x24>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	f083 0301 	eor.w	r3, r3, #1
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1f8      	bne.n	8000ab6 <E220_CheckSentReadPacket+0x6>
	//while(!(HAL_GPIO_ReadPin(E220_AUX_PORT, E220_AUX_PIN))) {};
	AUX_Flag = false;
 8000ac4:	4b03      	ldr	r3, [pc, #12]	@ (8000ad4 <E220_CheckSentReadPacket+0x24>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
	return GPIO_PIN_SET;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	20000278 	.word	0x20000278

08000ad8 <E220_SetMode>:
	E220_CheckSentReadPacket();
	return GPIO_PIN_SET;
}
/*------------------------------------------*/
OperatingMode E220_SetMode(OperatingMode mode)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
	if(mode == NORMAL)
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d10c      	bne.n	8000b02 <E220_SetMode+0x2a>
	{
		E220_MO_RESET;
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000aee:	481f      	ldr	r0, [pc, #124]	@ (8000b6c <E220_SetMode+0x94>)
 8000af0:	f001 ffce 	bl	8002a90 <HAL_GPIO_WritePin>
		E220_M1_RESET;
 8000af4:	2200      	movs	r2, #0
 8000af6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000afa:	481d      	ldr	r0, [pc, #116]	@ (8000b70 <E220_SetMode+0x98>)
 8000afc:	f001 ffc8 	bl	8002a90 <HAL_GPIO_WritePin>
 8000b00:	e02e      	b.n	8000b60 <E220_SetMode+0x88>
	}
	else if(mode == WOR_Transmission)
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d10c      	bne.n	8000b22 <E220_SetMode+0x4a>
	{
		E220_MO_SET;
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b0e:	4817      	ldr	r0, [pc, #92]	@ (8000b6c <E220_SetMode+0x94>)
 8000b10:	f001 ffbe 	bl	8002a90 <HAL_GPIO_WritePin>
		E220_M1_RESET;
 8000b14:	2200      	movs	r2, #0
 8000b16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b1a:	4815      	ldr	r0, [pc, #84]	@ (8000b70 <E220_SetMode+0x98>)
 8000b1c:	f001 ffb8 	bl	8002a90 <HAL_GPIO_WritePin>
 8000b20:	e01e      	b.n	8000b60 <E220_SetMode+0x88>
	}
	else if(mode == WOR_Receiving)
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	d10c      	bne.n	8000b42 <E220_SetMode+0x6a>
	{
		E220_MO_RESET;
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b2e:	480f      	ldr	r0, [pc, #60]	@ (8000b6c <E220_SetMode+0x94>)
 8000b30:	f001 ffae 	bl	8002a90 <HAL_GPIO_WritePin>
		E220_M1_SET;
 8000b34:	2201      	movs	r2, #1
 8000b36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b3a:	480d      	ldr	r0, [pc, #52]	@ (8000b70 <E220_SetMode+0x98>)
 8000b3c:	f001 ffa8 	bl	8002a90 <HAL_GPIO_WritePin>
 8000b40:	e00e      	b.n	8000b60 <E220_SetMode+0x88>
	}
	else if(mode == DeepSleep)
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	2b03      	cmp	r3, #3
 8000b46:	d10b      	bne.n	8000b60 <E220_SetMode+0x88>
	{
		E220_MO_SET;
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b4e:	4807      	ldr	r0, [pc, #28]	@ (8000b6c <E220_SetMode+0x94>)
 8000b50:	f001 ff9e 	bl	8002a90 <HAL_GPIO_WritePin>
		E220_M1_SET;
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b5a:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <E220_SetMode+0x98>)
 8000b5c:	f001 ff98 	bl	8002a90 <HAL_GPIO_WritePin>
	}
	return mode;
 8000b60:	79fb      	ldrb	r3, [r7, #7]
	HAL_Delay(50);
	E220_CheckSentReadPacket();
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40010c00 	.word	0x40010c00
 8000b70:	40010800 	.word	0x40010800

08000b74 <E220_Set_AddressModule>:
/*------------------------------------------*/
void E220_Set_AddressModule(uint16_t addr)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	80fb      	strh	r3, [r7, #6]
	uint8_t addr_h = 0x00;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	75fb      	strb	r3, [r7, #23]
	uint8_t addr_l = 0x00;
 8000b82:	2300      	movs	r3, #0
 8000b84:	75bb      	strb	r3, [r7, #22]
	uint8_t send_data[5] = {E220_CMD0, E220_ADDH, 2, addr_h, addr_l};
 8000b86:	23c0      	movs	r3, #192	@ 0xc0
 8000b88:	733b      	strb	r3, [r7, #12]
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	737b      	strb	r3, [r7, #13]
 8000b8e:	2302      	movs	r3, #2
 8000b90:	73bb      	strb	r3, [r7, #14]
 8000b92:	7dfb      	ldrb	r3, [r7, #23]
 8000b94:	73fb      	strb	r3, [r7, #15]
 8000b96:	7dbb      	ldrb	r3, [r7, #22]
 8000b98:	743b      	strb	r3, [r7, #16]
	uint16_t mask = 0xFFFF;
 8000b9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b9e:	82bb      	strh	r3, [r7, #20]

	addr_h = (addr >> 8) & mask;
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	0a1b      	lsrs	r3, r3, #8
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	8abb      	ldrh	r3, [r7, #20]
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	4013      	ands	r3, r2
 8000bae:	75fb      	strb	r3, [r7, #23]
	addr_l = (addr << 0) & mask;
 8000bb0:	88fb      	ldrh	r3, [r7, #6]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	8abb      	ldrh	r3, [r7, #20]
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	4013      	ands	r3, r2
 8000bba:	75bb      	strb	r3, [r7, #22]

	send_data[3] = addr_h;
 8000bbc:	7dfb      	ldrb	r3, [r7, #23]
 8000bbe:	73fb      	strb	r3, [r7, #15]
	send_data[4] = addr_l;
 8000bc0:	7dbb      	ldrb	r3, [r7, #22]
 8000bc2:	743b      	strb	r3, [r7, #16]

	HAL_UART_Transmit(&huart1, send_data, 5, TIMEOUT);
 8000bc4:	f107 010c 	add.w	r1, r7, #12
 8000bc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bcc:	2205      	movs	r2, #5
 8000bce:	4806      	ldr	r0, [pc, #24]	@ (8000be8 <E220_Set_AddressModule+0x74>)
 8000bd0:	f003 ffa8 	bl	8004b24 <HAL_UART_Transmit>
	E220_CheckSentReadPacket();
 8000bd4:	f7ff ff6c 	bl	8000ab0 <E220_CheckSentReadPacket>
	E220_GlobReg.addr = addr;
 8000bd8:	4a04      	ldr	r2, [pc, #16]	@ (8000bec <E220_Set_AddressModule+0x78>)
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	8013      	strh	r3, [r2, #0]
}
 8000bde:	bf00      	nop
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2000033c 	.word	0x2000033c
 8000bec:	200001f8 	.word	0x200001f8

08000bf0 <E220_Set_Uart_Rate_Parity_Data>:
/*------------------------------------------*/
void E220_Set_Uart_Rate_Parity_Data(SerialPortRate rate, SerialPorityBit pority, AirDataRate air_data)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	71bb      	strb	r3, [r7, #6]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	717b      	strb	r3, [r7, #5]
	uint8_t all_data = 0x00;
 8000c02:	2300      	movs	r3, #0
 8000c04:	73fb      	strb	r3, [r7, #15]
	uint8_t send_data[4] = {E220_CMD0, E220_REG0, 1, all_data};
 8000c06:	23c0      	movs	r3, #192	@ 0xc0
 8000c08:	723b      	strb	r3, [r7, #8]
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	727b      	strb	r3, [r7, #9]
 8000c0e:	2301      	movs	r3, #1
 8000c10:	72bb      	strb	r3, [r7, #10]
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	72fb      	strb	r3, [r7, #11]
	/*UART Serial Port Rate*/
	if(rate == Rate_1200) all_data |= 0x00;
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d036      	beq.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
	else if(rate == Rate_2400) all_data |= 0x20;
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d104      	bne.n	8000c2c <E220_Set_Uart_Rate_Parity_Data+0x3c>
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	f043 0320 	orr.w	r3, r3, #32
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	e02e      	b.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
	else if(rate == Rate_4800) all_data |= 0x40;
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d104      	bne.n	8000c3c <E220_Set_Uart_Rate_Parity_Data+0x4c>
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c38:	73fb      	strb	r3, [r7, #15]
 8000c3a:	e026      	b.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
	else if(rate == Rate_9600) all_data |= 0x60;
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	2b03      	cmp	r3, #3
 8000c40:	d104      	bne.n	8000c4c <E220_Set_Uart_Rate_Parity_Data+0x5c>
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000c48:	73fb      	strb	r3, [r7, #15]
 8000c4a:	e01e      	b.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
	else if(rate == Rate_19200) all_data |= 0x80;
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	d104      	bne.n	8000c5c <E220_Set_Uart_Rate_Parity_Data+0x6c>
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
 8000c54:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c58:	73fb      	strb	r3, [r7, #15]
 8000c5a:	e016      	b.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
	else if(rate == Rate_38400) all_data |= 0xA0;
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	2b05      	cmp	r3, #5
 8000c60:	d104      	bne.n	8000c6c <E220_Set_Uart_Rate_Parity_Data+0x7c>
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8000c68:	73fb      	strb	r3, [r7, #15]
 8000c6a:	e00e      	b.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
	else if(rate == Rate_57600) all_data |= 0xC0;
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b06      	cmp	r3, #6
 8000c70:	d104      	bne.n	8000c7c <E220_Set_Uart_Rate_Parity_Data+0x8c>
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8000c78:	73fb      	strb	r3, [r7, #15]
 8000c7a:	e006      	b.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
	else if(rate == Rate_115200) all_data |= 0xE0;
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	2b07      	cmp	r3, #7
 8000c80:	d103      	bne.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	f063 031f 	orn	r3, r3, #31
 8000c88:	73fb      	strb	r3, [r7, #15]
	/*UART Serial Port Rate*/
	if(pority == _8N1) all_data |= 0x00;
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d016      	beq.n	8000cbe <E220_Set_Uart_Rate_Parity_Data+0xce>
	else if(pority == _8O1) all_data |= 0x80;
 8000c90:	79bb      	ldrb	r3, [r7, #6]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d104      	bne.n	8000ca0 <E220_Set_Uart_Rate_Parity_Data+0xb0>
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c9c:	73fb      	strb	r3, [r7, #15]
 8000c9e:	e00e      	b.n	8000cbe <E220_Set_Uart_Rate_Parity_Data+0xce>
	else if(pority == _8E1) all_data |= 0x10;
 8000ca0:	79bb      	ldrb	r3, [r7, #6]
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d104      	bne.n	8000cb0 <E220_Set_Uart_Rate_Parity_Data+0xc0>
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	f043 0310 	orr.w	r3, r3, #16
 8000cac:	73fb      	strb	r3, [r7, #15]
 8000cae:	e006      	b.n	8000cbe <E220_Set_Uart_Rate_Parity_Data+0xce>
	else if(pority == _8N1_2) all_data |= 0x18;
 8000cb0:	79bb      	ldrb	r3, [r7, #6]
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	d103      	bne.n	8000cbe <E220_Set_Uart_Rate_Parity_Data+0xce>
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	f043 0318 	orr.w	r3, r3, #24
 8000cbc:	73fb      	strb	r3, [r7, #15]
	/*UART Serial Port Rate*/
	if(air_data == _2_4k) all_data |= 0x00;
 8000cbe:	797b      	ldrb	r3, [r7, #5]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d036      	beq.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
	else if(air_data == _2_4k_2) all_data |= 0x01;
 8000cc4:	797b      	ldrb	r3, [r7, #5]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d104      	bne.n	8000cd4 <E220_Set_Uart_Rate_Parity_Data+0xe4>
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	73fb      	strb	r3, [r7, #15]
 8000cd2:	e02e      	b.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
	else if(air_data == _2_4k_3) all_data |= 0x02;
 8000cd4:	797b      	ldrb	r3, [r7, #5]
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d104      	bne.n	8000ce4 <E220_Set_Uart_Rate_Parity_Data+0xf4>
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	73fb      	strb	r3, [r7, #15]
 8000ce2:	e026      	b.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
	else if(air_data == _4_8k) all_data |= 0x03;
 8000ce4:	797b      	ldrb	r3, [r7, #5]
 8000ce6:	2b03      	cmp	r3, #3
 8000ce8:	d104      	bne.n	8000cf4 <E220_Set_Uart_Rate_Parity_Data+0x104>
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	f043 0303 	orr.w	r3, r3, #3
 8000cf0:	73fb      	strb	r3, [r7, #15]
 8000cf2:	e01e      	b.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
	else if(air_data == _9_6k) all_data |= 0x04;
 8000cf4:	797b      	ldrb	r3, [r7, #5]
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	d104      	bne.n	8000d04 <E220_Set_Uart_Rate_Parity_Data+0x114>
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	f043 0304 	orr.w	r3, r3, #4
 8000d00:	73fb      	strb	r3, [r7, #15]
 8000d02:	e016      	b.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
	else if(air_data == _19_2k) all_data |= 0x05;
 8000d04:	797b      	ldrb	r3, [r7, #5]
 8000d06:	2b05      	cmp	r3, #5
 8000d08:	d104      	bne.n	8000d14 <E220_Set_Uart_Rate_Parity_Data+0x124>
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
 8000d0c:	f043 0305 	orr.w	r3, r3, #5
 8000d10:	73fb      	strb	r3, [r7, #15]
 8000d12:	e00e      	b.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
	else if(air_data == _38_4k) all_data |= 0x06;
 8000d14:	797b      	ldrb	r3, [r7, #5]
 8000d16:	2b06      	cmp	r3, #6
 8000d18:	d104      	bne.n	8000d24 <E220_Set_Uart_Rate_Parity_Data+0x134>
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	f043 0306 	orr.w	r3, r3, #6
 8000d20:	73fb      	strb	r3, [r7, #15]
 8000d22:	e006      	b.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
	else if(air_data == _62_5k) all_data |= 0x07;
 8000d24:	797b      	ldrb	r3, [r7, #5]
 8000d26:	2b07      	cmp	r3, #7
 8000d28:	d103      	bne.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	f043 0307 	orr.w	r3, r3, #7
 8000d30:	73fb      	strb	r3, [r7, #15]

	send_data[3] = all_data;
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
 8000d34:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit(&huart1, send_data, 4, TIMEOUT);
 8000d36:	f107 0108 	add.w	r1, r7, #8
 8000d3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d3e:	2204      	movs	r2, #4
 8000d40:	4805      	ldr	r0, [pc, #20]	@ (8000d58 <E220_Set_Uart_Rate_Parity_Data+0x168>)
 8000d42:	f003 feef 	bl	8004b24 <HAL_UART_Transmit>
	E220_CheckSentReadPacket();
 8000d46:	f7ff feb3 	bl	8000ab0 <E220_CheckSentReadPacket>

	E220_GlobReg.reg0 = all_data;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	@ (8000d5c <E220_Set_Uart_Rate_Parity_Data+0x16c>)
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	7093      	strb	r3, [r2, #2]
}
 8000d50:	bf00      	nop
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	2000033c 	.word	0x2000033c
 8000d5c:	200001f8 	.word	0x200001f8

08000d60 <E220_Set_SubPacket_RSSI_TransPower>:
/*------------------------------------------*/
void E220_Set_SubPacket_RSSI_TransPower(SubPacketSetting sub, _Bool RSSIAmbientNoiseEnable, TransmittingPower tr_pow)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	71bb      	strb	r3, [r7, #6]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	717b      	strb	r3, [r7, #5]
	uint8_t all_data = 0x00;
 8000d72:	2300      	movs	r3, #0
 8000d74:	73fb      	strb	r3, [r7, #15]
	uint8_t send_data[4] = {E220_CMD0, E220_REG1, 1, all_data};
 8000d76:	23c0      	movs	r3, #192	@ 0xc0
 8000d78:	723b      	strb	r3, [r7, #8]
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	727b      	strb	r3, [r7, #9]
 8000d7e:	2301      	movs	r3, #1
 8000d80:	72bb      	strb	r3, [r7, #10]
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	72fb      	strb	r3, [r7, #11]
	/*Sub-Packet Setting*/
	if(sub == _200bytes) all_data |= 0x00;
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d016      	beq.n	8000dba <E220_Set_SubPacket_RSSI_TransPower+0x5a>
	else if(sub == _128bytes) all_data |= 0x40;
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d104      	bne.n	8000d9c <E220_Set_SubPacket_RSSI_TransPower+0x3c>
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d98:	73fb      	strb	r3, [r7, #15]
 8000d9a:	e00e      	b.n	8000dba <E220_Set_SubPacket_RSSI_TransPower+0x5a>
	else if(sub == _64bytes) all_data |= 0x80;
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d104      	bne.n	8000dac <E220_Set_SubPacket_RSSI_TransPower+0x4c>
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000da8:	73fb      	strb	r3, [r7, #15]
 8000daa:	e006      	b.n	8000dba <E220_Set_SubPacket_RSSI_TransPower+0x5a>
	else if(sub == _32bytes) all_data |= 0xC0;
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	d103      	bne.n	8000dba <E220_Set_SubPacket_RSSI_TransPower+0x5a>
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8000db8:	73fb      	strb	r3, [r7, #15]
	/*RSSI Ambient noise enable*/
	if(RSSIAmbientNoiseEnable == true) all_data |= 0x20;
 8000dba:	79bb      	ldrb	r3, [r7, #6]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d003      	beq.n	8000dc8 <E220_Set_SubPacket_RSSI_TransPower+0x68>
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	f043 0320 	orr.w	r3, r3, #32
 8000dc6:	73fb      	strb	r3, [r7, #15]
	else all_data |= 0x00;
	/*Transimitting Power*/
	if(tr_pow == _22dBm) all_data |= 0x00;
 8000dc8:	797b      	ldrb	r3, [r7, #5]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d016      	beq.n	8000dfc <E220_Set_SubPacket_RSSI_TransPower+0x9c>
	else if(tr_pow == _17dBm) all_data |= 0x01;
 8000dce:	797b      	ldrb	r3, [r7, #5]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d104      	bne.n	8000dde <E220_Set_SubPacket_RSSI_TransPower+0x7e>
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	73fb      	strb	r3, [r7, #15]
 8000ddc:	e00e      	b.n	8000dfc <E220_Set_SubPacket_RSSI_TransPower+0x9c>
	else if(tr_pow == _13dBm) all_data |= 0x02;
 8000dde:	797b      	ldrb	r3, [r7, #5]
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d104      	bne.n	8000dee <E220_Set_SubPacket_RSSI_TransPower+0x8e>
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	f043 0302 	orr.w	r3, r3, #2
 8000dea:	73fb      	strb	r3, [r7, #15]
 8000dec:	e006      	b.n	8000dfc <E220_Set_SubPacket_RSSI_TransPower+0x9c>
	else if(tr_pow == _10dBm) all_data |= 0x03;
 8000dee:	797b      	ldrb	r3, [r7, #5]
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d103      	bne.n	8000dfc <E220_Set_SubPacket_RSSI_TransPower+0x9c>
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	f043 0303 	orr.w	r3, r3, #3
 8000dfa:	73fb      	strb	r3, [r7, #15]

	send_data[3] = all_data;
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit(&huart1, send_data, 4, TIMEOUT);
 8000e00:	f107 0108 	add.w	r1, r7, #8
 8000e04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e08:	2204      	movs	r2, #4
 8000e0a:	4806      	ldr	r0, [pc, #24]	@ (8000e24 <E220_Set_SubPacket_RSSI_TransPower+0xc4>)
 8000e0c:	f003 fe8a 	bl	8004b24 <HAL_UART_Transmit>
	E220_CheckSentReadPacket();
 8000e10:	f7ff fe4e 	bl	8000ab0 <E220_CheckSentReadPacket>
	E220_GlobReg.reg1 = all_data;
 8000e14:	4a04      	ldr	r2, [pc, #16]	@ (8000e28 <E220_Set_SubPacket_RSSI_TransPower+0xc8>)
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	70d3      	strb	r3, [r2, #3]
}
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	2000033c 	.word	0x2000033c
 8000e28:	200001f8 	.word	0x200001f8

08000e2c <E220_Set_Channel>:
/*------------------------------------------*/
void E220_Set_Channel(uint8_t channel)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
	uint8_t all_data = 0x00;
 8000e36:	2300      	movs	r3, #0
 8000e38:	73fb      	strb	r3, [r7, #15]
	uint8_t send_data[4] = {E220_CMD0, E220_REG2, 1, all_data};
 8000e3a:	23c0      	movs	r3, #192	@ 0xc0
 8000e3c:	723b      	strb	r3, [r7, #8]
 8000e3e:	2304      	movs	r3, #4
 8000e40:	727b      	strb	r3, [r7, #9]
 8000e42:	2301      	movs	r3, #1
 8000e44:	72bb      	strb	r3, [r7, #10]
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	72fb      	strb	r3, [r7, #11]
	all_data |= channel;
 8000e4a:	7bfa      	ldrb	r2, [r7, #15]
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	73fb      	strb	r3, [r7, #15]

	send_data[3] = all_data;
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	72fb      	strb	r3, [r7, #11]
	HAL_UART_Transmit(&huart1, send_data, 4, TIMEOUT);
 8000e56:	f107 0108 	add.w	r1, r7, #8
 8000e5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e5e:	2204      	movs	r2, #4
 8000e60:	4805      	ldr	r0, [pc, #20]	@ (8000e78 <E220_Set_Channel+0x4c>)
 8000e62:	f003 fe5f 	bl	8004b24 <HAL_UART_Transmit>
	E220_CheckSentReadPacket();
 8000e66:	f7ff fe23 	bl	8000ab0 <E220_CheckSentReadPacket>
	E220_GlobReg.reg2 = all_data;
 8000e6a:	4a04      	ldr	r2, [pc, #16]	@ (8000e7c <E220_Set_Channel+0x50>)
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	7113      	strb	r3, [r2, #4]
}
 8000e70:	bf00      	nop
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	2000033c 	.word	0x2000033c
 8000e7c:	200001f8 	.word	0x200001f8

08000e80 <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle>:
/*------------------------------------------*/
void E220_Set_RSSI_TransmissionMethod_LBT_WORCycle(_Bool RSSIByte, TransmissionMethod method, _Bool LBT, WORCycle wor)
{
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4604      	mov	r4, r0
 8000e88:	4608      	mov	r0, r1
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4623      	mov	r3, r4
 8000e90:	71fb      	strb	r3, [r7, #7]
 8000e92:	4603      	mov	r3, r0
 8000e94:	71bb      	strb	r3, [r7, #6]
 8000e96:	460b      	mov	r3, r1
 8000e98:	717b      	strb	r3, [r7, #5]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	713b      	strb	r3, [r7, #4]
	uint8_t all_data = 0x00;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	73fb      	strb	r3, [r7, #15]
	uint8_t send_data[4] = {E220_CMD0, E220_REG3, 1, all_data};
 8000ea2:	23c0      	movs	r3, #192	@ 0xc0
 8000ea4:	723b      	strb	r3, [r7, #8]
 8000ea6:	2305      	movs	r3, #5
 8000ea8:	727b      	strb	r3, [r7, #9]
 8000eaa:	2301      	movs	r3, #1
 8000eac:	72bb      	strb	r3, [r7, #10]
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	72fb      	strb	r3, [r7, #11]
	/*Enable RSSI Byte*/
	if(RSSIByte == DISABLE) all_data |= 0x00;
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	f083 0301 	eor.w	r3, r3, #1
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d103      	bne.n	8000ec6 <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x46>
	else all_data |= 0x80;
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ec4:	73fb      	strb	r3, [r7, #15]
	/*Transmission Method*/
	if(method == DISABLE) all_data |= 0x00;
 8000ec6:	79bb      	ldrb	r3, [r7, #6]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d003      	beq.n	8000ed4 <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x54>
	else all_data |= 0x40;
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ed2:	73fb      	strb	r3, [r7, #15]
	/*LBT Enable*/
	if(LBT == DISABLE) all_data |= 0x00;
 8000ed4:	797b      	ldrb	r3, [r7, #5]
 8000ed6:	f083 0301 	eor.w	r3, r3, #1
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d103      	bne.n	8000ee8 <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x68>
	else all_data |= 0x10;
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	f043 0310 	orr.w	r3, r3, #16
 8000ee6:	73fb      	strb	r3, [r7, #15]
	/*WOR Cycle*/
	if(wor == _500ms) all_data |= 0x00;
 8000ee8:	793b      	ldrb	r3, [r7, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d036      	beq.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
	else if(wor == _1000ms) all_data |= 0x01;
 8000eee:	793b      	ldrb	r3, [r7, #4]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d104      	bne.n	8000efe <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x7e>
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	e02e      	b.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
	else if(wor == _1500ms) all_data |= 0x02;
 8000efe:	793b      	ldrb	r3, [r7, #4]
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d104      	bne.n	8000f0e <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x8e>
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	f043 0302 	orr.w	r3, r3, #2
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	e026      	b.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
	else if(wor == _2000ms) all_data |= 0x03;
 8000f0e:	793b      	ldrb	r3, [r7, #4]
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	d104      	bne.n	8000f1e <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x9e>
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	f043 0303 	orr.w	r3, r3, #3
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	e01e      	b.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
	else if(wor == _2500ms) all_data |= 0x04;
 8000f1e:	793b      	ldrb	r3, [r7, #4]
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d104      	bne.n	8000f2e <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xae>
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	f043 0304 	orr.w	r3, r3, #4
 8000f2a:	73fb      	strb	r3, [r7, #15]
 8000f2c:	e016      	b.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
	else if(wor == _3000ms) all_data |= 0x05;
 8000f2e:	793b      	ldrb	r3, [r7, #4]
 8000f30:	2b05      	cmp	r3, #5
 8000f32:	d104      	bne.n	8000f3e <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xbe>
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	f043 0305 	orr.w	r3, r3, #5
 8000f3a:	73fb      	strb	r3, [r7, #15]
 8000f3c:	e00e      	b.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
	else if(wor == _3500ms) all_data |= 0x06;
 8000f3e:	793b      	ldrb	r3, [r7, #4]
 8000f40:	2b06      	cmp	r3, #6
 8000f42:	d104      	bne.n	8000f4e <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xce>
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	f043 0306 	orr.w	r3, r3, #6
 8000f4a:	73fb      	strb	r3, [r7, #15]
 8000f4c:	e006      	b.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
	else if(wor == _4000ms) all_data |= 0x07;
 8000f4e:	793b      	ldrb	r3, [r7, #4]
 8000f50:	2b07      	cmp	r3, #7
 8000f52:	d103      	bne.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	f043 0307 	orr.w	r3, r3, #7
 8000f5a:	73fb      	strb	r3, [r7, #15]

	send_data[3] = all_data;
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	72fb      	strb	r3, [r7, #11]
	HAL_UART_Transmit(&huart1, send_data, 4, TIMEOUT);
 8000f60:	f107 0108 	add.w	r1, r7, #8
 8000f64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f68:	2204      	movs	r2, #4
 8000f6a:	4806      	ldr	r0, [pc, #24]	@ (8000f84 <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x104>)
 8000f6c:	f003 fdda 	bl	8004b24 <HAL_UART_Transmit>
	E220_CheckSentReadPacket();
 8000f70:	f7ff fd9e 	bl	8000ab0 <E220_CheckSentReadPacket>
	E220_GlobReg.reg3 = all_data;
 8000f74:	4a04      	ldr	r2, [pc, #16]	@ (8000f88 <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x108>)
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	7153      	strb	r3, [r2, #5]
}
 8000f7a:	bf00      	nop
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd90      	pop	{r4, r7, pc}
 8000f82:	bf00      	nop
 8000f84:	2000033c 	.word	0x2000033c
 8000f88:	200001f8 	.word	0x200001f8

08000f8c <E220_Set_Key>:
void E220_Set_Key(uint16_t key)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	80fb      	strh	r3, [r7, #6]
	uint8_t key_h = 0x00;
 8000f96:	2300      	movs	r3, #0
 8000f98:	75fb      	strb	r3, [r7, #23]
	uint8_t key_l = 0x00;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	75bb      	strb	r3, [r7, #22]
	uint8_t send_data[5] = {E220_CMD0, E220_CRYPT_H, 2, key_h, key_l};
 8000f9e:	23c0      	movs	r3, #192	@ 0xc0
 8000fa0:	733b      	strb	r3, [r7, #12]
 8000fa2:	2306      	movs	r3, #6
 8000fa4:	737b      	strb	r3, [r7, #13]
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	73bb      	strb	r3, [r7, #14]
 8000faa:	7dfb      	ldrb	r3, [r7, #23]
 8000fac:	73fb      	strb	r3, [r7, #15]
 8000fae:	7dbb      	ldrb	r3, [r7, #22]
 8000fb0:	743b      	strb	r3, [r7, #16]
	uint16_t mask = 0xFFFF;
 8000fb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fb6:	82bb      	strh	r3, [r7, #20]

	key_h = (key >> 8) & mask;
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	0a1b      	lsrs	r3, r3, #8
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	8abb      	ldrh	r3, [r7, #20]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	75fb      	strb	r3, [r7, #23]
	key_l = (key << 0) & mask;
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	8abb      	ldrh	r3, [r7, #20]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	75bb      	strb	r3, [r7, #22]

	send_data[3] = key_h;
 8000fd4:	7dfb      	ldrb	r3, [r7, #23]
 8000fd6:	73fb      	strb	r3, [r7, #15]
	send_data[4] = key_l;
 8000fd8:	7dbb      	ldrb	r3, [r7, #22]
 8000fda:	743b      	strb	r3, [r7, #16]

	HAL_UART_Transmit(&huart1, send_data, 5, TIMEOUT);
 8000fdc:	f107 010c 	add.w	r1, r7, #12
 8000fe0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe4:	2205      	movs	r2, #5
 8000fe6:	4806      	ldr	r0, [pc, #24]	@ (8001000 <E220_Set_Key+0x74>)
 8000fe8:	f003 fd9c 	bl	8004b24 <HAL_UART_Transmit>
	E220_CheckSentReadPacket();
 8000fec:	f7ff fd60 	bl	8000ab0 <E220_CheckSentReadPacket>
	E220_GlobReg.Key = key;
 8000ff0:	4a04      	ldr	r2, [pc, #16]	@ (8001004 <E220_Set_Key+0x78>)
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	80d3      	strh	r3, [r2, #6]
}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	2000033c 	.word	0x2000033c
 8001004:	200001f8 	.word	0x200001f8

08001008 <E220_SetDefaultSettings>:
	E220_Set_Key(str.Key);
	HAL_Delay(50);
}
/*------------------------------------------*/
void E220_SetDefaultSettings(uint16_t u1, uint8_t u2, _Bool u3)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	80fb      	strh	r3, [r7, #6]
 8001012:	460b      	mov	r3, r1
 8001014:	717b      	strb	r3, [r7, #5]
 8001016:	4613      	mov	r3, r2
 8001018:	713b      	strb	r3, [r7, #4]
	E220_HandleTypeDef E220_Settings = {0, };
 800101a:	f107 0308 	add.w	r3, r7, #8
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
	E220_Settings.Address = u1;
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	813b      	strh	r3, [r7, #8]
	E220_Settings.Rate = Rate_9600;
 800102c:	2303      	movs	r3, #3
 800102e:	72bb      	strb	r3, [r7, #10]
	E220_Settings.Pority = _8N1;
 8001030:	2300      	movs	r3, #0
 8001032:	72fb      	strb	r3, [r7, #11]
	E220_Settings.AirDataRate = _2_4k;
 8001034:	2300      	movs	r3, #0
 8001036:	733b      	strb	r3, [r7, #12]
	E220_Settings.SubPacket = _200bytes;
 8001038:	2300      	movs	r3, #0
 800103a:	737b      	strb	r3, [r7, #13]
	E220_Settings.RSSIAmbientNoiseEnable = DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	73bb      	strb	r3, [r7, #14]
	E220_Settings.TransPower = _22dBm;
 8001040:	2300      	movs	r3, #0
 8001042:	73fb      	strb	r3, [r7, #15]
	E220_Settings.ChannelControl = u2;
 8001044:	797b      	ldrb	r3, [r7, #5]
 8001046:	743b      	strb	r3, [r7, #16]
	E220_Settings.EnableRSSIByte = u3;
 8001048:	793b      	ldrb	r3, [r7, #4]
 800104a:	747b      	strb	r3, [r7, #17]
	E220_Settings.TransMethod = FixedTransmissionMode;
 800104c:	2301      	movs	r3, #1
 800104e:	74bb      	strb	r3, [r7, #18]
	E220_Settings.LBT = DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	74fb      	strb	r3, [r7, #19]
	E220_Settings.WORCycle = _500ms;
 8001054:	2300      	movs	r3, #0
 8001056:	753b      	strb	r3, [r7, #20]
	E220_Settings.Key = 0x0000;
 8001058:	2300      	movs	r3, #0
 800105a:	82fb      	strh	r3, [r7, #22]

	E220_Set_AddressModule(E220_Settings.Address);
 800105c:	893b      	ldrh	r3, [r7, #8]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fd88 	bl	8000b74 <E220_Set_AddressModule>
	HAL_Delay(30);
 8001064:	201e      	movs	r0, #30
 8001066:	f001 f9ab 	bl	80023c0 <HAL_Delay>
	E220_Set_Uart_Rate_Parity_Data(E220_Settings.Rate, E220_Settings.Pority, E220_Settings.AirDataRate);
 800106a:	7abb      	ldrb	r3, [r7, #10]
 800106c:	7af9      	ldrb	r1, [r7, #11]
 800106e:	7b3a      	ldrb	r2, [r7, #12]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fdbd 	bl	8000bf0 <E220_Set_Uart_Rate_Parity_Data>
	HAL_Delay(30);
 8001076:	201e      	movs	r0, #30
 8001078:	f001 f9a2 	bl	80023c0 <HAL_Delay>
	E220_Set_SubPacket_RSSI_TransPower(E220_Settings.SubPacket, E220_Settings.RSSIAmbientNoiseEnable, E220_Settings.TransPower);
 800107c:	7b7b      	ldrb	r3, [r7, #13]
 800107e:	7bb9      	ldrb	r1, [r7, #14]
 8001080:	7bfa      	ldrb	r2, [r7, #15]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fe6c 	bl	8000d60 <E220_Set_SubPacket_RSSI_TransPower>
	HAL_Delay(30);
 8001088:	201e      	movs	r0, #30
 800108a:	f001 f999 	bl	80023c0 <HAL_Delay>
	E220_Set_Channel(E220_Settings.ChannelControl);
 800108e:	7c3b      	ldrb	r3, [r7, #16]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fecb 	bl	8000e2c <E220_Set_Channel>
	HAL_Delay(30);
 8001096:	201e      	movs	r0, #30
 8001098:	f001 f992 	bl	80023c0 <HAL_Delay>
	E220_Set_RSSI_TransmissionMethod_LBT_WORCycle(E220_Settings.EnableRSSIByte, E220_Settings.TransMethod, E220_Settings.LBT, E220_Settings.WORCycle);
 800109c:	7c78      	ldrb	r0, [r7, #17]
 800109e:	7cb9      	ldrb	r1, [r7, #18]
 80010a0:	7cfa      	ldrb	r2, [r7, #19]
 80010a2:	7d3b      	ldrb	r3, [r7, #20]
 80010a4:	f7ff feec 	bl	8000e80 <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle>
	HAL_Delay(30);
 80010a8:	201e      	movs	r0, #30
 80010aa:	f001 f989 	bl	80023c0 <HAL_Delay>
	E220_Set_Key(E220_Settings.Key);
 80010ae:	8afb      	ldrh	r3, [r7, #22]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff6b 	bl	8000f8c <E220_Set_Key>
	HAL_Delay(30);
 80010b6:	201e      	movs	r0, #30
 80010b8:	f001 f982 	bl	80023c0 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <AGRO_Init>:

	return res;
}
//-------------------------------------------------------------------//
NumberDevice AGRO_Init(AGRO_HandleTypeDef Device, NumberDevice divice)
{
 80010c4:	b490      	push	{r4, r7}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	1d3c      	adds	r4, r7, #4
 80010cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010d0:	70fb      	strb	r3, [r7, #3]
	SettingsAllDevice = Device;
 80010d2:	4b08      	ldr	r3, [pc, #32]	@ (80010f4 <AGRO_Init+0x30>)
 80010d4:	461c      	mov	r4, r3
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	MyDevice = divice;
 80010e0:	4a05      	ldr	r2, [pc, #20]	@ (80010f8 <AGRO_Init+0x34>)
 80010e2:	78fb      	ldrb	r3, [r7, #3]
 80010e4:	7013      	strb	r3, [r2, #0]

	return MyDevice;
 80010e6:	4b04      	ldr	r3, [pc, #16]	@ (80010f8 <AGRO_Init+0x34>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc90      	pop	{r4, r7}
 80010f2:	4770      	bx	lr
 80010f4:	20000200 	.word	0x20000200
 80010f8:	2000020c 	.word	0x2000020c

080010fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001100:	f001 f8fc 	bl	80022fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001104:	f000 f896 	bl	8001234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001108:	f000 f9f2 	bl	80014f0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800110c:	f000 f99c 	bl	8001448 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001110:	f000 f9c4 	bl	800149c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001114:	f000 f8d4 	bl	80012c0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001118:	f000 f900 	bl	800131c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800111c:	2100      	movs	r1, #0
 800111e:	483d      	ldr	r0, [pc, #244]	@ (8001214 <main+0x118>)
 8001120:	f002 ff82 	bl	8004028 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001124:	2104      	movs	r1, #4
 8001126:	483b      	ldr	r0, [pc, #236]	@ (8001214 <main+0x118>)
 8001128:	f002 ff7e 	bl	8004028 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800112c:	2108      	movs	r1, #8
 800112e:	4839      	ldr	r0, [pc, #228]	@ (8001214 <main+0x118>)
 8001130:	f002 ff7a 	bl	8004028 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001134:	210c      	movs	r1, #12
 8001136:	4837      	ldr	r0, [pc, #220]	@ (8001214 <main+0x118>)
 8001138:	f002 ff76 	bl	8004028 <HAL_TIM_PWM_Start>

  LED_OFF;
 800113c:	2201      	movs	r2, #1
 800113e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001142:	4835      	ldr	r0, [pc, #212]	@ (8001218 <main+0x11c>)
 8001144:	f001 fca4 	bl	8002a90 <HAL_GPIO_WritePin>
  E220_SetMode(DeepSleep); // Режим сна
 8001148:	2003      	movs	r0, #3
 800114a:	f7ff fcc5 	bl	8000ad8 <E220_SetMode>
  E220_WaitReady(); // Ожидание включения
 800114e:	f7ff fc9b 	bl	8000a88 <E220_WaitReady>
  LED_ON;
 8001152:	2200      	movs	r2, #0
 8001154:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001158:	482f      	ldr	r0, [pc, #188]	@ (8001218 <main+0x11c>)
 800115a:	f001 fc99 	bl	8002a90 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800115e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001162:	f001 f92d 	bl	80023c0 <HAL_Delay>
  LED_OFF;
 8001166:	2201      	movs	r2, #1
 8001168:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800116c:	482a      	ldr	r0, [pc, #168]	@ (8001218 <main+0x11c>)
 800116e:	f001 fc8f 	bl	8002a90 <HAL_GPIO_WritePin>
  /*Установка настроек*/
  /*Выбор устройства установка адресов и каналов всех используемых устройств*/

  AGRO_Init(AGRO_Device, Device_0);
 8001172:	4a2a      	ldr	r2, [pc, #168]	@ (800121c <main+0x120>)
 8001174:	2300      	movs	r3, #0
 8001176:	ca07      	ldmia	r2, {r0, r1, r2}
 8001178:	f7ff ffa4 	bl	80010c4 <AGRO_Init>

  // Передатчик 1
  AGRO_Device.AddrDevice_1 = 0x0001;
 800117c:	4b27      	ldr	r3, [pc, #156]	@ (800121c <main+0x120>)
 800117e:	2201      	movs	r2, #1
 8001180:	805a      	strh	r2, [r3, #2]
  AGRO_Device.ChDevice_1 = 0x02;
 8001182:	4b26      	ldr	r3, [pc, #152]	@ (800121c <main+0x120>)
 8001184:	2202      	movs	r2, #2
 8001186:	725a      	strb	r2, [r3, #9]

  // Приемник 1
  AGRO_Device.AddrDevice_0 = 0x0003;
 8001188:	4b24      	ldr	r3, [pc, #144]	@ (800121c <main+0x120>)
 800118a:	2203      	movs	r2, #3
 800118c:	801a      	strh	r2, [r3, #0]
  AGRO_Device.ChDevice_0 = 0x04;
 800118e:	4b23      	ldr	r3, [pc, #140]	@ (800121c <main+0x120>)
 8001190:	2204      	movs	r2, #4
 8001192:	721a      	strb	r2, [r3, #8]

  E220_SetDefaultSettings(AGRO_Device.AddrDevice_0, AGRO_Device.ChDevice_0, DISABLE);
 8001194:	4b21      	ldr	r3, [pc, #132]	@ (800121c <main+0x120>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	4a20      	ldr	r2, [pc, #128]	@ (800121c <main+0x120>)
 800119a:	7a11      	ldrb	r1, [r2, #8]
 800119c:	2200      	movs	r2, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ff32 	bl	8001008 <E220_SetDefaultSettings>

  HAL_Delay(500);
 80011a4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011a8:	f001 f90a 	bl	80023c0 <HAL_Delay>
  LED_ON;
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011b2:	4819      	ldr	r0, [pc, #100]	@ (8001218 <main+0x11c>)
 80011b4:	f001 fc6c 	bl	8002a90 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80011b8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011bc:	f001 f900 	bl	80023c0 <HAL_Delay>
  LED_OFF;
 80011c0:	2201      	movs	r2, #1
 80011c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011c6:	4814      	ldr	r0, [pc, #80]	@ (8001218 <main+0x11c>)
 80011c8:	f001 fc62 	bl	8002a90 <HAL_GPIO_WritePin>


  E220_SetMode(NORMAL);
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff fc83 	bl	8000ad8 <E220_SetMode>




//  HAL_UART_Receive_IT(&huart1, (uint8_t*)&recv, 5);
  HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 80011d2:	2201      	movs	r2, #1
 80011d4:	4912      	ldr	r1, [pc, #72]	@ (8001220 <main+0x124>)
 80011d6:	4813      	ldr	r0, [pc, #76]	@ (8001224 <main+0x128>)
 80011d8:	f003 fd27 	bl	8004c2a <HAL_UART_Receive_IT>



#if SSD1306_DISPLAY

  SSD1306_Init();
 80011dc:	f000 fb2e 	bl	800183c <SSD1306_Init>
  SSD1306_GotoXY(0, 0);
 80011e0:	2100      	movs	r1, #0
 80011e2:	2000      	movs	r0, #0
 80011e4:	f000 fca6 	bl	8001b34 <SSD1306_GotoXY>
  sprintf(buf, "AGRO ROBOT");
 80011e8:	490f      	ldr	r1, [pc, #60]	@ (8001228 <main+0x12c>)
 80011ea:	4810      	ldr	r0, [pc, #64]	@ (800122c <main+0x130>)
 80011ec:	f004 ffe0 	bl	80061b0 <siprintf>
  SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 80011f0:	2201      	movs	r2, #1
 80011f2:	490f      	ldr	r1, [pc, #60]	@ (8001230 <main+0x134>)
 80011f4:	480d      	ldr	r0, [pc, #52]	@ (800122c <main+0x130>)
 80011f6:	f000 fd31 	bl	8001c5c <SSD1306_Puts>
  SSD1306_UpdateScreen();
 80011fa:	f000 fbe3 	bl	80019c4 <SSD1306_UpdateScreen>
  HAL_Delay(1000);
 80011fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001202:	f001 f8dd 	bl	80023c0 <HAL_Delay>
//	  sprintf(buf, "...");
//	  SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
//	  SSD1306_UpdateScreen();
//	  HAL_Delay(200);
//  }
  SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001206:	2000      	movs	r0, #0
 8001208:	f000 fc0e 	bl	8001a28 <SSD1306_Fill>
  SSD1306_UpdateScreen();
 800120c:	f000 fbda 	bl	80019c4 <SSD1306_UpdateScreen>
  //uint16_t numPack = 100;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <main+0x114>
 8001214:	200002f4 	.word	0x200002f4
 8001218:	40011000 	.word	0x40011000
 800121c:	200003cc 	.word	0x200003cc
 8001220:	20000210 	.word	0x20000210
 8001224:	2000033c 	.word	0x2000033c
 8001228:	08008440 	.word	0x08008440
 800122c:	2000027c 	.word	0x2000027c
 8001230:	20000000 	.word	0x20000000

08001234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b090      	sub	sp, #64	@ 0x40
 8001238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123a:	f107 0318 	add.w	r3, r7, #24
 800123e:	2228      	movs	r2, #40	@ 0x28
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f005 f819 	bl	800627a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001256:	2301      	movs	r3, #1
 8001258:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800125a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800125e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001264:	2301      	movs	r3, #1
 8001266:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001268:	2302      	movs	r3, #2
 800126a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800126c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001270:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001272:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001276:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001278:	f107 0318 	add.w	r3, r7, #24
 800127c:	4618      	mov	r0, r3
 800127e:	f002 fa1b 	bl	80036b8 <HAL_RCC_OscConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001288:	f000 fad2 	bl	8001830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128c:	230f      	movs	r3, #15
 800128e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001290:	2302      	movs	r3, #2
 8001292:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001298:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800129c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800129e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012a2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	2102      	movs	r1, #2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f002 fc87 	bl	8003bbc <HAL_RCC_ClockConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80012b4:	f000 fabc 	bl	8001830 <Error_Handler>
  }
}
 80012b8:	bf00      	nop
 80012ba:	3740      	adds	r7, #64	@ 0x40
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012c4:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012c6:	4a13      	ldr	r2, [pc, #76]	@ (8001314 <MX_I2C1_Init+0x54>)
 80012c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ca:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012cc:	4a12      	ldr	r2, [pc, #72]	@ (8001318 <MX_I2C1_Init+0x58>)
 80012ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ea:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f0:	4b07      	ldr	r3, [pc, #28]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f6:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012fc:	4804      	ldr	r0, [pc, #16]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012fe:	f001 fc11 	bl	8002b24 <HAL_I2C_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001308:	f000 fa92 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200002a0 	.word	0x200002a0
 8001314:	40005400 	.word	0x40005400
 8001318:	000186a0 	.word	0x000186a0

0800131c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08e      	sub	sp, #56	@ 0x38
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001322:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001330:	f107 0320 	add.w	r3, r7, #32
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
 8001348:	615a      	str	r2, [r3, #20]
 800134a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800134c:	4b3d      	ldr	r3, [pc, #244]	@ (8001444 <MX_TIM2_Init+0x128>)
 800134e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001352:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001354:	4b3b      	ldr	r3, [pc, #236]	@ (8001444 <MX_TIM2_Init+0x128>)
 8001356:	2247      	movs	r2, #71	@ 0x47
 8001358:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135a:	4b3a      	ldr	r3, [pc, #232]	@ (8001444 <MX_TIM2_Init+0x128>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001360:	4b38      	ldr	r3, [pc, #224]	@ (8001444 <MX_TIM2_Init+0x128>)
 8001362:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001366:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001368:	4b36      	ldr	r3, [pc, #216]	@ (8001444 <MX_TIM2_Init+0x128>)
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136e:	4b35      	ldr	r3, [pc, #212]	@ (8001444 <MX_TIM2_Init+0x128>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001374:	4833      	ldr	r0, [pc, #204]	@ (8001444 <MX_TIM2_Init+0x128>)
 8001376:	f002 fdaf 	bl	8003ed8 <HAL_TIM_Base_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001380:	f000 fa56 	bl	8001830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001384:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001388:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800138a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800138e:	4619      	mov	r1, r3
 8001390:	482c      	ldr	r0, [pc, #176]	@ (8001444 <MX_TIM2_Init+0x128>)
 8001392:	f002 ffad 	bl	80042f0 <HAL_TIM_ConfigClockSource>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800139c:	f000 fa48 	bl	8001830 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013a0:	4828      	ldr	r0, [pc, #160]	@ (8001444 <MX_TIM2_Init+0x128>)
 80013a2:	f002 fde8 	bl	8003f76 <HAL_TIM_PWM_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80013ac:	f000 fa40 	bl	8001830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013b8:	f107 0320 	add.w	r3, r7, #32
 80013bc:	4619      	mov	r1, r3
 80013be:	4821      	ldr	r0, [pc, #132]	@ (8001444 <MX_TIM2_Init+0x128>)
 80013c0:	f003 fb02 	bl	80049c8 <HAL_TIMEx_MasterConfigSynchronization>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80013ca:	f000 fa31 	bl	8001830 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ce:	2360      	movs	r3, #96	@ 0x60
 80013d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	2200      	movs	r2, #0
 80013e2:	4619      	mov	r1, r3
 80013e4:	4817      	ldr	r0, [pc, #92]	@ (8001444 <MX_TIM2_Init+0x128>)
 80013e6:	f002 fec1 	bl	800416c <HAL_TIM_PWM_ConfigChannel>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80013f0:	f000 fa1e 	bl	8001830 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	2204      	movs	r2, #4
 80013f8:	4619      	mov	r1, r3
 80013fa:	4812      	ldr	r0, [pc, #72]	@ (8001444 <MX_TIM2_Init+0x128>)
 80013fc:	f002 feb6 	bl	800416c <HAL_TIM_PWM_ConfigChannel>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001406:	f000 fa13 	bl	8001830 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2208      	movs	r2, #8
 800140e:	4619      	mov	r1, r3
 8001410:	480c      	ldr	r0, [pc, #48]	@ (8001444 <MX_TIM2_Init+0x128>)
 8001412:	f002 feab 	bl	800416c <HAL_TIM_PWM_ConfigChannel>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 800141c:	f000 fa08 	bl	8001830 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	220c      	movs	r2, #12
 8001424:	4619      	mov	r1, r3
 8001426:	4807      	ldr	r0, [pc, #28]	@ (8001444 <MX_TIM2_Init+0x128>)
 8001428:	f002 fea0 	bl	800416c <HAL_TIM_PWM_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8001432:	f000 f9fd 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001436:	4803      	ldr	r0, [pc, #12]	@ (8001444 <MX_TIM2_Init+0x128>)
 8001438:	f000 fd5a 	bl	8001ef0 <HAL_TIM_MspPostInit>

}
 800143c:	bf00      	nop
 800143e:	3738      	adds	r7, #56	@ 0x38
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200002f4 	.word	0x200002f4

08001448 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800144c:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <MX_USART1_UART_Init+0x4c>)
 800144e:	4a12      	ldr	r2, [pc, #72]	@ (8001498 <MX_USART1_UART_Init+0x50>)
 8001450:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001452:	4b10      	ldr	r3, [pc, #64]	@ (8001494 <MX_USART1_UART_Init+0x4c>)
 8001454:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001458:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800145a:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <MX_USART1_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001460:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <MX_USART1_UART_Init+0x4c>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <MX_USART1_UART_Init+0x4c>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800146c:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <MX_USART1_UART_Init+0x4c>)
 800146e:	220c      	movs	r2, #12
 8001470:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001472:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <MX_USART1_UART_Init+0x4c>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001478:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <MX_USART1_UART_Init+0x4c>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800147e:	4805      	ldr	r0, [pc, #20]	@ (8001494 <MX_USART1_UART_Init+0x4c>)
 8001480:	f003 fb00 	bl	8004a84 <HAL_UART_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800148a:	f000 f9d1 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2000033c 	.word	0x2000033c
 8001498:	40013800 	.word	0x40013800

0800149c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014a0:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014a2:	4a12      	ldr	r2, [pc, #72]	@ (80014ec <MX_USART3_UART_Init+0x50>)
 80014a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80014a6:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014a8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80014ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014c0:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014c2:	220c      	movs	r2, #12
 80014c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c6:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014d2:	4805      	ldr	r0, [pc, #20]	@ (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014d4:	f003 fad6 	bl	8004a84 <HAL_UART_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80014de:	f000 f9a7 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000384 	.word	0x20000384
 80014ec:	40004800 	.word	0x40004800

080014f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f6:	f107 0310 	add.w	r3, r7, #16
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001504:	4b57      	ldr	r3, [pc, #348]	@ (8001664 <MX_GPIO_Init+0x174>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	4a56      	ldr	r2, [pc, #344]	@ (8001664 <MX_GPIO_Init+0x174>)
 800150a:	f043 0310 	orr.w	r3, r3, #16
 800150e:	6193      	str	r3, [r2, #24]
 8001510:	4b54      	ldr	r3, [pc, #336]	@ (8001664 <MX_GPIO_Init+0x174>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	f003 0310 	and.w	r3, r3, #16
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800151c:	4b51      	ldr	r3, [pc, #324]	@ (8001664 <MX_GPIO_Init+0x174>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	4a50      	ldr	r2, [pc, #320]	@ (8001664 <MX_GPIO_Init+0x174>)
 8001522:	f043 0320 	orr.w	r3, r3, #32
 8001526:	6193      	str	r3, [r2, #24]
 8001528:	4b4e      	ldr	r3, [pc, #312]	@ (8001664 <MX_GPIO_Init+0x174>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	f003 0320 	and.w	r3, r3, #32
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001534:	4b4b      	ldr	r3, [pc, #300]	@ (8001664 <MX_GPIO_Init+0x174>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	4a4a      	ldr	r2, [pc, #296]	@ (8001664 <MX_GPIO_Init+0x174>)
 800153a:	f043 0304 	orr.w	r3, r3, #4
 800153e:	6193      	str	r3, [r2, #24]
 8001540:	4b48      	ldr	r3, [pc, #288]	@ (8001664 <MX_GPIO_Init+0x174>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154c:	4b45      	ldr	r3, [pc, #276]	@ (8001664 <MX_GPIO_Init+0x174>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	4a44      	ldr	r2, [pc, #272]	@ (8001664 <MX_GPIO_Init+0x174>)
 8001552:	f043 0308 	orr.w	r3, r3, #8
 8001556:	6193      	str	r3, [r2, #24]
 8001558:	4b42      	ldr	r3, [pc, #264]	@ (8001664 <MX_GPIO_Init+0x174>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f003 0308 	and.w	r3, r3, #8
 8001560:	603b      	str	r3, [r7, #0]
 8001562:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800156a:	483f      	ldr	r0, [pc, #252]	@ (8001668 <MX_GPIO_Init+0x178>)
 800156c:	f001 fa90 	bl	8002a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|E220_M1_Pin, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8001576:	483d      	ldr	r0, [pc, #244]	@ (800166c <MX_GPIO_Init+0x17c>)
 8001578:	f001 fa8a 	bl	8002a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|E220_M0_Pin, GPIO_PIN_RESET);
 800157c:	2200      	movs	r2, #0
 800157e:	f248 0101 	movw	r1, #32769	@ 0x8001
 8001582:	483b      	ldr	r0, [pc, #236]	@ (8001670 <MX_GPIO_Init+0x180>)
 8001584:	f001 fa84 	bl	8002a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001588:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800158c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158e:	2301      	movs	r3, #1
 8001590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2302      	movs	r3, #2
 8001598:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159a:	f107 0310 	add.w	r3, r7, #16
 800159e:	4619      	mov	r1, r3
 80015a0:	4831      	ldr	r0, [pc, #196]	@ (8001668 <MX_GPIO_Init+0x178>)
 80015a2:	f001 f8f1 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015a6:	2310      	movs	r3, #16
 80015a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015aa:	2301      	movs	r3, #1
 80015ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2302      	movs	r3, #2
 80015b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b6:	f107 0310 	add.w	r3, r7, #16
 80015ba:	4619      	mov	r1, r3
 80015bc:	482b      	ldr	r0, [pc, #172]	@ (800166c <MX_GPIO_Init+0x17c>)
 80015be:	f001 f8e3 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015c2:	2301      	movs	r3, #1
 80015c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2302      	movs	r3, #2
 80015d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d2:	f107 0310 	add.w	r3, r7, #16
 80015d6:	4619      	mov	r1, r3
 80015d8:	4825      	ldr	r0, [pc, #148]	@ (8001670 <MX_GPIO_Init+0x180>)
 80015da:	f001 f8d5 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015de:	2302      	movs	r3, #2
 80015e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ea:	f107 0310 	add.w	r3, r7, #16
 80015ee:	4619      	mov	r1, r3
 80015f0:	481f      	ldr	r0, [pc, #124]	@ (8001670 <MX_GPIO_Init+0x180>)
 80015f2:	f001 f8c9 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pin : E220_M0_Pin */
  GPIO_InitStruct.Pin = E220_M0_Pin;
 80015f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fc:	2301      	movs	r3, #1
 80015fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001600:	2302      	movs	r3, #2
 8001602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	2302      	movs	r3, #2
 8001606:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(E220_M0_GPIO_Port, &GPIO_InitStruct);
 8001608:	f107 0310 	add.w	r3, r7, #16
 800160c:	4619      	mov	r1, r3
 800160e:	4818      	ldr	r0, [pc, #96]	@ (8001670 <MX_GPIO_Init+0x180>)
 8001610:	f001 f8ba 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pin : E220_M1_Pin */
  GPIO_InitStruct.Pin = E220_M1_Pin;
 8001614:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001618:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161a:	2301      	movs	r3, #1
 800161c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800161e:	2302      	movs	r3, #2
 8001620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2302      	movs	r3, #2
 8001624:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(E220_M1_GPIO_Port, &GPIO_InitStruct);
 8001626:	f107 0310 	add.w	r3, r7, #16
 800162a:	4619      	mov	r1, r3
 800162c:	480f      	ldr	r0, [pc, #60]	@ (800166c <MX_GPIO_Init+0x17c>)
 800162e:	f001 f8ab 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001632:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001636:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001638:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <MX_GPIO_Init+0x184>)
 800163a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800163c:	2301      	movs	r3, #1
 800163e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001640:	f107 0310 	add.w	r3, r7, #16
 8001644:	4619      	mov	r1, r3
 8001646:	480a      	ldr	r0, [pc, #40]	@ (8001670 <MX_GPIO_Init+0x180>)
 8001648:	f001 f89e 	bl	8002788 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	2100      	movs	r1, #0
 8001650:	2017      	movs	r0, #23
 8001652:	f000 ffb0 	bl	80025b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001656:	2017      	movs	r0, #23
 8001658:	f000 ffc9 	bl	80025ee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800165c:	bf00      	nop
 800165e:	3720      	adds	r7, #32
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40021000 	.word	0x40021000
 8001668:	40011000 	.word	0x40011000
 800166c:	40010800 	.word	0x40010800
 8001670:	40010c00 	.word	0x40010c00
 8001674:	10210000 	.word	0x10210000

08001678 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) // Radio kanalidan ma'lumot kelsa
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a48      	ldr	r2, [pc, #288]	@ (80017a4 <HAL_UART_RxCpltCallback+0x12c>)
 8001684:	4293      	cmp	r3, r2
 8001686:	f040 8083 	bne.w	8001790 <HAL_UART_RxCpltCallback+0x118>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800168a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800168e:	4846      	ldr	r0, [pc, #280]	@ (80017a8 <HAL_UART_RxCpltCallback+0x130>)
 8001690:	f001 fa16 	bl	8002ac0 <HAL_GPIO_TogglePin>
        // Start baytini tekshirish
        if (rx_byte == E220_START_BYTE)
 8001694:	4b45      	ldr	r3, [pc, #276]	@ (80017ac <HAL_UART_RxCpltCallback+0x134>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2baa      	cmp	r3, #170	@ 0xaa
 800169a:	d106      	bne.n	80016aa <HAL_UART_RxCpltCallback+0x32>
        {
            flag_start_recv = true; // Qabul qilishni boshlash uchun flagni yoqamiz
 800169c:	4b44      	ldr	r3, [pc, #272]	@ (80017b0 <HAL_UART_RxCpltCallback+0x138>)
 800169e:	2201      	movs	r2, #1
 80016a0:	701a      	strb	r2, [r3, #0]
            counterBuffer = 0; // Bufer hisoblagichini 0 ga sozlaymiz
 80016a2:	4b44      	ldr	r3, [pc, #272]	@ (80017b4 <HAL_UART_RxCpltCallback+0x13c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	801a      	strh	r2, [r3, #0]
 80016a8:	e072      	b.n	8001790 <HAL_UART_RxCpltCallback+0x118>
        }
        else if (flag_start_recv) // Agar qabul qilish boshlangan bo'lsa
 80016aa:	4b41      	ldr	r3, [pc, #260]	@ (80017b0 <HAL_UART_RxCpltCallback+0x138>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d06e      	beq.n	8001790 <HAL_UART_RxCpltCallback+0x118>
        {
            // Stop baytini tekshirish
            if (rx_byte == E220_STOP_BYTE)
 80016b2:	4b3e      	ldr	r3, [pc, #248]	@ (80017ac <HAL_UART_RxCpltCallback+0x134>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2bbb      	cmp	r3, #187	@ 0xbb
 80016b8:	d13e      	bne.n	8001738 <HAL_UART_RxCpltCallback+0xc0>
            {
                flag_start_recv = false; // Qabul qilishni to'xtatish uchun flagni o'chiramiz
 80016ba:	4b3d      	ldr	r3, [pc, #244]	@ (80017b0 <HAL_UART_RxCpltCallback+0x138>)
 80016bc:	2200      	movs	r2, #0
 80016be:	701a      	strb	r2, [r3, #0]
                LED_OFF;
 80016c0:	2201      	movs	r2, #1
 80016c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016c6:	4838      	ldr	r0, [pc, #224]	@ (80017a8 <HAL_UART_RxCpltCallback+0x130>)
 80016c8:	f001 f9e2 	bl	8002a90 <HAL_GPIO_WritePin>

                // Ekranni tozalash
                SSD1306_Fill(SSD1306_COLOR_BLACK);
 80016cc:	2000      	movs	r0, #0
 80016ce:	f000 f9ab 	bl	8001a28 <SSD1306_Fill>

                // Buferni to'xtatish baytidan oldingi holatga keltirish
                recvBuffer[counterBuffer] = '\0';
 80016d2:	4b38      	ldr	r3, [pc, #224]	@ (80017b4 <HAL_UART_RxCpltCallback+0x13c>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b37      	ldr	r3, [pc, #220]	@ (80017b8 <HAL_UART_RxCpltCallback+0x140>)
 80016da:	2100      	movs	r1, #0
 80016dc:	5499      	strb	r1, [r3, r2]

                // Ekranga matnni chiqarish
				SSD1306_GotoXY(0, 0);
 80016de:	2100      	movs	r1, #0
 80016e0:	2000      	movs	r0, #0
 80016e2:	f000 fa27 	bl	8001b34 <SSD1306_GotoXY>
				SSD1306_Puts("Received:", &Font_7x10, SSD1306_COLOR_WHITE);
 80016e6:	2201      	movs	r2, #1
 80016e8:	4934      	ldr	r1, [pc, #208]	@ (80017bc <HAL_UART_RxCpltCallback+0x144>)
 80016ea:	4835      	ldr	r0, [pc, #212]	@ (80017c0 <HAL_UART_RxCpltCallback+0x148>)
 80016ec:	f000 fab6 	bl	8001c5c <SSD1306_Puts>
				SSD1306_GotoXY(0, 15);
 80016f0:	210f      	movs	r1, #15
 80016f2:	2000      	movs	r0, #0
 80016f4:	f000 fa1e 	bl	8001b34 <SSD1306_GotoXY>
				SSD1306_Puts((char*)recvBuffer, &Font_7x10, SSD1306_COLOR_WHITE);
 80016f8:	2201      	movs	r2, #1
 80016fa:	4930      	ldr	r1, [pc, #192]	@ (80017bc <HAL_UART_RxCpltCallback+0x144>)
 80016fc:	482e      	ldr	r0, [pc, #184]	@ (80017b8 <HAL_UART_RxCpltCallback+0x140>)
 80016fe:	f000 faad 	bl	8001c5c <SSD1306_Puts>
				SSD1306_UpdateScreen();
 8001702:	f000 f95f 	bl	80019c4 <SSD1306_UpdateScreen>

				// Qayta ishlashdan so'ng buferni tozalash
				memset(recvBuffer, 0, counterBuffer);
 8001706:	4b2b      	ldr	r3, [pc, #172]	@ (80017b4 <HAL_UART_RxCpltCallback+0x13c>)
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	2100      	movs	r1, #0
 800170e:	482a      	ldr	r0, [pc, #168]	@ (80017b8 <HAL_UART_RxCpltCallback+0x140>)
 8001710:	f004 fdb3 	bl	800627a <memset>
				counterBuffer = 0; // Hisoblagichni nolga qaytarish
 8001714:	4b27      	ldr	r3, [pc, #156]	@ (80017b4 <HAL_UART_RxCpltCallback+0x13c>)
 8001716:	2200      	movs	r2, #0
 8001718:	801a      	strh	r2, [r3, #0]
                // Misol uchun, uni UART3 orqali kompyuterga yuborish
                HAL_UART_Transmit(&huart3, recvBuffer, counterBuffer, 100);
 800171a:	4b26      	ldr	r3, [pc, #152]	@ (80017b4 <HAL_UART_RxCpltCallback+0x13c>)
 800171c:	881a      	ldrh	r2, [r3, #0]
 800171e:	2364      	movs	r3, #100	@ 0x64
 8001720:	4925      	ldr	r1, [pc, #148]	@ (80017b8 <HAL_UART_RxCpltCallback+0x140>)
 8001722:	4828      	ldr	r0, [pc, #160]	@ (80017c4 <HAL_UART_RxCpltCallback+0x14c>)
 8001724:	f003 f9fe 	bl	8004b24 <HAL_UART_Transmit>

                // Qayta ishlashdan so'ng buferni tozalash
                memset(recvBuffer, 0, counterBuffer);
 8001728:	4b22      	ldr	r3, [pc, #136]	@ (80017b4 <HAL_UART_RxCpltCallback+0x13c>)
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	2100      	movs	r1, #0
 8001730:	4821      	ldr	r0, [pc, #132]	@ (80017b8 <HAL_UART_RxCpltCallback+0x140>)
 8001732:	f004 fda2 	bl	800627a <memset>
 8001736:	e02b      	b.n	8001790 <HAL_UART_RxCpltCallback+0x118>
            }
            else // Agar start va stop bayti bo'lmasa, ma'lumotni buferga yozish
            {
            	if (counterBuffer < sizeof(recvBuffer) - 1)
 8001738:	4b1e      	ldr	r3, [pc, #120]	@ (80017b4 <HAL_UART_RxCpltCallback+0x13c>)
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	2b62      	cmp	r3, #98	@ 0x62
 800173e:	d827      	bhi.n	8001790 <HAL_UART_RxCpltCallback+0x118>
				{
            		recvBuffer[counterBuffer++] = rx_byte;
 8001740:	4b1c      	ldr	r3, [pc, #112]	@ (80017b4 <HAL_UART_RxCpltCallback+0x13c>)
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	1c5a      	adds	r2, r3, #1
 8001746:	b291      	uxth	r1, r2
 8001748:	4a1a      	ldr	r2, [pc, #104]	@ (80017b4 <HAL_UART_RxCpltCallback+0x13c>)
 800174a:	8011      	strh	r1, [r2, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4b17      	ldr	r3, [pc, #92]	@ (80017ac <HAL_UART_RxCpltCallback+0x134>)
 8001750:	7819      	ldrb	r1, [r3, #0]
 8001752:	4b19      	ldr	r3, [pc, #100]	@ (80017b8 <HAL_UART_RxCpltCallback+0x140>)
 8001754:	5499      	strb	r1, [r3, r2]
            		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001756:	2000      	movs	r0, #0
 8001758:	f000 f966 	bl	8001a28 <SSD1306_Fill>

					// Buferni to'xtatish baytidan oldingi holatga keltirish
					recvBuffer[counterBuffer] = '\0';
 800175c:	4b15      	ldr	r3, [pc, #84]	@ (80017b4 <HAL_UART_RxCpltCallback+0x13c>)
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	4b15      	ldr	r3, [pc, #84]	@ (80017b8 <HAL_UART_RxCpltCallback+0x140>)
 8001764:	2100      	movs	r1, #0
 8001766:	5499      	strb	r1, [r3, r2]

					// Ekranga matnni chiqarish
					SSD1306_GotoXY(0, 0);
 8001768:	2100      	movs	r1, #0
 800176a:	2000      	movs	r0, #0
 800176c:	f000 f9e2 	bl	8001b34 <SSD1306_GotoXY>
					SSD1306_Puts("Received:", &Font_7x10, SSD1306_COLOR_WHITE);
 8001770:	2201      	movs	r2, #1
 8001772:	4912      	ldr	r1, [pc, #72]	@ (80017bc <HAL_UART_RxCpltCallback+0x144>)
 8001774:	4812      	ldr	r0, [pc, #72]	@ (80017c0 <HAL_UART_RxCpltCallback+0x148>)
 8001776:	f000 fa71 	bl	8001c5c <SSD1306_Puts>
					SSD1306_GotoXY(0, 15);
 800177a:	210f      	movs	r1, #15
 800177c:	2000      	movs	r0, #0
 800177e:	f000 f9d9 	bl	8001b34 <SSD1306_GotoXY>
					SSD1306_Puts((char*)recvBuffer, &Font_7x10, SSD1306_COLOR_WHITE);
 8001782:	2201      	movs	r2, #1
 8001784:	490d      	ldr	r1, [pc, #52]	@ (80017bc <HAL_UART_RxCpltCallback+0x144>)
 8001786:	480c      	ldr	r0, [pc, #48]	@ (80017b8 <HAL_UART_RxCpltCallback+0x140>)
 8001788:	f000 fa68 	bl	8001c5c <SSD1306_Puts>
					SSD1306_UpdateScreen();
 800178c:	f000 f91a 	bl	80019c4 <SSD1306_UpdateScreen>
	}



    // Keyingi baytni qabul qilishni kutish
    HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 8001790:	2201      	movs	r2, #1
 8001792:	4906      	ldr	r1, [pc, #24]	@ (80017ac <HAL_UART_RxCpltCallback+0x134>)
 8001794:	4803      	ldr	r0, [pc, #12]	@ (80017a4 <HAL_UART_RxCpltCallback+0x12c>)
 8001796:	f003 fa48 	bl	8004c2a <HAL_UART_Receive_IT>
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	2000033c 	.word	0x2000033c
 80017a8:	40011000 	.word	0x40011000
 80017ac:	20000210 	.word	0x20000210
 80017b0:	2000020d 	.word	0x2000020d
 80017b4:	2000020e 	.word	0x2000020e
 80017b8:	20000214 	.word	0x20000214
 80017bc:	20000000 	.word	0x20000000
 80017c0:	0800844c 	.word	0x0800844c
 80017c4:	20000384 	.word	0x20000384

080017c8 <HAL_UART_ErrorCallback>:
//	htim2.Instance->CCR1 = 0;
//	htim2.Instance->CCR4 = 0;
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	UART_ERROR = HAL_UART_GetError(&huart1);
 80017d0:	4809      	ldr	r0, [pc, #36]	@ (80017f8 <HAL_UART_ErrorCallback+0x30>)
 80017d2:	f003 fcf5 	bl	80051c0 <HAL_UART_GetError>
 80017d6:	4603      	mov	r3, r0
 80017d8:	4a08      	ldr	r2, [pc, #32]	@ (80017fc <HAL_UART_ErrorCallback+0x34>)
 80017da:	6013      	str	r3, [r2, #0]
	if(UART_ERROR == HAL_UART_ERROR_ORE)	// Ошибка переполнения
 80017dc:	4b07      	ldr	r3, [pc, #28]	@ (80017fc <HAL_UART_ErrorCallback+0x34>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	d104      	bne.n	80017ee <HAL_UART_ErrorCallback+0x26>
	{
		HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 80017e4:	2201      	movs	r2, #1
 80017e6:	4906      	ldr	r1, [pc, #24]	@ (8001800 <HAL_UART_ErrorCallback+0x38>)
 80017e8:	4803      	ldr	r0, [pc, #12]	@ (80017f8 <HAL_UART_ErrorCallback+0x30>)
 80017ea:	f003 fa1e 	bl	8004c2a <HAL_UART_Receive_IT>
	}
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	2000033c 	.word	0x2000033c
 80017fc:	2000029c 	.word	0x2000029c
 8001800:	20000210 	.word	0x20000210

08001804 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_1)
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	2b02      	cmp	r3, #2
 8001812:	d006      	beq.n	8001822 <HAL_GPIO_EXTI_Callback+0x1e>
	{

	}
	else if(GPIO_Pin == GPIO_PIN_9)
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800181a:	d102      	bne.n	8001822 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		AUX_Flag = true;
 800181c:	4b03      	ldr	r3, [pc, #12]	@ (800182c <HAL_GPIO_EXTI_Callback+0x28>)
 800181e:	2201      	movs	r2, #1
 8001820:	701a      	strb	r2, [r3, #0]
	}
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	20000278 	.word	0x20000278

08001830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001834:	b672      	cpsid	i
}
 8001836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <Error_Handler+0x8>

0800183c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001842:	f000 fa31 	bl	8001ca8 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001846:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800184a:	2201      	movs	r2, #1
 800184c:	2178      	movs	r1, #120	@ 0x78
 800184e:	485b      	ldr	r0, [pc, #364]	@ (80019bc <SSD1306_Init+0x180>)
 8001850:	f001 fbaa 	bl	8002fa8 <HAL_I2C_IsDeviceReady>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800185a:	2300      	movs	r3, #0
 800185c:	e0a9      	b.n	80019b2 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800185e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001862:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001864:	e002      	b.n	800186c <SSD1306_Init+0x30>
		p--;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3b01      	subs	r3, #1
 800186a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f9      	bne.n	8001866 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001872:	22ae      	movs	r2, #174	@ 0xae
 8001874:	2100      	movs	r1, #0
 8001876:	2078      	movs	r0, #120	@ 0x78
 8001878:	f000 fa90 	bl	8001d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 800187c:	2220      	movs	r2, #32
 800187e:	2100      	movs	r1, #0
 8001880:	2078      	movs	r0, #120	@ 0x78
 8001882:	f000 fa8b 	bl	8001d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001886:	2210      	movs	r2, #16
 8001888:	2100      	movs	r1, #0
 800188a:	2078      	movs	r0, #120	@ 0x78
 800188c:	f000 fa86 	bl	8001d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001890:	22b0      	movs	r2, #176	@ 0xb0
 8001892:	2100      	movs	r1, #0
 8001894:	2078      	movs	r0, #120	@ 0x78
 8001896:	f000 fa81 	bl	8001d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800189a:	22c8      	movs	r2, #200	@ 0xc8
 800189c:	2100      	movs	r1, #0
 800189e:	2078      	movs	r0, #120	@ 0x78
 80018a0:	f000 fa7c 	bl	8001d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00); //---set low column address
 80018a4:	2200      	movs	r2, #0
 80018a6:	2100      	movs	r1, #0
 80018a8:	2078      	movs	r0, #120	@ 0x78
 80018aa:	f000 fa77 	bl	8001d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10); //---set high column address
 80018ae:	2210      	movs	r2, #16
 80018b0:	2100      	movs	r1, #0
 80018b2:	2078      	movs	r0, #120	@ 0x78
 80018b4:	f000 fa72 	bl	8001d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x40); //--set start line address
 80018b8:	2240      	movs	r2, #64	@ 0x40
 80018ba:	2100      	movs	r1, #0
 80018bc:	2078      	movs	r0, #120	@ 0x78
 80018be:	f000 fa6d 	bl	8001d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80018c2:	2281      	movs	r2, #129	@ 0x81
 80018c4:	2100      	movs	r1, #0
 80018c6:	2078      	movs	r0, #120	@ 0x78
 80018c8:	f000 fa68 	bl	8001d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xFF);
 80018cc:	22ff      	movs	r2, #255	@ 0xff
 80018ce:	2100      	movs	r1, #0
 80018d0:	2078      	movs	r0, #120	@ 0x78
 80018d2:	f000 fa63 	bl	8001d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80018d6:	22a1      	movs	r2, #161	@ 0xa1
 80018d8:	2100      	movs	r1, #0
 80018da:	2078      	movs	r0, #120	@ 0x78
 80018dc:	f000 fa5e 	bl	8001d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80018e0:	22a6      	movs	r2, #166	@ 0xa6
 80018e2:	2100      	movs	r1, #0
 80018e4:	2078      	movs	r0, #120	@ 0x78
 80018e6:	f000 fa59 	bl	8001d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80018ea:	22a8      	movs	r2, #168	@ 0xa8
 80018ec:	2100      	movs	r1, #0
 80018ee:	2078      	movs	r0, #120	@ 0x78
 80018f0:	f000 fa54 	bl	8001d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x1F); //
 80018f4:	221f      	movs	r2, #31
 80018f6:	2100      	movs	r1, #0
 80018f8:	2078      	movs	r0, #120	@ 0x78
 80018fa:	f000 fa4f 	bl	8001d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80018fe:	22a4      	movs	r2, #164	@ 0xa4
 8001900:	2100      	movs	r1, #0
 8001902:	2078      	movs	r0, #120	@ 0x78
 8001904:	f000 fa4a 	bl	8001d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001908:	22d3      	movs	r2, #211	@ 0xd3
 800190a:	2100      	movs	r1, #0
 800190c:	2078      	movs	r0, #120	@ 0x78
 800190e:	f000 fa45 	bl	8001d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00); //-not offset
 8001912:	2200      	movs	r2, #0
 8001914:	2100      	movs	r1, #0
 8001916:	2078      	movs	r0, #120	@ 0x78
 8001918:	f000 fa40 	bl	8001d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800191c:	22d5      	movs	r2, #213	@ 0xd5
 800191e:	2100      	movs	r1, #0
 8001920:	2078      	movs	r0, #120	@ 0x78
 8001922:	f000 fa3b 	bl	8001d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001926:	22f0      	movs	r2, #240	@ 0xf0
 8001928:	2100      	movs	r1, #0
 800192a:	2078      	movs	r0, #120	@ 0x78
 800192c:	f000 fa36 	bl	8001d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001930:	22d9      	movs	r2, #217	@ 0xd9
 8001932:	2100      	movs	r1, #0
 8001934:	2078      	movs	r0, #120	@ 0x78
 8001936:	f000 fa31 	bl	8001d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x22); //
 800193a:	2222      	movs	r2, #34	@ 0x22
 800193c:	2100      	movs	r1, #0
 800193e:	2078      	movs	r0, #120	@ 0x78
 8001940:	f000 fa2c 	bl	8001d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001944:	22da      	movs	r2, #218	@ 0xda
 8001946:	2100      	movs	r1, #0
 8001948:	2078      	movs	r0, #120	@ 0x78
 800194a:	f000 fa27 	bl	8001d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x02);
 800194e:	2202      	movs	r2, #2
 8001950:	2100      	movs	r1, #0
 8001952:	2078      	movs	r0, #120	@ 0x78
 8001954:	f000 fa22 	bl	8001d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001958:	22db      	movs	r2, #219	@ 0xdb
 800195a:	2100      	movs	r1, #0
 800195c:	2078      	movs	r0, #120	@ 0x78
 800195e:	f000 fa1d 	bl	8001d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001962:	2220      	movs	r2, #32
 8001964:	2100      	movs	r1, #0
 8001966:	2078      	movs	r0, #120	@ 0x78
 8001968:	f000 fa18 	bl	8001d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800196c:	228d      	movs	r2, #141	@ 0x8d
 800196e:	2100      	movs	r1, #0
 8001970:	2078      	movs	r0, #120	@ 0x78
 8001972:	f000 fa13 	bl	8001d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x14); //
 8001976:	2214      	movs	r2, #20
 8001978:	2100      	movs	r1, #0
 800197a:	2078      	movs	r0, #120	@ 0x78
 800197c:	f000 fa0e 	bl	8001d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001980:	22af      	movs	r2, #175	@ 0xaf
 8001982:	2100      	movs	r1, #0
 8001984:	2078      	movs	r0, #120	@ 0x78
 8001986:	f000 fa09 	bl	8001d9c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800198a:	222e      	movs	r2, #46	@ 0x2e
 800198c:	2100      	movs	r1, #0
 800198e:	2078      	movs	r0, #120	@ 0x78
 8001990:	f000 fa04 	bl	8001d9c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001994:	2000      	movs	r0, #0
 8001996:	f000 f847 	bl	8001a28 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800199a:	f000 f813 	bl	80019c4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800199e:	4b08      	ldr	r3, [pc, #32]	@ (80019c0 <SSD1306_Init+0x184>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80019a4:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <SSD1306_Init+0x184>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80019aa:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <SSD1306_Init+0x184>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80019b0:	2301      	movs	r3, #1
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200002a0 	.word	0x200002a0
 80019c0:	2000057c 	.word	0x2000057c

080019c4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80019ca:	2300      	movs	r3, #0
 80019cc:	71fb      	strb	r3, [r7, #7]
 80019ce:	e021      	b.n	8001a14 <SSD1306_UpdateScreen+0x50>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	3b50      	subs	r3, #80	@ 0x50
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	461a      	mov	r2, r3
 80019d8:	2100      	movs	r1, #0
 80019da:	2078      	movs	r0, #120	@ 0x78
 80019dc:	f000 f9de 	bl	8001d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2100      	movs	r1, #0
 80019e4:	2078      	movs	r0, #120	@ 0x78
 80019e6:	f000 f9d9 	bl	8001d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80019ea:	2210      	movs	r2, #16
 80019ec:	2100      	movs	r1, #0
 80019ee:	2078      	movs	r0, #120	@ 0x78
 80019f0:	f000 f9d4 	bl	8001d9c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80019f4:	79fa      	ldrb	r2, [r7, #7]
 80019f6:	4613      	mov	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	1a9b      	subs	r3, r3, r2
 80019fc:	011a      	lsls	r2, r3, #4
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	4a08      	ldr	r2, [pc, #32]	@ (8001a24 <SSD1306_UpdateScreen+0x60>)
 8001a02:	441a      	add	r2, r3
 8001a04:	2369      	movs	r3, #105	@ 0x69
 8001a06:	2140      	movs	r1, #64	@ 0x40
 8001a08:	2078      	movs	r0, #120	@ 0x78
 8001a0a:	f000 f961 	bl	8001cd0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	3301      	adds	r3, #1
 8001a12:	71fb      	strb	r3, [r7, #7]
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	2b07      	cmp	r3, #7
 8001a18:	d9da      	bls.n	80019d0 <SSD1306_UpdateScreen+0xc>
	}
}
 8001a1a:	bf00      	nop
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	200003d8 	.word	0x200003d8

08001a28 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <SSD1306_Fill+0x14>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	e000      	b.n	8001a3e <SSD1306_Fill+0x16>
 8001a3c:	23ff      	movs	r3, #255	@ 0xff
 8001a3e:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8001a42:	4619      	mov	r1, r3
 8001a44:	4803      	ldr	r0, [pc, #12]	@ (8001a54 <SSD1306_Fill+0x2c>)
 8001a46:	f004 fc18 	bl	800627a <memset>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	200003d8 	.word	0x200003d8

08001a58 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001a58:	b490      	push	{r4, r7}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	80fb      	strh	r3, [r7, #6]
 8001a62:	460b      	mov	r3, r1
 8001a64:	80bb      	strh	r3, [r7, #4]
 8001a66:	4613      	mov	r3, r2
 8001a68:	70fb      	strb	r3, [r7, #3]
	if (
 8001a6a:	88fb      	ldrh	r3, [r7, #6]
 8001a6c:	2b68      	cmp	r3, #104	@ 0x68
 8001a6e:	d858      	bhi.n	8001b22 <SSD1306_DrawPixel+0xca>
		x >= SSD1306_WIDTH ||
 8001a70:	88bb      	ldrh	r3, [r7, #4]
 8001a72:	2b1f      	cmp	r3, #31
 8001a74:	d855      	bhi.n	8001b22 <SSD1306_DrawPixel+0xca>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001a76:	4b2d      	ldr	r3, [pc, #180]	@ (8001b2c <SSD1306_DrawPixel+0xd4>)
 8001a78:	791b      	ldrb	r3, [r3, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d006      	beq.n	8001a8c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001a7e:	78fb      	ldrb	r3, [r7, #3]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	bf0c      	ite	eq
 8001a84:	2301      	moveq	r3, #1
 8001a86:	2300      	movne	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d122      	bne.n	8001ad8 <SSD1306_DrawPixel+0x80>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a92:	88fa      	ldrh	r2, [r7, #6]
 8001a94:	88bb      	ldrh	r3, [r7, #4]
 8001a96:	08db      	lsrs	r3, r3, #3
 8001a98:	b298      	uxth	r0, r3
 8001a9a:	4601      	mov	r1, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	1a5b      	subs	r3, r3, r1
 8001aa2:	0119      	lsls	r1, r3, #4
 8001aa4:	1acb      	subs	r3, r1, r3
 8001aa6:	4413      	add	r3, r2
 8001aa8:	4a21      	ldr	r2, [pc, #132]	@ (8001b30 <SSD1306_DrawPixel+0xd8>)
 8001aaa:	5cd3      	ldrb	r3, [r2, r3]
 8001aac:	b25a      	sxtb	r2, r3
 8001aae:	88bb      	ldrh	r3, [r7, #4]
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aba:	b25b      	sxtb	r3, r3
 8001abc:	4313      	orrs	r3, r2
 8001abe:	b25c      	sxtb	r4, r3
 8001ac0:	88fa      	ldrh	r2, [r7, #6]
 8001ac2:	4601      	mov	r1, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	1a5b      	subs	r3, r3, r1
 8001aca:	0119      	lsls	r1, r3, #4
 8001acc:	1acb      	subs	r3, r1, r3
 8001ace:	4413      	add	r3, r2
 8001ad0:	b2e1      	uxtb	r1, r4
 8001ad2:	4a17      	ldr	r2, [pc, #92]	@ (8001b30 <SSD1306_DrawPixel+0xd8>)
 8001ad4:	54d1      	strb	r1, [r2, r3]
 8001ad6:	e025      	b.n	8001b24 <SSD1306_DrawPixel+0xcc>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ad8:	88fa      	ldrh	r2, [r7, #6]
 8001ada:	88bb      	ldrh	r3, [r7, #4]
 8001adc:	08db      	lsrs	r3, r3, #3
 8001ade:	b298      	uxth	r0, r3
 8001ae0:	4601      	mov	r1, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	1a5b      	subs	r3, r3, r1
 8001ae8:	0119      	lsls	r1, r3, #4
 8001aea:	1acb      	subs	r3, r1, r3
 8001aec:	4413      	add	r3, r2
 8001aee:	4a10      	ldr	r2, [pc, #64]	@ (8001b30 <SSD1306_DrawPixel+0xd8>)
 8001af0:	5cd3      	ldrb	r3, [r2, r3]
 8001af2:	b25a      	sxtb	r2, r3
 8001af4:	88bb      	ldrh	r3, [r7, #4]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	2101      	movs	r1, #1
 8001afc:	fa01 f303 	lsl.w	r3, r1, r3
 8001b00:	b25b      	sxtb	r3, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	b25b      	sxtb	r3, r3
 8001b06:	4013      	ands	r3, r2
 8001b08:	b25c      	sxtb	r4, r3
 8001b0a:	88fa      	ldrh	r2, [r7, #6]
 8001b0c:	4601      	mov	r1, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	1a5b      	subs	r3, r3, r1
 8001b14:	0119      	lsls	r1, r3, #4
 8001b16:	1acb      	subs	r3, r1, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	b2e1      	uxtb	r1, r4
 8001b1c:	4a04      	ldr	r2, [pc, #16]	@ (8001b30 <SSD1306_DrawPixel+0xd8>)
 8001b1e:	54d1      	strb	r1, [r2, r3]
 8001b20:	e000      	b.n	8001b24 <SSD1306_DrawPixel+0xcc>
		return;
 8001b22:	bf00      	nop
	}
}
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc90      	pop	{r4, r7}
 8001b2a:	4770      	bx	lr
 8001b2c:	2000057c 	.word	0x2000057c
 8001b30:	200003d8 	.word	0x200003d8

08001b34 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	460a      	mov	r2, r1
 8001b3e:	80fb      	strh	r3, [r7, #6]
 8001b40:	4613      	mov	r3, r2
 8001b42:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001b44:	4a05      	ldr	r2, [pc, #20]	@ (8001b5c <SSD1306_GotoXY+0x28>)
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001b4a:	4a04      	ldr	r2, [pc, #16]	@ (8001b5c <SSD1306_GotoXY+0x28>)
 8001b4c:	88bb      	ldrh	r3, [r7, #4]
 8001b4e:	8053      	strh	r3, [r2, #2]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	2000057c 	.word	0x2000057c

08001b60 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	6039      	str	r1, [r7, #0]
 8001b6a:	71fb      	strb	r3, [r7, #7]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001b70:	4b39      	ldr	r3, [pc, #228]	@ (8001c58 <SSD1306_Putc+0xf8>)
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	4413      	add	r3, r2
	if (
 8001b7c:	2b68      	cmp	r3, #104	@ 0x68
 8001b7e:	dc07      	bgt.n	8001b90 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001b80:	4b35      	ldr	r3, [pc, #212]	@ (8001c58 <SSD1306_Putc+0xf8>)
 8001b82:	885b      	ldrh	r3, [r3, #2]
 8001b84:	461a      	mov	r2, r3
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	785b      	ldrb	r3, [r3, #1]
 8001b8a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001b8c:	2b1f      	cmp	r3, #31
 8001b8e:	dd01      	ble.n	8001b94 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	e05d      	b.n	8001c50 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	e04b      	b.n	8001c32 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	3b20      	subs	r3, #32
 8001ba2:	6839      	ldr	r1, [r7, #0]
 8001ba4:	7849      	ldrb	r1, [r1, #1]
 8001ba6:	fb01 f303 	mul.w	r3, r1, r3
 8001baa:	4619      	mov	r1, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	440b      	add	r3, r1
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001bb8:	2300      	movs	r3, #0
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	e030      	b.n	8001c20 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d010      	beq.n	8001bf0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001bce:	4b22      	ldr	r3, [pc, #136]	@ (8001c58 <SSD1306_Putc+0xf8>)
 8001bd0:	881a      	ldrh	r2, [r3, #0]
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	b298      	uxth	r0, r3
 8001bda:	4b1f      	ldr	r3, [pc, #124]	@ (8001c58 <SSD1306_Putc+0xf8>)
 8001bdc:	885a      	ldrh	r2, [r3, #2]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	4413      	add	r3, r2
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	79ba      	ldrb	r2, [r7, #6]
 8001be8:	4619      	mov	r1, r3
 8001bea:	f7ff ff35 	bl	8001a58 <SSD1306_DrawPixel>
 8001bee:	e014      	b.n	8001c1a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001bf0:	4b19      	ldr	r3, [pc, #100]	@ (8001c58 <SSD1306_Putc+0xf8>)
 8001bf2:	881a      	ldrh	r2, [r3, #0]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	b298      	uxth	r0, r3
 8001bfc:	4b16      	ldr	r3, [pc, #88]	@ (8001c58 <SSD1306_Putc+0xf8>)
 8001bfe:	885a      	ldrh	r2, [r3, #2]
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	4413      	add	r3, r2
 8001c06:	b299      	uxth	r1, r3
 8001c08:	79bb      	ldrb	r3, [r7, #6]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	bf0c      	ite	eq
 8001c0e:	2301      	moveq	r3, #1
 8001c10:	2300      	movne	r3, #0
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	461a      	mov	r2, r3
 8001c16:	f7ff ff1f 	bl	8001a58 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d3c8      	bcc.n	8001bbe <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	785b      	ldrb	r3, [r3, #1]
 8001c36:	461a      	mov	r2, r3
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d3ad      	bcc.n	8001b9a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001c3e:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <SSD1306_Putc+0xf8>)
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	7812      	ldrb	r2, [r2, #0]
 8001c46:	4413      	add	r3, r2
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	4b03      	ldr	r3, [pc, #12]	@ (8001c58 <SSD1306_Putc+0xf8>)
 8001c4c:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	2000057c 	.word	0x2000057c

08001c5c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	4613      	mov	r3, r2
 8001c68:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001c6a:	e012      	b.n	8001c92 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	79fa      	ldrb	r2, [r7, #7]
 8001c72:	68b9      	ldr	r1, [r7, #8]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff73 	bl	8001b60 <SSD1306_Putc>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d002      	beq.n	8001c8c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	e008      	b.n	8001c9e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1e8      	bne.n	8001c6c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	781b      	ldrb	r3, [r3, #0]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001cae:	4b07      	ldr	r3, [pc, #28]	@ (8001ccc <ssd1306_I2C_Init+0x24>)
 8001cb0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001cb2:	e002      	b.n	8001cba <ssd1306_I2C_Init+0x12>
		p--;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1f9      	bne.n	8001cb4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	0003d090 	.word	0x0003d090

08001cd0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001cd0:	b590      	push	{r4, r7, lr}
 8001cd2:	b0c7      	sub	sp, #284	@ 0x11c
 8001cd4:	af02      	add	r7, sp, #8
 8001cd6:	4604      	mov	r4, r0
 8001cd8:	4608      	mov	r0, r1
 8001cda:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001cde:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001ce2:	600a      	str	r2, [r1, #0]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001cea:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001cee:	4622      	mov	r2, r4
 8001cf0:	701a      	strb	r2, [r3, #0]
 8001cf2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001cf6:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	701a      	strb	r2, [r3, #0]
 8001cfe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d02:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d06:	460a      	mov	r2, r1
 8001d08:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001d0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d12:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001d16:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001d1a:	7812      	ldrb	r2, [r2, #0]
 8001d1c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001d24:	e015      	b.n	8001d52 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001d26:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001d2a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001d2e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	441a      	add	r2, r3
 8001d36:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	7811      	ldrb	r1, [r2, #0]
 8001d3e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001d42:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001d46:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001d48:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001d52:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001d5c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001d60:	8812      	ldrh	r2, [r2, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d8df      	bhi.n	8001d26 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001d66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d6a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	b299      	uxth	r1, r3
 8001d72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d76:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	f107 020c 	add.w	r2, r7, #12
 8001d84:	200a      	movs	r0, #10
 8001d86:	9000      	str	r0, [sp, #0]
 8001d88:	4803      	ldr	r0, [pc, #12]	@ (8001d98 <ssd1306_I2C_WriteMulti+0xc8>)
 8001d8a:	f001 f80f 	bl	8002dac <HAL_I2C_Master_Transmit>
}
 8001d8e:	bf00      	nop
 8001d90:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd90      	pop	{r4, r7, pc}
 8001d98:	200002a0 	.word	0x200002a0

08001d9c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af02      	add	r7, sp, #8
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
 8001da6:	460b      	mov	r3, r1
 8001da8:	71bb      	strb	r3, [r7, #6]
 8001daa:	4613      	mov	r3, r2
 8001dac:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001dae:	79bb      	ldrb	r3, [r7, #6]
 8001db0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001db2:	797b      	ldrb	r3, [r7, #5]
 8001db4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	b299      	uxth	r1, r3
 8001dba:	f107 020c 	add.w	r2, r7, #12
 8001dbe:	230a      	movs	r3, #10
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	4803      	ldr	r0, [pc, #12]	@ (8001dd4 <ssd1306_I2C_Write+0x38>)
 8001dc6:	f000 fff1 	bl	8002dac <HAL_I2C_Master_Transmit>
}
 8001dca:	bf00      	nop
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200002a0 	.word	0x200002a0

08001dd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001dde:	4b15      	ldr	r3, [pc, #84]	@ (8001e34 <HAL_MspInit+0x5c>)
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	4a14      	ldr	r2, [pc, #80]	@ (8001e34 <HAL_MspInit+0x5c>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6193      	str	r3, [r2, #24]
 8001dea:	4b12      	ldr	r3, [pc, #72]	@ (8001e34 <HAL_MspInit+0x5c>)
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e34 <HAL_MspInit+0x5c>)
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	4a0e      	ldr	r2, [pc, #56]	@ (8001e34 <HAL_MspInit+0x5c>)
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e00:	61d3      	str	r3, [r2, #28]
 8001e02:	4b0c      	ldr	r3, [pc, #48]	@ (8001e34 <HAL_MspInit+0x5c>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e0a:	607b      	str	r3, [r7, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e38 <HAL_MspInit+0x60>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	4a04      	ldr	r2, [pc, #16]	@ (8001e38 <HAL_MspInit+0x60>)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40010000 	.word	0x40010000

08001e3c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 0310 	add.w	r3, r7, #16
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a15      	ldr	r2, [pc, #84]	@ (8001eac <HAL_I2C_MspInit+0x70>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d123      	bne.n	8001ea4 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5c:	4b14      	ldr	r3, [pc, #80]	@ (8001eb0 <HAL_I2C_MspInit+0x74>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	4a13      	ldr	r2, [pc, #76]	@ (8001eb0 <HAL_I2C_MspInit+0x74>)
 8001e62:	f043 0308 	orr.w	r3, r3, #8
 8001e66:	6193      	str	r3, [r2, #24]
 8001e68:	4b11      	ldr	r3, [pc, #68]	@ (8001eb0 <HAL_I2C_MspInit+0x74>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e74:	23c0      	movs	r3, #192	@ 0xc0
 8001e76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e78:	2312      	movs	r3, #18
 8001e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e80:	f107 0310 	add.w	r3, r7, #16
 8001e84:	4619      	mov	r1, r3
 8001e86:	480b      	ldr	r0, [pc, #44]	@ (8001eb4 <HAL_I2C_MspInit+0x78>)
 8001e88:	f000 fc7e 	bl	8002788 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e8c:	4b08      	ldr	r3, [pc, #32]	@ (8001eb0 <HAL_I2C_MspInit+0x74>)
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	4a07      	ldr	r2, [pc, #28]	@ (8001eb0 <HAL_I2C_MspInit+0x74>)
 8001e92:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e96:	61d3      	str	r3, [r2, #28]
 8001e98:	4b05      	ldr	r3, [pc, #20]	@ (8001eb0 <HAL_I2C_MspInit+0x74>)
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ea4:	bf00      	nop
 8001ea6:	3720      	adds	r7, #32
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40005400 	.word	0x40005400
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40010c00 	.word	0x40010c00

08001eb8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ec8:	d10b      	bne.n	8001ee2 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eca:	4b08      	ldr	r3, [pc, #32]	@ (8001eec <HAL_TIM_Base_MspInit+0x34>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	4a07      	ldr	r2, [pc, #28]	@ (8001eec <HAL_TIM_Base_MspInit+0x34>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	61d3      	str	r3, [r2, #28]
 8001ed6:	4b05      	ldr	r3, [pc, #20]	@ (8001eec <HAL_TIM_Base_MspInit+0x34>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001ee2:	bf00      	nop
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	40021000 	.word	0x40021000

08001ef0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0310 	add.w	r3, r7, #16
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f0e:	d117      	bne.n	8001f40 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f10:	4b0d      	ldr	r3, [pc, #52]	@ (8001f48 <HAL_TIM_MspPostInit+0x58>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	4a0c      	ldr	r2, [pc, #48]	@ (8001f48 <HAL_TIM_MspPostInit+0x58>)
 8001f16:	f043 0304 	orr.w	r3, r3, #4
 8001f1a:	6193      	str	r3, [r2, #24]
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f48 <HAL_TIM_MspPostInit+0x58>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001f28:	230f      	movs	r3, #15
 8001f2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f30:	2302      	movs	r3, #2
 8001f32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f34:	f107 0310 	add.w	r3, r7, #16
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4804      	ldr	r0, [pc, #16]	@ (8001f4c <HAL_TIM_MspPostInit+0x5c>)
 8001f3c:	f000 fc24 	bl	8002788 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f40:	bf00      	nop
 8001f42:	3720      	adds	r7, #32
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40010800 	.word	0x40010800

08001f50 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	@ 0x28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 0318 	add.w	r3, r7, #24
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a40      	ldr	r2, [pc, #256]	@ (800206c <HAL_UART_MspInit+0x11c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d13a      	bne.n	8001fe6 <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f70:	4b3f      	ldr	r3, [pc, #252]	@ (8002070 <HAL_UART_MspInit+0x120>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	4a3e      	ldr	r2, [pc, #248]	@ (8002070 <HAL_UART_MspInit+0x120>)
 8001f76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f7a:	6193      	str	r3, [r2, #24]
 8001f7c:	4b3c      	ldr	r3, [pc, #240]	@ (8002070 <HAL_UART_MspInit+0x120>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f88:	4b39      	ldr	r3, [pc, #228]	@ (8002070 <HAL_UART_MspInit+0x120>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	4a38      	ldr	r2, [pc, #224]	@ (8002070 <HAL_UART_MspInit+0x120>)
 8001f8e:	f043 0304 	orr.w	r3, r3, #4
 8001f92:	6193      	str	r3, [r2, #24]
 8001f94:	4b36      	ldr	r3, [pc, #216]	@ (8002070 <HAL_UART_MspInit+0x120>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fa0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001faa:	2303      	movs	r3, #3
 8001fac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fae:	f107 0318 	add.w	r3, r7, #24
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	482f      	ldr	r0, [pc, #188]	@ (8002074 <HAL_UART_MspInit+0x124>)
 8001fb6:	f000 fbe7 	bl	8002788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc8:	f107 0318 	add.w	r3, r7, #24
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4829      	ldr	r0, [pc, #164]	@ (8002074 <HAL_UART_MspInit+0x124>)
 8001fd0:	f000 fbda 	bl	8002788 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	2025      	movs	r0, #37	@ 0x25
 8001fda:	f000 faec 	bl	80025b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fde:	2025      	movs	r0, #37	@ 0x25
 8001fe0:	f000 fb05 	bl	80025ee <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001fe4:	e03e      	b.n	8002064 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART3)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a23      	ldr	r2, [pc, #140]	@ (8002078 <HAL_UART_MspInit+0x128>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d139      	bne.n	8002064 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ff0:	4b1f      	ldr	r3, [pc, #124]	@ (8002070 <HAL_UART_MspInit+0x120>)
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	4a1e      	ldr	r2, [pc, #120]	@ (8002070 <HAL_UART_MspInit+0x120>)
 8001ff6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ffa:	61d3      	str	r3, [r2, #28]
 8001ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8002070 <HAL_UART_MspInit+0x120>)
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002008:	4b19      	ldr	r3, [pc, #100]	@ (8002070 <HAL_UART_MspInit+0x120>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	4a18      	ldr	r2, [pc, #96]	@ (8002070 <HAL_UART_MspInit+0x120>)
 800200e:	f043 0308 	orr.w	r3, r3, #8
 8002012:	6193      	str	r3, [r2, #24]
 8002014:	4b16      	ldr	r3, [pc, #88]	@ (8002070 <HAL_UART_MspInit+0x120>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	f003 0308 	and.w	r3, r3, #8
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002020:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800202a:	2303      	movs	r3, #3
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202e:	f107 0318 	add.w	r3, r7, #24
 8002032:	4619      	mov	r1, r3
 8002034:	4811      	ldr	r0, [pc, #68]	@ (800207c <HAL_UART_MspInit+0x12c>)
 8002036:	f000 fba7 	bl	8002788 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800203a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800203e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002048:	f107 0318 	add.w	r3, r7, #24
 800204c:	4619      	mov	r1, r3
 800204e:	480b      	ldr	r0, [pc, #44]	@ (800207c <HAL_UART_MspInit+0x12c>)
 8002050:	f000 fb9a 	bl	8002788 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002054:	2200      	movs	r2, #0
 8002056:	2100      	movs	r1, #0
 8002058:	2027      	movs	r0, #39	@ 0x27
 800205a:	f000 faac 	bl	80025b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800205e:	2027      	movs	r0, #39	@ 0x27
 8002060:	f000 fac5 	bl	80025ee <HAL_NVIC_EnableIRQ>
}
 8002064:	bf00      	nop
 8002066:	3728      	adds	r7, #40	@ 0x28
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40013800 	.word	0x40013800
 8002070:	40021000 	.word	0x40021000
 8002074:	40010800 	.word	0x40010800
 8002078:	40004800 	.word	0x40004800
 800207c:	40010c00 	.word	0x40010c00

08002080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002084:	bf00      	nop
 8002086:	e7fd      	b.n	8002084 <NMI_Handler+0x4>

08002088 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <HardFault_Handler+0x4>

08002090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002094:	bf00      	nop
 8002096:	e7fd      	b.n	8002094 <MemManage_Handler+0x4>

08002098 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800209c:	bf00      	nop
 800209e:	e7fd      	b.n	800209c <BusFault_Handler+0x4>

080020a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020a4:	bf00      	nop
 80020a6:	e7fd      	b.n	80020a4 <UsageFault_Handler+0x4>

080020a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr

080020b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr

080020c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	count_sys++;
 80020d0:	4b04      	ldr	r3, [pc, #16]	@ (80020e4 <SysTick_Handler+0x18>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	3301      	adds	r3, #1
 80020d6:	4a03      	ldr	r2, [pc, #12]	@ (80020e4 <SysTick_Handler+0x18>)
 80020d8:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020da:	f000 f955 	bl	8002388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000584 	.word	0x20000584

080020e8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80020ec:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80020f0:	f000 fd00 	bl	8002af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020f4:	bf00      	nop
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020fc:	4802      	ldr	r0, [pc, #8]	@ (8002108 <USART1_IRQHandler+0x10>)
 80020fe:	f002 fdb9 	bl	8004c74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	2000033c 	.word	0x2000033c

0800210c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002110:	4802      	ldr	r0, [pc, #8]	@ (800211c <USART3_IRQHandler+0x10>)
 8002112:	f002 fdaf 	bl	8004c74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000384 	.word	0x20000384

08002120 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
	return 1;
 8002124:	2301      	movs	r3, #1
}
 8002126:	4618      	mov	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr

0800212e <_kill>:

int _kill(int pid, int sig)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002138:	f004 f8f2 	bl	8006320 <__errno>
 800213c:	4603      	mov	r3, r0
 800213e:	2216      	movs	r2, #22
 8002140:	601a      	str	r2, [r3, #0]
	return -1;
 8002142:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <_exit>:

void _exit (int status)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002156:	f04f 31ff 	mov.w	r1, #4294967295
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff ffe7 	bl	800212e <_kill>
	while (1) {}		/* Make sure we hang here */
 8002160:	bf00      	nop
 8002162:	e7fd      	b.n	8002160 <_exit+0x12>

08002164 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	e00a      	b.n	800218c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002176:	f3af 8000 	nop.w
 800217a:	4601      	mov	r1, r0
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	60ba      	str	r2, [r7, #8]
 8002182:	b2ca      	uxtb	r2, r1
 8002184:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	3301      	adds	r3, #1
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	429a      	cmp	r2, r3
 8002192:	dbf0      	blt.n	8002176 <_read+0x12>
	}

return len;
 8002194:	687b      	ldr	r3, [r7, #4]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b086      	sub	sp, #24
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	e009      	b.n	80021c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	60ba      	str	r2, [r7, #8]
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	3301      	adds	r3, #1
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	dbf1      	blt.n	80021b0 <_write+0x12>
	}
	return len;
 80021cc:	687b      	ldr	r3, [r7, #4]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <_close>:

int _close(int file)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
	return -1;
 80021de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr

080021ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021fc:	605a      	str	r2, [r3, #4]
	return 0;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr

0800220a <_isatty>:

int _isatty(int file)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
	return 1;
 8002212:	2301      	movs	r3, #1
}
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr

0800221e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800221e:	b480      	push	{r7}
 8002220:	b085      	sub	sp, #20
 8002222:	af00      	add	r7, sp, #0
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
	return 0;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr
	...

08002238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002240:	4a14      	ldr	r2, [pc, #80]	@ (8002294 <_sbrk+0x5c>)
 8002242:	4b15      	ldr	r3, [pc, #84]	@ (8002298 <_sbrk+0x60>)
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800224c:	4b13      	ldr	r3, [pc, #76]	@ (800229c <_sbrk+0x64>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d102      	bne.n	800225a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002254:	4b11      	ldr	r3, [pc, #68]	@ (800229c <_sbrk+0x64>)
 8002256:	4a12      	ldr	r2, [pc, #72]	@ (80022a0 <_sbrk+0x68>)
 8002258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800225a:	4b10      	ldr	r3, [pc, #64]	@ (800229c <_sbrk+0x64>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4413      	add	r3, r2
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	429a      	cmp	r2, r3
 8002266:	d207      	bcs.n	8002278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002268:	f004 f85a 	bl	8006320 <__errno>
 800226c:	4603      	mov	r3, r0
 800226e:	220c      	movs	r2, #12
 8002270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002272:	f04f 33ff 	mov.w	r3, #4294967295
 8002276:	e009      	b.n	800228c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002278:	4b08      	ldr	r3, [pc, #32]	@ (800229c <_sbrk+0x64>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800227e:	4b07      	ldr	r3, [pc, #28]	@ (800229c <_sbrk+0x64>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	4a05      	ldr	r2, [pc, #20]	@ (800229c <_sbrk+0x64>)
 8002288:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800228a:	68fb      	ldr	r3, [r7, #12]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20005000 	.word	0x20005000
 8002298:	00000400 	.word	0x00000400
 800229c:	20000588 	.word	0x20000588
 80022a0:	200006e0 	.word	0x200006e0

080022a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr

080022b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022b0:	f7ff fff8 	bl	80022a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022b4:	480b      	ldr	r0, [pc, #44]	@ (80022e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80022b6:	490c      	ldr	r1, [pc, #48]	@ (80022e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022b8:	4a0c      	ldr	r2, [pc, #48]	@ (80022ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80022ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022bc:	e002      	b.n	80022c4 <LoopCopyDataInit>

080022be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022c2:	3304      	adds	r3, #4

080022c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022c8:	d3f9      	bcc.n	80022be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ca:	4a09      	ldr	r2, [pc, #36]	@ (80022f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022cc:	4c09      	ldr	r4, [pc, #36]	@ (80022f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022d0:	e001      	b.n	80022d6 <LoopFillZerobss>

080022d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022d4:	3204      	adds	r2, #4

080022d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022d8:	d3fb      	bcc.n	80022d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022da:	f004 f827 	bl	800632c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022de:	f7fe ff0d 	bl	80010fc <main>
  bx lr
 80022e2:	4770      	bx	lr
  ldr r0, =_sdata
 80022e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80022ec:	08008f74 	.word	0x08008f74
  ldr r2, =_sbss
 80022f0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80022f4:	200006dc 	.word	0x200006dc

080022f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022f8:	e7fe      	b.n	80022f8 <ADC1_2_IRQHandler>
	...

080022fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002300:	4b08      	ldr	r3, [pc, #32]	@ (8002324 <HAL_Init+0x28>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a07      	ldr	r2, [pc, #28]	@ (8002324 <HAL_Init+0x28>)
 8002306:	f043 0310 	orr.w	r3, r3, #16
 800230a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800230c:	2003      	movs	r0, #3
 800230e:	f000 f947 	bl	80025a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002312:	200f      	movs	r0, #15
 8002314:	f000 f808 	bl	8002328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002318:	f7ff fd5e 	bl	8001dd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40022000 	.word	0x40022000

08002328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002330:	4b12      	ldr	r3, [pc, #72]	@ (800237c <HAL_InitTick+0x54>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b12      	ldr	r3, [pc, #72]	@ (8002380 <HAL_InitTick+0x58>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	4619      	mov	r1, r3
 800233a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800233e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002342:	fbb2 f3f3 	udiv	r3, r2, r3
 8002346:	4618      	mov	r0, r3
 8002348:	f000 f95f 	bl	800260a <HAL_SYSTICK_Config>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e00e      	b.n	8002374 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b0f      	cmp	r3, #15
 800235a:	d80a      	bhi.n	8002372 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800235c:	2200      	movs	r2, #0
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	f04f 30ff 	mov.w	r0, #4294967295
 8002364:	f000 f927 	bl	80025b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002368:	4a06      	ldr	r2, [pc, #24]	@ (8002384 <HAL_InitTick+0x5c>)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	e000      	b.n	8002374 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
}
 8002374:	4618      	mov	r0, r3
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20000008 	.word	0x20000008
 8002380:	20000010 	.word	0x20000010
 8002384:	2000000c 	.word	0x2000000c

08002388 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800238c:	4b05      	ldr	r3, [pc, #20]	@ (80023a4 <HAL_IncTick+0x1c>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	461a      	mov	r2, r3
 8002392:	4b05      	ldr	r3, [pc, #20]	@ (80023a8 <HAL_IncTick+0x20>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4413      	add	r3, r2
 8002398:	4a03      	ldr	r2, [pc, #12]	@ (80023a8 <HAL_IncTick+0x20>)
 800239a:	6013      	str	r3, [r2, #0]
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr
 80023a4:	20000010 	.word	0x20000010
 80023a8:	2000058c 	.word	0x2000058c

080023ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return uwTick;
 80023b0:	4b02      	ldr	r3, [pc, #8]	@ (80023bc <HAL_GetTick+0x10>)
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	2000058c 	.word	0x2000058c

080023c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023c8:	f7ff fff0 	bl	80023ac <HAL_GetTick>
 80023cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d8:	d005      	beq.n	80023e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023da:	4b0a      	ldr	r3, [pc, #40]	@ (8002404 <HAL_Delay+0x44>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4413      	add	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023e6:	bf00      	nop
 80023e8:	f7ff ffe0 	bl	80023ac <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d8f7      	bhi.n	80023e8 <HAL_Delay+0x28>
  {
  }
}
 80023f8:	bf00      	nop
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000010 	.word	0x20000010

08002408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002418:	4b0c      	ldr	r3, [pc, #48]	@ (800244c <__NVIC_SetPriorityGrouping+0x44>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002424:	4013      	ands	r3, r2
 8002426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002430:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002434:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800243a:	4a04      	ldr	r2, [pc, #16]	@ (800244c <__NVIC_SetPriorityGrouping+0x44>)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	60d3      	str	r3, [r2, #12]
}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002454:	4b04      	ldr	r3, [pc, #16]	@ (8002468 <__NVIC_GetPriorityGrouping+0x18>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	0a1b      	lsrs	r3, r3, #8
 800245a:	f003 0307 	and.w	r3, r3, #7
}
 800245e:	4618      	mov	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247a:	2b00      	cmp	r3, #0
 800247c:	db0b      	blt.n	8002496 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	f003 021f 	and.w	r2, r3, #31
 8002484:	4906      	ldr	r1, [pc, #24]	@ (80024a0 <__NVIC_EnableIRQ+0x34>)
 8002486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248a:	095b      	lsrs	r3, r3, #5
 800248c:	2001      	movs	r0, #1
 800248e:	fa00 f202 	lsl.w	r2, r0, r2
 8002492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr
 80024a0:	e000e100 	.word	0xe000e100

080024a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	6039      	str	r1, [r7, #0]
 80024ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	db0a      	blt.n	80024ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	490c      	ldr	r1, [pc, #48]	@ (80024f0 <__NVIC_SetPriority+0x4c>)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	0112      	lsls	r2, r2, #4
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	440b      	add	r3, r1
 80024c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024cc:	e00a      	b.n	80024e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	4908      	ldr	r1, [pc, #32]	@ (80024f4 <__NVIC_SetPriority+0x50>)
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	3b04      	subs	r3, #4
 80024dc:	0112      	lsls	r2, r2, #4
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	440b      	add	r3, r1
 80024e2:	761a      	strb	r2, [r3, #24]
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	e000e100 	.word	0xe000e100
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b089      	sub	sp, #36	@ 0x24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f1c3 0307 	rsb	r3, r3, #7
 8002512:	2b04      	cmp	r3, #4
 8002514:	bf28      	it	cs
 8002516:	2304      	movcs	r3, #4
 8002518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3304      	adds	r3, #4
 800251e:	2b06      	cmp	r3, #6
 8002520:	d902      	bls.n	8002528 <NVIC_EncodePriority+0x30>
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3b03      	subs	r3, #3
 8002526:	e000      	b.n	800252a <NVIC_EncodePriority+0x32>
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800252c:	f04f 32ff 	mov.w	r2, #4294967295
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43da      	mvns	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	401a      	ands	r2, r3
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002540:	f04f 31ff 	mov.w	r1, #4294967295
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	fa01 f303 	lsl.w	r3, r1, r3
 800254a:	43d9      	mvns	r1, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002550:	4313      	orrs	r3, r2
         );
}
 8002552:	4618      	mov	r0, r3
 8002554:	3724      	adds	r7, #36	@ 0x24
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr

0800255c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3b01      	subs	r3, #1
 8002568:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800256c:	d301      	bcc.n	8002572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800256e:	2301      	movs	r3, #1
 8002570:	e00f      	b.n	8002592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002572:	4a0a      	ldr	r2, [pc, #40]	@ (800259c <SysTick_Config+0x40>)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3b01      	subs	r3, #1
 8002578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800257a:	210f      	movs	r1, #15
 800257c:	f04f 30ff 	mov.w	r0, #4294967295
 8002580:	f7ff ff90 	bl	80024a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002584:	4b05      	ldr	r3, [pc, #20]	@ (800259c <SysTick_Config+0x40>)
 8002586:	2200      	movs	r2, #0
 8002588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800258a:	4b04      	ldr	r3, [pc, #16]	@ (800259c <SysTick_Config+0x40>)
 800258c:	2207      	movs	r2, #7
 800258e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	e000e010 	.word	0xe000e010

080025a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff ff2d 	bl	8002408 <__NVIC_SetPriorityGrouping>
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b086      	sub	sp, #24
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	4603      	mov	r3, r0
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	607a      	str	r2, [r7, #4]
 80025c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025c8:	f7ff ff42 	bl	8002450 <__NVIC_GetPriorityGrouping>
 80025cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68b9      	ldr	r1, [r7, #8]
 80025d2:	6978      	ldr	r0, [r7, #20]
 80025d4:	f7ff ff90 	bl	80024f8 <NVIC_EncodePriority>
 80025d8:	4602      	mov	r2, r0
 80025da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025de:	4611      	mov	r1, r2
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff ff5f 	bl	80024a4 <__NVIC_SetPriority>
}
 80025e6:	bf00      	nop
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b082      	sub	sp, #8
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	4603      	mov	r3, r0
 80025f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff ff35 	bl	800246c <__NVIC_EnableIRQ>
}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7ff ffa2 	bl	800255c <SysTick_Config>
 8002618:	4603      	mov	r3, r0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002622:	b480      	push	{r7}
 8002624:	b085      	sub	sp, #20
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d008      	beq.n	800264c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2204      	movs	r2, #4
 800263e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e020      	b.n	800268e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 020e 	bic.w	r2, r2, #14
 800265a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0201 	bic.w	r2, r2, #1
 800266a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002674:	2101      	movs	r1, #1
 8002676:	fa01 f202 	lsl.w	r2, r1, r2
 800267a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800268c:	7bfb      	ldrb	r3, [r7, #15]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr

08002698 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d005      	beq.n	80026bc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2204      	movs	r2, #4
 80026b4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	73fb      	strb	r3, [r7, #15]
 80026ba:	e051      	b.n	8002760 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 020e 	bic.w	r2, r2, #14
 80026ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0201 	bic.w	r2, r2, #1
 80026da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a22      	ldr	r2, [pc, #136]	@ (800276c <HAL_DMA_Abort_IT+0xd4>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d029      	beq.n	800273a <HAL_DMA_Abort_IT+0xa2>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a21      	ldr	r2, [pc, #132]	@ (8002770 <HAL_DMA_Abort_IT+0xd8>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d022      	beq.n	8002736 <HAL_DMA_Abort_IT+0x9e>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002774 <HAL_DMA_Abort_IT+0xdc>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d01a      	beq.n	8002730 <HAL_DMA_Abort_IT+0x98>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002778 <HAL_DMA_Abort_IT+0xe0>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d012      	beq.n	800272a <HAL_DMA_Abort_IT+0x92>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a1c      	ldr	r2, [pc, #112]	@ (800277c <HAL_DMA_Abort_IT+0xe4>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00a      	beq.n	8002724 <HAL_DMA_Abort_IT+0x8c>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a1b      	ldr	r2, [pc, #108]	@ (8002780 <HAL_DMA_Abort_IT+0xe8>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d102      	bne.n	800271e <HAL_DMA_Abort_IT+0x86>
 8002718:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800271c:	e00e      	b.n	800273c <HAL_DMA_Abort_IT+0xa4>
 800271e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002722:	e00b      	b.n	800273c <HAL_DMA_Abort_IT+0xa4>
 8002724:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002728:	e008      	b.n	800273c <HAL_DMA_Abort_IT+0xa4>
 800272a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800272e:	e005      	b.n	800273c <HAL_DMA_Abort_IT+0xa4>
 8002730:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002734:	e002      	b.n	800273c <HAL_DMA_Abort_IT+0xa4>
 8002736:	2310      	movs	r3, #16
 8002738:	e000      	b.n	800273c <HAL_DMA_Abort_IT+0xa4>
 800273a:	2301      	movs	r3, #1
 800273c:	4a11      	ldr	r2, [pc, #68]	@ (8002784 <HAL_DMA_Abort_IT+0xec>)
 800273e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	4798      	blx	r3
    } 
  }
  return status;
 8002760:	7bfb      	ldrb	r3, [r7, #15]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40020008 	.word	0x40020008
 8002770:	4002001c 	.word	0x4002001c
 8002774:	40020030 	.word	0x40020030
 8002778:	40020044 	.word	0x40020044
 800277c:	40020058 	.word	0x40020058
 8002780:	4002006c 	.word	0x4002006c
 8002784:	40020000 	.word	0x40020000

08002788 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002788:	b480      	push	{r7}
 800278a:	b08b      	sub	sp, #44	@ 0x2c
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002792:	2300      	movs	r3, #0
 8002794:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002796:	2300      	movs	r3, #0
 8002798:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800279a:	e169      	b.n	8002a70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800279c:	2201      	movs	r2, #1
 800279e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	69fa      	ldr	r2, [r7, #28]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	f040 8158 	bne.w	8002a6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	4a9a      	ldr	r2, [pc, #616]	@ (8002a28 <HAL_GPIO_Init+0x2a0>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d05e      	beq.n	8002882 <HAL_GPIO_Init+0xfa>
 80027c4:	4a98      	ldr	r2, [pc, #608]	@ (8002a28 <HAL_GPIO_Init+0x2a0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d875      	bhi.n	80028b6 <HAL_GPIO_Init+0x12e>
 80027ca:	4a98      	ldr	r2, [pc, #608]	@ (8002a2c <HAL_GPIO_Init+0x2a4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d058      	beq.n	8002882 <HAL_GPIO_Init+0xfa>
 80027d0:	4a96      	ldr	r2, [pc, #600]	@ (8002a2c <HAL_GPIO_Init+0x2a4>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d86f      	bhi.n	80028b6 <HAL_GPIO_Init+0x12e>
 80027d6:	4a96      	ldr	r2, [pc, #600]	@ (8002a30 <HAL_GPIO_Init+0x2a8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d052      	beq.n	8002882 <HAL_GPIO_Init+0xfa>
 80027dc:	4a94      	ldr	r2, [pc, #592]	@ (8002a30 <HAL_GPIO_Init+0x2a8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d869      	bhi.n	80028b6 <HAL_GPIO_Init+0x12e>
 80027e2:	4a94      	ldr	r2, [pc, #592]	@ (8002a34 <HAL_GPIO_Init+0x2ac>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d04c      	beq.n	8002882 <HAL_GPIO_Init+0xfa>
 80027e8:	4a92      	ldr	r2, [pc, #584]	@ (8002a34 <HAL_GPIO_Init+0x2ac>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d863      	bhi.n	80028b6 <HAL_GPIO_Init+0x12e>
 80027ee:	4a92      	ldr	r2, [pc, #584]	@ (8002a38 <HAL_GPIO_Init+0x2b0>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d046      	beq.n	8002882 <HAL_GPIO_Init+0xfa>
 80027f4:	4a90      	ldr	r2, [pc, #576]	@ (8002a38 <HAL_GPIO_Init+0x2b0>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d85d      	bhi.n	80028b6 <HAL_GPIO_Init+0x12e>
 80027fa:	2b12      	cmp	r3, #18
 80027fc:	d82a      	bhi.n	8002854 <HAL_GPIO_Init+0xcc>
 80027fe:	2b12      	cmp	r3, #18
 8002800:	d859      	bhi.n	80028b6 <HAL_GPIO_Init+0x12e>
 8002802:	a201      	add	r2, pc, #4	@ (adr r2, 8002808 <HAL_GPIO_Init+0x80>)
 8002804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002808:	08002883 	.word	0x08002883
 800280c:	0800285d 	.word	0x0800285d
 8002810:	0800286f 	.word	0x0800286f
 8002814:	080028b1 	.word	0x080028b1
 8002818:	080028b7 	.word	0x080028b7
 800281c:	080028b7 	.word	0x080028b7
 8002820:	080028b7 	.word	0x080028b7
 8002824:	080028b7 	.word	0x080028b7
 8002828:	080028b7 	.word	0x080028b7
 800282c:	080028b7 	.word	0x080028b7
 8002830:	080028b7 	.word	0x080028b7
 8002834:	080028b7 	.word	0x080028b7
 8002838:	080028b7 	.word	0x080028b7
 800283c:	080028b7 	.word	0x080028b7
 8002840:	080028b7 	.word	0x080028b7
 8002844:	080028b7 	.word	0x080028b7
 8002848:	080028b7 	.word	0x080028b7
 800284c:	08002865 	.word	0x08002865
 8002850:	08002879 	.word	0x08002879
 8002854:	4a79      	ldr	r2, [pc, #484]	@ (8002a3c <HAL_GPIO_Init+0x2b4>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d013      	beq.n	8002882 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800285a:	e02c      	b.n	80028b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	623b      	str	r3, [r7, #32]
          break;
 8002862:	e029      	b.n	80028b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	3304      	adds	r3, #4
 800286a:	623b      	str	r3, [r7, #32]
          break;
 800286c:	e024      	b.n	80028b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	3308      	adds	r3, #8
 8002874:	623b      	str	r3, [r7, #32]
          break;
 8002876:	e01f      	b.n	80028b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	330c      	adds	r3, #12
 800287e:	623b      	str	r3, [r7, #32]
          break;
 8002880:	e01a      	b.n	80028b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d102      	bne.n	8002890 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800288a:	2304      	movs	r3, #4
 800288c:	623b      	str	r3, [r7, #32]
          break;
 800288e:	e013      	b.n	80028b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d105      	bne.n	80028a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002898:	2308      	movs	r3, #8
 800289a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69fa      	ldr	r2, [r7, #28]
 80028a0:	611a      	str	r2, [r3, #16]
          break;
 80028a2:	e009      	b.n	80028b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028a4:	2308      	movs	r3, #8
 80028a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69fa      	ldr	r2, [r7, #28]
 80028ac:	615a      	str	r2, [r3, #20]
          break;
 80028ae:	e003      	b.n	80028b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028b0:	2300      	movs	r3, #0
 80028b2:	623b      	str	r3, [r7, #32]
          break;
 80028b4:	e000      	b.n	80028b8 <HAL_GPIO_Init+0x130>
          break;
 80028b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	2bff      	cmp	r3, #255	@ 0xff
 80028bc:	d801      	bhi.n	80028c2 <HAL_GPIO_Init+0x13a>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	e001      	b.n	80028c6 <HAL_GPIO_Init+0x13e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3304      	adds	r3, #4
 80028c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	2bff      	cmp	r3, #255	@ 0xff
 80028cc:	d802      	bhi.n	80028d4 <HAL_GPIO_Init+0x14c>
 80028ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	e002      	b.n	80028da <HAL_GPIO_Init+0x152>
 80028d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d6:	3b08      	subs	r3, #8
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	210f      	movs	r1, #15
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	fa01 f303 	lsl.w	r3, r1, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	401a      	ands	r2, r3
 80028ec:	6a39      	ldr	r1, [r7, #32]
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	fa01 f303 	lsl.w	r3, r1, r3
 80028f4:	431a      	orrs	r2, r3
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 80b1 	beq.w	8002a6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002908:	4b4d      	ldr	r3, [pc, #308]	@ (8002a40 <HAL_GPIO_Init+0x2b8>)
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	4a4c      	ldr	r2, [pc, #304]	@ (8002a40 <HAL_GPIO_Init+0x2b8>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	6193      	str	r3, [r2, #24]
 8002914:	4b4a      	ldr	r3, [pc, #296]	@ (8002a40 <HAL_GPIO_Init+0x2b8>)
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002920:	4a48      	ldr	r2, [pc, #288]	@ (8002a44 <HAL_GPIO_Init+0x2bc>)
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	089b      	lsrs	r3, r3, #2
 8002926:	3302      	adds	r3, #2
 8002928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800292c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800292e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	220f      	movs	r2, #15
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4013      	ands	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a40      	ldr	r2, [pc, #256]	@ (8002a48 <HAL_GPIO_Init+0x2c0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d013      	beq.n	8002974 <HAL_GPIO_Init+0x1ec>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a3f      	ldr	r2, [pc, #252]	@ (8002a4c <HAL_GPIO_Init+0x2c4>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d00d      	beq.n	8002970 <HAL_GPIO_Init+0x1e8>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a3e      	ldr	r2, [pc, #248]	@ (8002a50 <HAL_GPIO_Init+0x2c8>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d007      	beq.n	800296c <HAL_GPIO_Init+0x1e4>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a3d      	ldr	r2, [pc, #244]	@ (8002a54 <HAL_GPIO_Init+0x2cc>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d101      	bne.n	8002968 <HAL_GPIO_Init+0x1e0>
 8002964:	2303      	movs	r3, #3
 8002966:	e006      	b.n	8002976 <HAL_GPIO_Init+0x1ee>
 8002968:	2304      	movs	r3, #4
 800296a:	e004      	b.n	8002976 <HAL_GPIO_Init+0x1ee>
 800296c:	2302      	movs	r3, #2
 800296e:	e002      	b.n	8002976 <HAL_GPIO_Init+0x1ee>
 8002970:	2301      	movs	r3, #1
 8002972:	e000      	b.n	8002976 <HAL_GPIO_Init+0x1ee>
 8002974:	2300      	movs	r3, #0
 8002976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002978:	f002 0203 	and.w	r2, r2, #3
 800297c:	0092      	lsls	r2, r2, #2
 800297e:	4093      	lsls	r3, r2
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002986:	492f      	ldr	r1, [pc, #188]	@ (8002a44 <HAL_GPIO_Init+0x2bc>)
 8002988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298a:	089b      	lsrs	r3, r3, #2
 800298c:	3302      	adds	r3, #2
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d006      	beq.n	80029ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002a58 <HAL_GPIO_Init+0x2d0>)
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	492c      	ldr	r1, [pc, #176]	@ (8002a58 <HAL_GPIO_Init+0x2d0>)
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	608b      	str	r3, [r1, #8]
 80029ac:	e006      	b.n	80029bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002a58 <HAL_GPIO_Init+0x2d0>)
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	43db      	mvns	r3, r3
 80029b6:	4928      	ldr	r1, [pc, #160]	@ (8002a58 <HAL_GPIO_Init+0x2d0>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d006      	beq.n	80029d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029c8:	4b23      	ldr	r3, [pc, #140]	@ (8002a58 <HAL_GPIO_Init+0x2d0>)
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	4922      	ldr	r1, [pc, #136]	@ (8002a58 <HAL_GPIO_Init+0x2d0>)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	60cb      	str	r3, [r1, #12]
 80029d4:	e006      	b.n	80029e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029d6:	4b20      	ldr	r3, [pc, #128]	@ (8002a58 <HAL_GPIO_Init+0x2d0>)
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	43db      	mvns	r3, r3
 80029de:	491e      	ldr	r1, [pc, #120]	@ (8002a58 <HAL_GPIO_Init+0x2d0>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d006      	beq.n	80029fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029f0:	4b19      	ldr	r3, [pc, #100]	@ (8002a58 <HAL_GPIO_Init+0x2d0>)
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	4918      	ldr	r1, [pc, #96]	@ (8002a58 <HAL_GPIO_Init+0x2d0>)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	604b      	str	r3, [r1, #4]
 80029fc:	e006      	b.n	8002a0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029fe:	4b16      	ldr	r3, [pc, #88]	@ (8002a58 <HAL_GPIO_Init+0x2d0>)
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	43db      	mvns	r3, r3
 8002a06:	4914      	ldr	r1, [pc, #80]	@ (8002a58 <HAL_GPIO_Init+0x2d0>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d021      	beq.n	8002a5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a18:	4b0f      	ldr	r3, [pc, #60]	@ (8002a58 <HAL_GPIO_Init+0x2d0>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	490e      	ldr	r1, [pc, #56]	@ (8002a58 <HAL_GPIO_Init+0x2d0>)
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	600b      	str	r3, [r1, #0]
 8002a24:	e021      	b.n	8002a6a <HAL_GPIO_Init+0x2e2>
 8002a26:	bf00      	nop
 8002a28:	10320000 	.word	0x10320000
 8002a2c:	10310000 	.word	0x10310000
 8002a30:	10220000 	.word	0x10220000
 8002a34:	10210000 	.word	0x10210000
 8002a38:	10120000 	.word	0x10120000
 8002a3c:	10110000 	.word	0x10110000
 8002a40:	40021000 	.word	0x40021000
 8002a44:	40010000 	.word	0x40010000
 8002a48:	40010800 	.word	0x40010800
 8002a4c:	40010c00 	.word	0x40010c00
 8002a50:	40011000 	.word	0x40011000
 8002a54:	40011400 	.word	0x40011400
 8002a58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a8c <HAL_GPIO_Init+0x304>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	43db      	mvns	r3, r3
 8002a64:	4909      	ldr	r1, [pc, #36]	@ (8002a8c <HAL_GPIO_Init+0x304>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a76:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f47f ae8e 	bne.w	800279c <HAL_GPIO_Init+0x14>
  }
}
 8002a80:	bf00      	nop
 8002a82:	bf00      	nop
 8002a84:	372c      	adds	r7, #44	@ 0x2c
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr
 8002a8c:	40010400 	.word	0x40010400

08002a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	807b      	strh	r3, [r7, #2]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002aa0:	787b      	ldrb	r3, [r7, #1]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aa6:	887a      	ldrh	r2, [r7, #2]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002aac:	e003      	b.n	8002ab6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002aae:	887b      	ldrh	r3, [r7, #2]
 8002ab0:	041a      	lsls	r2, r3, #16
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	611a      	str	r2, [r3, #16]
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ad2:	887a      	ldrh	r2, [r7, #2]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	041a      	lsls	r2, r3, #16
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	43d9      	mvns	r1, r3
 8002ade:	887b      	ldrh	r3, [r7, #2]
 8002ae0:	400b      	ands	r3, r1
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	611a      	str	r2, [r3, #16]
}
 8002ae8:	bf00      	nop
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bc80      	pop	{r7}
 8002af0:	4770      	bx	lr
	...

08002af4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002afe:	4b08      	ldr	r3, [pc, #32]	@ (8002b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b00:	695a      	ldr	r2, [r3, #20]
 8002b02:	88fb      	ldrh	r3, [r7, #6]
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d006      	beq.n	8002b18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b0a:	4a05      	ldr	r2, [pc, #20]	@ (8002b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b0c:	88fb      	ldrh	r3, [r7, #6]
 8002b0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b10:	88fb      	ldrh	r3, [r7, #6]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fe fe76 	bl	8001804 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b18:	bf00      	nop
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40010400 	.word	0x40010400

08002b24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e12b      	b.n	8002d8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d106      	bne.n	8002b50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7ff f976 	bl	8001e3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2224      	movs	r2, #36	@ 0x24
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0201 	bic.w	r2, r2, #1
 8002b66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b88:	f001 f960 	bl	8003e4c <HAL_RCC_GetPCLK1Freq>
 8002b8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	4a81      	ldr	r2, [pc, #516]	@ (8002d98 <HAL_I2C_Init+0x274>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d807      	bhi.n	8002ba8 <HAL_I2C_Init+0x84>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4a80      	ldr	r2, [pc, #512]	@ (8002d9c <HAL_I2C_Init+0x278>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	bf94      	ite	ls
 8002ba0:	2301      	movls	r3, #1
 8002ba2:	2300      	movhi	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	e006      	b.n	8002bb6 <HAL_I2C_Init+0x92>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4a7d      	ldr	r2, [pc, #500]	@ (8002da0 <HAL_I2C_Init+0x27c>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	bf94      	ite	ls
 8002bb0:	2301      	movls	r3, #1
 8002bb2:	2300      	movhi	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e0e7      	b.n	8002d8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	4a78      	ldr	r2, [pc, #480]	@ (8002da4 <HAL_I2C_Init+0x280>)
 8002bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc6:	0c9b      	lsrs	r3, r3, #18
 8002bc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	4a6a      	ldr	r2, [pc, #424]	@ (8002d98 <HAL_I2C_Init+0x274>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d802      	bhi.n	8002bf8 <HAL_I2C_Init+0xd4>
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	e009      	b.n	8002c0c <HAL_I2C_Init+0xe8>
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002bfe:	fb02 f303 	mul.w	r3, r2, r3
 8002c02:	4a69      	ldr	r2, [pc, #420]	@ (8002da8 <HAL_I2C_Init+0x284>)
 8002c04:	fba2 2303 	umull	r2, r3, r2, r3
 8002c08:	099b      	lsrs	r3, r3, #6
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	430b      	orrs	r3, r1
 8002c12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c1e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	495c      	ldr	r1, [pc, #368]	@ (8002d98 <HAL_I2C_Init+0x274>)
 8002c28:	428b      	cmp	r3, r1
 8002c2a:	d819      	bhi.n	8002c60 <HAL_I2C_Init+0x13c>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	1e59      	subs	r1, r3, #1
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c3a:	1c59      	adds	r1, r3, #1
 8002c3c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c40:	400b      	ands	r3, r1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <HAL_I2C_Init+0x138>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1e59      	subs	r1, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c54:	3301      	adds	r3, #1
 8002c56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c5a:	e051      	b.n	8002d00 <HAL_I2C_Init+0x1dc>
 8002c5c:	2304      	movs	r3, #4
 8002c5e:	e04f      	b.n	8002d00 <HAL_I2C_Init+0x1dc>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d111      	bne.n	8002c8c <HAL_I2C_Init+0x168>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	1e58      	subs	r0, r3, #1
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6859      	ldr	r1, [r3, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	440b      	add	r3, r1
 8002c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	bf0c      	ite	eq
 8002c84:	2301      	moveq	r3, #1
 8002c86:	2300      	movne	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	e012      	b.n	8002cb2 <HAL_I2C_Init+0x18e>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	1e58      	subs	r0, r3, #1
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6859      	ldr	r1, [r3, #4]
 8002c94:	460b      	mov	r3, r1
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	0099      	lsls	r1, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	bf0c      	ite	eq
 8002cac:	2301      	moveq	r3, #1
 8002cae:	2300      	movne	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_I2C_Init+0x196>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e022      	b.n	8002d00 <HAL_I2C_Init+0x1dc>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10e      	bne.n	8002ce0 <HAL_I2C_Init+0x1bc>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1e58      	subs	r0, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6859      	ldr	r1, [r3, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	440b      	add	r3, r1
 8002cd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cde:	e00f      	b.n	8002d00 <HAL_I2C_Init+0x1dc>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	1e58      	subs	r0, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6859      	ldr	r1, [r3, #4]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	0099      	lsls	r1, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cfc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	6809      	ldr	r1, [r1, #0]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6911      	ldr	r1, [r2, #16]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	68d2      	ldr	r2, [r2, #12]
 8002d3a:	4311      	orrs	r1, r2
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	430b      	orrs	r3, r1
 8002d42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695a      	ldr	r2, [r3, #20]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	000186a0 	.word	0x000186a0
 8002d9c:	001e847f 	.word	0x001e847f
 8002da0:	003d08ff 	.word	0x003d08ff
 8002da4:	431bde83 	.word	0x431bde83
 8002da8:	10624dd3 	.word	0x10624dd3

08002dac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	607a      	str	r2, [r7, #4]
 8002db6:	461a      	mov	r2, r3
 8002db8:	460b      	mov	r3, r1
 8002dba:	817b      	strh	r3, [r7, #10]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dc0:	f7ff faf4 	bl	80023ac <HAL_GetTick>
 8002dc4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b20      	cmp	r3, #32
 8002dd0:	f040 80e0 	bne.w	8002f94 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	2319      	movs	r3, #25
 8002dda:	2201      	movs	r2, #1
 8002ddc:	4970      	ldr	r1, [pc, #448]	@ (8002fa0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 fa92 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002dea:	2302      	movs	r3, #2
 8002dec:	e0d3      	b.n	8002f96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d101      	bne.n	8002dfc <HAL_I2C_Master_Transmit+0x50>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e0cc      	b.n	8002f96 <HAL_I2C_Master_Transmit+0x1ea>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d007      	beq.n	8002e22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f042 0201 	orr.w	r2, r2, #1
 8002e20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2221      	movs	r2, #33	@ 0x21
 8002e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2210      	movs	r2, #16
 8002e3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	893a      	ldrh	r2, [r7, #8]
 8002e52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4a50      	ldr	r2, [pc, #320]	@ (8002fa4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e62:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e64:	8979      	ldrh	r1, [r7, #10]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	6a3a      	ldr	r2, [r7, #32]
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 f9ca 	bl	8003204 <I2C_MasterRequestWrite>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e08d      	b.n	8002f96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e90:	e066      	b.n	8002f60 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	6a39      	ldr	r1, [r7, #32]
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 fb50 	bl	800353c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00d      	beq.n	8002ebe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d107      	bne.n	8002eba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e06b      	b.n	8002f96 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec2:	781a      	ldrb	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	d11b      	bne.n	8002f34 <HAL_I2C_Master_Transmit+0x188>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d017      	beq.n	8002f34 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f08:	781a      	ldrb	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	6a39      	ldr	r1, [r7, #32]
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 fb47 	bl	80035cc <I2C_WaitOnBTFFlagUntilTimeout>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00d      	beq.n	8002f60 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	d107      	bne.n	8002f5c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f5a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e01a      	b.n	8002f96 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d194      	bne.n	8002e92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	e000      	b.n	8002f96 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f94:	2302      	movs	r3, #2
  }
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	00100002 	.word	0x00100002
 8002fa4:	ffff0000 	.word	0xffff0000

08002fa8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08a      	sub	sp, #40	@ 0x28
 8002fac:	af02      	add	r7, sp, #8
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	607a      	str	r2, [r7, #4]
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002fb8:	f7ff f9f8 	bl	80023ac <HAL_GetTick>
 8002fbc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b20      	cmp	r3, #32
 8002fcc:	f040 8111 	bne.w	80031f2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	2319      	movs	r3, #25
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	4988      	ldr	r1, [pc, #544]	@ (80031fc <HAL_I2C_IsDeviceReady+0x254>)
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f994 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	e104      	b.n	80031f4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_I2C_IsDeviceReady+0x50>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e0fd      	b.n	80031f4 <HAL_I2C_IsDeviceReady+0x24c>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b01      	cmp	r3, #1
 800300c:	d007      	beq.n	800301e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f042 0201 	orr.w	r2, r2, #1
 800301c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800302c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2224      	movs	r2, #36	@ 0x24
 8003032:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4a70      	ldr	r2, [pc, #448]	@ (8003200 <HAL_I2C_IsDeviceReady+0x258>)
 8003040:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003050:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2200      	movs	r2, #0
 800305a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f952 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00d      	beq.n	8003086 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003074:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003078:	d103      	bne.n	8003082 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003080:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e0b6      	b.n	80031f4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003086:	897b      	ldrh	r3, [r7, #10]
 8003088:	b2db      	uxtb	r3, r3
 800308a:	461a      	mov	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003094:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003096:	f7ff f989 	bl	80023ac <HAL_GetTick>
 800309a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	bf0c      	ite	eq
 80030aa:	2301      	moveq	r3, #1
 80030ac:	2300      	movne	r3, #0
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030c0:	bf0c      	ite	eq
 80030c2:	2301      	moveq	r3, #1
 80030c4:	2300      	movne	r3, #0
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030ca:	e025      	b.n	8003118 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030cc:	f7ff f96e 	bl	80023ac <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d302      	bcc.n	80030e2 <HAL_I2C_IsDeviceReady+0x13a>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d103      	bne.n	80030ea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	22a0      	movs	r2, #160	@ 0xa0
 80030e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800310a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800310e:	bf0c      	ite	eq
 8003110:	2301      	moveq	r3, #1
 8003112:	2300      	movne	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2ba0      	cmp	r3, #160	@ 0xa0
 8003122:	d005      	beq.n	8003130 <HAL_I2C_IsDeviceReady+0x188>
 8003124:	7dfb      	ldrb	r3, [r7, #23]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d102      	bne.n	8003130 <HAL_I2C_IsDeviceReady+0x188>
 800312a:	7dbb      	ldrb	r3, [r7, #22]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0cd      	beq.n	80030cc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2220      	movs	r2, #32
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b02      	cmp	r3, #2
 8003144:	d129      	bne.n	800319a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003154:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003156:	2300      	movs	r3, #0
 8003158:	613b      	str	r3, [r7, #16]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	2319      	movs	r3, #25
 8003172:	2201      	movs	r2, #1
 8003174:	4921      	ldr	r1, [pc, #132]	@ (80031fc <HAL_I2C_IsDeviceReady+0x254>)
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 f8c6 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e036      	b.n	80031f4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	e02c      	b.n	80031f4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031a8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031b2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	2319      	movs	r3, #25
 80031ba:	2201      	movs	r2, #1
 80031bc:	490f      	ldr	r1, [pc, #60]	@ (80031fc <HAL_I2C_IsDeviceReady+0x254>)
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 f8a2 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e012      	b.n	80031f4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	3301      	adds	r3, #1
 80031d2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	429a      	cmp	r2, r3
 80031da:	f4ff af32 	bcc.w	8003042 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80031f2:	2302      	movs	r3, #2
  }
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3720      	adds	r7, #32
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	00100002 	.word	0x00100002
 8003200:	ffff0000 	.word	0xffff0000

08003204 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af02      	add	r7, sp, #8
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	607a      	str	r2, [r7, #4]
 800320e:	603b      	str	r3, [r7, #0]
 8003210:	460b      	mov	r3, r1
 8003212:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003218:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2b08      	cmp	r3, #8
 800321e:	d006      	beq.n	800322e <I2C_MasterRequestWrite+0x2a>
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d003      	beq.n	800322e <I2C_MasterRequestWrite+0x2a>
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800322c:	d108      	bne.n	8003240 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	e00b      	b.n	8003258 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003244:	2b12      	cmp	r3, #18
 8003246:	d107      	bne.n	8003258 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003256:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 f84f 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00d      	beq.n	800328c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800327a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800327e:	d103      	bne.n	8003288 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003286:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e035      	b.n	80032f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003294:	d108      	bne.n	80032a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003296:	897b      	ldrh	r3, [r7, #10]
 8003298:	b2db      	uxtb	r3, r3
 800329a:	461a      	mov	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032a4:	611a      	str	r2, [r3, #16]
 80032a6:	e01b      	b.n	80032e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032a8:	897b      	ldrh	r3, [r7, #10]
 80032aa:	11db      	asrs	r3, r3, #7
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	f003 0306 	and.w	r3, r3, #6
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	f063 030f 	orn	r3, r3, #15
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	490e      	ldr	r1, [pc, #56]	@ (8003300 <I2C_MasterRequestWrite+0xfc>)
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 f898 	bl	80033fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e010      	b.n	80032f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032d6:	897b      	ldrh	r3, [r7, #10]
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	4907      	ldr	r1, [pc, #28]	@ (8003304 <I2C_MasterRequestWrite+0x100>)
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f888 	bl	80033fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	00010008 	.word	0x00010008
 8003304:	00010002 	.word	0x00010002

08003308 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	4613      	mov	r3, r2
 8003316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003318:	e048      	b.n	80033ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003320:	d044      	beq.n	80033ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003322:	f7ff f843 	bl	80023ac <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d302      	bcc.n	8003338 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d139      	bne.n	80033ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	0c1b      	lsrs	r3, r3, #16
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b01      	cmp	r3, #1
 8003340:	d10d      	bne.n	800335e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	43da      	mvns	r2, r3
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	4013      	ands	r3, r2
 800334e:	b29b      	uxth	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	bf0c      	ite	eq
 8003354:	2301      	moveq	r3, #1
 8003356:	2300      	movne	r3, #0
 8003358:	b2db      	uxtb	r3, r3
 800335a:	461a      	mov	r2, r3
 800335c:	e00c      	b.n	8003378 <I2C_WaitOnFlagUntilTimeout+0x70>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	43da      	mvns	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	4013      	ands	r3, r2
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	bf0c      	ite	eq
 8003370:	2301      	moveq	r3, #1
 8003372:	2300      	movne	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	461a      	mov	r2, r3
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	429a      	cmp	r2, r3
 800337c:	d116      	bne.n	80033ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003398:	f043 0220 	orr.w	r2, r3, #32
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e023      	b.n	80033f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	0c1b      	lsrs	r3, r3, #16
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d10d      	bne.n	80033d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	43da      	mvns	r2, r3
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	4013      	ands	r3, r2
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	bf0c      	ite	eq
 80033c8:	2301      	moveq	r3, #1
 80033ca:	2300      	movne	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	461a      	mov	r2, r3
 80033d0:	e00c      	b.n	80033ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	43da      	mvns	r2, r3
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	4013      	ands	r3, r2
 80033de:	b29b      	uxth	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	bf0c      	ite	eq
 80033e4:	2301      	moveq	r3, #1
 80033e6:	2300      	movne	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	461a      	mov	r2, r3
 80033ec:	79fb      	ldrb	r3, [r7, #7]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d093      	beq.n	800331a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
 8003408:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800340a:	e071      	b.n	80034f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800341a:	d123      	bne.n	8003464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800342a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003434:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2220      	movs	r2, #32
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003450:	f043 0204 	orr.w	r2, r3, #4
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e067      	b.n	8003534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346a:	d041      	beq.n	80034f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800346c:	f7fe ff9e 	bl	80023ac <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	429a      	cmp	r2, r3
 800347a:	d302      	bcc.n	8003482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d136      	bne.n	80034f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	0c1b      	lsrs	r3, r3, #16
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b01      	cmp	r3, #1
 800348a:	d10c      	bne.n	80034a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	43da      	mvns	r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	4013      	ands	r3, r2
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	bf14      	ite	ne
 800349e:	2301      	movne	r3, #1
 80034a0:	2300      	moveq	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	e00b      	b.n	80034be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	43da      	mvns	r2, r3
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	4013      	ands	r3, r2
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	bf14      	ite	ne
 80034b8:	2301      	movne	r3, #1
 80034ba:	2300      	moveq	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d016      	beq.n	80034f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034dc:	f043 0220 	orr.w	r2, r3, #32
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e021      	b.n	8003534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	0c1b      	lsrs	r3, r3, #16
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d10c      	bne.n	8003514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	43da      	mvns	r2, r3
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	4013      	ands	r3, r2
 8003506:	b29b      	uxth	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	bf14      	ite	ne
 800350c:	2301      	movne	r3, #1
 800350e:	2300      	moveq	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	e00b      	b.n	800352c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	43da      	mvns	r2, r3
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4013      	ands	r3, r2
 8003520:	b29b      	uxth	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	bf14      	ite	ne
 8003526:	2301      	movne	r3, #1
 8003528:	2300      	moveq	r3, #0
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	f47f af6d 	bne.w	800340c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003548:	e034      	b.n	80035b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 f886 	bl	800365c <I2C_IsAcknowledgeFailed>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e034      	b.n	80035c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003560:	d028      	beq.n	80035b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003562:	f7fe ff23 	bl	80023ac <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	429a      	cmp	r2, r3
 8003570:	d302      	bcc.n	8003578 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d11d      	bne.n	80035b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003582:	2b80      	cmp	r3, #128	@ 0x80
 8003584:	d016      	beq.n	80035b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a0:	f043 0220 	orr.w	r2, r3, #32
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e007      	b.n	80035c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035be:	2b80      	cmp	r3, #128	@ 0x80
 80035c0:	d1c3      	bne.n	800354a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035d8:	e034      	b.n	8003644 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 f83e 	bl	800365c <I2C_IsAcknowledgeFailed>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e034      	b.n	8003654 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f0:	d028      	beq.n	8003644 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f2:	f7fe fedb 	bl	80023ac <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d302      	bcc.n	8003608 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d11d      	bne.n	8003644 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	f003 0304 	and.w	r3, r3, #4
 8003612:	2b04      	cmp	r3, #4
 8003614:	d016      	beq.n	8003644 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003630:	f043 0220 	orr.w	r2, r3, #32
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e007      	b.n	8003654 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	2b04      	cmp	r3, #4
 8003650:	d1c3      	bne.n	80035da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800366e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003672:	d11b      	bne.n	80036ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800367c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003698:	f043 0204 	orr.w	r2, r3, #4
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e000      	b.n	80036ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr

080036b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e272      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 8087 	beq.w	80037e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036d8:	4b92      	ldr	r3, [pc, #584]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 030c 	and.w	r3, r3, #12
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d00c      	beq.n	80036fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036e4:	4b8f      	ldr	r3, [pc, #572]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 030c 	and.w	r3, r3, #12
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d112      	bne.n	8003716 <HAL_RCC_OscConfig+0x5e>
 80036f0:	4b8c      	ldr	r3, [pc, #560]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036fc:	d10b      	bne.n	8003716 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036fe:	4b89      	ldr	r3, [pc, #548]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d06c      	beq.n	80037e4 <HAL_RCC_OscConfig+0x12c>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d168      	bne.n	80037e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e24c      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800371e:	d106      	bne.n	800372e <HAL_RCC_OscConfig+0x76>
 8003720:	4b80      	ldr	r3, [pc, #512]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a7f      	ldr	r2, [pc, #508]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003726:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	e02e      	b.n	800378c <HAL_RCC_OscConfig+0xd4>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10c      	bne.n	8003750 <HAL_RCC_OscConfig+0x98>
 8003736:	4b7b      	ldr	r3, [pc, #492]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a7a      	ldr	r2, [pc, #488]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 800373c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	4b78      	ldr	r3, [pc, #480]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a77      	ldr	r2, [pc, #476]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003748:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	e01d      	b.n	800378c <HAL_RCC_OscConfig+0xd4>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003758:	d10c      	bne.n	8003774 <HAL_RCC_OscConfig+0xbc>
 800375a:	4b72      	ldr	r3, [pc, #456]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a71      	ldr	r2, [pc, #452]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003760:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	4b6f      	ldr	r3, [pc, #444]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a6e      	ldr	r2, [pc, #440]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 800376c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	e00b      	b.n	800378c <HAL_RCC_OscConfig+0xd4>
 8003774:	4b6b      	ldr	r3, [pc, #428]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a6a      	ldr	r2, [pc, #424]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 800377a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	4b68      	ldr	r3, [pc, #416]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a67      	ldr	r2, [pc, #412]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003786:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800378a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d013      	beq.n	80037bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003794:	f7fe fe0a 	bl	80023ac <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800379c:	f7fe fe06 	bl	80023ac <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b64      	cmp	r3, #100	@ 0x64
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e200      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ae:	4b5d      	ldr	r3, [pc, #372]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0f0      	beq.n	800379c <HAL_RCC_OscConfig+0xe4>
 80037ba:	e014      	b.n	80037e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037bc:	f7fe fdf6 	bl	80023ac <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037c4:	f7fe fdf2 	bl	80023ac <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b64      	cmp	r3, #100	@ 0x64
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e1ec      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037d6:	4b53      	ldr	r3, [pc, #332]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1f0      	bne.n	80037c4 <HAL_RCC_OscConfig+0x10c>
 80037e2:	e000      	b.n	80037e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d063      	beq.n	80038ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037f2:	4b4c      	ldr	r3, [pc, #304]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f003 030c 	and.w	r3, r3, #12
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00b      	beq.n	8003816 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037fe:	4b49      	ldr	r3, [pc, #292]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f003 030c 	and.w	r3, r3, #12
 8003806:	2b08      	cmp	r3, #8
 8003808:	d11c      	bne.n	8003844 <HAL_RCC_OscConfig+0x18c>
 800380a:	4b46      	ldr	r3, [pc, #280]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d116      	bne.n	8003844 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003816:	4b43      	ldr	r3, [pc, #268]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d005      	beq.n	800382e <HAL_RCC_OscConfig+0x176>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d001      	beq.n	800382e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e1c0      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800382e:	4b3d      	ldr	r3, [pc, #244]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4939      	ldr	r1, [pc, #228]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 800383e:	4313      	orrs	r3, r2
 8003840:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003842:	e03a      	b.n	80038ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d020      	beq.n	800388e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800384c:	4b36      	ldr	r3, [pc, #216]	@ (8003928 <HAL_RCC_OscConfig+0x270>)
 800384e:	2201      	movs	r2, #1
 8003850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003852:	f7fe fdab 	bl	80023ac <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800385a:	f7fe fda7 	bl	80023ac <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e1a1      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386c:	4b2d      	ldr	r3, [pc, #180]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0f0      	beq.n	800385a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003878:	4b2a      	ldr	r3, [pc, #168]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	4927      	ldr	r1, [pc, #156]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003888:	4313      	orrs	r3, r2
 800388a:	600b      	str	r3, [r1, #0]
 800388c:	e015      	b.n	80038ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800388e:	4b26      	ldr	r3, [pc, #152]	@ (8003928 <HAL_RCC_OscConfig+0x270>)
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003894:	f7fe fd8a 	bl	80023ac <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800389c:	f7fe fd86 	bl	80023ac <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e180      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f0      	bne.n	800389c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d03a      	beq.n	800393c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d019      	beq.n	8003902 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ce:	4b17      	ldr	r3, [pc, #92]	@ (800392c <HAL_RCC_OscConfig+0x274>)
 80038d0:	2201      	movs	r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d4:	f7fe fd6a 	bl	80023ac <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038dc:	f7fe fd66 	bl	80023ac <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e160      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 80038f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0f0      	beq.n	80038dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038fa:	2001      	movs	r0, #1
 80038fc:	f000 face 	bl	8003e9c <RCC_Delay>
 8003900:	e01c      	b.n	800393c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003902:	4b0a      	ldr	r3, [pc, #40]	@ (800392c <HAL_RCC_OscConfig+0x274>)
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003908:	f7fe fd50 	bl	80023ac <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800390e:	e00f      	b.n	8003930 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003910:	f7fe fd4c 	bl	80023ac <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d908      	bls.n	8003930 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e146      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
 8003922:	bf00      	nop
 8003924:	40021000 	.word	0x40021000
 8003928:	42420000 	.word	0x42420000
 800392c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003930:	4b92      	ldr	r3, [pc, #584]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1e9      	bne.n	8003910 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 80a6 	beq.w	8003a96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800394a:	2300      	movs	r3, #0
 800394c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800394e:	4b8b      	ldr	r3, [pc, #556]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10d      	bne.n	8003976 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800395a:	4b88      	ldr	r3, [pc, #544]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	4a87      	ldr	r2, [pc, #540]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003960:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003964:	61d3      	str	r3, [r2, #28]
 8003966:	4b85      	ldr	r3, [pc, #532]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800396e:	60bb      	str	r3, [r7, #8]
 8003970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003972:	2301      	movs	r3, #1
 8003974:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003976:	4b82      	ldr	r3, [pc, #520]	@ (8003b80 <HAL_RCC_OscConfig+0x4c8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800397e:	2b00      	cmp	r3, #0
 8003980:	d118      	bne.n	80039b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003982:	4b7f      	ldr	r3, [pc, #508]	@ (8003b80 <HAL_RCC_OscConfig+0x4c8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a7e      	ldr	r2, [pc, #504]	@ (8003b80 <HAL_RCC_OscConfig+0x4c8>)
 8003988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800398c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800398e:	f7fe fd0d 	bl	80023ac <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003996:	f7fe fd09 	bl	80023ac <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b64      	cmp	r3, #100	@ 0x64
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e103      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a8:	4b75      	ldr	r3, [pc, #468]	@ (8003b80 <HAL_RCC_OscConfig+0x4c8>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f0      	beq.n	8003996 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d106      	bne.n	80039ca <HAL_RCC_OscConfig+0x312>
 80039bc:	4b6f      	ldr	r3, [pc, #444]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	4a6e      	ldr	r2, [pc, #440]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 80039c2:	f043 0301 	orr.w	r3, r3, #1
 80039c6:	6213      	str	r3, [r2, #32]
 80039c8:	e02d      	b.n	8003a26 <HAL_RCC_OscConfig+0x36e>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10c      	bne.n	80039ec <HAL_RCC_OscConfig+0x334>
 80039d2:	4b6a      	ldr	r3, [pc, #424]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	4a69      	ldr	r2, [pc, #420]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 80039d8:	f023 0301 	bic.w	r3, r3, #1
 80039dc:	6213      	str	r3, [r2, #32]
 80039de:	4b67      	ldr	r3, [pc, #412]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	4a66      	ldr	r2, [pc, #408]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 80039e4:	f023 0304 	bic.w	r3, r3, #4
 80039e8:	6213      	str	r3, [r2, #32]
 80039ea:	e01c      	b.n	8003a26 <HAL_RCC_OscConfig+0x36e>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	2b05      	cmp	r3, #5
 80039f2:	d10c      	bne.n	8003a0e <HAL_RCC_OscConfig+0x356>
 80039f4:	4b61      	ldr	r3, [pc, #388]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	4a60      	ldr	r2, [pc, #384]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 80039fa:	f043 0304 	orr.w	r3, r3, #4
 80039fe:	6213      	str	r3, [r2, #32]
 8003a00:	4b5e      	ldr	r3, [pc, #376]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	4a5d      	ldr	r2, [pc, #372]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003a06:	f043 0301 	orr.w	r3, r3, #1
 8003a0a:	6213      	str	r3, [r2, #32]
 8003a0c:	e00b      	b.n	8003a26 <HAL_RCC_OscConfig+0x36e>
 8003a0e:	4b5b      	ldr	r3, [pc, #364]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	4a5a      	ldr	r2, [pc, #360]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003a14:	f023 0301 	bic.w	r3, r3, #1
 8003a18:	6213      	str	r3, [r2, #32]
 8003a1a:	4b58      	ldr	r3, [pc, #352]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	4a57      	ldr	r2, [pc, #348]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003a20:	f023 0304 	bic.w	r3, r3, #4
 8003a24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d015      	beq.n	8003a5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a2e:	f7fe fcbd 	bl	80023ac <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a34:	e00a      	b.n	8003a4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a36:	f7fe fcb9 	bl	80023ac <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e0b1      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a4c:	4b4b      	ldr	r3, [pc, #300]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0ee      	beq.n	8003a36 <HAL_RCC_OscConfig+0x37e>
 8003a58:	e014      	b.n	8003a84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5a:	f7fe fca7 	bl	80023ac <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a60:	e00a      	b.n	8003a78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a62:	f7fe fca3 	bl	80023ac <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e09b      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a78:	4b40      	ldr	r3, [pc, #256]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1ee      	bne.n	8003a62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a84:	7dfb      	ldrb	r3, [r7, #23]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d105      	bne.n	8003a96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a8a:	4b3c      	ldr	r3, [pc, #240]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	4a3b      	ldr	r2, [pc, #236]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003a90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 8087 	beq.w	8003bae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003aa0:	4b36      	ldr	r3, [pc, #216]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f003 030c 	and.w	r3, r3, #12
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d061      	beq.n	8003b70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d146      	bne.n	8003b42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab4:	4b33      	ldr	r3, [pc, #204]	@ (8003b84 <HAL_RCC_OscConfig+0x4cc>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aba:	f7fe fc77 	bl	80023ac <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac2:	f7fe fc73 	bl	80023ac <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e06d      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ad4:	4b29      	ldr	r3, [pc, #164]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1f0      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ae8:	d108      	bne.n	8003afc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003aea:	4b24      	ldr	r3, [pc, #144]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	4921      	ldr	r1, [pc, #132]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003afc:	4b1f      	ldr	r3, [pc, #124]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a19      	ldr	r1, [r3, #32]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	491b      	ldr	r1, [pc, #108]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b14:	4b1b      	ldr	r3, [pc, #108]	@ (8003b84 <HAL_RCC_OscConfig+0x4cc>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1a:	f7fe fc47 	bl	80023ac <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b22:	f7fe fc43 	bl	80023ac <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e03d      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b34:	4b11      	ldr	r3, [pc, #68]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0f0      	beq.n	8003b22 <HAL_RCC_OscConfig+0x46a>
 8003b40:	e035      	b.n	8003bae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b42:	4b10      	ldr	r3, [pc, #64]	@ (8003b84 <HAL_RCC_OscConfig+0x4cc>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b48:	f7fe fc30 	bl	80023ac <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b50:	f7fe fc2c 	bl	80023ac <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e026      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b62:	4b06      	ldr	r3, [pc, #24]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f0      	bne.n	8003b50 <HAL_RCC_OscConfig+0x498>
 8003b6e:	e01e      	b.n	8003bae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d107      	bne.n	8003b88 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e019      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	40007000 	.word	0x40007000
 8003b84:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b88:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb8 <HAL_RCC_OscConfig+0x500>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d106      	bne.n	8003baa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d001      	beq.n	8003bae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40021000 	.word	0x40021000

08003bbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0d0      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bd0:	4b6a      	ldr	r3, [pc, #424]	@ (8003d7c <HAL_RCC_ClockConfig+0x1c0>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d910      	bls.n	8003c00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bde:	4b67      	ldr	r3, [pc, #412]	@ (8003d7c <HAL_RCC_ClockConfig+0x1c0>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f023 0207 	bic.w	r2, r3, #7
 8003be6:	4965      	ldr	r1, [pc, #404]	@ (8003d7c <HAL_RCC_ClockConfig+0x1c0>)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bee:	4b63      	ldr	r3, [pc, #396]	@ (8003d7c <HAL_RCC_ClockConfig+0x1c0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d001      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0b8      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d020      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c18:	4b59      	ldr	r3, [pc, #356]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	4a58      	ldr	r2, [pc, #352]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d005      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c30:	4b53      	ldr	r3, [pc, #332]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	4a52      	ldr	r2, [pc, #328]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c36:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003c3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c3c:	4b50      	ldr	r3, [pc, #320]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	494d      	ldr	r1, [pc, #308]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d040      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d107      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c62:	4b47      	ldr	r3, [pc, #284]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d115      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e07f      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d107      	bne.n	8003c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c7a:	4b41      	ldr	r3, [pc, #260]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d109      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e073      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e06b      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c9a:	4b39      	ldr	r3, [pc, #228]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f023 0203 	bic.w	r2, r3, #3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	4936      	ldr	r1, [pc, #216]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cac:	f7fe fb7e 	bl	80023ac <HAL_GetTick>
 8003cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb2:	e00a      	b.n	8003cca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb4:	f7fe fb7a 	bl	80023ac <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e053      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cca:	4b2d      	ldr	r3, [pc, #180]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f003 020c 	and.w	r2, r3, #12
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d1eb      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cdc:	4b27      	ldr	r3, [pc, #156]	@ (8003d7c <HAL_RCC_ClockConfig+0x1c0>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d210      	bcs.n	8003d0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cea:	4b24      	ldr	r3, [pc, #144]	@ (8003d7c <HAL_RCC_ClockConfig+0x1c0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 0207 	bic.w	r2, r3, #7
 8003cf2:	4922      	ldr	r1, [pc, #136]	@ (8003d7c <HAL_RCC_ClockConfig+0x1c0>)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfa:	4b20      	ldr	r3, [pc, #128]	@ (8003d7c <HAL_RCC_ClockConfig+0x1c0>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d001      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e032      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d18:	4b19      	ldr	r3, [pc, #100]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	4916      	ldr	r1, [pc, #88]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d009      	beq.n	8003d4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d36:	4b12      	ldr	r3, [pc, #72]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	490e      	ldr	r1, [pc, #56]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d4a:	f000 f821 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	4b0b      	ldr	r3, [pc, #44]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	091b      	lsrs	r3, r3, #4
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	490a      	ldr	r1, [pc, #40]	@ (8003d84 <HAL_RCC_ClockConfig+0x1c8>)
 8003d5c:	5ccb      	ldrb	r3, [r1, r3]
 8003d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d62:	4a09      	ldr	r2, [pc, #36]	@ (8003d88 <HAL_RCC_ClockConfig+0x1cc>)
 8003d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d66:	4b09      	ldr	r3, [pc, #36]	@ (8003d8c <HAL_RCC_ClockConfig+0x1d0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fe fadc 	bl	8002328 <HAL_InitTick>

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40022000 	.word	0x40022000
 8003d80:	40021000 	.word	0x40021000
 8003d84:	08008bc4 	.word	0x08008bc4
 8003d88:	20000008 	.word	0x20000008
 8003d8c:	2000000c 	.word	0x2000000c

08003d90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]
 8003da2:	2300      	movs	r3, #0
 8003da4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003daa:	4b1e      	ldr	r3, [pc, #120]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0x94>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f003 030c 	and.w	r3, r3, #12
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d002      	beq.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x30>
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d003      	beq.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x36>
 8003dbe:	e027      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003dc0:	4b19      	ldr	r3, [pc, #100]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dc2:	613b      	str	r3, [r7, #16]
      break;
 8003dc4:	e027      	b.n	8003e16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	0c9b      	lsrs	r3, r3, #18
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	4a17      	ldr	r2, [pc, #92]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003dd0:	5cd3      	ldrb	r3, [r2, r3]
 8003dd2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d010      	beq.n	8003e00 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003dde:	4b11      	ldr	r3, [pc, #68]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0x94>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	0c5b      	lsrs	r3, r3, #17
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	4a11      	ldr	r2, [pc, #68]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003dea:	5cd3      	ldrb	r3, [r2, r3]
 8003dec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a0d      	ldr	r2, [pc, #52]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0x98>)
 8003df2:	fb03 f202 	mul.w	r2, r3, r2
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfc:	617b      	str	r3, [r7, #20]
 8003dfe:	e004      	b.n	8003e0a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a0c      	ldr	r2, [pc, #48]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e04:	fb02 f303 	mul.w	r3, r2, r3
 8003e08:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	613b      	str	r3, [r7, #16]
      break;
 8003e0e:	e002      	b.n	8003e16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e10:	4b05      	ldr	r3, [pc, #20]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e12:	613b      	str	r3, [r7, #16]
      break;
 8003e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e16:	693b      	ldr	r3, [r7, #16]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bc80      	pop	{r7}
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40021000 	.word	0x40021000
 8003e28:	007a1200 	.word	0x007a1200
 8003e2c:	08008bdc 	.word	0x08008bdc
 8003e30:	08008bec 	.word	0x08008bec
 8003e34:	003d0900 	.word	0x003d0900

08003e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e3c:	4b02      	ldr	r3, [pc, #8]	@ (8003e48 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr
 8003e48:	20000008 	.word	0x20000008

08003e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e50:	f7ff fff2 	bl	8003e38 <HAL_RCC_GetHCLKFreq>
 8003e54:	4602      	mov	r2, r0
 8003e56:	4b05      	ldr	r3, [pc, #20]	@ (8003e6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	0a1b      	lsrs	r3, r3, #8
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	4903      	ldr	r1, [pc, #12]	@ (8003e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e62:	5ccb      	ldrb	r3, [r1, r3]
 8003e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	08008bd4 	.word	0x08008bd4

08003e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e78:	f7ff ffde 	bl	8003e38 <HAL_RCC_GetHCLKFreq>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	4b05      	ldr	r3, [pc, #20]	@ (8003e94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	0adb      	lsrs	r3, r3, #11
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	4903      	ldr	r1, [pc, #12]	@ (8003e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e8a:	5ccb      	ldrb	r3, [r1, r3]
 8003e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40021000 	.word	0x40021000
 8003e98:	08008bd4 	.word	0x08008bd4

08003e9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ed0 <RCC_Delay+0x34>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8003ed4 <RCC_Delay+0x38>)
 8003eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003eae:	0a5b      	lsrs	r3, r3, #9
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	fb02 f303 	mul.w	r3, r2, r3
 8003eb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003eb8:	bf00      	nop
  }
  while (Delay --);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	1e5a      	subs	r2, r3, #1
 8003ebe:	60fa      	str	r2, [r7, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1f9      	bne.n	8003eb8 <RCC_Delay+0x1c>
}
 8003ec4:	bf00      	nop
 8003ec6:	bf00      	nop
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr
 8003ed0:	20000008 	.word	0x20000008
 8003ed4:	10624dd3 	.word	0x10624dd3

08003ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e041      	b.n	8003f6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d106      	bne.n	8003f04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7fd ffda 	bl	8001eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3304      	adds	r3, #4
 8003f14:	4619      	mov	r1, r3
 8003f16:	4610      	mov	r0, r2
 8003f18:	f000 fab2 	bl	8004480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b082      	sub	sp, #8
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e041      	b.n	800400c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d106      	bne.n	8003fa2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f839 	bl	8004014 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	f000 fa63 	bl	8004480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	bc80      	pop	{r7}
 8004024:	4770      	bx	lr
	...

08004028 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d109      	bne.n	800404c <HAL_TIM_PWM_Start+0x24>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b01      	cmp	r3, #1
 8004042:	bf14      	ite	ne
 8004044:	2301      	movne	r3, #1
 8004046:	2300      	moveq	r3, #0
 8004048:	b2db      	uxtb	r3, r3
 800404a:	e022      	b.n	8004092 <HAL_TIM_PWM_Start+0x6a>
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	2b04      	cmp	r3, #4
 8004050:	d109      	bne.n	8004066 <HAL_TIM_PWM_Start+0x3e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b01      	cmp	r3, #1
 800405c:	bf14      	ite	ne
 800405e:	2301      	movne	r3, #1
 8004060:	2300      	moveq	r3, #0
 8004062:	b2db      	uxtb	r3, r3
 8004064:	e015      	b.n	8004092 <HAL_TIM_PWM_Start+0x6a>
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b08      	cmp	r3, #8
 800406a:	d109      	bne.n	8004080 <HAL_TIM_PWM_Start+0x58>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b01      	cmp	r3, #1
 8004076:	bf14      	ite	ne
 8004078:	2301      	movne	r3, #1
 800407a:	2300      	moveq	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	e008      	b.n	8004092 <HAL_TIM_PWM_Start+0x6a>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b01      	cmp	r3, #1
 800408a:	bf14      	ite	ne
 800408c:	2301      	movne	r3, #1
 800408e:	2300      	moveq	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e05e      	b.n	8004158 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d104      	bne.n	80040aa <HAL_TIM_PWM_Start+0x82>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040a8:	e013      	b.n	80040d2 <HAL_TIM_PWM_Start+0xaa>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b04      	cmp	r3, #4
 80040ae:	d104      	bne.n	80040ba <HAL_TIM_PWM_Start+0x92>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040b8:	e00b      	b.n	80040d2 <HAL_TIM_PWM_Start+0xaa>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d104      	bne.n	80040ca <HAL_TIM_PWM_Start+0xa2>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2202      	movs	r2, #2
 80040c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040c8:	e003      	b.n	80040d2 <HAL_TIM_PWM_Start+0xaa>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2202      	movs	r2, #2
 80040ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2201      	movs	r2, #1
 80040d8:	6839      	ldr	r1, [r7, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fc50 	bl	8004980 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a1e      	ldr	r2, [pc, #120]	@ (8004160 <HAL_TIM_PWM_Start+0x138>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d107      	bne.n	80040fa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a18      	ldr	r2, [pc, #96]	@ (8004160 <HAL_TIM_PWM_Start+0x138>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d00e      	beq.n	8004122 <HAL_TIM_PWM_Start+0xfa>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800410c:	d009      	beq.n	8004122 <HAL_TIM_PWM_Start+0xfa>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a14      	ldr	r2, [pc, #80]	@ (8004164 <HAL_TIM_PWM_Start+0x13c>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d004      	beq.n	8004122 <HAL_TIM_PWM_Start+0xfa>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a12      	ldr	r2, [pc, #72]	@ (8004168 <HAL_TIM_PWM_Start+0x140>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d111      	bne.n	8004146 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f003 0307 	and.w	r3, r3, #7
 800412c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2b06      	cmp	r3, #6
 8004132:	d010      	beq.n	8004156 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0201 	orr.w	r2, r2, #1
 8004142:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004144:	e007      	b.n	8004156 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f042 0201 	orr.w	r2, r2, #1
 8004154:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40012c00 	.word	0x40012c00
 8004164:	40000400 	.word	0x40000400
 8004168:	40000800 	.word	0x40000800

0800416c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004182:	2b01      	cmp	r3, #1
 8004184:	d101      	bne.n	800418a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004186:	2302      	movs	r3, #2
 8004188:	e0ae      	b.n	80042e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b0c      	cmp	r3, #12
 8004196:	f200 809f 	bhi.w	80042d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800419a:	a201      	add	r2, pc, #4	@ (adr r2, 80041a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800419c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a0:	080041d5 	.word	0x080041d5
 80041a4:	080042d9 	.word	0x080042d9
 80041a8:	080042d9 	.word	0x080042d9
 80041ac:	080042d9 	.word	0x080042d9
 80041b0:	08004215 	.word	0x08004215
 80041b4:	080042d9 	.word	0x080042d9
 80041b8:	080042d9 	.word	0x080042d9
 80041bc:	080042d9 	.word	0x080042d9
 80041c0:	08004257 	.word	0x08004257
 80041c4:	080042d9 	.word	0x080042d9
 80041c8:	080042d9 	.word	0x080042d9
 80041cc:	080042d9 	.word	0x080042d9
 80041d0:	08004297 	.word	0x08004297
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68b9      	ldr	r1, [r7, #8]
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 f9b2 	bl	8004544 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699a      	ldr	r2, [r3, #24]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0208 	orr.w	r2, r2, #8
 80041ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699a      	ldr	r2, [r3, #24]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0204 	bic.w	r2, r2, #4
 80041fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6999      	ldr	r1, [r3, #24]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	619a      	str	r2, [r3, #24]
      break;
 8004212:	e064      	b.n	80042de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68b9      	ldr	r1, [r7, #8]
 800421a:	4618      	mov	r0, r3
 800421c:	f000 f9f8 	bl	8004610 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699a      	ldr	r2, [r3, #24]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800422e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699a      	ldr	r2, [r3, #24]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800423e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6999      	ldr	r1, [r3, #24]
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	021a      	lsls	r2, r3, #8
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	619a      	str	r2, [r3, #24]
      break;
 8004254:	e043      	b.n	80042de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68b9      	ldr	r1, [r7, #8]
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fa41 	bl	80046e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69da      	ldr	r2, [r3, #28]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0208 	orr.w	r2, r2, #8
 8004270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69da      	ldr	r2, [r3, #28]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0204 	bic.w	r2, r2, #4
 8004280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	69d9      	ldr	r1, [r3, #28]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	61da      	str	r2, [r3, #28]
      break;
 8004294:	e023      	b.n	80042de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68b9      	ldr	r1, [r7, #8]
 800429c:	4618      	mov	r0, r3
 800429e:	f000 fa8b 	bl	80047b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69da      	ldr	r2, [r3, #28]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	69da      	ldr	r2, [r3, #28]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69d9      	ldr	r1, [r3, #28]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	021a      	lsls	r2, r3, #8
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	61da      	str	r2, [r3, #28]
      break;
 80042d6:	e002      	b.n	80042de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	75fb      	strb	r3, [r7, #23]
      break;
 80042dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HAL_TIM_ConfigClockSource+0x1c>
 8004308:	2302      	movs	r3, #2
 800430a:	e0b4      	b.n	8004476 <HAL_TIM_ConfigClockSource+0x186>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800432a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004332:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004344:	d03e      	beq.n	80043c4 <HAL_TIM_ConfigClockSource+0xd4>
 8004346:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800434a:	f200 8087 	bhi.w	800445c <HAL_TIM_ConfigClockSource+0x16c>
 800434e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004352:	f000 8086 	beq.w	8004462 <HAL_TIM_ConfigClockSource+0x172>
 8004356:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800435a:	d87f      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
 800435c:	2b70      	cmp	r3, #112	@ 0x70
 800435e:	d01a      	beq.n	8004396 <HAL_TIM_ConfigClockSource+0xa6>
 8004360:	2b70      	cmp	r3, #112	@ 0x70
 8004362:	d87b      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
 8004364:	2b60      	cmp	r3, #96	@ 0x60
 8004366:	d050      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x11a>
 8004368:	2b60      	cmp	r3, #96	@ 0x60
 800436a:	d877      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
 800436c:	2b50      	cmp	r3, #80	@ 0x50
 800436e:	d03c      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0xfa>
 8004370:	2b50      	cmp	r3, #80	@ 0x50
 8004372:	d873      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
 8004374:	2b40      	cmp	r3, #64	@ 0x40
 8004376:	d058      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x13a>
 8004378:	2b40      	cmp	r3, #64	@ 0x40
 800437a:	d86f      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
 800437c:	2b30      	cmp	r3, #48	@ 0x30
 800437e:	d064      	beq.n	800444a <HAL_TIM_ConfigClockSource+0x15a>
 8004380:	2b30      	cmp	r3, #48	@ 0x30
 8004382:	d86b      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
 8004384:	2b20      	cmp	r3, #32
 8004386:	d060      	beq.n	800444a <HAL_TIM_ConfigClockSource+0x15a>
 8004388:	2b20      	cmp	r3, #32
 800438a:	d867      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
 800438c:	2b00      	cmp	r3, #0
 800438e:	d05c      	beq.n	800444a <HAL_TIM_ConfigClockSource+0x15a>
 8004390:	2b10      	cmp	r3, #16
 8004392:	d05a      	beq.n	800444a <HAL_TIM_ConfigClockSource+0x15a>
 8004394:	e062      	b.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043a6:	f000 facc 	bl	8004942 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80043b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	609a      	str	r2, [r3, #8]
      break;
 80043c2:	e04f      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043d4:	f000 fab5 	bl	8004942 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043e6:	609a      	str	r2, [r3, #8]
      break;
 80043e8:	e03c      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043f6:	461a      	mov	r2, r3
 80043f8:	f000 fa2c 	bl	8004854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2150      	movs	r1, #80	@ 0x50
 8004402:	4618      	mov	r0, r3
 8004404:	f000 fa83 	bl	800490e <TIM_ITRx_SetConfig>
      break;
 8004408:	e02c      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004416:	461a      	mov	r2, r3
 8004418:	f000 fa4a 	bl	80048b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2160      	movs	r1, #96	@ 0x60
 8004422:	4618      	mov	r0, r3
 8004424:	f000 fa73 	bl	800490e <TIM_ITRx_SetConfig>
      break;
 8004428:	e01c      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004436:	461a      	mov	r2, r3
 8004438:	f000 fa0c 	bl	8004854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2140      	movs	r1, #64	@ 0x40
 8004442:	4618      	mov	r0, r3
 8004444:	f000 fa63 	bl	800490e <TIM_ITRx_SetConfig>
      break;
 8004448:	e00c      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4619      	mov	r1, r3
 8004454:	4610      	mov	r0, r2
 8004456:	f000 fa5a 	bl	800490e <TIM_ITRx_SetConfig>
      break;
 800445a:	e003      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	73fb      	strb	r3, [r7, #15]
      break;
 8004460:	e000      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004462:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004474:	7bfb      	ldrb	r3, [r7, #15]
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a29      	ldr	r2, [pc, #164]	@ (8004538 <TIM_Base_SetConfig+0xb8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d00b      	beq.n	80044b0 <TIM_Base_SetConfig+0x30>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800449e:	d007      	beq.n	80044b0 <TIM_Base_SetConfig+0x30>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a26      	ldr	r2, [pc, #152]	@ (800453c <TIM_Base_SetConfig+0xbc>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d003      	beq.n	80044b0 <TIM_Base_SetConfig+0x30>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a25      	ldr	r2, [pc, #148]	@ (8004540 <TIM_Base_SetConfig+0xc0>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d108      	bne.n	80044c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	4313      	orrs	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004538 <TIM_Base_SetConfig+0xb8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00b      	beq.n	80044e2 <TIM_Base_SetConfig+0x62>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044d0:	d007      	beq.n	80044e2 <TIM_Base_SetConfig+0x62>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a19      	ldr	r2, [pc, #100]	@ (800453c <TIM_Base_SetConfig+0xbc>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d003      	beq.n	80044e2 <TIM_Base_SetConfig+0x62>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a18      	ldr	r2, [pc, #96]	@ (8004540 <TIM_Base_SetConfig+0xc0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d108      	bne.n	80044f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a07      	ldr	r2, [pc, #28]	@ (8004538 <TIM_Base_SetConfig+0xb8>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d103      	bne.n	8004528 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	691a      	ldr	r2, [r3, #16]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	615a      	str	r2, [r3, #20]
}
 800452e:	bf00      	nop
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	bc80      	pop	{r7}
 8004536:	4770      	bx	lr
 8004538:	40012c00 	.word	0x40012c00
 800453c:	40000400 	.word	0x40000400
 8004540:	40000800 	.word	0x40000800

08004544 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004544:	b480      	push	{r7}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	f023 0201 	bic.w	r2, r3, #1
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 0303 	bic.w	r3, r3, #3
 800457a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	4313      	orrs	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f023 0302 	bic.w	r3, r3, #2
 800458c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	4313      	orrs	r3, r2
 8004596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a1c      	ldr	r2, [pc, #112]	@ (800460c <TIM_OC1_SetConfig+0xc8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d10c      	bne.n	80045ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f023 0308 	bic.w	r3, r3, #8
 80045a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f023 0304 	bic.w	r3, r3, #4
 80045b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a13      	ldr	r2, [pc, #76]	@ (800460c <TIM_OC1_SetConfig+0xc8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d111      	bne.n	80045e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	4313      	orrs	r3, r2
 80045da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	621a      	str	r2, [r3, #32]
}
 8004600:	bf00      	nop
 8004602:	371c      	adds	r7, #28
 8004604:	46bd      	mov	sp, r7
 8004606:	bc80      	pop	{r7}
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	40012c00 	.word	0x40012c00

08004610 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	f023 0210 	bic.w	r2, r3, #16
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800463e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	021b      	lsls	r3, r3, #8
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	4313      	orrs	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f023 0320 	bic.w	r3, r3, #32
 800465a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	011b      	lsls	r3, r3, #4
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	4313      	orrs	r3, r2
 8004666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a1d      	ldr	r2, [pc, #116]	@ (80046e0 <TIM_OC2_SetConfig+0xd0>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d10d      	bne.n	800468c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	011b      	lsls	r3, r3, #4
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	4313      	orrs	r3, r2
 8004682:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800468a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a14      	ldr	r2, [pc, #80]	@ (80046e0 <TIM_OC2_SetConfig+0xd0>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d113      	bne.n	80046bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800469a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	621a      	str	r2, [r3, #32]
}
 80046d6:	bf00      	nop
 80046d8:	371c      	adds	r7, #28
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr
 80046e0:	40012c00 	.word	0x40012c00

080046e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b087      	sub	sp, #28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 0303 	bic.w	r3, r3, #3
 800471a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	4313      	orrs	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800472c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	021b      	lsls	r3, r3, #8
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	4313      	orrs	r3, r2
 8004738:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a1d      	ldr	r2, [pc, #116]	@ (80047b4 <TIM_OC3_SetConfig+0xd0>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d10d      	bne.n	800475e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004748:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	021b      	lsls	r3, r3, #8
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	4313      	orrs	r3, r2
 8004754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800475c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a14      	ldr	r2, [pc, #80]	@ (80047b4 <TIM_OC3_SetConfig+0xd0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d113      	bne.n	800478e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800476c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004774:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4313      	orrs	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	621a      	str	r2, [r3, #32]
}
 80047a8:	bf00      	nop
 80047aa:	371c      	adds	r7, #28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bc80      	pop	{r7}
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	40012c00 	.word	0x40012c00

080047b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b087      	sub	sp, #28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	021b      	lsls	r3, r3, #8
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004802:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	031b      	lsls	r3, r3, #12
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	4313      	orrs	r3, r2
 800480e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a0f      	ldr	r2, [pc, #60]	@ (8004850 <TIM_OC4_SetConfig+0x98>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d109      	bne.n	800482c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800481e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	019b      	lsls	r3, r3, #6
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	4313      	orrs	r3, r2
 800482a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	621a      	str	r2, [r3, #32]
}
 8004846:	bf00      	nop
 8004848:	371c      	adds	r7, #28
 800484a:	46bd      	mov	sp, r7
 800484c:	bc80      	pop	{r7}
 800484e:	4770      	bx	lr
 8004850:	40012c00 	.word	0x40012c00

08004854 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	f023 0201 	bic.w	r2, r3, #1
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800487e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f023 030a 	bic.w	r3, r3, #10
 8004890:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	621a      	str	r2, [r3, #32]
}
 80048a6:	bf00      	nop
 80048a8:	371c      	adds	r7, #28
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bc80      	pop	{r7}
 80048ae:	4770      	bx	lr

080048b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b087      	sub	sp, #28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	f023 0210 	bic.w	r2, r3, #16
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	031b      	lsls	r3, r3, #12
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	621a      	str	r2, [r3, #32]
}
 8004904:	bf00      	nop
 8004906:	371c      	adds	r7, #28
 8004908:	46bd      	mov	sp, r7
 800490a:	bc80      	pop	{r7}
 800490c:	4770      	bx	lr

0800490e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800490e:	b480      	push	{r7}
 8004910:	b085      	sub	sp, #20
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
 8004916:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004924:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4313      	orrs	r3, r2
 800492c:	f043 0307 	orr.w	r3, r3, #7
 8004930:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	609a      	str	r2, [r3, #8]
}
 8004938:	bf00      	nop
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	bc80      	pop	{r7}
 8004940:	4770      	bx	lr

08004942 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004942:	b480      	push	{r7}
 8004944:	b087      	sub	sp, #28
 8004946:	af00      	add	r7, sp, #0
 8004948:	60f8      	str	r0, [r7, #12]
 800494a:	60b9      	str	r1, [r7, #8]
 800494c:	607a      	str	r2, [r7, #4]
 800494e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800495c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	021a      	lsls	r2, r3, #8
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	431a      	orrs	r2, r3
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	4313      	orrs	r3, r2
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	4313      	orrs	r3, r2
 800496e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	609a      	str	r2, [r3, #8]
}
 8004976:	bf00      	nop
 8004978:	371c      	adds	r7, #28
 800497a:	46bd      	mov	sp, r7
 800497c:	bc80      	pop	{r7}
 800497e:	4770      	bx	lr

08004980 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f003 031f 	and.w	r3, r3, #31
 8004992:	2201      	movs	r2, #1
 8004994:	fa02 f303 	lsl.w	r3, r2, r3
 8004998:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a1a      	ldr	r2, [r3, #32]
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	43db      	mvns	r3, r3
 80049a2:	401a      	ands	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6a1a      	ldr	r2, [r3, #32]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f003 031f 	and.w	r3, r3, #31
 80049b2:	6879      	ldr	r1, [r7, #4]
 80049b4:	fa01 f303 	lsl.w	r3, r1, r3
 80049b8:	431a      	orrs	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	621a      	str	r2, [r3, #32]
}
 80049be:	bf00      	nop
 80049c0:	371c      	adds	r7, #28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr

080049c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d101      	bne.n	80049e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049dc:	2302      	movs	r3, #2
 80049de:	e046      	b.n	8004a6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a16      	ldr	r2, [pc, #88]	@ (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d00e      	beq.n	8004a42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a2c:	d009      	beq.n	8004a42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a12      	ldr	r2, [pc, #72]	@ (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d004      	beq.n	8004a42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a10      	ldr	r2, [pc, #64]	@ (8004a80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d10c      	bne.n	8004a5c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr
 8004a78:	40012c00 	.word	0x40012c00
 8004a7c:	40000400 	.word	0x40000400
 8004a80:	40000800 	.word	0x40000800

08004a84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e042      	b.n	8004b1c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fd fa50 	bl	8001f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2224      	movs	r2, #36	@ 0x24
 8004ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ac6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 fdc7 	bl	800565c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004adc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695a      	ldr	r2, [r3, #20]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004aec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004afc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08a      	sub	sp, #40	@ 0x28
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	603b      	str	r3, [r7, #0]
 8004b30:	4613      	mov	r3, r2
 8004b32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d16d      	bne.n	8004c20 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <HAL_UART_Transmit+0x2c>
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e066      	b.n	8004c22 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2221      	movs	r2, #33	@ 0x21
 8004b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b62:	f7fd fc23 	bl	80023ac <HAL_GetTick>
 8004b66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	88fa      	ldrh	r2, [r7, #6]
 8004b6c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	88fa      	ldrh	r2, [r7, #6]
 8004b72:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b7c:	d108      	bne.n	8004b90 <HAL_UART_Transmit+0x6c>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d104      	bne.n	8004b90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b86:	2300      	movs	r3, #0
 8004b88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	e003      	b.n	8004b98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b94:	2300      	movs	r3, #0
 8004b96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b98:	e02a      	b.n	8004bf0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	2180      	movs	r1, #128	@ 0x80
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 fb16 	bl	80051d6 <UART_WaitOnFlagUntilTimeout>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e036      	b.n	8004c22 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10b      	bne.n	8004bd2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	3302      	adds	r3, #2
 8004bce:	61bb      	str	r3, [r7, #24]
 8004bd0:	e007      	b.n	8004be2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	781a      	ldrb	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	3301      	adds	r3, #1
 8004be0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	3b01      	subs	r3, #1
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1cf      	bne.n	8004b9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2200      	movs	r2, #0
 8004c02:	2140      	movs	r1, #64	@ 0x40
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 fae6 	bl	80051d6 <UART_WaitOnFlagUntilTimeout>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e006      	b.n	8004c22 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	e000      	b.n	8004c22 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004c20:	2302      	movs	r3, #2
  }
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3720      	adds	r7, #32
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b084      	sub	sp, #16
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	60f8      	str	r0, [r7, #12]
 8004c32:	60b9      	str	r1, [r7, #8]
 8004c34:	4613      	mov	r3, r2
 8004c36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	d112      	bne.n	8004c6a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <HAL_UART_Receive_IT+0x26>
 8004c4a:	88fb      	ldrh	r3, [r7, #6]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e00b      	b.n	8004c6c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c5a:	88fb      	ldrh	r3, [r7, #6]
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	68b9      	ldr	r1, [r7, #8]
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 fb26 	bl	80052b2 <UART_Start_Receive_IT>
 8004c66:	4603      	mov	r3, r0
 8004c68:	e000      	b.n	8004c6c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004c6a:	2302      	movs	r3, #2
  }
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b0ba      	sub	sp, #232	@ 0xe8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004cb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10f      	bne.n	8004cda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cbe:	f003 0320 	and.w	r3, r3, #32
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d009      	beq.n	8004cda <HAL_UART_IRQHandler+0x66>
 8004cc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cca:	f003 0320 	and.w	r3, r3, #32
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fc03 	bl	80054de <UART_Receive_IT>
      return;
 8004cd8:	e25b      	b.n	8005192 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004cda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 80de 	beq.w	8004ea0 <HAL_UART_IRQHandler+0x22c>
 8004ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d106      	bne.n	8004cfe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cf4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 80d1 	beq.w	8004ea0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00b      	beq.n	8004d22 <HAL_UART_IRQHandler+0xae>
 8004d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d005      	beq.n	8004d22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d1a:	f043 0201 	orr.w	r2, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d26:	f003 0304 	and.w	r3, r3, #4
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00b      	beq.n	8004d46 <HAL_UART_IRQHandler+0xd2>
 8004d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d005      	beq.n	8004d46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d3e:	f043 0202 	orr.w	r2, r3, #2
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00b      	beq.n	8004d6a <HAL_UART_IRQHandler+0xf6>
 8004d52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d005      	beq.n	8004d6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d62:	f043 0204 	orr.w	r2, r3, #4
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d6e:	f003 0308 	and.w	r3, r3, #8
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d011      	beq.n	8004d9a <HAL_UART_IRQHandler+0x126>
 8004d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d7a:	f003 0320 	and.w	r3, r3, #32
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d105      	bne.n	8004d8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d92:	f043 0208 	orr.w	r2, r3, #8
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 81f2 	beq.w	8005188 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004da8:	f003 0320 	and.w	r3, r3, #32
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d008      	beq.n	8004dc2 <HAL_UART_IRQHandler+0x14e>
 8004db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004db4:	f003 0320 	and.w	r3, r3, #32
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 fb8e 	bl	80054de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	bf14      	ite	ne
 8004dd0:	2301      	movne	r3, #1
 8004dd2:	2300      	moveq	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d103      	bne.n	8004dee <HAL_UART_IRQHandler+0x17a>
 8004de6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d04f      	beq.n	8004e8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 fa98 	bl	8005324 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d041      	beq.n	8004e86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	3314      	adds	r3, #20
 8004e08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e10:	e853 3f00 	ldrex	r3, [r3]
 8004e14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004e18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	3314      	adds	r3, #20
 8004e2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004e2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004e32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004e3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1d9      	bne.n	8004e02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d013      	beq.n	8004e7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e5a:	4a7e      	ldr	r2, [pc, #504]	@ (8005054 <HAL_UART_IRQHandler+0x3e0>)
 8004e5c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fd fc18 	bl	8002698 <HAL_DMA_Abort_IT>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d016      	beq.n	8004e9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e78:	4610      	mov	r0, r2
 8004e7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e7c:	e00e      	b.n	8004e9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7fc fca2 	bl	80017c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e84:	e00a      	b.n	8004e9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7fc fc9e 	bl	80017c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e8c:	e006      	b.n	8004e9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7fc fc9a 	bl	80017c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004e9a:	e175      	b.n	8005188 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e9c:	bf00      	nop
    return;
 8004e9e:	e173      	b.n	8005188 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	f040 814f 	bne.w	8005148 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eae:	f003 0310 	and.w	r3, r3, #16
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 8148 	beq.w	8005148 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ebc:	f003 0310 	and.w	r3, r3, #16
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 8141 	beq.w	8005148 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60bb      	str	r3, [r7, #8]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	60bb      	str	r3, [r7, #8]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	60bb      	str	r3, [r7, #8]
 8004eda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f000 80b6 	beq.w	8005058 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ef8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 8145 	beq.w	800518c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	f080 813e 	bcs.w	800518c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f16:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	2b20      	cmp	r3, #32
 8004f20:	f000 8088 	beq.w	8005034 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	330c      	adds	r3, #12
 8004f2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f32:	e853 3f00 	ldrex	r3, [r3]
 8004f36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004f3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f42:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	330c      	adds	r3, #12
 8004f4c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004f50:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f54:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f58:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f5c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f60:	e841 2300 	strex	r3, r2, [r1]
 8004f64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1d9      	bne.n	8004f24 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3314      	adds	r3, #20
 8004f76:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f7a:	e853 3f00 	ldrex	r3, [r3]
 8004f7e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f82:	f023 0301 	bic.w	r3, r3, #1
 8004f86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	3314      	adds	r3, #20
 8004f90:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f94:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004f98:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004f9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004fa0:	e841 2300 	strex	r3, r2, [r1]
 8004fa4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004fa6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1e1      	bne.n	8004f70 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	3314      	adds	r3, #20
 8004fb2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fb6:	e853 3f00 	ldrex	r3, [r3]
 8004fba:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004fbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	3314      	adds	r3, #20
 8004fcc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004fd0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004fd2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004fd6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004fd8:	e841 2300 	strex	r3, r2, [r1]
 8004fdc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004fde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1e3      	bne.n	8004fac <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	330c      	adds	r3, #12
 8004ff8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ffc:	e853 3f00 	ldrex	r3, [r3]
 8005000:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005002:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005004:	f023 0310 	bic.w	r3, r3, #16
 8005008:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	330c      	adds	r3, #12
 8005012:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005016:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005018:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800501c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800501e:	e841 2300 	strex	r3, r2, [r1]
 8005022:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005024:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1e3      	bne.n	8004ff2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800502e:	4618      	mov	r0, r3
 8005030:	f7fd faf7 	bl	8002622 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005042:	b29b      	uxth	r3, r3
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	b29b      	uxth	r3, r3
 8005048:	4619      	mov	r1, r3
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f8ad 	bl	80051aa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005050:	e09c      	b.n	800518c <HAL_UART_IRQHandler+0x518>
 8005052:	bf00      	nop
 8005054:	080053e9 	.word	0x080053e9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005060:	b29b      	uxth	r3, r3
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800506c:	b29b      	uxth	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 808e 	beq.w	8005190 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005074:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 8089 	beq.w	8005190 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	330c      	adds	r3, #12
 8005084:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005088:	e853 3f00 	ldrex	r3, [r3]
 800508c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800508e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005090:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005094:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	330c      	adds	r3, #12
 800509e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80050a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80050a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050aa:	e841 2300 	strex	r3, r2, [r1]
 80050ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1e3      	bne.n	800507e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	3314      	adds	r3, #20
 80050bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c0:	e853 3f00 	ldrex	r3, [r3]
 80050c4:	623b      	str	r3, [r7, #32]
   return(result);
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	f023 0301 	bic.w	r3, r3, #1
 80050cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3314      	adds	r3, #20
 80050d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80050da:	633a      	str	r2, [r7, #48]	@ 0x30
 80050dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050e2:	e841 2300 	strex	r3, r2, [r1]
 80050e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1e3      	bne.n	80050b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	330c      	adds	r3, #12
 8005102:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	e853 3f00 	ldrex	r3, [r3]
 800510a:	60fb      	str	r3, [r7, #12]
   return(result);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 0310 	bic.w	r3, r3, #16
 8005112:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	330c      	adds	r3, #12
 800511c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005120:	61fa      	str	r2, [r7, #28]
 8005122:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005124:	69b9      	ldr	r1, [r7, #24]
 8005126:	69fa      	ldr	r2, [r7, #28]
 8005128:	e841 2300 	strex	r3, r2, [r1]
 800512c:	617b      	str	r3, [r7, #20]
   return(result);
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1e3      	bne.n	80050fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800513a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800513e:	4619      	mov	r1, r3
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f832 	bl	80051aa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005146:	e023      	b.n	8005190 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800514c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005150:	2b00      	cmp	r3, #0
 8005152:	d009      	beq.n	8005168 <HAL_UART_IRQHandler+0x4f4>
 8005154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f955 	bl	8005410 <UART_Transmit_IT>
    return;
 8005166:	e014      	b.n	8005192 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800516c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00e      	beq.n	8005192 <HAL_UART_IRQHandler+0x51e>
 8005174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517c:	2b00      	cmp	r3, #0
 800517e:	d008      	beq.n	8005192 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f994 	bl	80054ae <UART_EndTransmit_IT>
    return;
 8005186:	e004      	b.n	8005192 <HAL_UART_IRQHandler+0x51e>
    return;
 8005188:	bf00      	nop
 800518a:	e002      	b.n	8005192 <HAL_UART_IRQHandler+0x51e>
      return;
 800518c:	bf00      	nop
 800518e:	e000      	b.n	8005192 <HAL_UART_IRQHandler+0x51e>
      return;
 8005190:	bf00      	nop
  }
}
 8005192:	37e8      	adds	r7, #232	@ 0xe8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bc80      	pop	{r7}
 80051a8:	4770      	bx	lr

080051aa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
 80051b2:	460b      	mov	r3, r1
 80051b4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bc80      	pop	{r7}
 80051be:	4770      	bx	lr

080051c0 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bc80      	pop	{r7}
 80051d4:	4770      	bx	lr

080051d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b090      	sub	sp, #64	@ 0x40
 80051da:	af00      	add	r7, sp, #0
 80051dc:	60f8      	str	r0, [r7, #12]
 80051de:	60b9      	str	r1, [r7, #8]
 80051e0:	603b      	str	r3, [r7, #0]
 80051e2:	4613      	mov	r3, r2
 80051e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e6:	e050      	b.n	800528a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ee:	d04c      	beq.n	800528a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80051f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d007      	beq.n	8005206 <UART_WaitOnFlagUntilTimeout+0x30>
 80051f6:	f7fd f8d9 	bl	80023ac <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005202:	429a      	cmp	r2, r3
 8005204:	d241      	bcs.n	800528a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	330c      	adds	r3, #12
 800520c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005210:	e853 3f00 	ldrex	r3, [r3]
 8005214:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005218:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800521c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	330c      	adds	r3, #12
 8005224:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005226:	637a      	str	r2, [r7, #52]	@ 0x34
 8005228:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800522c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800522e:	e841 2300 	strex	r3, r2, [r1]
 8005232:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1e5      	bne.n	8005206 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	3314      	adds	r3, #20
 8005240:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	e853 3f00 	ldrex	r3, [r3]
 8005248:	613b      	str	r3, [r7, #16]
   return(result);
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f023 0301 	bic.w	r3, r3, #1
 8005250:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	3314      	adds	r3, #20
 8005258:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800525a:	623a      	str	r2, [r7, #32]
 800525c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525e:	69f9      	ldr	r1, [r7, #28]
 8005260:	6a3a      	ldr	r2, [r7, #32]
 8005262:	e841 2300 	strex	r3, r2, [r1]
 8005266:	61bb      	str	r3, [r7, #24]
   return(result);
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1e5      	bne.n	800523a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2220      	movs	r2, #32
 8005272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2220      	movs	r2, #32
 800527a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e00f      	b.n	80052aa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	4013      	ands	r3, r2
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	429a      	cmp	r2, r3
 8005298:	bf0c      	ite	eq
 800529a:	2301      	moveq	r3, #1
 800529c:	2300      	movne	r3, #0
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	461a      	mov	r2, r3
 80052a2:	79fb      	ldrb	r3, [r7, #7]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d09f      	beq.n	80051e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3740      	adds	r7, #64	@ 0x40
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b085      	sub	sp, #20
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	60f8      	str	r0, [r7, #12]
 80052ba:	60b9      	str	r1, [r7, #8]
 80052bc:	4613      	mov	r3, r2
 80052be:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	88fa      	ldrh	r2, [r7, #6]
 80052ca:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	88fa      	ldrh	r2, [r7, #6]
 80052d0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2222      	movs	r2, #34	@ 0x22
 80052dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d007      	beq.n	80052f8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052f6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	695a      	ldr	r2, [r3, #20]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0201 	orr.w	r2, r2, #1
 8005306:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68da      	ldr	r2, [r3, #12]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0220 	orr.w	r2, r2, #32
 8005316:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	bc80      	pop	{r7}
 8005322:	4770      	bx	lr

08005324 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005324:	b480      	push	{r7}
 8005326:	b095      	sub	sp, #84	@ 0x54
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	330c      	adds	r3, #12
 8005332:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005336:	e853 3f00 	ldrex	r3, [r3]
 800533a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800533c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800533e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005342:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	330c      	adds	r3, #12
 800534a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800534c:	643a      	str	r2, [r7, #64]	@ 0x40
 800534e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005350:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005352:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005354:	e841 2300 	strex	r3, r2, [r1]
 8005358:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800535a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1e5      	bne.n	800532c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3314      	adds	r3, #20
 8005366:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	e853 3f00 	ldrex	r3, [r3]
 800536e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	f023 0301 	bic.w	r3, r3, #1
 8005376:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3314      	adds	r3, #20
 800537e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005380:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005382:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005384:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005386:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005388:	e841 2300 	strex	r3, r2, [r1]
 800538c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800538e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1e5      	bne.n	8005360 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005398:	2b01      	cmp	r3, #1
 800539a:	d119      	bne.n	80053d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	330c      	adds	r3, #12
 80053a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	e853 3f00 	ldrex	r3, [r3]
 80053aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f023 0310 	bic.w	r3, r3, #16
 80053b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	330c      	adds	r3, #12
 80053ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053bc:	61ba      	str	r2, [r7, #24]
 80053be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c0:	6979      	ldr	r1, [r7, #20]
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	e841 2300 	strex	r3, r2, [r1]
 80053c8:	613b      	str	r3, [r7, #16]
   return(result);
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1e5      	bne.n	800539c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80053de:	bf00      	nop
 80053e0:	3754      	adds	r7, #84	@ 0x54
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bc80      	pop	{r7}
 80053e6:	4770      	bx	lr

080053e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f7fc f9e0 	bl	80017c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005408:	bf00      	nop
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b21      	cmp	r3, #33	@ 0x21
 8005422:	d13e      	bne.n	80054a2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800542c:	d114      	bne.n	8005458 <UART_Transmit_IT+0x48>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d110      	bne.n	8005458 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	461a      	mov	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800544a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	1c9a      	adds	r2, r3, #2
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	621a      	str	r2, [r3, #32]
 8005456:	e008      	b.n	800546a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	1c59      	adds	r1, r3, #1
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6211      	str	r1, [r2, #32]
 8005462:	781a      	ldrb	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800546e:	b29b      	uxth	r3, r3
 8005470:	3b01      	subs	r3, #1
 8005472:	b29b      	uxth	r3, r3
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	4619      	mov	r1, r3
 8005478:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10f      	bne.n	800549e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68da      	ldr	r2, [r3, #12]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800548c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800549c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	e000      	b.n	80054a4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80054a2:	2302      	movs	r3, #2
  }
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bc80      	pop	{r7}
 80054ac:	4770      	bx	lr

080054ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b082      	sub	sp, #8
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68da      	ldr	r2, [r3, #12]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2220      	movs	r2, #32
 80054ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7ff fe62 	bl	8005198 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b08c      	sub	sp, #48	@ 0x30
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b22      	cmp	r3, #34	@ 0x22
 80054f0:	f040 80ae 	bne.w	8005650 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054fc:	d117      	bne.n	800552e <UART_Receive_IT+0x50>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d113      	bne.n	800552e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005506:	2300      	movs	r3, #0
 8005508:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800550e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	b29b      	uxth	r3, r3
 8005518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800551c:	b29a      	uxth	r2, r3
 800551e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005520:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005526:	1c9a      	adds	r2, r3, #2
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	629a      	str	r2, [r3, #40]	@ 0x28
 800552c:	e026      	b.n	800557c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005532:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005534:	2300      	movs	r3, #0
 8005536:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005540:	d007      	beq.n	8005552 <UART_Receive_IT+0x74>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10a      	bne.n	8005560 <UART_Receive_IT+0x82>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d106      	bne.n	8005560 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	b2da      	uxtb	r2, r3
 800555a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800555c:	701a      	strb	r2, [r3, #0]
 800555e:	e008      	b.n	8005572 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	b2db      	uxtb	r3, r3
 8005568:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800556c:	b2da      	uxtb	r2, r3
 800556e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005570:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005576:	1c5a      	adds	r2, r3, #1
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005580:	b29b      	uxth	r3, r3
 8005582:	3b01      	subs	r3, #1
 8005584:	b29b      	uxth	r3, r3
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	4619      	mov	r1, r3
 800558a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800558c:	2b00      	cmp	r3, #0
 800558e:	d15d      	bne.n	800564c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 0220 	bic.w	r2, r2, #32
 800559e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	695a      	ldr	r2, [r3, #20]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0201 	bic.w	r2, r2, #1
 80055be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d135      	bne.n	8005642 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	330c      	adds	r3, #12
 80055e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	e853 3f00 	ldrex	r3, [r3]
 80055ea:	613b      	str	r3, [r7, #16]
   return(result);
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	f023 0310 	bic.w	r3, r3, #16
 80055f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	330c      	adds	r3, #12
 80055fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055fc:	623a      	str	r2, [r7, #32]
 80055fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005600:	69f9      	ldr	r1, [r7, #28]
 8005602:	6a3a      	ldr	r2, [r7, #32]
 8005604:	e841 2300 	strex	r3, r2, [r1]
 8005608:	61bb      	str	r3, [r7, #24]
   return(result);
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1e5      	bne.n	80055dc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0310 	and.w	r3, r3, #16
 800561a:	2b10      	cmp	r3, #16
 800561c:	d10a      	bne.n	8005634 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800561e:	2300      	movs	r3, #0
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005638:	4619      	mov	r1, r3
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7ff fdb5 	bl	80051aa <HAL_UARTEx_RxEventCallback>
 8005640:	e002      	b.n	8005648 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7fc f818 	bl	8001678 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005648:	2300      	movs	r3, #0
 800564a:	e002      	b.n	8005652 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800564c:	2300      	movs	r3, #0
 800564e:	e000      	b.n	8005652 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005650:	2302      	movs	r3, #2
  }
}
 8005652:	4618      	mov	r0, r3
 8005654:	3730      	adds	r7, #48	@ 0x30
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
	...

0800565c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68da      	ldr	r2, [r3, #12]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689a      	ldr	r2, [r3, #8]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	431a      	orrs	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	4313      	orrs	r3, r2
 800568a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005696:	f023 030c 	bic.w	r3, r3, #12
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	6812      	ldr	r2, [r2, #0]
 800569e:	68b9      	ldr	r1, [r7, #8]
 80056a0:	430b      	orrs	r3, r1
 80056a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	699a      	ldr	r2, [r3, #24]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a2c      	ldr	r2, [pc, #176]	@ (8005770 <UART_SetConfig+0x114>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d103      	bne.n	80056cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80056c4:	f7fe fbd6 	bl	8003e74 <HAL_RCC_GetPCLK2Freq>
 80056c8:	60f8      	str	r0, [r7, #12]
 80056ca:	e002      	b.n	80056d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80056cc:	f7fe fbbe 	bl	8003e4c <HAL_RCC_GetPCLK1Freq>
 80056d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	4613      	mov	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4413      	add	r3, r2
 80056da:	009a      	lsls	r2, r3, #2
 80056dc:	441a      	add	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e8:	4a22      	ldr	r2, [pc, #136]	@ (8005774 <UART_SetConfig+0x118>)
 80056ea:	fba2 2303 	umull	r2, r3, r2, r3
 80056ee:	095b      	lsrs	r3, r3, #5
 80056f0:	0119      	lsls	r1, r3, #4
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	4613      	mov	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	009a      	lsls	r2, r3, #2
 80056fc:	441a      	add	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	fbb2 f2f3 	udiv	r2, r2, r3
 8005708:	4b1a      	ldr	r3, [pc, #104]	@ (8005774 <UART_SetConfig+0x118>)
 800570a:	fba3 0302 	umull	r0, r3, r3, r2
 800570e:	095b      	lsrs	r3, r3, #5
 8005710:	2064      	movs	r0, #100	@ 0x64
 8005712:	fb00 f303 	mul.w	r3, r0, r3
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	011b      	lsls	r3, r3, #4
 800571a:	3332      	adds	r3, #50	@ 0x32
 800571c:	4a15      	ldr	r2, [pc, #84]	@ (8005774 <UART_SetConfig+0x118>)
 800571e:	fba2 2303 	umull	r2, r3, r2, r3
 8005722:	095b      	lsrs	r3, r3, #5
 8005724:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005728:	4419      	add	r1, r3
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	4613      	mov	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	009a      	lsls	r2, r3, #2
 8005734:	441a      	add	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005740:	4b0c      	ldr	r3, [pc, #48]	@ (8005774 <UART_SetConfig+0x118>)
 8005742:	fba3 0302 	umull	r0, r3, r3, r2
 8005746:	095b      	lsrs	r3, r3, #5
 8005748:	2064      	movs	r0, #100	@ 0x64
 800574a:	fb00 f303 	mul.w	r3, r0, r3
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	011b      	lsls	r3, r3, #4
 8005752:	3332      	adds	r3, #50	@ 0x32
 8005754:	4a07      	ldr	r2, [pc, #28]	@ (8005774 <UART_SetConfig+0x118>)
 8005756:	fba2 2303 	umull	r2, r3, r2, r3
 800575a:	095b      	lsrs	r3, r3, #5
 800575c:	f003 020f 	and.w	r2, r3, #15
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	440a      	add	r2, r1
 8005766:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005768:	bf00      	nop
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	40013800 	.word	0x40013800
 8005774:	51eb851f 	.word	0x51eb851f

08005778 <__cvt>:
 8005778:	2b00      	cmp	r3, #0
 800577a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800577e:	461d      	mov	r5, r3
 8005780:	bfbb      	ittet	lt
 8005782:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005786:	461d      	movlt	r5, r3
 8005788:	2300      	movge	r3, #0
 800578a:	232d      	movlt	r3, #45	@ 0x2d
 800578c:	b088      	sub	sp, #32
 800578e:	4614      	mov	r4, r2
 8005790:	bfb8      	it	lt
 8005792:	4614      	movlt	r4, r2
 8005794:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005796:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005798:	7013      	strb	r3, [r2, #0]
 800579a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800579c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80057a0:	f023 0820 	bic.w	r8, r3, #32
 80057a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80057a8:	d005      	beq.n	80057b6 <__cvt+0x3e>
 80057aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80057ae:	d100      	bne.n	80057b2 <__cvt+0x3a>
 80057b0:	3601      	adds	r6, #1
 80057b2:	2302      	movs	r3, #2
 80057b4:	e000      	b.n	80057b8 <__cvt+0x40>
 80057b6:	2303      	movs	r3, #3
 80057b8:	aa07      	add	r2, sp, #28
 80057ba:	9204      	str	r2, [sp, #16]
 80057bc:	aa06      	add	r2, sp, #24
 80057be:	e9cd a202 	strd	sl, r2, [sp, #8]
 80057c2:	e9cd 3600 	strd	r3, r6, [sp]
 80057c6:	4622      	mov	r2, r4
 80057c8:	462b      	mov	r3, r5
 80057ca:	f000 fe6d 	bl	80064a8 <_dtoa_r>
 80057ce:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80057d2:	4607      	mov	r7, r0
 80057d4:	d119      	bne.n	800580a <__cvt+0x92>
 80057d6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80057d8:	07db      	lsls	r3, r3, #31
 80057da:	d50e      	bpl.n	80057fa <__cvt+0x82>
 80057dc:	eb00 0906 	add.w	r9, r0, r6
 80057e0:	2200      	movs	r2, #0
 80057e2:	2300      	movs	r3, #0
 80057e4:	4620      	mov	r0, r4
 80057e6:	4629      	mov	r1, r5
 80057e8:	f7fb f8de 	bl	80009a8 <__aeabi_dcmpeq>
 80057ec:	b108      	cbz	r0, 80057f2 <__cvt+0x7a>
 80057ee:	f8cd 901c 	str.w	r9, [sp, #28]
 80057f2:	2230      	movs	r2, #48	@ 0x30
 80057f4:	9b07      	ldr	r3, [sp, #28]
 80057f6:	454b      	cmp	r3, r9
 80057f8:	d31e      	bcc.n	8005838 <__cvt+0xc0>
 80057fa:	4638      	mov	r0, r7
 80057fc:	9b07      	ldr	r3, [sp, #28]
 80057fe:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005800:	1bdb      	subs	r3, r3, r7
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	b008      	add	sp, #32
 8005806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800580a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800580e:	eb00 0906 	add.w	r9, r0, r6
 8005812:	d1e5      	bne.n	80057e0 <__cvt+0x68>
 8005814:	7803      	ldrb	r3, [r0, #0]
 8005816:	2b30      	cmp	r3, #48	@ 0x30
 8005818:	d10a      	bne.n	8005830 <__cvt+0xb8>
 800581a:	2200      	movs	r2, #0
 800581c:	2300      	movs	r3, #0
 800581e:	4620      	mov	r0, r4
 8005820:	4629      	mov	r1, r5
 8005822:	f7fb f8c1 	bl	80009a8 <__aeabi_dcmpeq>
 8005826:	b918      	cbnz	r0, 8005830 <__cvt+0xb8>
 8005828:	f1c6 0601 	rsb	r6, r6, #1
 800582c:	f8ca 6000 	str.w	r6, [sl]
 8005830:	f8da 3000 	ldr.w	r3, [sl]
 8005834:	4499      	add	r9, r3
 8005836:	e7d3      	b.n	80057e0 <__cvt+0x68>
 8005838:	1c59      	adds	r1, r3, #1
 800583a:	9107      	str	r1, [sp, #28]
 800583c:	701a      	strb	r2, [r3, #0]
 800583e:	e7d9      	b.n	80057f4 <__cvt+0x7c>

08005840 <__exponent>:
 8005840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005842:	2900      	cmp	r1, #0
 8005844:	bfb6      	itet	lt
 8005846:	232d      	movlt	r3, #45	@ 0x2d
 8005848:	232b      	movge	r3, #43	@ 0x2b
 800584a:	4249      	neglt	r1, r1
 800584c:	2909      	cmp	r1, #9
 800584e:	7002      	strb	r2, [r0, #0]
 8005850:	7043      	strb	r3, [r0, #1]
 8005852:	dd29      	ble.n	80058a8 <__exponent+0x68>
 8005854:	f10d 0307 	add.w	r3, sp, #7
 8005858:	461d      	mov	r5, r3
 800585a:	270a      	movs	r7, #10
 800585c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005860:	461a      	mov	r2, r3
 8005862:	fb07 1416 	mls	r4, r7, r6, r1
 8005866:	3430      	adds	r4, #48	@ 0x30
 8005868:	f802 4c01 	strb.w	r4, [r2, #-1]
 800586c:	460c      	mov	r4, r1
 800586e:	2c63      	cmp	r4, #99	@ 0x63
 8005870:	4631      	mov	r1, r6
 8005872:	f103 33ff 	add.w	r3, r3, #4294967295
 8005876:	dcf1      	bgt.n	800585c <__exponent+0x1c>
 8005878:	3130      	adds	r1, #48	@ 0x30
 800587a:	1e94      	subs	r4, r2, #2
 800587c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005880:	4623      	mov	r3, r4
 8005882:	1c41      	adds	r1, r0, #1
 8005884:	42ab      	cmp	r3, r5
 8005886:	d30a      	bcc.n	800589e <__exponent+0x5e>
 8005888:	f10d 0309 	add.w	r3, sp, #9
 800588c:	1a9b      	subs	r3, r3, r2
 800588e:	42ac      	cmp	r4, r5
 8005890:	bf88      	it	hi
 8005892:	2300      	movhi	r3, #0
 8005894:	3302      	adds	r3, #2
 8005896:	4403      	add	r3, r0
 8005898:	1a18      	subs	r0, r3, r0
 800589a:	b003      	add	sp, #12
 800589c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800589e:	f813 6b01 	ldrb.w	r6, [r3], #1
 80058a2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80058a6:	e7ed      	b.n	8005884 <__exponent+0x44>
 80058a8:	2330      	movs	r3, #48	@ 0x30
 80058aa:	3130      	adds	r1, #48	@ 0x30
 80058ac:	7083      	strb	r3, [r0, #2]
 80058ae:	70c1      	strb	r1, [r0, #3]
 80058b0:	1d03      	adds	r3, r0, #4
 80058b2:	e7f1      	b.n	8005898 <__exponent+0x58>

080058b4 <_printf_float>:
 80058b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b8:	b091      	sub	sp, #68	@ 0x44
 80058ba:	460c      	mov	r4, r1
 80058bc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80058c0:	4616      	mov	r6, r2
 80058c2:	461f      	mov	r7, r3
 80058c4:	4605      	mov	r5, r0
 80058c6:	f000 fce1 	bl	800628c <_localeconv_r>
 80058ca:	6803      	ldr	r3, [r0, #0]
 80058cc:	4618      	mov	r0, r3
 80058ce:	9308      	str	r3, [sp, #32]
 80058d0:	f7fa fc3e 	bl	8000150 <strlen>
 80058d4:	2300      	movs	r3, #0
 80058d6:	930e      	str	r3, [sp, #56]	@ 0x38
 80058d8:	f8d8 3000 	ldr.w	r3, [r8]
 80058dc:	9009      	str	r0, [sp, #36]	@ 0x24
 80058de:	3307      	adds	r3, #7
 80058e0:	f023 0307 	bic.w	r3, r3, #7
 80058e4:	f103 0208 	add.w	r2, r3, #8
 80058e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80058ec:	f8d4 b000 	ldr.w	fp, [r4]
 80058f0:	f8c8 2000 	str.w	r2, [r8]
 80058f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80058f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80058fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058fe:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005902:	f04f 32ff 	mov.w	r2, #4294967295
 8005906:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800590a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800590e:	4b9c      	ldr	r3, [pc, #624]	@ (8005b80 <_printf_float+0x2cc>)
 8005910:	f7fb f87c 	bl	8000a0c <__aeabi_dcmpun>
 8005914:	bb70      	cbnz	r0, 8005974 <_printf_float+0xc0>
 8005916:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800591a:	f04f 32ff 	mov.w	r2, #4294967295
 800591e:	4b98      	ldr	r3, [pc, #608]	@ (8005b80 <_printf_float+0x2cc>)
 8005920:	f7fb f856 	bl	80009d0 <__aeabi_dcmple>
 8005924:	bb30      	cbnz	r0, 8005974 <_printf_float+0xc0>
 8005926:	2200      	movs	r2, #0
 8005928:	2300      	movs	r3, #0
 800592a:	4640      	mov	r0, r8
 800592c:	4649      	mov	r1, r9
 800592e:	f7fb f845 	bl	80009bc <__aeabi_dcmplt>
 8005932:	b110      	cbz	r0, 800593a <_printf_float+0x86>
 8005934:	232d      	movs	r3, #45	@ 0x2d
 8005936:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800593a:	4a92      	ldr	r2, [pc, #584]	@ (8005b84 <_printf_float+0x2d0>)
 800593c:	4b92      	ldr	r3, [pc, #584]	@ (8005b88 <_printf_float+0x2d4>)
 800593e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005942:	bf8c      	ite	hi
 8005944:	4690      	movhi	r8, r2
 8005946:	4698      	movls	r8, r3
 8005948:	2303      	movs	r3, #3
 800594a:	f04f 0900 	mov.w	r9, #0
 800594e:	6123      	str	r3, [r4, #16]
 8005950:	f02b 0304 	bic.w	r3, fp, #4
 8005954:	6023      	str	r3, [r4, #0]
 8005956:	4633      	mov	r3, r6
 8005958:	4621      	mov	r1, r4
 800595a:	4628      	mov	r0, r5
 800595c:	9700      	str	r7, [sp, #0]
 800595e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005960:	f000 f9d4 	bl	8005d0c <_printf_common>
 8005964:	3001      	adds	r0, #1
 8005966:	f040 8090 	bne.w	8005a8a <_printf_float+0x1d6>
 800596a:	f04f 30ff 	mov.w	r0, #4294967295
 800596e:	b011      	add	sp, #68	@ 0x44
 8005970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005974:	4642      	mov	r2, r8
 8005976:	464b      	mov	r3, r9
 8005978:	4640      	mov	r0, r8
 800597a:	4649      	mov	r1, r9
 800597c:	f7fb f846 	bl	8000a0c <__aeabi_dcmpun>
 8005980:	b148      	cbz	r0, 8005996 <_printf_float+0xe2>
 8005982:	464b      	mov	r3, r9
 8005984:	2b00      	cmp	r3, #0
 8005986:	bfb8      	it	lt
 8005988:	232d      	movlt	r3, #45	@ 0x2d
 800598a:	4a80      	ldr	r2, [pc, #512]	@ (8005b8c <_printf_float+0x2d8>)
 800598c:	bfb8      	it	lt
 800598e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005992:	4b7f      	ldr	r3, [pc, #508]	@ (8005b90 <_printf_float+0x2dc>)
 8005994:	e7d3      	b.n	800593e <_printf_float+0x8a>
 8005996:	6863      	ldr	r3, [r4, #4]
 8005998:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	d13f      	bne.n	8005a20 <_printf_float+0x16c>
 80059a0:	2306      	movs	r3, #6
 80059a2:	6063      	str	r3, [r4, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80059aa:	6023      	str	r3, [r4, #0]
 80059ac:	9206      	str	r2, [sp, #24]
 80059ae:	aa0e      	add	r2, sp, #56	@ 0x38
 80059b0:	e9cd a204 	strd	sl, r2, [sp, #16]
 80059b4:	aa0d      	add	r2, sp, #52	@ 0x34
 80059b6:	9203      	str	r2, [sp, #12]
 80059b8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80059bc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80059c0:	6863      	ldr	r3, [r4, #4]
 80059c2:	4642      	mov	r2, r8
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	4628      	mov	r0, r5
 80059c8:	464b      	mov	r3, r9
 80059ca:	910a      	str	r1, [sp, #40]	@ 0x28
 80059cc:	f7ff fed4 	bl	8005778 <__cvt>
 80059d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80059d2:	4680      	mov	r8, r0
 80059d4:	2947      	cmp	r1, #71	@ 0x47
 80059d6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80059d8:	d128      	bne.n	8005a2c <_printf_float+0x178>
 80059da:	1cc8      	adds	r0, r1, #3
 80059dc:	db02      	blt.n	80059e4 <_printf_float+0x130>
 80059de:	6863      	ldr	r3, [r4, #4]
 80059e0:	4299      	cmp	r1, r3
 80059e2:	dd40      	ble.n	8005a66 <_printf_float+0x1b2>
 80059e4:	f1aa 0a02 	sub.w	sl, sl, #2
 80059e8:	fa5f fa8a 	uxtb.w	sl, sl
 80059ec:	4652      	mov	r2, sl
 80059ee:	3901      	subs	r1, #1
 80059f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80059f4:	910d      	str	r1, [sp, #52]	@ 0x34
 80059f6:	f7ff ff23 	bl	8005840 <__exponent>
 80059fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80059fc:	4681      	mov	r9, r0
 80059fe:	1813      	adds	r3, r2, r0
 8005a00:	2a01      	cmp	r2, #1
 8005a02:	6123      	str	r3, [r4, #16]
 8005a04:	dc02      	bgt.n	8005a0c <_printf_float+0x158>
 8005a06:	6822      	ldr	r2, [r4, #0]
 8005a08:	07d2      	lsls	r2, r2, #31
 8005a0a:	d501      	bpl.n	8005a10 <_printf_float+0x15c>
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	6123      	str	r3, [r4, #16]
 8005a10:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d09e      	beq.n	8005956 <_printf_float+0xa2>
 8005a18:	232d      	movs	r3, #45	@ 0x2d
 8005a1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a1e:	e79a      	b.n	8005956 <_printf_float+0xa2>
 8005a20:	2947      	cmp	r1, #71	@ 0x47
 8005a22:	d1bf      	bne.n	80059a4 <_printf_float+0xf0>
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1bd      	bne.n	80059a4 <_printf_float+0xf0>
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e7ba      	b.n	80059a2 <_printf_float+0xee>
 8005a2c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a30:	d9dc      	bls.n	80059ec <_printf_float+0x138>
 8005a32:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005a36:	d118      	bne.n	8005a6a <_printf_float+0x1b6>
 8005a38:	2900      	cmp	r1, #0
 8005a3a:	6863      	ldr	r3, [r4, #4]
 8005a3c:	dd0b      	ble.n	8005a56 <_printf_float+0x1a2>
 8005a3e:	6121      	str	r1, [r4, #16]
 8005a40:	b913      	cbnz	r3, 8005a48 <_printf_float+0x194>
 8005a42:	6822      	ldr	r2, [r4, #0]
 8005a44:	07d0      	lsls	r0, r2, #31
 8005a46:	d502      	bpl.n	8005a4e <_printf_float+0x19a>
 8005a48:	3301      	adds	r3, #1
 8005a4a:	440b      	add	r3, r1
 8005a4c:	6123      	str	r3, [r4, #16]
 8005a4e:	f04f 0900 	mov.w	r9, #0
 8005a52:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005a54:	e7dc      	b.n	8005a10 <_printf_float+0x15c>
 8005a56:	b913      	cbnz	r3, 8005a5e <_printf_float+0x1aa>
 8005a58:	6822      	ldr	r2, [r4, #0]
 8005a5a:	07d2      	lsls	r2, r2, #31
 8005a5c:	d501      	bpl.n	8005a62 <_printf_float+0x1ae>
 8005a5e:	3302      	adds	r3, #2
 8005a60:	e7f4      	b.n	8005a4c <_printf_float+0x198>
 8005a62:	2301      	movs	r3, #1
 8005a64:	e7f2      	b.n	8005a4c <_printf_float+0x198>
 8005a66:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005a6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a6c:	4299      	cmp	r1, r3
 8005a6e:	db05      	blt.n	8005a7c <_printf_float+0x1c8>
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	6121      	str	r1, [r4, #16]
 8005a74:	07d8      	lsls	r0, r3, #31
 8005a76:	d5ea      	bpl.n	8005a4e <_printf_float+0x19a>
 8005a78:	1c4b      	adds	r3, r1, #1
 8005a7a:	e7e7      	b.n	8005a4c <_printf_float+0x198>
 8005a7c:	2900      	cmp	r1, #0
 8005a7e:	bfcc      	ite	gt
 8005a80:	2201      	movgt	r2, #1
 8005a82:	f1c1 0202 	rsble	r2, r1, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	e7e0      	b.n	8005a4c <_printf_float+0x198>
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	055a      	lsls	r2, r3, #21
 8005a8e:	d407      	bmi.n	8005aa0 <_printf_float+0x1ec>
 8005a90:	6923      	ldr	r3, [r4, #16]
 8005a92:	4642      	mov	r2, r8
 8005a94:	4631      	mov	r1, r6
 8005a96:	4628      	mov	r0, r5
 8005a98:	47b8      	blx	r7
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	d12b      	bne.n	8005af6 <_printf_float+0x242>
 8005a9e:	e764      	b.n	800596a <_printf_float+0xb6>
 8005aa0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005aa4:	f240 80dc 	bls.w	8005c60 <_printf_float+0x3ac>
 8005aa8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005aac:	2200      	movs	r2, #0
 8005aae:	2300      	movs	r3, #0
 8005ab0:	f7fa ff7a 	bl	80009a8 <__aeabi_dcmpeq>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	d033      	beq.n	8005b20 <_printf_float+0x26c>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	4631      	mov	r1, r6
 8005abc:	4628      	mov	r0, r5
 8005abe:	4a35      	ldr	r2, [pc, #212]	@ (8005b94 <_printf_float+0x2e0>)
 8005ac0:	47b8      	blx	r7
 8005ac2:	3001      	adds	r0, #1
 8005ac4:	f43f af51 	beq.w	800596a <_printf_float+0xb6>
 8005ac8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005acc:	4543      	cmp	r3, r8
 8005ace:	db02      	blt.n	8005ad6 <_printf_float+0x222>
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	07d8      	lsls	r0, r3, #31
 8005ad4:	d50f      	bpl.n	8005af6 <_printf_float+0x242>
 8005ad6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005ada:	4631      	mov	r1, r6
 8005adc:	4628      	mov	r0, r5
 8005ade:	47b8      	blx	r7
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	f43f af42 	beq.w	800596a <_printf_float+0xb6>
 8005ae6:	f04f 0900 	mov.w	r9, #0
 8005aea:	f108 38ff 	add.w	r8, r8, #4294967295
 8005aee:	f104 0a1a 	add.w	sl, r4, #26
 8005af2:	45c8      	cmp	r8, r9
 8005af4:	dc09      	bgt.n	8005b0a <_printf_float+0x256>
 8005af6:	6823      	ldr	r3, [r4, #0]
 8005af8:	079b      	lsls	r3, r3, #30
 8005afa:	f100 8102 	bmi.w	8005d02 <_printf_float+0x44e>
 8005afe:	68e0      	ldr	r0, [r4, #12]
 8005b00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b02:	4298      	cmp	r0, r3
 8005b04:	bfb8      	it	lt
 8005b06:	4618      	movlt	r0, r3
 8005b08:	e731      	b.n	800596e <_printf_float+0xba>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	4652      	mov	r2, sl
 8005b0e:	4631      	mov	r1, r6
 8005b10:	4628      	mov	r0, r5
 8005b12:	47b8      	blx	r7
 8005b14:	3001      	adds	r0, #1
 8005b16:	f43f af28 	beq.w	800596a <_printf_float+0xb6>
 8005b1a:	f109 0901 	add.w	r9, r9, #1
 8005b1e:	e7e8      	b.n	8005af2 <_printf_float+0x23e>
 8005b20:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	dc38      	bgt.n	8005b98 <_printf_float+0x2e4>
 8005b26:	2301      	movs	r3, #1
 8005b28:	4631      	mov	r1, r6
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	4a19      	ldr	r2, [pc, #100]	@ (8005b94 <_printf_float+0x2e0>)
 8005b2e:	47b8      	blx	r7
 8005b30:	3001      	adds	r0, #1
 8005b32:	f43f af1a 	beq.w	800596a <_printf_float+0xb6>
 8005b36:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005b3a:	ea59 0303 	orrs.w	r3, r9, r3
 8005b3e:	d102      	bne.n	8005b46 <_printf_float+0x292>
 8005b40:	6823      	ldr	r3, [r4, #0]
 8005b42:	07d9      	lsls	r1, r3, #31
 8005b44:	d5d7      	bpl.n	8005af6 <_printf_float+0x242>
 8005b46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005b4a:	4631      	mov	r1, r6
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	47b8      	blx	r7
 8005b50:	3001      	adds	r0, #1
 8005b52:	f43f af0a 	beq.w	800596a <_printf_float+0xb6>
 8005b56:	f04f 0a00 	mov.w	sl, #0
 8005b5a:	f104 0b1a 	add.w	fp, r4, #26
 8005b5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b60:	425b      	negs	r3, r3
 8005b62:	4553      	cmp	r3, sl
 8005b64:	dc01      	bgt.n	8005b6a <_printf_float+0x2b6>
 8005b66:	464b      	mov	r3, r9
 8005b68:	e793      	b.n	8005a92 <_printf_float+0x1de>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	465a      	mov	r2, fp
 8005b6e:	4631      	mov	r1, r6
 8005b70:	4628      	mov	r0, r5
 8005b72:	47b8      	blx	r7
 8005b74:	3001      	adds	r0, #1
 8005b76:	f43f aef8 	beq.w	800596a <_printf_float+0xb6>
 8005b7a:	f10a 0a01 	add.w	sl, sl, #1
 8005b7e:	e7ee      	b.n	8005b5e <_printf_float+0x2aa>
 8005b80:	7fefffff 	.word	0x7fefffff
 8005b84:	08008bf2 	.word	0x08008bf2
 8005b88:	08008bee 	.word	0x08008bee
 8005b8c:	08008bfa 	.word	0x08008bfa
 8005b90:	08008bf6 	.word	0x08008bf6
 8005b94:	08008bfe 	.word	0x08008bfe
 8005b98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b9a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005b9e:	4553      	cmp	r3, sl
 8005ba0:	bfa8      	it	ge
 8005ba2:	4653      	movge	r3, sl
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	4699      	mov	r9, r3
 8005ba8:	dc36      	bgt.n	8005c18 <_printf_float+0x364>
 8005baa:	f04f 0b00 	mov.w	fp, #0
 8005bae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bb2:	f104 021a 	add.w	r2, r4, #26
 8005bb6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005bb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005bba:	eba3 0309 	sub.w	r3, r3, r9
 8005bbe:	455b      	cmp	r3, fp
 8005bc0:	dc31      	bgt.n	8005c26 <_printf_float+0x372>
 8005bc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005bc4:	459a      	cmp	sl, r3
 8005bc6:	dc3a      	bgt.n	8005c3e <_printf_float+0x38a>
 8005bc8:	6823      	ldr	r3, [r4, #0]
 8005bca:	07da      	lsls	r2, r3, #31
 8005bcc:	d437      	bmi.n	8005c3e <_printf_float+0x38a>
 8005bce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005bd0:	ebaa 0903 	sub.w	r9, sl, r3
 8005bd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005bd6:	ebaa 0303 	sub.w	r3, sl, r3
 8005bda:	4599      	cmp	r9, r3
 8005bdc:	bfa8      	it	ge
 8005bde:	4699      	movge	r9, r3
 8005be0:	f1b9 0f00 	cmp.w	r9, #0
 8005be4:	dc33      	bgt.n	8005c4e <_printf_float+0x39a>
 8005be6:	f04f 0800 	mov.w	r8, #0
 8005bea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bee:	f104 0b1a 	add.w	fp, r4, #26
 8005bf2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005bf4:	ebaa 0303 	sub.w	r3, sl, r3
 8005bf8:	eba3 0309 	sub.w	r3, r3, r9
 8005bfc:	4543      	cmp	r3, r8
 8005bfe:	f77f af7a 	ble.w	8005af6 <_printf_float+0x242>
 8005c02:	2301      	movs	r3, #1
 8005c04:	465a      	mov	r2, fp
 8005c06:	4631      	mov	r1, r6
 8005c08:	4628      	mov	r0, r5
 8005c0a:	47b8      	blx	r7
 8005c0c:	3001      	adds	r0, #1
 8005c0e:	f43f aeac 	beq.w	800596a <_printf_float+0xb6>
 8005c12:	f108 0801 	add.w	r8, r8, #1
 8005c16:	e7ec      	b.n	8005bf2 <_printf_float+0x33e>
 8005c18:	4642      	mov	r2, r8
 8005c1a:	4631      	mov	r1, r6
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	47b8      	blx	r7
 8005c20:	3001      	adds	r0, #1
 8005c22:	d1c2      	bne.n	8005baa <_printf_float+0x2f6>
 8005c24:	e6a1      	b.n	800596a <_printf_float+0xb6>
 8005c26:	2301      	movs	r3, #1
 8005c28:	4631      	mov	r1, r6
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	920a      	str	r2, [sp, #40]	@ 0x28
 8005c2e:	47b8      	blx	r7
 8005c30:	3001      	adds	r0, #1
 8005c32:	f43f ae9a 	beq.w	800596a <_printf_float+0xb6>
 8005c36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c38:	f10b 0b01 	add.w	fp, fp, #1
 8005c3c:	e7bb      	b.n	8005bb6 <_printf_float+0x302>
 8005c3e:	4631      	mov	r1, r6
 8005c40:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005c44:	4628      	mov	r0, r5
 8005c46:	47b8      	blx	r7
 8005c48:	3001      	adds	r0, #1
 8005c4a:	d1c0      	bne.n	8005bce <_printf_float+0x31a>
 8005c4c:	e68d      	b.n	800596a <_printf_float+0xb6>
 8005c4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c50:	464b      	mov	r3, r9
 8005c52:	4631      	mov	r1, r6
 8005c54:	4628      	mov	r0, r5
 8005c56:	4442      	add	r2, r8
 8005c58:	47b8      	blx	r7
 8005c5a:	3001      	adds	r0, #1
 8005c5c:	d1c3      	bne.n	8005be6 <_printf_float+0x332>
 8005c5e:	e684      	b.n	800596a <_printf_float+0xb6>
 8005c60:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005c64:	f1ba 0f01 	cmp.w	sl, #1
 8005c68:	dc01      	bgt.n	8005c6e <_printf_float+0x3ba>
 8005c6a:	07db      	lsls	r3, r3, #31
 8005c6c:	d536      	bpl.n	8005cdc <_printf_float+0x428>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	4642      	mov	r2, r8
 8005c72:	4631      	mov	r1, r6
 8005c74:	4628      	mov	r0, r5
 8005c76:	47b8      	blx	r7
 8005c78:	3001      	adds	r0, #1
 8005c7a:	f43f ae76 	beq.w	800596a <_printf_float+0xb6>
 8005c7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005c82:	4631      	mov	r1, r6
 8005c84:	4628      	mov	r0, r5
 8005c86:	47b8      	blx	r7
 8005c88:	3001      	adds	r0, #1
 8005c8a:	f43f ae6e 	beq.w	800596a <_printf_float+0xb6>
 8005c8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c92:	2200      	movs	r2, #0
 8005c94:	2300      	movs	r3, #0
 8005c96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c9a:	f7fa fe85 	bl	80009a8 <__aeabi_dcmpeq>
 8005c9e:	b9c0      	cbnz	r0, 8005cd2 <_printf_float+0x41e>
 8005ca0:	4653      	mov	r3, sl
 8005ca2:	f108 0201 	add.w	r2, r8, #1
 8005ca6:	4631      	mov	r1, r6
 8005ca8:	4628      	mov	r0, r5
 8005caa:	47b8      	blx	r7
 8005cac:	3001      	adds	r0, #1
 8005cae:	d10c      	bne.n	8005cca <_printf_float+0x416>
 8005cb0:	e65b      	b.n	800596a <_printf_float+0xb6>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	465a      	mov	r2, fp
 8005cb6:	4631      	mov	r1, r6
 8005cb8:	4628      	mov	r0, r5
 8005cba:	47b8      	blx	r7
 8005cbc:	3001      	adds	r0, #1
 8005cbe:	f43f ae54 	beq.w	800596a <_printf_float+0xb6>
 8005cc2:	f108 0801 	add.w	r8, r8, #1
 8005cc6:	45d0      	cmp	r8, sl
 8005cc8:	dbf3      	blt.n	8005cb2 <_printf_float+0x3fe>
 8005cca:	464b      	mov	r3, r9
 8005ccc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005cd0:	e6e0      	b.n	8005a94 <_printf_float+0x1e0>
 8005cd2:	f04f 0800 	mov.w	r8, #0
 8005cd6:	f104 0b1a 	add.w	fp, r4, #26
 8005cda:	e7f4      	b.n	8005cc6 <_printf_float+0x412>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	4642      	mov	r2, r8
 8005ce0:	e7e1      	b.n	8005ca6 <_printf_float+0x3f2>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	464a      	mov	r2, r9
 8005ce6:	4631      	mov	r1, r6
 8005ce8:	4628      	mov	r0, r5
 8005cea:	47b8      	blx	r7
 8005cec:	3001      	adds	r0, #1
 8005cee:	f43f ae3c 	beq.w	800596a <_printf_float+0xb6>
 8005cf2:	f108 0801 	add.w	r8, r8, #1
 8005cf6:	68e3      	ldr	r3, [r4, #12]
 8005cf8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005cfa:	1a5b      	subs	r3, r3, r1
 8005cfc:	4543      	cmp	r3, r8
 8005cfe:	dcf0      	bgt.n	8005ce2 <_printf_float+0x42e>
 8005d00:	e6fd      	b.n	8005afe <_printf_float+0x24a>
 8005d02:	f04f 0800 	mov.w	r8, #0
 8005d06:	f104 0919 	add.w	r9, r4, #25
 8005d0a:	e7f4      	b.n	8005cf6 <_printf_float+0x442>

08005d0c <_printf_common>:
 8005d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d10:	4616      	mov	r6, r2
 8005d12:	4698      	mov	r8, r3
 8005d14:	688a      	ldr	r2, [r1, #8]
 8005d16:	690b      	ldr	r3, [r1, #16]
 8005d18:	4607      	mov	r7, r0
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	bfb8      	it	lt
 8005d1e:	4613      	movlt	r3, r2
 8005d20:	6033      	str	r3, [r6, #0]
 8005d22:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d26:	460c      	mov	r4, r1
 8005d28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d2c:	b10a      	cbz	r2, 8005d32 <_printf_common+0x26>
 8005d2e:	3301      	adds	r3, #1
 8005d30:	6033      	str	r3, [r6, #0]
 8005d32:	6823      	ldr	r3, [r4, #0]
 8005d34:	0699      	lsls	r1, r3, #26
 8005d36:	bf42      	ittt	mi
 8005d38:	6833      	ldrmi	r3, [r6, #0]
 8005d3a:	3302      	addmi	r3, #2
 8005d3c:	6033      	strmi	r3, [r6, #0]
 8005d3e:	6825      	ldr	r5, [r4, #0]
 8005d40:	f015 0506 	ands.w	r5, r5, #6
 8005d44:	d106      	bne.n	8005d54 <_printf_common+0x48>
 8005d46:	f104 0a19 	add.w	sl, r4, #25
 8005d4a:	68e3      	ldr	r3, [r4, #12]
 8005d4c:	6832      	ldr	r2, [r6, #0]
 8005d4e:	1a9b      	subs	r3, r3, r2
 8005d50:	42ab      	cmp	r3, r5
 8005d52:	dc2b      	bgt.n	8005dac <_printf_common+0xa0>
 8005d54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d58:	6822      	ldr	r2, [r4, #0]
 8005d5a:	3b00      	subs	r3, #0
 8005d5c:	bf18      	it	ne
 8005d5e:	2301      	movne	r3, #1
 8005d60:	0692      	lsls	r2, r2, #26
 8005d62:	d430      	bmi.n	8005dc6 <_printf_common+0xba>
 8005d64:	4641      	mov	r1, r8
 8005d66:	4638      	mov	r0, r7
 8005d68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d6c:	47c8      	blx	r9
 8005d6e:	3001      	adds	r0, #1
 8005d70:	d023      	beq.n	8005dba <_printf_common+0xae>
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	6922      	ldr	r2, [r4, #16]
 8005d76:	f003 0306 	and.w	r3, r3, #6
 8005d7a:	2b04      	cmp	r3, #4
 8005d7c:	bf14      	ite	ne
 8005d7e:	2500      	movne	r5, #0
 8005d80:	6833      	ldreq	r3, [r6, #0]
 8005d82:	f04f 0600 	mov.w	r6, #0
 8005d86:	bf08      	it	eq
 8005d88:	68e5      	ldreq	r5, [r4, #12]
 8005d8a:	f104 041a 	add.w	r4, r4, #26
 8005d8e:	bf08      	it	eq
 8005d90:	1aed      	subeq	r5, r5, r3
 8005d92:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005d96:	bf08      	it	eq
 8005d98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	bfc4      	itt	gt
 8005da0:	1a9b      	subgt	r3, r3, r2
 8005da2:	18ed      	addgt	r5, r5, r3
 8005da4:	42b5      	cmp	r5, r6
 8005da6:	d11a      	bne.n	8005dde <_printf_common+0xd2>
 8005da8:	2000      	movs	r0, #0
 8005daa:	e008      	b.n	8005dbe <_printf_common+0xb2>
 8005dac:	2301      	movs	r3, #1
 8005dae:	4652      	mov	r2, sl
 8005db0:	4641      	mov	r1, r8
 8005db2:	4638      	mov	r0, r7
 8005db4:	47c8      	blx	r9
 8005db6:	3001      	adds	r0, #1
 8005db8:	d103      	bne.n	8005dc2 <_printf_common+0xb6>
 8005dba:	f04f 30ff 	mov.w	r0, #4294967295
 8005dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc2:	3501      	adds	r5, #1
 8005dc4:	e7c1      	b.n	8005d4a <_printf_common+0x3e>
 8005dc6:	2030      	movs	r0, #48	@ 0x30
 8005dc8:	18e1      	adds	r1, r4, r3
 8005dca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005dce:	1c5a      	adds	r2, r3, #1
 8005dd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005dd4:	4422      	add	r2, r4
 8005dd6:	3302      	adds	r3, #2
 8005dd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ddc:	e7c2      	b.n	8005d64 <_printf_common+0x58>
 8005dde:	2301      	movs	r3, #1
 8005de0:	4622      	mov	r2, r4
 8005de2:	4641      	mov	r1, r8
 8005de4:	4638      	mov	r0, r7
 8005de6:	47c8      	blx	r9
 8005de8:	3001      	adds	r0, #1
 8005dea:	d0e6      	beq.n	8005dba <_printf_common+0xae>
 8005dec:	3601      	adds	r6, #1
 8005dee:	e7d9      	b.n	8005da4 <_printf_common+0x98>

08005df0 <_printf_i>:
 8005df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005df4:	7e0f      	ldrb	r7, [r1, #24]
 8005df6:	4691      	mov	r9, r2
 8005df8:	2f78      	cmp	r7, #120	@ 0x78
 8005dfa:	4680      	mov	r8, r0
 8005dfc:	460c      	mov	r4, r1
 8005dfe:	469a      	mov	sl, r3
 8005e00:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e06:	d807      	bhi.n	8005e18 <_printf_i+0x28>
 8005e08:	2f62      	cmp	r7, #98	@ 0x62
 8005e0a:	d80a      	bhi.n	8005e22 <_printf_i+0x32>
 8005e0c:	2f00      	cmp	r7, #0
 8005e0e:	f000 80d1 	beq.w	8005fb4 <_printf_i+0x1c4>
 8005e12:	2f58      	cmp	r7, #88	@ 0x58
 8005e14:	f000 80b8 	beq.w	8005f88 <_printf_i+0x198>
 8005e18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e20:	e03a      	b.n	8005e98 <_printf_i+0xa8>
 8005e22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e26:	2b15      	cmp	r3, #21
 8005e28:	d8f6      	bhi.n	8005e18 <_printf_i+0x28>
 8005e2a:	a101      	add	r1, pc, #4	@ (adr r1, 8005e30 <_printf_i+0x40>)
 8005e2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e30:	08005e89 	.word	0x08005e89
 8005e34:	08005e9d 	.word	0x08005e9d
 8005e38:	08005e19 	.word	0x08005e19
 8005e3c:	08005e19 	.word	0x08005e19
 8005e40:	08005e19 	.word	0x08005e19
 8005e44:	08005e19 	.word	0x08005e19
 8005e48:	08005e9d 	.word	0x08005e9d
 8005e4c:	08005e19 	.word	0x08005e19
 8005e50:	08005e19 	.word	0x08005e19
 8005e54:	08005e19 	.word	0x08005e19
 8005e58:	08005e19 	.word	0x08005e19
 8005e5c:	08005f9b 	.word	0x08005f9b
 8005e60:	08005ec7 	.word	0x08005ec7
 8005e64:	08005f55 	.word	0x08005f55
 8005e68:	08005e19 	.word	0x08005e19
 8005e6c:	08005e19 	.word	0x08005e19
 8005e70:	08005fbd 	.word	0x08005fbd
 8005e74:	08005e19 	.word	0x08005e19
 8005e78:	08005ec7 	.word	0x08005ec7
 8005e7c:	08005e19 	.word	0x08005e19
 8005e80:	08005e19 	.word	0x08005e19
 8005e84:	08005f5d 	.word	0x08005f5d
 8005e88:	6833      	ldr	r3, [r6, #0]
 8005e8a:	1d1a      	adds	r2, r3, #4
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6032      	str	r2, [r6, #0]
 8005e90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e09c      	b.n	8005fd6 <_printf_i+0x1e6>
 8005e9c:	6833      	ldr	r3, [r6, #0]
 8005e9e:	6820      	ldr	r0, [r4, #0]
 8005ea0:	1d19      	adds	r1, r3, #4
 8005ea2:	6031      	str	r1, [r6, #0]
 8005ea4:	0606      	lsls	r6, r0, #24
 8005ea6:	d501      	bpl.n	8005eac <_printf_i+0xbc>
 8005ea8:	681d      	ldr	r5, [r3, #0]
 8005eaa:	e003      	b.n	8005eb4 <_printf_i+0xc4>
 8005eac:	0645      	lsls	r5, r0, #25
 8005eae:	d5fb      	bpl.n	8005ea8 <_printf_i+0xb8>
 8005eb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005eb4:	2d00      	cmp	r5, #0
 8005eb6:	da03      	bge.n	8005ec0 <_printf_i+0xd0>
 8005eb8:	232d      	movs	r3, #45	@ 0x2d
 8005eba:	426d      	negs	r5, r5
 8005ebc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ec0:	230a      	movs	r3, #10
 8005ec2:	4858      	ldr	r0, [pc, #352]	@ (8006024 <_printf_i+0x234>)
 8005ec4:	e011      	b.n	8005eea <_printf_i+0xfa>
 8005ec6:	6821      	ldr	r1, [r4, #0]
 8005ec8:	6833      	ldr	r3, [r6, #0]
 8005eca:	0608      	lsls	r0, r1, #24
 8005ecc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ed0:	d402      	bmi.n	8005ed8 <_printf_i+0xe8>
 8005ed2:	0649      	lsls	r1, r1, #25
 8005ed4:	bf48      	it	mi
 8005ed6:	b2ad      	uxthmi	r5, r5
 8005ed8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005eda:	6033      	str	r3, [r6, #0]
 8005edc:	bf14      	ite	ne
 8005ede:	230a      	movne	r3, #10
 8005ee0:	2308      	moveq	r3, #8
 8005ee2:	4850      	ldr	r0, [pc, #320]	@ (8006024 <_printf_i+0x234>)
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005eea:	6866      	ldr	r6, [r4, #4]
 8005eec:	2e00      	cmp	r6, #0
 8005eee:	60a6      	str	r6, [r4, #8]
 8005ef0:	db05      	blt.n	8005efe <_printf_i+0x10e>
 8005ef2:	6821      	ldr	r1, [r4, #0]
 8005ef4:	432e      	orrs	r6, r5
 8005ef6:	f021 0104 	bic.w	r1, r1, #4
 8005efa:	6021      	str	r1, [r4, #0]
 8005efc:	d04b      	beq.n	8005f96 <_printf_i+0x1a6>
 8005efe:	4616      	mov	r6, r2
 8005f00:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f04:	fb03 5711 	mls	r7, r3, r1, r5
 8005f08:	5dc7      	ldrb	r7, [r0, r7]
 8005f0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f0e:	462f      	mov	r7, r5
 8005f10:	42bb      	cmp	r3, r7
 8005f12:	460d      	mov	r5, r1
 8005f14:	d9f4      	bls.n	8005f00 <_printf_i+0x110>
 8005f16:	2b08      	cmp	r3, #8
 8005f18:	d10b      	bne.n	8005f32 <_printf_i+0x142>
 8005f1a:	6823      	ldr	r3, [r4, #0]
 8005f1c:	07df      	lsls	r7, r3, #31
 8005f1e:	d508      	bpl.n	8005f32 <_printf_i+0x142>
 8005f20:	6923      	ldr	r3, [r4, #16]
 8005f22:	6861      	ldr	r1, [r4, #4]
 8005f24:	4299      	cmp	r1, r3
 8005f26:	bfde      	ittt	le
 8005f28:	2330      	movle	r3, #48	@ 0x30
 8005f2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f32:	1b92      	subs	r2, r2, r6
 8005f34:	6122      	str	r2, [r4, #16]
 8005f36:	464b      	mov	r3, r9
 8005f38:	4621      	mov	r1, r4
 8005f3a:	4640      	mov	r0, r8
 8005f3c:	f8cd a000 	str.w	sl, [sp]
 8005f40:	aa03      	add	r2, sp, #12
 8005f42:	f7ff fee3 	bl	8005d0c <_printf_common>
 8005f46:	3001      	adds	r0, #1
 8005f48:	d14a      	bne.n	8005fe0 <_printf_i+0x1f0>
 8005f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4e:	b004      	add	sp, #16
 8005f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f54:	6823      	ldr	r3, [r4, #0]
 8005f56:	f043 0320 	orr.w	r3, r3, #32
 8005f5a:	6023      	str	r3, [r4, #0]
 8005f5c:	2778      	movs	r7, #120	@ 0x78
 8005f5e:	4832      	ldr	r0, [pc, #200]	@ (8006028 <_printf_i+0x238>)
 8005f60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	6831      	ldr	r1, [r6, #0]
 8005f68:	061f      	lsls	r7, r3, #24
 8005f6a:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f6e:	d402      	bmi.n	8005f76 <_printf_i+0x186>
 8005f70:	065f      	lsls	r7, r3, #25
 8005f72:	bf48      	it	mi
 8005f74:	b2ad      	uxthmi	r5, r5
 8005f76:	6031      	str	r1, [r6, #0]
 8005f78:	07d9      	lsls	r1, r3, #31
 8005f7a:	bf44      	itt	mi
 8005f7c:	f043 0320 	orrmi.w	r3, r3, #32
 8005f80:	6023      	strmi	r3, [r4, #0]
 8005f82:	b11d      	cbz	r5, 8005f8c <_printf_i+0x19c>
 8005f84:	2310      	movs	r3, #16
 8005f86:	e7ad      	b.n	8005ee4 <_printf_i+0xf4>
 8005f88:	4826      	ldr	r0, [pc, #152]	@ (8006024 <_printf_i+0x234>)
 8005f8a:	e7e9      	b.n	8005f60 <_printf_i+0x170>
 8005f8c:	6823      	ldr	r3, [r4, #0]
 8005f8e:	f023 0320 	bic.w	r3, r3, #32
 8005f92:	6023      	str	r3, [r4, #0]
 8005f94:	e7f6      	b.n	8005f84 <_printf_i+0x194>
 8005f96:	4616      	mov	r6, r2
 8005f98:	e7bd      	b.n	8005f16 <_printf_i+0x126>
 8005f9a:	6833      	ldr	r3, [r6, #0]
 8005f9c:	6825      	ldr	r5, [r4, #0]
 8005f9e:	1d18      	adds	r0, r3, #4
 8005fa0:	6961      	ldr	r1, [r4, #20]
 8005fa2:	6030      	str	r0, [r6, #0]
 8005fa4:	062e      	lsls	r6, r5, #24
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	d501      	bpl.n	8005fae <_printf_i+0x1be>
 8005faa:	6019      	str	r1, [r3, #0]
 8005fac:	e002      	b.n	8005fb4 <_printf_i+0x1c4>
 8005fae:	0668      	lsls	r0, r5, #25
 8005fb0:	d5fb      	bpl.n	8005faa <_printf_i+0x1ba>
 8005fb2:	8019      	strh	r1, [r3, #0]
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	4616      	mov	r6, r2
 8005fb8:	6123      	str	r3, [r4, #16]
 8005fba:	e7bc      	b.n	8005f36 <_printf_i+0x146>
 8005fbc:	6833      	ldr	r3, [r6, #0]
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	1d1a      	adds	r2, r3, #4
 8005fc2:	6032      	str	r2, [r6, #0]
 8005fc4:	681e      	ldr	r6, [r3, #0]
 8005fc6:	6862      	ldr	r2, [r4, #4]
 8005fc8:	4630      	mov	r0, r6
 8005fca:	f000 f9d6 	bl	800637a <memchr>
 8005fce:	b108      	cbz	r0, 8005fd4 <_printf_i+0x1e4>
 8005fd0:	1b80      	subs	r0, r0, r6
 8005fd2:	6060      	str	r0, [r4, #4]
 8005fd4:	6863      	ldr	r3, [r4, #4]
 8005fd6:	6123      	str	r3, [r4, #16]
 8005fd8:	2300      	movs	r3, #0
 8005fda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fde:	e7aa      	b.n	8005f36 <_printf_i+0x146>
 8005fe0:	4632      	mov	r2, r6
 8005fe2:	4649      	mov	r1, r9
 8005fe4:	4640      	mov	r0, r8
 8005fe6:	6923      	ldr	r3, [r4, #16]
 8005fe8:	47d0      	blx	sl
 8005fea:	3001      	adds	r0, #1
 8005fec:	d0ad      	beq.n	8005f4a <_printf_i+0x15a>
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	079b      	lsls	r3, r3, #30
 8005ff2:	d413      	bmi.n	800601c <_printf_i+0x22c>
 8005ff4:	68e0      	ldr	r0, [r4, #12]
 8005ff6:	9b03      	ldr	r3, [sp, #12]
 8005ff8:	4298      	cmp	r0, r3
 8005ffa:	bfb8      	it	lt
 8005ffc:	4618      	movlt	r0, r3
 8005ffe:	e7a6      	b.n	8005f4e <_printf_i+0x15e>
 8006000:	2301      	movs	r3, #1
 8006002:	4632      	mov	r2, r6
 8006004:	4649      	mov	r1, r9
 8006006:	4640      	mov	r0, r8
 8006008:	47d0      	blx	sl
 800600a:	3001      	adds	r0, #1
 800600c:	d09d      	beq.n	8005f4a <_printf_i+0x15a>
 800600e:	3501      	adds	r5, #1
 8006010:	68e3      	ldr	r3, [r4, #12]
 8006012:	9903      	ldr	r1, [sp, #12]
 8006014:	1a5b      	subs	r3, r3, r1
 8006016:	42ab      	cmp	r3, r5
 8006018:	dcf2      	bgt.n	8006000 <_printf_i+0x210>
 800601a:	e7eb      	b.n	8005ff4 <_printf_i+0x204>
 800601c:	2500      	movs	r5, #0
 800601e:	f104 0619 	add.w	r6, r4, #25
 8006022:	e7f5      	b.n	8006010 <_printf_i+0x220>
 8006024:	08008c00 	.word	0x08008c00
 8006028:	08008c11 	.word	0x08008c11

0800602c <std>:
 800602c:	2300      	movs	r3, #0
 800602e:	b510      	push	{r4, lr}
 8006030:	4604      	mov	r4, r0
 8006032:	e9c0 3300 	strd	r3, r3, [r0]
 8006036:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800603a:	6083      	str	r3, [r0, #8]
 800603c:	8181      	strh	r1, [r0, #12]
 800603e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006040:	81c2      	strh	r2, [r0, #14]
 8006042:	6183      	str	r3, [r0, #24]
 8006044:	4619      	mov	r1, r3
 8006046:	2208      	movs	r2, #8
 8006048:	305c      	adds	r0, #92	@ 0x5c
 800604a:	f000 f916 	bl	800627a <memset>
 800604e:	4b0d      	ldr	r3, [pc, #52]	@ (8006084 <std+0x58>)
 8006050:	6224      	str	r4, [r4, #32]
 8006052:	6263      	str	r3, [r4, #36]	@ 0x24
 8006054:	4b0c      	ldr	r3, [pc, #48]	@ (8006088 <std+0x5c>)
 8006056:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006058:	4b0c      	ldr	r3, [pc, #48]	@ (800608c <std+0x60>)
 800605a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800605c:	4b0c      	ldr	r3, [pc, #48]	@ (8006090 <std+0x64>)
 800605e:	6323      	str	r3, [r4, #48]	@ 0x30
 8006060:	4b0c      	ldr	r3, [pc, #48]	@ (8006094 <std+0x68>)
 8006062:	429c      	cmp	r4, r3
 8006064:	d006      	beq.n	8006074 <std+0x48>
 8006066:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800606a:	4294      	cmp	r4, r2
 800606c:	d002      	beq.n	8006074 <std+0x48>
 800606e:	33d0      	adds	r3, #208	@ 0xd0
 8006070:	429c      	cmp	r4, r3
 8006072:	d105      	bne.n	8006080 <std+0x54>
 8006074:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800607c:	f000 b97a 	b.w	8006374 <__retarget_lock_init_recursive>
 8006080:	bd10      	pop	{r4, pc}
 8006082:	bf00      	nop
 8006084:	080061f5 	.word	0x080061f5
 8006088:	08006217 	.word	0x08006217
 800608c:	0800624f 	.word	0x0800624f
 8006090:	08006273 	.word	0x08006273
 8006094:	20000590 	.word	0x20000590

08006098 <stdio_exit_handler>:
 8006098:	4a02      	ldr	r2, [pc, #8]	@ (80060a4 <stdio_exit_handler+0xc>)
 800609a:	4903      	ldr	r1, [pc, #12]	@ (80060a8 <stdio_exit_handler+0x10>)
 800609c:	4803      	ldr	r0, [pc, #12]	@ (80060ac <stdio_exit_handler+0x14>)
 800609e:	f000 b869 	b.w	8006174 <_fwalk_sglue>
 80060a2:	bf00      	nop
 80060a4:	20000014 	.word	0x20000014
 80060a8:	08007cf1 	.word	0x08007cf1
 80060ac:	20000024 	.word	0x20000024

080060b0 <cleanup_stdio>:
 80060b0:	6841      	ldr	r1, [r0, #4]
 80060b2:	4b0c      	ldr	r3, [pc, #48]	@ (80060e4 <cleanup_stdio+0x34>)
 80060b4:	b510      	push	{r4, lr}
 80060b6:	4299      	cmp	r1, r3
 80060b8:	4604      	mov	r4, r0
 80060ba:	d001      	beq.n	80060c0 <cleanup_stdio+0x10>
 80060bc:	f001 fe18 	bl	8007cf0 <_fflush_r>
 80060c0:	68a1      	ldr	r1, [r4, #8]
 80060c2:	4b09      	ldr	r3, [pc, #36]	@ (80060e8 <cleanup_stdio+0x38>)
 80060c4:	4299      	cmp	r1, r3
 80060c6:	d002      	beq.n	80060ce <cleanup_stdio+0x1e>
 80060c8:	4620      	mov	r0, r4
 80060ca:	f001 fe11 	bl	8007cf0 <_fflush_r>
 80060ce:	68e1      	ldr	r1, [r4, #12]
 80060d0:	4b06      	ldr	r3, [pc, #24]	@ (80060ec <cleanup_stdio+0x3c>)
 80060d2:	4299      	cmp	r1, r3
 80060d4:	d004      	beq.n	80060e0 <cleanup_stdio+0x30>
 80060d6:	4620      	mov	r0, r4
 80060d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060dc:	f001 be08 	b.w	8007cf0 <_fflush_r>
 80060e0:	bd10      	pop	{r4, pc}
 80060e2:	bf00      	nop
 80060e4:	20000590 	.word	0x20000590
 80060e8:	200005f8 	.word	0x200005f8
 80060ec:	20000660 	.word	0x20000660

080060f0 <global_stdio_init.part.0>:
 80060f0:	b510      	push	{r4, lr}
 80060f2:	4b0b      	ldr	r3, [pc, #44]	@ (8006120 <global_stdio_init.part.0+0x30>)
 80060f4:	4c0b      	ldr	r4, [pc, #44]	@ (8006124 <global_stdio_init.part.0+0x34>)
 80060f6:	4a0c      	ldr	r2, [pc, #48]	@ (8006128 <global_stdio_init.part.0+0x38>)
 80060f8:	4620      	mov	r0, r4
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	2104      	movs	r1, #4
 80060fe:	2200      	movs	r2, #0
 8006100:	f7ff ff94 	bl	800602c <std>
 8006104:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006108:	2201      	movs	r2, #1
 800610a:	2109      	movs	r1, #9
 800610c:	f7ff ff8e 	bl	800602c <std>
 8006110:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006114:	2202      	movs	r2, #2
 8006116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800611a:	2112      	movs	r1, #18
 800611c:	f7ff bf86 	b.w	800602c <std>
 8006120:	200006c8 	.word	0x200006c8
 8006124:	20000590 	.word	0x20000590
 8006128:	08006099 	.word	0x08006099

0800612c <__sfp_lock_acquire>:
 800612c:	4801      	ldr	r0, [pc, #4]	@ (8006134 <__sfp_lock_acquire+0x8>)
 800612e:	f000 b922 	b.w	8006376 <__retarget_lock_acquire_recursive>
 8006132:	bf00      	nop
 8006134:	200006d1 	.word	0x200006d1

08006138 <__sfp_lock_release>:
 8006138:	4801      	ldr	r0, [pc, #4]	@ (8006140 <__sfp_lock_release+0x8>)
 800613a:	f000 b91d 	b.w	8006378 <__retarget_lock_release_recursive>
 800613e:	bf00      	nop
 8006140:	200006d1 	.word	0x200006d1

08006144 <__sinit>:
 8006144:	b510      	push	{r4, lr}
 8006146:	4604      	mov	r4, r0
 8006148:	f7ff fff0 	bl	800612c <__sfp_lock_acquire>
 800614c:	6a23      	ldr	r3, [r4, #32]
 800614e:	b11b      	cbz	r3, 8006158 <__sinit+0x14>
 8006150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006154:	f7ff bff0 	b.w	8006138 <__sfp_lock_release>
 8006158:	4b04      	ldr	r3, [pc, #16]	@ (800616c <__sinit+0x28>)
 800615a:	6223      	str	r3, [r4, #32]
 800615c:	4b04      	ldr	r3, [pc, #16]	@ (8006170 <__sinit+0x2c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1f5      	bne.n	8006150 <__sinit+0xc>
 8006164:	f7ff ffc4 	bl	80060f0 <global_stdio_init.part.0>
 8006168:	e7f2      	b.n	8006150 <__sinit+0xc>
 800616a:	bf00      	nop
 800616c:	080060b1 	.word	0x080060b1
 8006170:	200006c8 	.word	0x200006c8

08006174 <_fwalk_sglue>:
 8006174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006178:	4607      	mov	r7, r0
 800617a:	4688      	mov	r8, r1
 800617c:	4614      	mov	r4, r2
 800617e:	2600      	movs	r6, #0
 8006180:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006184:	f1b9 0901 	subs.w	r9, r9, #1
 8006188:	d505      	bpl.n	8006196 <_fwalk_sglue+0x22>
 800618a:	6824      	ldr	r4, [r4, #0]
 800618c:	2c00      	cmp	r4, #0
 800618e:	d1f7      	bne.n	8006180 <_fwalk_sglue+0xc>
 8006190:	4630      	mov	r0, r6
 8006192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006196:	89ab      	ldrh	r3, [r5, #12]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d907      	bls.n	80061ac <_fwalk_sglue+0x38>
 800619c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061a0:	3301      	adds	r3, #1
 80061a2:	d003      	beq.n	80061ac <_fwalk_sglue+0x38>
 80061a4:	4629      	mov	r1, r5
 80061a6:	4638      	mov	r0, r7
 80061a8:	47c0      	blx	r8
 80061aa:	4306      	orrs	r6, r0
 80061ac:	3568      	adds	r5, #104	@ 0x68
 80061ae:	e7e9      	b.n	8006184 <_fwalk_sglue+0x10>

080061b0 <siprintf>:
 80061b0:	b40e      	push	{r1, r2, r3}
 80061b2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80061b6:	b510      	push	{r4, lr}
 80061b8:	2400      	movs	r4, #0
 80061ba:	b09d      	sub	sp, #116	@ 0x74
 80061bc:	ab1f      	add	r3, sp, #124	@ 0x7c
 80061be:	9002      	str	r0, [sp, #8]
 80061c0:	9006      	str	r0, [sp, #24]
 80061c2:	9107      	str	r1, [sp, #28]
 80061c4:	9104      	str	r1, [sp, #16]
 80061c6:	4809      	ldr	r0, [pc, #36]	@ (80061ec <siprintf+0x3c>)
 80061c8:	4909      	ldr	r1, [pc, #36]	@ (80061f0 <siprintf+0x40>)
 80061ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80061ce:	9105      	str	r1, [sp, #20]
 80061d0:	6800      	ldr	r0, [r0, #0]
 80061d2:	a902      	add	r1, sp, #8
 80061d4:	9301      	str	r3, [sp, #4]
 80061d6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80061d8:	f001 fc0e 	bl	80079f8 <_svfiprintf_r>
 80061dc:	9b02      	ldr	r3, [sp, #8]
 80061de:	701c      	strb	r4, [r3, #0]
 80061e0:	b01d      	add	sp, #116	@ 0x74
 80061e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061e6:	b003      	add	sp, #12
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	20000020 	.word	0x20000020
 80061f0:	ffff0208 	.word	0xffff0208

080061f4 <__sread>:
 80061f4:	b510      	push	{r4, lr}
 80061f6:	460c      	mov	r4, r1
 80061f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061fc:	f000 f86c 	bl	80062d8 <_read_r>
 8006200:	2800      	cmp	r0, #0
 8006202:	bfab      	itete	ge
 8006204:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006206:	89a3      	ldrhlt	r3, [r4, #12]
 8006208:	181b      	addge	r3, r3, r0
 800620a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800620e:	bfac      	ite	ge
 8006210:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006212:	81a3      	strhlt	r3, [r4, #12]
 8006214:	bd10      	pop	{r4, pc}

08006216 <__swrite>:
 8006216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800621a:	461f      	mov	r7, r3
 800621c:	898b      	ldrh	r3, [r1, #12]
 800621e:	4605      	mov	r5, r0
 8006220:	05db      	lsls	r3, r3, #23
 8006222:	460c      	mov	r4, r1
 8006224:	4616      	mov	r6, r2
 8006226:	d505      	bpl.n	8006234 <__swrite+0x1e>
 8006228:	2302      	movs	r3, #2
 800622a:	2200      	movs	r2, #0
 800622c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006230:	f000 f840 	bl	80062b4 <_lseek_r>
 8006234:	89a3      	ldrh	r3, [r4, #12]
 8006236:	4632      	mov	r2, r6
 8006238:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800623c:	81a3      	strh	r3, [r4, #12]
 800623e:	4628      	mov	r0, r5
 8006240:	463b      	mov	r3, r7
 8006242:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800624a:	f000 b857 	b.w	80062fc <_write_r>

0800624e <__sseek>:
 800624e:	b510      	push	{r4, lr}
 8006250:	460c      	mov	r4, r1
 8006252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006256:	f000 f82d 	bl	80062b4 <_lseek_r>
 800625a:	1c43      	adds	r3, r0, #1
 800625c:	89a3      	ldrh	r3, [r4, #12]
 800625e:	bf15      	itete	ne
 8006260:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006262:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006266:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800626a:	81a3      	strheq	r3, [r4, #12]
 800626c:	bf18      	it	ne
 800626e:	81a3      	strhne	r3, [r4, #12]
 8006270:	bd10      	pop	{r4, pc}

08006272 <__sclose>:
 8006272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006276:	f000 b80d 	b.w	8006294 <_close_r>

0800627a <memset>:
 800627a:	4603      	mov	r3, r0
 800627c:	4402      	add	r2, r0
 800627e:	4293      	cmp	r3, r2
 8006280:	d100      	bne.n	8006284 <memset+0xa>
 8006282:	4770      	bx	lr
 8006284:	f803 1b01 	strb.w	r1, [r3], #1
 8006288:	e7f9      	b.n	800627e <memset+0x4>
	...

0800628c <_localeconv_r>:
 800628c:	4800      	ldr	r0, [pc, #0]	@ (8006290 <_localeconv_r+0x4>)
 800628e:	4770      	bx	lr
 8006290:	20000160 	.word	0x20000160

08006294 <_close_r>:
 8006294:	b538      	push	{r3, r4, r5, lr}
 8006296:	2300      	movs	r3, #0
 8006298:	4d05      	ldr	r5, [pc, #20]	@ (80062b0 <_close_r+0x1c>)
 800629a:	4604      	mov	r4, r0
 800629c:	4608      	mov	r0, r1
 800629e:	602b      	str	r3, [r5, #0]
 80062a0:	f7fb ff99 	bl	80021d6 <_close>
 80062a4:	1c43      	adds	r3, r0, #1
 80062a6:	d102      	bne.n	80062ae <_close_r+0x1a>
 80062a8:	682b      	ldr	r3, [r5, #0]
 80062aa:	b103      	cbz	r3, 80062ae <_close_r+0x1a>
 80062ac:	6023      	str	r3, [r4, #0]
 80062ae:	bd38      	pop	{r3, r4, r5, pc}
 80062b0:	200006cc 	.word	0x200006cc

080062b4 <_lseek_r>:
 80062b4:	b538      	push	{r3, r4, r5, lr}
 80062b6:	4604      	mov	r4, r0
 80062b8:	4608      	mov	r0, r1
 80062ba:	4611      	mov	r1, r2
 80062bc:	2200      	movs	r2, #0
 80062be:	4d05      	ldr	r5, [pc, #20]	@ (80062d4 <_lseek_r+0x20>)
 80062c0:	602a      	str	r2, [r5, #0]
 80062c2:	461a      	mov	r2, r3
 80062c4:	f7fb ffab 	bl	800221e <_lseek>
 80062c8:	1c43      	adds	r3, r0, #1
 80062ca:	d102      	bne.n	80062d2 <_lseek_r+0x1e>
 80062cc:	682b      	ldr	r3, [r5, #0]
 80062ce:	b103      	cbz	r3, 80062d2 <_lseek_r+0x1e>
 80062d0:	6023      	str	r3, [r4, #0]
 80062d2:	bd38      	pop	{r3, r4, r5, pc}
 80062d4:	200006cc 	.word	0x200006cc

080062d8 <_read_r>:
 80062d8:	b538      	push	{r3, r4, r5, lr}
 80062da:	4604      	mov	r4, r0
 80062dc:	4608      	mov	r0, r1
 80062de:	4611      	mov	r1, r2
 80062e0:	2200      	movs	r2, #0
 80062e2:	4d05      	ldr	r5, [pc, #20]	@ (80062f8 <_read_r+0x20>)
 80062e4:	602a      	str	r2, [r5, #0]
 80062e6:	461a      	mov	r2, r3
 80062e8:	f7fb ff3c 	bl	8002164 <_read>
 80062ec:	1c43      	adds	r3, r0, #1
 80062ee:	d102      	bne.n	80062f6 <_read_r+0x1e>
 80062f0:	682b      	ldr	r3, [r5, #0]
 80062f2:	b103      	cbz	r3, 80062f6 <_read_r+0x1e>
 80062f4:	6023      	str	r3, [r4, #0]
 80062f6:	bd38      	pop	{r3, r4, r5, pc}
 80062f8:	200006cc 	.word	0x200006cc

080062fc <_write_r>:
 80062fc:	b538      	push	{r3, r4, r5, lr}
 80062fe:	4604      	mov	r4, r0
 8006300:	4608      	mov	r0, r1
 8006302:	4611      	mov	r1, r2
 8006304:	2200      	movs	r2, #0
 8006306:	4d05      	ldr	r5, [pc, #20]	@ (800631c <_write_r+0x20>)
 8006308:	602a      	str	r2, [r5, #0]
 800630a:	461a      	mov	r2, r3
 800630c:	f7fb ff47 	bl	800219e <_write>
 8006310:	1c43      	adds	r3, r0, #1
 8006312:	d102      	bne.n	800631a <_write_r+0x1e>
 8006314:	682b      	ldr	r3, [r5, #0]
 8006316:	b103      	cbz	r3, 800631a <_write_r+0x1e>
 8006318:	6023      	str	r3, [r4, #0]
 800631a:	bd38      	pop	{r3, r4, r5, pc}
 800631c:	200006cc 	.word	0x200006cc

08006320 <__errno>:
 8006320:	4b01      	ldr	r3, [pc, #4]	@ (8006328 <__errno+0x8>)
 8006322:	6818      	ldr	r0, [r3, #0]
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	20000020 	.word	0x20000020

0800632c <__libc_init_array>:
 800632c:	b570      	push	{r4, r5, r6, lr}
 800632e:	2600      	movs	r6, #0
 8006330:	4d0c      	ldr	r5, [pc, #48]	@ (8006364 <__libc_init_array+0x38>)
 8006332:	4c0d      	ldr	r4, [pc, #52]	@ (8006368 <__libc_init_array+0x3c>)
 8006334:	1b64      	subs	r4, r4, r5
 8006336:	10a4      	asrs	r4, r4, #2
 8006338:	42a6      	cmp	r6, r4
 800633a:	d109      	bne.n	8006350 <__libc_init_array+0x24>
 800633c:	f002 f874 	bl	8008428 <_init>
 8006340:	2600      	movs	r6, #0
 8006342:	4d0a      	ldr	r5, [pc, #40]	@ (800636c <__libc_init_array+0x40>)
 8006344:	4c0a      	ldr	r4, [pc, #40]	@ (8006370 <__libc_init_array+0x44>)
 8006346:	1b64      	subs	r4, r4, r5
 8006348:	10a4      	asrs	r4, r4, #2
 800634a:	42a6      	cmp	r6, r4
 800634c:	d105      	bne.n	800635a <__libc_init_array+0x2e>
 800634e:	bd70      	pop	{r4, r5, r6, pc}
 8006350:	f855 3b04 	ldr.w	r3, [r5], #4
 8006354:	4798      	blx	r3
 8006356:	3601      	adds	r6, #1
 8006358:	e7ee      	b.n	8006338 <__libc_init_array+0xc>
 800635a:	f855 3b04 	ldr.w	r3, [r5], #4
 800635e:	4798      	blx	r3
 8006360:	3601      	adds	r6, #1
 8006362:	e7f2      	b.n	800634a <__libc_init_array+0x1e>
 8006364:	08008f6c 	.word	0x08008f6c
 8006368:	08008f6c 	.word	0x08008f6c
 800636c:	08008f6c 	.word	0x08008f6c
 8006370:	08008f70 	.word	0x08008f70

08006374 <__retarget_lock_init_recursive>:
 8006374:	4770      	bx	lr

08006376 <__retarget_lock_acquire_recursive>:
 8006376:	4770      	bx	lr

08006378 <__retarget_lock_release_recursive>:
 8006378:	4770      	bx	lr

0800637a <memchr>:
 800637a:	4603      	mov	r3, r0
 800637c:	b510      	push	{r4, lr}
 800637e:	b2c9      	uxtb	r1, r1
 8006380:	4402      	add	r2, r0
 8006382:	4293      	cmp	r3, r2
 8006384:	4618      	mov	r0, r3
 8006386:	d101      	bne.n	800638c <memchr+0x12>
 8006388:	2000      	movs	r0, #0
 800638a:	e003      	b.n	8006394 <memchr+0x1a>
 800638c:	7804      	ldrb	r4, [r0, #0]
 800638e:	3301      	adds	r3, #1
 8006390:	428c      	cmp	r4, r1
 8006392:	d1f6      	bne.n	8006382 <memchr+0x8>
 8006394:	bd10      	pop	{r4, pc}

08006396 <quorem>:
 8006396:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800639a:	6903      	ldr	r3, [r0, #16]
 800639c:	690c      	ldr	r4, [r1, #16]
 800639e:	4607      	mov	r7, r0
 80063a0:	42a3      	cmp	r3, r4
 80063a2:	db7e      	blt.n	80064a2 <quorem+0x10c>
 80063a4:	3c01      	subs	r4, #1
 80063a6:	00a3      	lsls	r3, r4, #2
 80063a8:	f100 0514 	add.w	r5, r0, #20
 80063ac:	f101 0814 	add.w	r8, r1, #20
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063b6:	9301      	str	r3, [sp, #4]
 80063b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80063bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063c0:	3301      	adds	r3, #1
 80063c2:	429a      	cmp	r2, r3
 80063c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80063c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063cc:	d32e      	bcc.n	800642c <quorem+0x96>
 80063ce:	f04f 0a00 	mov.w	sl, #0
 80063d2:	46c4      	mov	ip, r8
 80063d4:	46ae      	mov	lr, r5
 80063d6:	46d3      	mov	fp, sl
 80063d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80063dc:	b298      	uxth	r0, r3
 80063de:	fb06 a000 	mla	r0, r6, r0, sl
 80063e2:	0c1b      	lsrs	r3, r3, #16
 80063e4:	0c02      	lsrs	r2, r0, #16
 80063e6:	fb06 2303 	mla	r3, r6, r3, r2
 80063ea:	f8de 2000 	ldr.w	r2, [lr]
 80063ee:	b280      	uxth	r0, r0
 80063f0:	b292      	uxth	r2, r2
 80063f2:	1a12      	subs	r2, r2, r0
 80063f4:	445a      	add	r2, fp
 80063f6:	f8de 0000 	ldr.w	r0, [lr]
 80063fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80063fe:	b29b      	uxth	r3, r3
 8006400:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006404:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006408:	b292      	uxth	r2, r2
 800640a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800640e:	45e1      	cmp	r9, ip
 8006410:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006414:	f84e 2b04 	str.w	r2, [lr], #4
 8006418:	d2de      	bcs.n	80063d8 <quorem+0x42>
 800641a:	9b00      	ldr	r3, [sp, #0]
 800641c:	58eb      	ldr	r3, [r5, r3]
 800641e:	b92b      	cbnz	r3, 800642c <quorem+0x96>
 8006420:	9b01      	ldr	r3, [sp, #4]
 8006422:	3b04      	subs	r3, #4
 8006424:	429d      	cmp	r5, r3
 8006426:	461a      	mov	r2, r3
 8006428:	d32f      	bcc.n	800648a <quorem+0xf4>
 800642a:	613c      	str	r4, [r7, #16]
 800642c:	4638      	mov	r0, r7
 800642e:	f001 f97f 	bl	8007730 <__mcmp>
 8006432:	2800      	cmp	r0, #0
 8006434:	db25      	blt.n	8006482 <quorem+0xec>
 8006436:	4629      	mov	r1, r5
 8006438:	2000      	movs	r0, #0
 800643a:	f858 2b04 	ldr.w	r2, [r8], #4
 800643e:	f8d1 c000 	ldr.w	ip, [r1]
 8006442:	fa1f fe82 	uxth.w	lr, r2
 8006446:	fa1f f38c 	uxth.w	r3, ip
 800644a:	eba3 030e 	sub.w	r3, r3, lr
 800644e:	4403      	add	r3, r0
 8006450:	0c12      	lsrs	r2, r2, #16
 8006452:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006456:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800645a:	b29b      	uxth	r3, r3
 800645c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006460:	45c1      	cmp	r9, r8
 8006462:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006466:	f841 3b04 	str.w	r3, [r1], #4
 800646a:	d2e6      	bcs.n	800643a <quorem+0xa4>
 800646c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006470:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006474:	b922      	cbnz	r2, 8006480 <quorem+0xea>
 8006476:	3b04      	subs	r3, #4
 8006478:	429d      	cmp	r5, r3
 800647a:	461a      	mov	r2, r3
 800647c:	d30b      	bcc.n	8006496 <quorem+0x100>
 800647e:	613c      	str	r4, [r7, #16]
 8006480:	3601      	adds	r6, #1
 8006482:	4630      	mov	r0, r6
 8006484:	b003      	add	sp, #12
 8006486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800648a:	6812      	ldr	r2, [r2, #0]
 800648c:	3b04      	subs	r3, #4
 800648e:	2a00      	cmp	r2, #0
 8006490:	d1cb      	bne.n	800642a <quorem+0x94>
 8006492:	3c01      	subs	r4, #1
 8006494:	e7c6      	b.n	8006424 <quorem+0x8e>
 8006496:	6812      	ldr	r2, [r2, #0]
 8006498:	3b04      	subs	r3, #4
 800649a:	2a00      	cmp	r2, #0
 800649c:	d1ef      	bne.n	800647e <quorem+0xe8>
 800649e:	3c01      	subs	r4, #1
 80064a0:	e7ea      	b.n	8006478 <quorem+0xe2>
 80064a2:	2000      	movs	r0, #0
 80064a4:	e7ee      	b.n	8006484 <quorem+0xee>
	...

080064a8 <_dtoa_r>:
 80064a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ac:	4614      	mov	r4, r2
 80064ae:	461d      	mov	r5, r3
 80064b0:	69c7      	ldr	r7, [r0, #28]
 80064b2:	b097      	sub	sp, #92	@ 0x5c
 80064b4:	4681      	mov	r9, r0
 80064b6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80064ba:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80064bc:	b97f      	cbnz	r7, 80064de <_dtoa_r+0x36>
 80064be:	2010      	movs	r0, #16
 80064c0:	f000 fe0e 	bl	80070e0 <malloc>
 80064c4:	4602      	mov	r2, r0
 80064c6:	f8c9 001c 	str.w	r0, [r9, #28]
 80064ca:	b920      	cbnz	r0, 80064d6 <_dtoa_r+0x2e>
 80064cc:	21ef      	movs	r1, #239	@ 0xef
 80064ce:	4bac      	ldr	r3, [pc, #688]	@ (8006780 <_dtoa_r+0x2d8>)
 80064d0:	48ac      	ldr	r0, [pc, #688]	@ (8006784 <_dtoa_r+0x2dc>)
 80064d2:	f001 fc6d 	bl	8007db0 <__assert_func>
 80064d6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80064da:	6007      	str	r7, [r0, #0]
 80064dc:	60c7      	str	r7, [r0, #12]
 80064de:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80064e2:	6819      	ldr	r1, [r3, #0]
 80064e4:	b159      	cbz	r1, 80064fe <_dtoa_r+0x56>
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	2301      	movs	r3, #1
 80064ea:	4093      	lsls	r3, r2
 80064ec:	604a      	str	r2, [r1, #4]
 80064ee:	608b      	str	r3, [r1, #8]
 80064f0:	4648      	mov	r0, r9
 80064f2:	f000 feeb 	bl	80072cc <_Bfree>
 80064f6:	2200      	movs	r2, #0
 80064f8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	1e2b      	subs	r3, r5, #0
 8006500:	bfaf      	iteee	ge
 8006502:	2300      	movge	r3, #0
 8006504:	2201      	movlt	r2, #1
 8006506:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800650a:	9307      	strlt	r3, [sp, #28]
 800650c:	bfa8      	it	ge
 800650e:	6033      	strge	r3, [r6, #0]
 8006510:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8006514:	4b9c      	ldr	r3, [pc, #624]	@ (8006788 <_dtoa_r+0x2e0>)
 8006516:	bfb8      	it	lt
 8006518:	6032      	strlt	r2, [r6, #0]
 800651a:	ea33 0308 	bics.w	r3, r3, r8
 800651e:	d112      	bne.n	8006546 <_dtoa_r+0x9e>
 8006520:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006524:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006526:	6013      	str	r3, [r2, #0]
 8006528:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800652c:	4323      	orrs	r3, r4
 800652e:	f000 855e 	beq.w	8006fee <_dtoa_r+0xb46>
 8006532:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006534:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800678c <_dtoa_r+0x2e4>
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 8560 	beq.w	8006ffe <_dtoa_r+0xb56>
 800653e:	f10a 0303 	add.w	r3, sl, #3
 8006542:	f000 bd5a 	b.w	8006ffa <_dtoa_r+0xb52>
 8006546:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800654a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800654e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006552:	2200      	movs	r2, #0
 8006554:	2300      	movs	r3, #0
 8006556:	f7fa fa27 	bl	80009a8 <__aeabi_dcmpeq>
 800655a:	4607      	mov	r7, r0
 800655c:	b158      	cbz	r0, 8006576 <_dtoa_r+0xce>
 800655e:	2301      	movs	r3, #1
 8006560:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006562:	6013      	str	r3, [r2, #0]
 8006564:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006566:	b113      	cbz	r3, 800656e <_dtoa_r+0xc6>
 8006568:	4b89      	ldr	r3, [pc, #548]	@ (8006790 <_dtoa_r+0x2e8>)
 800656a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800656c:	6013      	str	r3, [r2, #0]
 800656e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8006794 <_dtoa_r+0x2ec>
 8006572:	f000 bd44 	b.w	8006ffe <_dtoa_r+0xb56>
 8006576:	ab14      	add	r3, sp, #80	@ 0x50
 8006578:	9301      	str	r3, [sp, #4]
 800657a:	ab15      	add	r3, sp, #84	@ 0x54
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	4648      	mov	r0, r9
 8006580:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006584:	f001 f984 	bl	8007890 <__d2b>
 8006588:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800658c:	9003      	str	r0, [sp, #12]
 800658e:	2e00      	cmp	r6, #0
 8006590:	d078      	beq.n	8006684 <_dtoa_r+0x1dc>
 8006592:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006596:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006598:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800659c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065a0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80065a4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80065a8:	9712      	str	r7, [sp, #72]	@ 0x48
 80065aa:	4619      	mov	r1, r3
 80065ac:	2200      	movs	r2, #0
 80065ae:	4b7a      	ldr	r3, [pc, #488]	@ (8006798 <_dtoa_r+0x2f0>)
 80065b0:	f7f9 fdda 	bl	8000168 <__aeabi_dsub>
 80065b4:	a36c      	add	r3, pc, #432	@ (adr r3, 8006768 <_dtoa_r+0x2c0>)
 80065b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ba:	f7f9 ff8d 	bl	80004d8 <__aeabi_dmul>
 80065be:	a36c      	add	r3, pc, #432	@ (adr r3, 8006770 <_dtoa_r+0x2c8>)
 80065c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c4:	f7f9 fdd2 	bl	800016c <__adddf3>
 80065c8:	4604      	mov	r4, r0
 80065ca:	4630      	mov	r0, r6
 80065cc:	460d      	mov	r5, r1
 80065ce:	f7f9 ff19 	bl	8000404 <__aeabi_i2d>
 80065d2:	a369      	add	r3, pc, #420	@ (adr r3, 8006778 <_dtoa_r+0x2d0>)
 80065d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d8:	f7f9 ff7e 	bl	80004d8 <__aeabi_dmul>
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	4620      	mov	r0, r4
 80065e2:	4629      	mov	r1, r5
 80065e4:	f7f9 fdc2 	bl	800016c <__adddf3>
 80065e8:	4604      	mov	r4, r0
 80065ea:	460d      	mov	r5, r1
 80065ec:	f7fa fa24 	bl	8000a38 <__aeabi_d2iz>
 80065f0:	2200      	movs	r2, #0
 80065f2:	4607      	mov	r7, r0
 80065f4:	2300      	movs	r3, #0
 80065f6:	4620      	mov	r0, r4
 80065f8:	4629      	mov	r1, r5
 80065fa:	f7fa f9df 	bl	80009bc <__aeabi_dcmplt>
 80065fe:	b140      	cbz	r0, 8006612 <_dtoa_r+0x16a>
 8006600:	4638      	mov	r0, r7
 8006602:	f7f9 feff 	bl	8000404 <__aeabi_i2d>
 8006606:	4622      	mov	r2, r4
 8006608:	462b      	mov	r3, r5
 800660a:	f7fa f9cd 	bl	80009a8 <__aeabi_dcmpeq>
 800660e:	b900      	cbnz	r0, 8006612 <_dtoa_r+0x16a>
 8006610:	3f01      	subs	r7, #1
 8006612:	2f16      	cmp	r7, #22
 8006614:	d854      	bhi.n	80066c0 <_dtoa_r+0x218>
 8006616:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800661a:	4b60      	ldr	r3, [pc, #384]	@ (800679c <_dtoa_r+0x2f4>)
 800661c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006624:	f7fa f9ca 	bl	80009bc <__aeabi_dcmplt>
 8006628:	2800      	cmp	r0, #0
 800662a:	d04b      	beq.n	80066c4 <_dtoa_r+0x21c>
 800662c:	2300      	movs	r3, #0
 800662e:	3f01      	subs	r7, #1
 8006630:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006632:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006634:	1b9b      	subs	r3, r3, r6
 8006636:	1e5a      	subs	r2, r3, #1
 8006638:	bf49      	itett	mi
 800663a:	f1c3 0301 	rsbmi	r3, r3, #1
 800663e:	2300      	movpl	r3, #0
 8006640:	9304      	strmi	r3, [sp, #16]
 8006642:	2300      	movmi	r3, #0
 8006644:	9209      	str	r2, [sp, #36]	@ 0x24
 8006646:	bf54      	ite	pl
 8006648:	9304      	strpl	r3, [sp, #16]
 800664a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800664c:	2f00      	cmp	r7, #0
 800664e:	db3b      	blt.n	80066c8 <_dtoa_r+0x220>
 8006650:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006652:	970e      	str	r7, [sp, #56]	@ 0x38
 8006654:	443b      	add	r3, r7
 8006656:	9309      	str	r3, [sp, #36]	@ 0x24
 8006658:	2300      	movs	r3, #0
 800665a:	930a      	str	r3, [sp, #40]	@ 0x28
 800665c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800665e:	2b09      	cmp	r3, #9
 8006660:	d865      	bhi.n	800672e <_dtoa_r+0x286>
 8006662:	2b05      	cmp	r3, #5
 8006664:	bfc4      	itt	gt
 8006666:	3b04      	subgt	r3, #4
 8006668:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800666a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800666c:	bfc8      	it	gt
 800666e:	2400      	movgt	r4, #0
 8006670:	f1a3 0302 	sub.w	r3, r3, #2
 8006674:	bfd8      	it	le
 8006676:	2401      	movle	r4, #1
 8006678:	2b03      	cmp	r3, #3
 800667a:	d864      	bhi.n	8006746 <_dtoa_r+0x29e>
 800667c:	e8df f003 	tbb	[pc, r3]
 8006680:	2c385553 	.word	0x2c385553
 8006684:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006688:	441e      	add	r6, r3
 800668a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800668e:	2b20      	cmp	r3, #32
 8006690:	bfc1      	itttt	gt
 8006692:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006696:	fa08 f803 	lslgt.w	r8, r8, r3
 800669a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800669e:	fa24 f303 	lsrgt.w	r3, r4, r3
 80066a2:	bfd6      	itet	le
 80066a4:	f1c3 0320 	rsble	r3, r3, #32
 80066a8:	ea48 0003 	orrgt.w	r0, r8, r3
 80066ac:	fa04 f003 	lslle.w	r0, r4, r3
 80066b0:	f7f9 fe98 	bl	80003e4 <__aeabi_ui2d>
 80066b4:	2201      	movs	r2, #1
 80066b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80066ba:	3e01      	subs	r6, #1
 80066bc:	9212      	str	r2, [sp, #72]	@ 0x48
 80066be:	e774      	b.n	80065aa <_dtoa_r+0x102>
 80066c0:	2301      	movs	r3, #1
 80066c2:	e7b5      	b.n	8006630 <_dtoa_r+0x188>
 80066c4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80066c6:	e7b4      	b.n	8006632 <_dtoa_r+0x18a>
 80066c8:	9b04      	ldr	r3, [sp, #16]
 80066ca:	1bdb      	subs	r3, r3, r7
 80066cc:	9304      	str	r3, [sp, #16]
 80066ce:	427b      	negs	r3, r7
 80066d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80066d2:	2300      	movs	r3, #0
 80066d4:	930e      	str	r3, [sp, #56]	@ 0x38
 80066d6:	e7c1      	b.n	800665c <_dtoa_r+0x1b4>
 80066d8:	2301      	movs	r3, #1
 80066da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80066de:	eb07 0b03 	add.w	fp, r7, r3
 80066e2:	f10b 0301 	add.w	r3, fp, #1
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	9308      	str	r3, [sp, #32]
 80066ea:	bfb8      	it	lt
 80066ec:	2301      	movlt	r3, #1
 80066ee:	e006      	b.n	80066fe <_dtoa_r+0x256>
 80066f0:	2301      	movs	r3, #1
 80066f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	dd28      	ble.n	800674c <_dtoa_r+0x2a4>
 80066fa:	469b      	mov	fp, r3
 80066fc:	9308      	str	r3, [sp, #32]
 80066fe:	2100      	movs	r1, #0
 8006700:	2204      	movs	r2, #4
 8006702:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006706:	f102 0514 	add.w	r5, r2, #20
 800670a:	429d      	cmp	r5, r3
 800670c:	d926      	bls.n	800675c <_dtoa_r+0x2b4>
 800670e:	6041      	str	r1, [r0, #4]
 8006710:	4648      	mov	r0, r9
 8006712:	f000 fd9b 	bl	800724c <_Balloc>
 8006716:	4682      	mov	sl, r0
 8006718:	2800      	cmp	r0, #0
 800671a:	d143      	bne.n	80067a4 <_dtoa_r+0x2fc>
 800671c:	4602      	mov	r2, r0
 800671e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006722:	4b1f      	ldr	r3, [pc, #124]	@ (80067a0 <_dtoa_r+0x2f8>)
 8006724:	e6d4      	b.n	80064d0 <_dtoa_r+0x28>
 8006726:	2300      	movs	r3, #0
 8006728:	e7e3      	b.n	80066f2 <_dtoa_r+0x24a>
 800672a:	2300      	movs	r3, #0
 800672c:	e7d5      	b.n	80066da <_dtoa_r+0x232>
 800672e:	2401      	movs	r4, #1
 8006730:	2300      	movs	r3, #0
 8006732:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006734:	9320      	str	r3, [sp, #128]	@ 0x80
 8006736:	f04f 3bff 	mov.w	fp, #4294967295
 800673a:	2200      	movs	r2, #0
 800673c:	2312      	movs	r3, #18
 800673e:	f8cd b020 	str.w	fp, [sp, #32]
 8006742:	9221      	str	r2, [sp, #132]	@ 0x84
 8006744:	e7db      	b.n	80066fe <_dtoa_r+0x256>
 8006746:	2301      	movs	r3, #1
 8006748:	930b      	str	r3, [sp, #44]	@ 0x2c
 800674a:	e7f4      	b.n	8006736 <_dtoa_r+0x28e>
 800674c:	f04f 0b01 	mov.w	fp, #1
 8006750:	465b      	mov	r3, fp
 8006752:	f8cd b020 	str.w	fp, [sp, #32]
 8006756:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800675a:	e7d0      	b.n	80066fe <_dtoa_r+0x256>
 800675c:	3101      	adds	r1, #1
 800675e:	0052      	lsls	r2, r2, #1
 8006760:	e7d1      	b.n	8006706 <_dtoa_r+0x25e>
 8006762:	bf00      	nop
 8006764:	f3af 8000 	nop.w
 8006768:	636f4361 	.word	0x636f4361
 800676c:	3fd287a7 	.word	0x3fd287a7
 8006770:	8b60c8b3 	.word	0x8b60c8b3
 8006774:	3fc68a28 	.word	0x3fc68a28
 8006778:	509f79fb 	.word	0x509f79fb
 800677c:	3fd34413 	.word	0x3fd34413
 8006780:	08008c2f 	.word	0x08008c2f
 8006784:	08008c46 	.word	0x08008c46
 8006788:	7ff00000 	.word	0x7ff00000
 800678c:	08008c2b 	.word	0x08008c2b
 8006790:	08008bff 	.word	0x08008bff
 8006794:	08008bfe 	.word	0x08008bfe
 8006798:	3ff80000 	.word	0x3ff80000
 800679c:	08008d98 	.word	0x08008d98
 80067a0:	08008c9e 	.word	0x08008c9e
 80067a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80067a8:	6018      	str	r0, [r3, #0]
 80067aa:	9b08      	ldr	r3, [sp, #32]
 80067ac:	2b0e      	cmp	r3, #14
 80067ae:	f200 80a1 	bhi.w	80068f4 <_dtoa_r+0x44c>
 80067b2:	2c00      	cmp	r4, #0
 80067b4:	f000 809e 	beq.w	80068f4 <_dtoa_r+0x44c>
 80067b8:	2f00      	cmp	r7, #0
 80067ba:	dd33      	ble.n	8006824 <_dtoa_r+0x37c>
 80067bc:	4b9c      	ldr	r3, [pc, #624]	@ (8006a30 <_dtoa_r+0x588>)
 80067be:	f007 020f 	and.w	r2, r7, #15
 80067c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067c6:	05f8      	lsls	r0, r7, #23
 80067c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80067cc:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80067d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80067d4:	d516      	bpl.n	8006804 <_dtoa_r+0x35c>
 80067d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067da:	4b96      	ldr	r3, [pc, #600]	@ (8006a34 <_dtoa_r+0x58c>)
 80067dc:	2603      	movs	r6, #3
 80067de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067e2:	f7f9 ffa3 	bl	800072c <__aeabi_ddiv>
 80067e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80067ea:	f004 040f 	and.w	r4, r4, #15
 80067ee:	4d91      	ldr	r5, [pc, #580]	@ (8006a34 <_dtoa_r+0x58c>)
 80067f0:	b954      	cbnz	r4, 8006808 <_dtoa_r+0x360>
 80067f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80067f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067fa:	f7f9 ff97 	bl	800072c <__aeabi_ddiv>
 80067fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006802:	e028      	b.n	8006856 <_dtoa_r+0x3ae>
 8006804:	2602      	movs	r6, #2
 8006806:	e7f2      	b.n	80067ee <_dtoa_r+0x346>
 8006808:	07e1      	lsls	r1, r4, #31
 800680a:	d508      	bpl.n	800681e <_dtoa_r+0x376>
 800680c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006810:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006814:	f7f9 fe60 	bl	80004d8 <__aeabi_dmul>
 8006818:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800681c:	3601      	adds	r6, #1
 800681e:	1064      	asrs	r4, r4, #1
 8006820:	3508      	adds	r5, #8
 8006822:	e7e5      	b.n	80067f0 <_dtoa_r+0x348>
 8006824:	f000 80af 	beq.w	8006986 <_dtoa_r+0x4de>
 8006828:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800682c:	427c      	negs	r4, r7
 800682e:	4b80      	ldr	r3, [pc, #512]	@ (8006a30 <_dtoa_r+0x588>)
 8006830:	f004 020f 	and.w	r2, r4, #15
 8006834:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683c:	f7f9 fe4c 	bl	80004d8 <__aeabi_dmul>
 8006840:	2602      	movs	r6, #2
 8006842:	2300      	movs	r3, #0
 8006844:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006848:	4d7a      	ldr	r5, [pc, #488]	@ (8006a34 <_dtoa_r+0x58c>)
 800684a:	1124      	asrs	r4, r4, #4
 800684c:	2c00      	cmp	r4, #0
 800684e:	f040 808f 	bne.w	8006970 <_dtoa_r+0x4c8>
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1d3      	bne.n	80067fe <_dtoa_r+0x356>
 8006856:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800685a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 8094 	beq.w	800698a <_dtoa_r+0x4e2>
 8006862:	2200      	movs	r2, #0
 8006864:	4620      	mov	r0, r4
 8006866:	4629      	mov	r1, r5
 8006868:	4b73      	ldr	r3, [pc, #460]	@ (8006a38 <_dtoa_r+0x590>)
 800686a:	f7fa f8a7 	bl	80009bc <__aeabi_dcmplt>
 800686e:	2800      	cmp	r0, #0
 8006870:	f000 808b 	beq.w	800698a <_dtoa_r+0x4e2>
 8006874:	9b08      	ldr	r3, [sp, #32]
 8006876:	2b00      	cmp	r3, #0
 8006878:	f000 8087 	beq.w	800698a <_dtoa_r+0x4e2>
 800687c:	f1bb 0f00 	cmp.w	fp, #0
 8006880:	dd34      	ble.n	80068ec <_dtoa_r+0x444>
 8006882:	4620      	mov	r0, r4
 8006884:	2200      	movs	r2, #0
 8006886:	4629      	mov	r1, r5
 8006888:	4b6c      	ldr	r3, [pc, #432]	@ (8006a3c <_dtoa_r+0x594>)
 800688a:	f7f9 fe25 	bl	80004d8 <__aeabi_dmul>
 800688e:	465c      	mov	r4, fp
 8006890:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006894:	f107 38ff 	add.w	r8, r7, #4294967295
 8006898:	3601      	adds	r6, #1
 800689a:	4630      	mov	r0, r6
 800689c:	f7f9 fdb2 	bl	8000404 <__aeabi_i2d>
 80068a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068a4:	f7f9 fe18 	bl	80004d8 <__aeabi_dmul>
 80068a8:	2200      	movs	r2, #0
 80068aa:	4b65      	ldr	r3, [pc, #404]	@ (8006a40 <_dtoa_r+0x598>)
 80068ac:	f7f9 fc5e 	bl	800016c <__adddf3>
 80068b0:	4605      	mov	r5, r0
 80068b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80068b6:	2c00      	cmp	r4, #0
 80068b8:	d16a      	bne.n	8006990 <_dtoa_r+0x4e8>
 80068ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068be:	2200      	movs	r2, #0
 80068c0:	4b60      	ldr	r3, [pc, #384]	@ (8006a44 <_dtoa_r+0x59c>)
 80068c2:	f7f9 fc51 	bl	8000168 <__aeabi_dsub>
 80068c6:	4602      	mov	r2, r0
 80068c8:	460b      	mov	r3, r1
 80068ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80068ce:	462a      	mov	r2, r5
 80068d0:	4633      	mov	r3, r6
 80068d2:	f7fa f891 	bl	80009f8 <__aeabi_dcmpgt>
 80068d6:	2800      	cmp	r0, #0
 80068d8:	f040 8298 	bne.w	8006e0c <_dtoa_r+0x964>
 80068dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068e0:	462a      	mov	r2, r5
 80068e2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80068e6:	f7fa f869 	bl	80009bc <__aeabi_dcmplt>
 80068ea:	bb38      	cbnz	r0, 800693c <_dtoa_r+0x494>
 80068ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80068f0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80068f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f2c0 8157 	blt.w	8006baa <_dtoa_r+0x702>
 80068fc:	2f0e      	cmp	r7, #14
 80068fe:	f300 8154 	bgt.w	8006baa <_dtoa_r+0x702>
 8006902:	4b4b      	ldr	r3, [pc, #300]	@ (8006a30 <_dtoa_r+0x588>)
 8006904:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006908:	e9d3 3400 	ldrd	r3, r4, [r3]
 800690c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006910:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006912:	2b00      	cmp	r3, #0
 8006914:	f280 80e5 	bge.w	8006ae2 <_dtoa_r+0x63a>
 8006918:	9b08      	ldr	r3, [sp, #32]
 800691a:	2b00      	cmp	r3, #0
 800691c:	f300 80e1 	bgt.w	8006ae2 <_dtoa_r+0x63a>
 8006920:	d10c      	bne.n	800693c <_dtoa_r+0x494>
 8006922:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006926:	2200      	movs	r2, #0
 8006928:	4b46      	ldr	r3, [pc, #280]	@ (8006a44 <_dtoa_r+0x59c>)
 800692a:	f7f9 fdd5 	bl	80004d8 <__aeabi_dmul>
 800692e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006932:	f7fa f857 	bl	80009e4 <__aeabi_dcmpge>
 8006936:	2800      	cmp	r0, #0
 8006938:	f000 8266 	beq.w	8006e08 <_dtoa_r+0x960>
 800693c:	2400      	movs	r4, #0
 800693e:	4625      	mov	r5, r4
 8006940:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006942:	4656      	mov	r6, sl
 8006944:	ea6f 0803 	mvn.w	r8, r3
 8006948:	2700      	movs	r7, #0
 800694a:	4621      	mov	r1, r4
 800694c:	4648      	mov	r0, r9
 800694e:	f000 fcbd 	bl	80072cc <_Bfree>
 8006952:	2d00      	cmp	r5, #0
 8006954:	f000 80bd 	beq.w	8006ad2 <_dtoa_r+0x62a>
 8006958:	b12f      	cbz	r7, 8006966 <_dtoa_r+0x4be>
 800695a:	42af      	cmp	r7, r5
 800695c:	d003      	beq.n	8006966 <_dtoa_r+0x4be>
 800695e:	4639      	mov	r1, r7
 8006960:	4648      	mov	r0, r9
 8006962:	f000 fcb3 	bl	80072cc <_Bfree>
 8006966:	4629      	mov	r1, r5
 8006968:	4648      	mov	r0, r9
 800696a:	f000 fcaf 	bl	80072cc <_Bfree>
 800696e:	e0b0      	b.n	8006ad2 <_dtoa_r+0x62a>
 8006970:	07e2      	lsls	r2, r4, #31
 8006972:	d505      	bpl.n	8006980 <_dtoa_r+0x4d8>
 8006974:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006978:	f7f9 fdae 	bl	80004d8 <__aeabi_dmul>
 800697c:	2301      	movs	r3, #1
 800697e:	3601      	adds	r6, #1
 8006980:	1064      	asrs	r4, r4, #1
 8006982:	3508      	adds	r5, #8
 8006984:	e762      	b.n	800684c <_dtoa_r+0x3a4>
 8006986:	2602      	movs	r6, #2
 8006988:	e765      	b.n	8006856 <_dtoa_r+0x3ae>
 800698a:	46b8      	mov	r8, r7
 800698c:	9c08      	ldr	r4, [sp, #32]
 800698e:	e784      	b.n	800689a <_dtoa_r+0x3f2>
 8006990:	4b27      	ldr	r3, [pc, #156]	@ (8006a30 <_dtoa_r+0x588>)
 8006992:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006994:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006998:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800699c:	4454      	add	r4, sl
 800699e:	2900      	cmp	r1, #0
 80069a0:	d054      	beq.n	8006a4c <_dtoa_r+0x5a4>
 80069a2:	2000      	movs	r0, #0
 80069a4:	4928      	ldr	r1, [pc, #160]	@ (8006a48 <_dtoa_r+0x5a0>)
 80069a6:	f7f9 fec1 	bl	800072c <__aeabi_ddiv>
 80069aa:	4633      	mov	r3, r6
 80069ac:	462a      	mov	r2, r5
 80069ae:	f7f9 fbdb 	bl	8000168 <__aeabi_dsub>
 80069b2:	4656      	mov	r6, sl
 80069b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80069b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069bc:	f7fa f83c 	bl	8000a38 <__aeabi_d2iz>
 80069c0:	4605      	mov	r5, r0
 80069c2:	f7f9 fd1f 	bl	8000404 <__aeabi_i2d>
 80069c6:	4602      	mov	r2, r0
 80069c8:	460b      	mov	r3, r1
 80069ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069ce:	f7f9 fbcb 	bl	8000168 <__aeabi_dsub>
 80069d2:	4602      	mov	r2, r0
 80069d4:	460b      	mov	r3, r1
 80069d6:	3530      	adds	r5, #48	@ 0x30
 80069d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80069dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80069e0:	f806 5b01 	strb.w	r5, [r6], #1
 80069e4:	f7f9 ffea 	bl	80009bc <__aeabi_dcmplt>
 80069e8:	2800      	cmp	r0, #0
 80069ea:	d172      	bne.n	8006ad2 <_dtoa_r+0x62a>
 80069ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069f0:	2000      	movs	r0, #0
 80069f2:	4911      	ldr	r1, [pc, #68]	@ (8006a38 <_dtoa_r+0x590>)
 80069f4:	f7f9 fbb8 	bl	8000168 <__aeabi_dsub>
 80069f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80069fc:	f7f9 ffde 	bl	80009bc <__aeabi_dcmplt>
 8006a00:	2800      	cmp	r0, #0
 8006a02:	f040 80b4 	bne.w	8006b6e <_dtoa_r+0x6c6>
 8006a06:	42a6      	cmp	r6, r4
 8006a08:	f43f af70 	beq.w	80068ec <_dtoa_r+0x444>
 8006a0c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006a10:	2200      	movs	r2, #0
 8006a12:	4b0a      	ldr	r3, [pc, #40]	@ (8006a3c <_dtoa_r+0x594>)
 8006a14:	f7f9 fd60 	bl	80004d8 <__aeabi_dmul>
 8006a18:	2200      	movs	r2, #0
 8006a1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a22:	4b06      	ldr	r3, [pc, #24]	@ (8006a3c <_dtoa_r+0x594>)
 8006a24:	f7f9 fd58 	bl	80004d8 <__aeabi_dmul>
 8006a28:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006a2c:	e7c4      	b.n	80069b8 <_dtoa_r+0x510>
 8006a2e:	bf00      	nop
 8006a30:	08008d98 	.word	0x08008d98
 8006a34:	08008d70 	.word	0x08008d70
 8006a38:	3ff00000 	.word	0x3ff00000
 8006a3c:	40240000 	.word	0x40240000
 8006a40:	401c0000 	.word	0x401c0000
 8006a44:	40140000 	.word	0x40140000
 8006a48:	3fe00000 	.word	0x3fe00000
 8006a4c:	4631      	mov	r1, r6
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f7f9 fd42 	bl	80004d8 <__aeabi_dmul>
 8006a54:	4656      	mov	r6, sl
 8006a56:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a5a:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006a5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a60:	f7f9 ffea 	bl	8000a38 <__aeabi_d2iz>
 8006a64:	4605      	mov	r5, r0
 8006a66:	f7f9 fccd 	bl	8000404 <__aeabi_i2d>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a72:	f7f9 fb79 	bl	8000168 <__aeabi_dsub>
 8006a76:	4602      	mov	r2, r0
 8006a78:	460b      	mov	r3, r1
 8006a7a:	3530      	adds	r5, #48	@ 0x30
 8006a7c:	f806 5b01 	strb.w	r5, [r6], #1
 8006a80:	42a6      	cmp	r6, r4
 8006a82:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a86:	f04f 0200 	mov.w	r2, #0
 8006a8a:	d124      	bne.n	8006ad6 <_dtoa_r+0x62e>
 8006a8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006a90:	4bae      	ldr	r3, [pc, #696]	@ (8006d4c <_dtoa_r+0x8a4>)
 8006a92:	f7f9 fb6b 	bl	800016c <__adddf3>
 8006a96:	4602      	mov	r2, r0
 8006a98:	460b      	mov	r3, r1
 8006a9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a9e:	f7f9 ffab 	bl	80009f8 <__aeabi_dcmpgt>
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	d163      	bne.n	8006b6e <_dtoa_r+0x6c6>
 8006aa6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006aaa:	2000      	movs	r0, #0
 8006aac:	49a7      	ldr	r1, [pc, #668]	@ (8006d4c <_dtoa_r+0x8a4>)
 8006aae:	f7f9 fb5b 	bl	8000168 <__aeabi_dsub>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006aba:	f7f9 ff7f 	bl	80009bc <__aeabi_dcmplt>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	f43f af14 	beq.w	80068ec <_dtoa_r+0x444>
 8006ac4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006ac6:	1e73      	subs	r3, r6, #1
 8006ac8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006aca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006ace:	2b30      	cmp	r3, #48	@ 0x30
 8006ad0:	d0f8      	beq.n	8006ac4 <_dtoa_r+0x61c>
 8006ad2:	4647      	mov	r7, r8
 8006ad4:	e03b      	b.n	8006b4e <_dtoa_r+0x6a6>
 8006ad6:	4b9e      	ldr	r3, [pc, #632]	@ (8006d50 <_dtoa_r+0x8a8>)
 8006ad8:	f7f9 fcfe 	bl	80004d8 <__aeabi_dmul>
 8006adc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ae0:	e7bc      	b.n	8006a5c <_dtoa_r+0x5b4>
 8006ae2:	4656      	mov	r6, sl
 8006ae4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006ae8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006aec:	4620      	mov	r0, r4
 8006aee:	4629      	mov	r1, r5
 8006af0:	f7f9 fe1c 	bl	800072c <__aeabi_ddiv>
 8006af4:	f7f9 ffa0 	bl	8000a38 <__aeabi_d2iz>
 8006af8:	4680      	mov	r8, r0
 8006afa:	f7f9 fc83 	bl	8000404 <__aeabi_i2d>
 8006afe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b02:	f7f9 fce9 	bl	80004d8 <__aeabi_dmul>
 8006b06:	4602      	mov	r2, r0
 8006b08:	460b      	mov	r3, r1
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	4629      	mov	r1, r5
 8006b0e:	f7f9 fb2b 	bl	8000168 <__aeabi_dsub>
 8006b12:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006b16:	9d08      	ldr	r5, [sp, #32]
 8006b18:	f806 4b01 	strb.w	r4, [r6], #1
 8006b1c:	eba6 040a 	sub.w	r4, r6, sl
 8006b20:	42a5      	cmp	r5, r4
 8006b22:	4602      	mov	r2, r0
 8006b24:	460b      	mov	r3, r1
 8006b26:	d133      	bne.n	8006b90 <_dtoa_r+0x6e8>
 8006b28:	f7f9 fb20 	bl	800016c <__adddf3>
 8006b2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b30:	4604      	mov	r4, r0
 8006b32:	460d      	mov	r5, r1
 8006b34:	f7f9 ff60 	bl	80009f8 <__aeabi_dcmpgt>
 8006b38:	b9c0      	cbnz	r0, 8006b6c <_dtoa_r+0x6c4>
 8006b3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b3e:	4620      	mov	r0, r4
 8006b40:	4629      	mov	r1, r5
 8006b42:	f7f9 ff31 	bl	80009a8 <__aeabi_dcmpeq>
 8006b46:	b110      	cbz	r0, 8006b4e <_dtoa_r+0x6a6>
 8006b48:	f018 0f01 	tst.w	r8, #1
 8006b4c:	d10e      	bne.n	8006b6c <_dtoa_r+0x6c4>
 8006b4e:	4648      	mov	r0, r9
 8006b50:	9903      	ldr	r1, [sp, #12]
 8006b52:	f000 fbbb 	bl	80072cc <_Bfree>
 8006b56:	2300      	movs	r3, #0
 8006b58:	7033      	strb	r3, [r6, #0]
 8006b5a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006b5c:	3701      	adds	r7, #1
 8006b5e:	601f      	str	r7, [r3, #0]
 8006b60:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f000 824b 	beq.w	8006ffe <_dtoa_r+0xb56>
 8006b68:	601e      	str	r6, [r3, #0]
 8006b6a:	e248      	b.n	8006ffe <_dtoa_r+0xb56>
 8006b6c:	46b8      	mov	r8, r7
 8006b6e:	4633      	mov	r3, r6
 8006b70:	461e      	mov	r6, r3
 8006b72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b76:	2a39      	cmp	r2, #57	@ 0x39
 8006b78:	d106      	bne.n	8006b88 <_dtoa_r+0x6e0>
 8006b7a:	459a      	cmp	sl, r3
 8006b7c:	d1f8      	bne.n	8006b70 <_dtoa_r+0x6c8>
 8006b7e:	2230      	movs	r2, #48	@ 0x30
 8006b80:	f108 0801 	add.w	r8, r8, #1
 8006b84:	f88a 2000 	strb.w	r2, [sl]
 8006b88:	781a      	ldrb	r2, [r3, #0]
 8006b8a:	3201      	adds	r2, #1
 8006b8c:	701a      	strb	r2, [r3, #0]
 8006b8e:	e7a0      	b.n	8006ad2 <_dtoa_r+0x62a>
 8006b90:	2200      	movs	r2, #0
 8006b92:	4b6f      	ldr	r3, [pc, #444]	@ (8006d50 <_dtoa_r+0x8a8>)
 8006b94:	f7f9 fca0 	bl	80004d8 <__aeabi_dmul>
 8006b98:	2200      	movs	r2, #0
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	4604      	mov	r4, r0
 8006b9e:	460d      	mov	r5, r1
 8006ba0:	f7f9 ff02 	bl	80009a8 <__aeabi_dcmpeq>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	d09f      	beq.n	8006ae8 <_dtoa_r+0x640>
 8006ba8:	e7d1      	b.n	8006b4e <_dtoa_r+0x6a6>
 8006baa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006bac:	2a00      	cmp	r2, #0
 8006bae:	f000 80ea 	beq.w	8006d86 <_dtoa_r+0x8de>
 8006bb2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006bb4:	2a01      	cmp	r2, #1
 8006bb6:	f300 80cd 	bgt.w	8006d54 <_dtoa_r+0x8ac>
 8006bba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006bbc:	2a00      	cmp	r2, #0
 8006bbe:	f000 80c1 	beq.w	8006d44 <_dtoa_r+0x89c>
 8006bc2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006bc6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006bc8:	9e04      	ldr	r6, [sp, #16]
 8006bca:	9a04      	ldr	r2, [sp, #16]
 8006bcc:	2101      	movs	r1, #1
 8006bce:	441a      	add	r2, r3
 8006bd0:	9204      	str	r2, [sp, #16]
 8006bd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bd4:	4648      	mov	r0, r9
 8006bd6:	441a      	add	r2, r3
 8006bd8:	9209      	str	r2, [sp, #36]	@ 0x24
 8006bda:	f000 fc2b 	bl	8007434 <__i2b>
 8006bde:	4605      	mov	r5, r0
 8006be0:	b166      	cbz	r6, 8006bfc <_dtoa_r+0x754>
 8006be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	dd09      	ble.n	8006bfc <_dtoa_r+0x754>
 8006be8:	42b3      	cmp	r3, r6
 8006bea:	bfa8      	it	ge
 8006bec:	4633      	movge	r3, r6
 8006bee:	9a04      	ldr	r2, [sp, #16]
 8006bf0:	1af6      	subs	r6, r6, r3
 8006bf2:	1ad2      	subs	r2, r2, r3
 8006bf4:	9204      	str	r2, [sp, #16]
 8006bf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bfe:	b30b      	cbz	r3, 8006c44 <_dtoa_r+0x79c>
 8006c00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 80c6 	beq.w	8006d94 <_dtoa_r+0x8ec>
 8006c08:	2c00      	cmp	r4, #0
 8006c0a:	f000 80c0 	beq.w	8006d8e <_dtoa_r+0x8e6>
 8006c0e:	4629      	mov	r1, r5
 8006c10:	4622      	mov	r2, r4
 8006c12:	4648      	mov	r0, r9
 8006c14:	f000 fcc6 	bl	80075a4 <__pow5mult>
 8006c18:	9a03      	ldr	r2, [sp, #12]
 8006c1a:	4601      	mov	r1, r0
 8006c1c:	4605      	mov	r5, r0
 8006c1e:	4648      	mov	r0, r9
 8006c20:	f000 fc1e 	bl	8007460 <__multiply>
 8006c24:	9903      	ldr	r1, [sp, #12]
 8006c26:	4680      	mov	r8, r0
 8006c28:	4648      	mov	r0, r9
 8006c2a:	f000 fb4f 	bl	80072cc <_Bfree>
 8006c2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c30:	1b1b      	subs	r3, r3, r4
 8006c32:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c34:	f000 80b1 	beq.w	8006d9a <_dtoa_r+0x8f2>
 8006c38:	4641      	mov	r1, r8
 8006c3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c3c:	4648      	mov	r0, r9
 8006c3e:	f000 fcb1 	bl	80075a4 <__pow5mult>
 8006c42:	9003      	str	r0, [sp, #12]
 8006c44:	2101      	movs	r1, #1
 8006c46:	4648      	mov	r0, r9
 8006c48:	f000 fbf4 	bl	8007434 <__i2b>
 8006c4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c4e:	4604      	mov	r4, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 81d8 	beq.w	8007006 <_dtoa_r+0xb5e>
 8006c56:	461a      	mov	r2, r3
 8006c58:	4601      	mov	r1, r0
 8006c5a:	4648      	mov	r0, r9
 8006c5c:	f000 fca2 	bl	80075a4 <__pow5mult>
 8006c60:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006c62:	4604      	mov	r4, r0
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	f300 809f 	bgt.w	8006da8 <_dtoa_r+0x900>
 8006c6a:	9b06      	ldr	r3, [sp, #24]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f040 8097 	bne.w	8006da0 <_dtoa_r+0x8f8>
 8006c72:	9b07      	ldr	r3, [sp, #28]
 8006c74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f040 8093 	bne.w	8006da4 <_dtoa_r+0x8fc>
 8006c7e:	9b07      	ldr	r3, [sp, #28]
 8006c80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c84:	0d1b      	lsrs	r3, r3, #20
 8006c86:	051b      	lsls	r3, r3, #20
 8006c88:	b133      	cbz	r3, 8006c98 <_dtoa_r+0x7f0>
 8006c8a:	9b04      	ldr	r3, [sp, #16]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	9304      	str	r3, [sp, #16]
 8006c90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c92:	3301      	adds	r3, #1
 8006c94:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c96:	2301      	movs	r3, #1
 8006c98:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 81b8 	beq.w	8007012 <_dtoa_r+0xb6a>
 8006ca2:	6923      	ldr	r3, [r4, #16]
 8006ca4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ca8:	6918      	ldr	r0, [r3, #16]
 8006caa:	f000 fb77 	bl	800739c <__hi0bits>
 8006cae:	f1c0 0020 	rsb	r0, r0, #32
 8006cb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cb4:	4418      	add	r0, r3
 8006cb6:	f010 001f 	ands.w	r0, r0, #31
 8006cba:	f000 8082 	beq.w	8006dc2 <_dtoa_r+0x91a>
 8006cbe:	f1c0 0320 	rsb	r3, r0, #32
 8006cc2:	2b04      	cmp	r3, #4
 8006cc4:	dd73      	ble.n	8006dae <_dtoa_r+0x906>
 8006cc6:	9b04      	ldr	r3, [sp, #16]
 8006cc8:	f1c0 001c 	rsb	r0, r0, #28
 8006ccc:	4403      	add	r3, r0
 8006cce:	9304      	str	r3, [sp, #16]
 8006cd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cd2:	4406      	add	r6, r0
 8006cd4:	4403      	add	r3, r0
 8006cd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cd8:	9b04      	ldr	r3, [sp, #16]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	dd05      	ble.n	8006cea <_dtoa_r+0x842>
 8006cde:	461a      	mov	r2, r3
 8006ce0:	4648      	mov	r0, r9
 8006ce2:	9903      	ldr	r1, [sp, #12]
 8006ce4:	f000 fcb8 	bl	8007658 <__lshift>
 8006ce8:	9003      	str	r0, [sp, #12]
 8006cea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	dd05      	ble.n	8006cfc <_dtoa_r+0x854>
 8006cf0:	4621      	mov	r1, r4
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	4648      	mov	r0, r9
 8006cf6:	f000 fcaf 	bl	8007658 <__lshift>
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d061      	beq.n	8006dc6 <_dtoa_r+0x91e>
 8006d02:	4621      	mov	r1, r4
 8006d04:	9803      	ldr	r0, [sp, #12]
 8006d06:	f000 fd13 	bl	8007730 <__mcmp>
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	da5b      	bge.n	8006dc6 <_dtoa_r+0x91e>
 8006d0e:	2300      	movs	r3, #0
 8006d10:	220a      	movs	r2, #10
 8006d12:	4648      	mov	r0, r9
 8006d14:	9903      	ldr	r1, [sp, #12]
 8006d16:	f000 fafb 	bl	8007310 <__multadd>
 8006d1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d1c:	f107 38ff 	add.w	r8, r7, #4294967295
 8006d20:	9003      	str	r0, [sp, #12]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 8177 	beq.w	8007016 <_dtoa_r+0xb6e>
 8006d28:	4629      	mov	r1, r5
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	220a      	movs	r2, #10
 8006d2e:	4648      	mov	r0, r9
 8006d30:	f000 faee 	bl	8007310 <__multadd>
 8006d34:	f1bb 0f00 	cmp.w	fp, #0
 8006d38:	4605      	mov	r5, r0
 8006d3a:	dc6f      	bgt.n	8006e1c <_dtoa_r+0x974>
 8006d3c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	dc49      	bgt.n	8006dd6 <_dtoa_r+0x92e>
 8006d42:	e06b      	b.n	8006e1c <_dtoa_r+0x974>
 8006d44:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006d46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006d4a:	e73c      	b.n	8006bc6 <_dtoa_r+0x71e>
 8006d4c:	3fe00000 	.word	0x3fe00000
 8006d50:	40240000 	.word	0x40240000
 8006d54:	9b08      	ldr	r3, [sp, #32]
 8006d56:	1e5c      	subs	r4, r3, #1
 8006d58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d5a:	42a3      	cmp	r3, r4
 8006d5c:	db09      	blt.n	8006d72 <_dtoa_r+0x8ca>
 8006d5e:	1b1c      	subs	r4, r3, r4
 8006d60:	9b08      	ldr	r3, [sp, #32]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f6bf af30 	bge.w	8006bc8 <_dtoa_r+0x720>
 8006d68:	9b04      	ldr	r3, [sp, #16]
 8006d6a:	9a08      	ldr	r2, [sp, #32]
 8006d6c:	1a9e      	subs	r6, r3, r2
 8006d6e:	2300      	movs	r3, #0
 8006d70:	e72b      	b.n	8006bca <_dtoa_r+0x722>
 8006d72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006d76:	1ae3      	subs	r3, r4, r3
 8006d78:	441a      	add	r2, r3
 8006d7a:	940a      	str	r4, [sp, #40]	@ 0x28
 8006d7c:	9e04      	ldr	r6, [sp, #16]
 8006d7e:	2400      	movs	r4, #0
 8006d80:	9b08      	ldr	r3, [sp, #32]
 8006d82:	920e      	str	r2, [sp, #56]	@ 0x38
 8006d84:	e721      	b.n	8006bca <_dtoa_r+0x722>
 8006d86:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006d88:	9e04      	ldr	r6, [sp, #16]
 8006d8a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006d8c:	e728      	b.n	8006be0 <_dtoa_r+0x738>
 8006d8e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006d92:	e751      	b.n	8006c38 <_dtoa_r+0x790>
 8006d94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d96:	9903      	ldr	r1, [sp, #12]
 8006d98:	e750      	b.n	8006c3c <_dtoa_r+0x794>
 8006d9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d9e:	e751      	b.n	8006c44 <_dtoa_r+0x79c>
 8006da0:	2300      	movs	r3, #0
 8006da2:	e779      	b.n	8006c98 <_dtoa_r+0x7f0>
 8006da4:	9b06      	ldr	r3, [sp, #24]
 8006da6:	e777      	b.n	8006c98 <_dtoa_r+0x7f0>
 8006da8:	2300      	movs	r3, #0
 8006daa:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dac:	e779      	b.n	8006ca2 <_dtoa_r+0x7fa>
 8006dae:	d093      	beq.n	8006cd8 <_dtoa_r+0x830>
 8006db0:	9a04      	ldr	r2, [sp, #16]
 8006db2:	331c      	adds	r3, #28
 8006db4:	441a      	add	r2, r3
 8006db6:	9204      	str	r2, [sp, #16]
 8006db8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006dba:	441e      	add	r6, r3
 8006dbc:	441a      	add	r2, r3
 8006dbe:	9209      	str	r2, [sp, #36]	@ 0x24
 8006dc0:	e78a      	b.n	8006cd8 <_dtoa_r+0x830>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	e7f4      	b.n	8006db0 <_dtoa_r+0x908>
 8006dc6:	9b08      	ldr	r3, [sp, #32]
 8006dc8:	46b8      	mov	r8, r7
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	dc20      	bgt.n	8006e10 <_dtoa_r+0x968>
 8006dce:	469b      	mov	fp, r3
 8006dd0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	dd1e      	ble.n	8006e14 <_dtoa_r+0x96c>
 8006dd6:	f1bb 0f00 	cmp.w	fp, #0
 8006dda:	f47f adb1 	bne.w	8006940 <_dtoa_r+0x498>
 8006dde:	4621      	mov	r1, r4
 8006de0:	465b      	mov	r3, fp
 8006de2:	2205      	movs	r2, #5
 8006de4:	4648      	mov	r0, r9
 8006de6:	f000 fa93 	bl	8007310 <__multadd>
 8006dea:	4601      	mov	r1, r0
 8006dec:	4604      	mov	r4, r0
 8006dee:	9803      	ldr	r0, [sp, #12]
 8006df0:	f000 fc9e 	bl	8007730 <__mcmp>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	f77f ada3 	ble.w	8006940 <_dtoa_r+0x498>
 8006dfa:	4656      	mov	r6, sl
 8006dfc:	2331      	movs	r3, #49	@ 0x31
 8006dfe:	f108 0801 	add.w	r8, r8, #1
 8006e02:	f806 3b01 	strb.w	r3, [r6], #1
 8006e06:	e59f      	b.n	8006948 <_dtoa_r+0x4a0>
 8006e08:	46b8      	mov	r8, r7
 8006e0a:	9c08      	ldr	r4, [sp, #32]
 8006e0c:	4625      	mov	r5, r4
 8006e0e:	e7f4      	b.n	8006dfa <_dtoa_r+0x952>
 8006e10:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006e14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 8101 	beq.w	800701e <_dtoa_r+0xb76>
 8006e1c:	2e00      	cmp	r6, #0
 8006e1e:	dd05      	ble.n	8006e2c <_dtoa_r+0x984>
 8006e20:	4629      	mov	r1, r5
 8006e22:	4632      	mov	r2, r6
 8006e24:	4648      	mov	r0, r9
 8006e26:	f000 fc17 	bl	8007658 <__lshift>
 8006e2a:	4605      	mov	r5, r0
 8006e2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d05c      	beq.n	8006eec <_dtoa_r+0xa44>
 8006e32:	4648      	mov	r0, r9
 8006e34:	6869      	ldr	r1, [r5, #4]
 8006e36:	f000 fa09 	bl	800724c <_Balloc>
 8006e3a:	4606      	mov	r6, r0
 8006e3c:	b928      	cbnz	r0, 8006e4a <_dtoa_r+0x9a2>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006e44:	4b80      	ldr	r3, [pc, #512]	@ (8007048 <_dtoa_r+0xba0>)
 8006e46:	f7ff bb43 	b.w	80064d0 <_dtoa_r+0x28>
 8006e4a:	692a      	ldr	r2, [r5, #16]
 8006e4c:	f105 010c 	add.w	r1, r5, #12
 8006e50:	3202      	adds	r2, #2
 8006e52:	0092      	lsls	r2, r2, #2
 8006e54:	300c      	adds	r0, #12
 8006e56:	f000 ff9d 	bl	8007d94 <memcpy>
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	4631      	mov	r1, r6
 8006e5e:	4648      	mov	r0, r9
 8006e60:	f000 fbfa 	bl	8007658 <__lshift>
 8006e64:	462f      	mov	r7, r5
 8006e66:	4605      	mov	r5, r0
 8006e68:	f10a 0301 	add.w	r3, sl, #1
 8006e6c:	9304      	str	r3, [sp, #16]
 8006e6e:	eb0a 030b 	add.w	r3, sl, fp
 8006e72:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e74:	9b06      	ldr	r3, [sp, #24]
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e7c:	9b04      	ldr	r3, [sp, #16]
 8006e7e:	4621      	mov	r1, r4
 8006e80:	9803      	ldr	r0, [sp, #12]
 8006e82:	f103 3bff 	add.w	fp, r3, #4294967295
 8006e86:	f7ff fa86 	bl	8006396 <quorem>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	4639      	mov	r1, r7
 8006e8e:	3330      	adds	r3, #48	@ 0x30
 8006e90:	9006      	str	r0, [sp, #24]
 8006e92:	9803      	ldr	r0, [sp, #12]
 8006e94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e96:	f000 fc4b 	bl	8007730 <__mcmp>
 8006e9a:	462a      	mov	r2, r5
 8006e9c:	9008      	str	r0, [sp, #32]
 8006e9e:	4621      	mov	r1, r4
 8006ea0:	4648      	mov	r0, r9
 8006ea2:	f000 fc61 	bl	8007768 <__mdiff>
 8006ea6:	68c2      	ldr	r2, [r0, #12]
 8006ea8:	4606      	mov	r6, r0
 8006eaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006eac:	bb02      	cbnz	r2, 8006ef0 <_dtoa_r+0xa48>
 8006eae:	4601      	mov	r1, r0
 8006eb0:	9803      	ldr	r0, [sp, #12]
 8006eb2:	f000 fc3d 	bl	8007730 <__mcmp>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006eba:	4631      	mov	r1, r6
 8006ebc:	4648      	mov	r0, r9
 8006ebe:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8006ec2:	f000 fa03 	bl	80072cc <_Bfree>
 8006ec6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ec8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006eca:	9e04      	ldr	r6, [sp, #16]
 8006ecc:	ea42 0103 	orr.w	r1, r2, r3
 8006ed0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ed2:	4319      	orrs	r1, r3
 8006ed4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ed6:	d10d      	bne.n	8006ef4 <_dtoa_r+0xa4c>
 8006ed8:	2b39      	cmp	r3, #57	@ 0x39
 8006eda:	d027      	beq.n	8006f2c <_dtoa_r+0xa84>
 8006edc:	9a08      	ldr	r2, [sp, #32]
 8006ede:	2a00      	cmp	r2, #0
 8006ee0:	dd01      	ble.n	8006ee6 <_dtoa_r+0xa3e>
 8006ee2:	9b06      	ldr	r3, [sp, #24]
 8006ee4:	3331      	adds	r3, #49	@ 0x31
 8006ee6:	f88b 3000 	strb.w	r3, [fp]
 8006eea:	e52e      	b.n	800694a <_dtoa_r+0x4a2>
 8006eec:	4628      	mov	r0, r5
 8006eee:	e7b9      	b.n	8006e64 <_dtoa_r+0x9bc>
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	e7e2      	b.n	8006eba <_dtoa_r+0xa12>
 8006ef4:	9908      	ldr	r1, [sp, #32]
 8006ef6:	2900      	cmp	r1, #0
 8006ef8:	db04      	blt.n	8006f04 <_dtoa_r+0xa5c>
 8006efa:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8006efc:	4301      	orrs	r1, r0
 8006efe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f00:	4301      	orrs	r1, r0
 8006f02:	d120      	bne.n	8006f46 <_dtoa_r+0xa9e>
 8006f04:	2a00      	cmp	r2, #0
 8006f06:	ddee      	ble.n	8006ee6 <_dtoa_r+0xa3e>
 8006f08:	2201      	movs	r2, #1
 8006f0a:	9903      	ldr	r1, [sp, #12]
 8006f0c:	4648      	mov	r0, r9
 8006f0e:	9304      	str	r3, [sp, #16]
 8006f10:	f000 fba2 	bl	8007658 <__lshift>
 8006f14:	4621      	mov	r1, r4
 8006f16:	9003      	str	r0, [sp, #12]
 8006f18:	f000 fc0a 	bl	8007730 <__mcmp>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	9b04      	ldr	r3, [sp, #16]
 8006f20:	dc02      	bgt.n	8006f28 <_dtoa_r+0xa80>
 8006f22:	d1e0      	bne.n	8006ee6 <_dtoa_r+0xa3e>
 8006f24:	07da      	lsls	r2, r3, #31
 8006f26:	d5de      	bpl.n	8006ee6 <_dtoa_r+0xa3e>
 8006f28:	2b39      	cmp	r3, #57	@ 0x39
 8006f2a:	d1da      	bne.n	8006ee2 <_dtoa_r+0xa3a>
 8006f2c:	2339      	movs	r3, #57	@ 0x39
 8006f2e:	f88b 3000 	strb.w	r3, [fp]
 8006f32:	4633      	mov	r3, r6
 8006f34:	461e      	mov	r6, r3
 8006f36:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	2a39      	cmp	r2, #57	@ 0x39
 8006f3e:	d04e      	beq.n	8006fde <_dtoa_r+0xb36>
 8006f40:	3201      	adds	r2, #1
 8006f42:	701a      	strb	r2, [r3, #0]
 8006f44:	e501      	b.n	800694a <_dtoa_r+0x4a2>
 8006f46:	2a00      	cmp	r2, #0
 8006f48:	dd03      	ble.n	8006f52 <_dtoa_r+0xaaa>
 8006f4a:	2b39      	cmp	r3, #57	@ 0x39
 8006f4c:	d0ee      	beq.n	8006f2c <_dtoa_r+0xa84>
 8006f4e:	3301      	adds	r3, #1
 8006f50:	e7c9      	b.n	8006ee6 <_dtoa_r+0xa3e>
 8006f52:	9a04      	ldr	r2, [sp, #16]
 8006f54:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f56:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006f5a:	428a      	cmp	r2, r1
 8006f5c:	d028      	beq.n	8006fb0 <_dtoa_r+0xb08>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	220a      	movs	r2, #10
 8006f62:	9903      	ldr	r1, [sp, #12]
 8006f64:	4648      	mov	r0, r9
 8006f66:	f000 f9d3 	bl	8007310 <__multadd>
 8006f6a:	42af      	cmp	r7, r5
 8006f6c:	9003      	str	r0, [sp, #12]
 8006f6e:	f04f 0300 	mov.w	r3, #0
 8006f72:	f04f 020a 	mov.w	r2, #10
 8006f76:	4639      	mov	r1, r7
 8006f78:	4648      	mov	r0, r9
 8006f7a:	d107      	bne.n	8006f8c <_dtoa_r+0xae4>
 8006f7c:	f000 f9c8 	bl	8007310 <__multadd>
 8006f80:	4607      	mov	r7, r0
 8006f82:	4605      	mov	r5, r0
 8006f84:	9b04      	ldr	r3, [sp, #16]
 8006f86:	3301      	adds	r3, #1
 8006f88:	9304      	str	r3, [sp, #16]
 8006f8a:	e777      	b.n	8006e7c <_dtoa_r+0x9d4>
 8006f8c:	f000 f9c0 	bl	8007310 <__multadd>
 8006f90:	4629      	mov	r1, r5
 8006f92:	4607      	mov	r7, r0
 8006f94:	2300      	movs	r3, #0
 8006f96:	220a      	movs	r2, #10
 8006f98:	4648      	mov	r0, r9
 8006f9a:	f000 f9b9 	bl	8007310 <__multadd>
 8006f9e:	4605      	mov	r5, r0
 8006fa0:	e7f0      	b.n	8006f84 <_dtoa_r+0xadc>
 8006fa2:	f1bb 0f00 	cmp.w	fp, #0
 8006fa6:	bfcc      	ite	gt
 8006fa8:	465e      	movgt	r6, fp
 8006faa:	2601      	movle	r6, #1
 8006fac:	2700      	movs	r7, #0
 8006fae:	4456      	add	r6, sl
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	9903      	ldr	r1, [sp, #12]
 8006fb4:	4648      	mov	r0, r9
 8006fb6:	9304      	str	r3, [sp, #16]
 8006fb8:	f000 fb4e 	bl	8007658 <__lshift>
 8006fbc:	4621      	mov	r1, r4
 8006fbe:	9003      	str	r0, [sp, #12]
 8006fc0:	f000 fbb6 	bl	8007730 <__mcmp>
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	dcb4      	bgt.n	8006f32 <_dtoa_r+0xa8a>
 8006fc8:	d102      	bne.n	8006fd0 <_dtoa_r+0xb28>
 8006fca:	9b04      	ldr	r3, [sp, #16]
 8006fcc:	07db      	lsls	r3, r3, #31
 8006fce:	d4b0      	bmi.n	8006f32 <_dtoa_r+0xa8a>
 8006fd0:	4633      	mov	r3, r6
 8006fd2:	461e      	mov	r6, r3
 8006fd4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fd8:	2a30      	cmp	r2, #48	@ 0x30
 8006fda:	d0fa      	beq.n	8006fd2 <_dtoa_r+0xb2a>
 8006fdc:	e4b5      	b.n	800694a <_dtoa_r+0x4a2>
 8006fde:	459a      	cmp	sl, r3
 8006fe0:	d1a8      	bne.n	8006f34 <_dtoa_r+0xa8c>
 8006fe2:	2331      	movs	r3, #49	@ 0x31
 8006fe4:	f108 0801 	add.w	r8, r8, #1
 8006fe8:	f88a 3000 	strb.w	r3, [sl]
 8006fec:	e4ad      	b.n	800694a <_dtoa_r+0x4a2>
 8006fee:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006ff0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800704c <_dtoa_r+0xba4>
 8006ff4:	b11b      	cbz	r3, 8006ffe <_dtoa_r+0xb56>
 8006ff6:	f10a 0308 	add.w	r3, sl, #8
 8006ffa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006ffc:	6013      	str	r3, [r2, #0]
 8006ffe:	4650      	mov	r0, sl
 8007000:	b017      	add	sp, #92	@ 0x5c
 8007002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007006:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007008:	2b01      	cmp	r3, #1
 800700a:	f77f ae2e 	ble.w	8006c6a <_dtoa_r+0x7c2>
 800700e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007010:	930a      	str	r3, [sp, #40]	@ 0x28
 8007012:	2001      	movs	r0, #1
 8007014:	e64d      	b.n	8006cb2 <_dtoa_r+0x80a>
 8007016:	f1bb 0f00 	cmp.w	fp, #0
 800701a:	f77f aed9 	ble.w	8006dd0 <_dtoa_r+0x928>
 800701e:	4656      	mov	r6, sl
 8007020:	4621      	mov	r1, r4
 8007022:	9803      	ldr	r0, [sp, #12]
 8007024:	f7ff f9b7 	bl	8006396 <quorem>
 8007028:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800702c:	f806 3b01 	strb.w	r3, [r6], #1
 8007030:	eba6 020a 	sub.w	r2, r6, sl
 8007034:	4593      	cmp	fp, r2
 8007036:	ddb4      	ble.n	8006fa2 <_dtoa_r+0xafa>
 8007038:	2300      	movs	r3, #0
 800703a:	220a      	movs	r2, #10
 800703c:	4648      	mov	r0, r9
 800703e:	9903      	ldr	r1, [sp, #12]
 8007040:	f000 f966 	bl	8007310 <__multadd>
 8007044:	9003      	str	r0, [sp, #12]
 8007046:	e7eb      	b.n	8007020 <_dtoa_r+0xb78>
 8007048:	08008c9e 	.word	0x08008c9e
 800704c:	08008c22 	.word	0x08008c22

08007050 <_free_r>:
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	4605      	mov	r5, r0
 8007054:	2900      	cmp	r1, #0
 8007056:	d040      	beq.n	80070da <_free_r+0x8a>
 8007058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800705c:	1f0c      	subs	r4, r1, #4
 800705e:	2b00      	cmp	r3, #0
 8007060:	bfb8      	it	lt
 8007062:	18e4      	addlt	r4, r4, r3
 8007064:	f000 f8e6 	bl	8007234 <__malloc_lock>
 8007068:	4a1c      	ldr	r2, [pc, #112]	@ (80070dc <_free_r+0x8c>)
 800706a:	6813      	ldr	r3, [r2, #0]
 800706c:	b933      	cbnz	r3, 800707c <_free_r+0x2c>
 800706e:	6063      	str	r3, [r4, #4]
 8007070:	6014      	str	r4, [r2, #0]
 8007072:	4628      	mov	r0, r5
 8007074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007078:	f000 b8e2 	b.w	8007240 <__malloc_unlock>
 800707c:	42a3      	cmp	r3, r4
 800707e:	d908      	bls.n	8007092 <_free_r+0x42>
 8007080:	6820      	ldr	r0, [r4, #0]
 8007082:	1821      	adds	r1, r4, r0
 8007084:	428b      	cmp	r3, r1
 8007086:	bf01      	itttt	eq
 8007088:	6819      	ldreq	r1, [r3, #0]
 800708a:	685b      	ldreq	r3, [r3, #4]
 800708c:	1809      	addeq	r1, r1, r0
 800708e:	6021      	streq	r1, [r4, #0]
 8007090:	e7ed      	b.n	800706e <_free_r+0x1e>
 8007092:	461a      	mov	r2, r3
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	b10b      	cbz	r3, 800709c <_free_r+0x4c>
 8007098:	42a3      	cmp	r3, r4
 800709a:	d9fa      	bls.n	8007092 <_free_r+0x42>
 800709c:	6811      	ldr	r1, [r2, #0]
 800709e:	1850      	adds	r0, r2, r1
 80070a0:	42a0      	cmp	r0, r4
 80070a2:	d10b      	bne.n	80070bc <_free_r+0x6c>
 80070a4:	6820      	ldr	r0, [r4, #0]
 80070a6:	4401      	add	r1, r0
 80070a8:	1850      	adds	r0, r2, r1
 80070aa:	4283      	cmp	r3, r0
 80070ac:	6011      	str	r1, [r2, #0]
 80070ae:	d1e0      	bne.n	8007072 <_free_r+0x22>
 80070b0:	6818      	ldr	r0, [r3, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	4408      	add	r0, r1
 80070b6:	6010      	str	r0, [r2, #0]
 80070b8:	6053      	str	r3, [r2, #4]
 80070ba:	e7da      	b.n	8007072 <_free_r+0x22>
 80070bc:	d902      	bls.n	80070c4 <_free_r+0x74>
 80070be:	230c      	movs	r3, #12
 80070c0:	602b      	str	r3, [r5, #0]
 80070c2:	e7d6      	b.n	8007072 <_free_r+0x22>
 80070c4:	6820      	ldr	r0, [r4, #0]
 80070c6:	1821      	adds	r1, r4, r0
 80070c8:	428b      	cmp	r3, r1
 80070ca:	bf01      	itttt	eq
 80070cc:	6819      	ldreq	r1, [r3, #0]
 80070ce:	685b      	ldreq	r3, [r3, #4]
 80070d0:	1809      	addeq	r1, r1, r0
 80070d2:	6021      	streq	r1, [r4, #0]
 80070d4:	6063      	str	r3, [r4, #4]
 80070d6:	6054      	str	r4, [r2, #4]
 80070d8:	e7cb      	b.n	8007072 <_free_r+0x22>
 80070da:	bd38      	pop	{r3, r4, r5, pc}
 80070dc:	200006d8 	.word	0x200006d8

080070e0 <malloc>:
 80070e0:	4b02      	ldr	r3, [pc, #8]	@ (80070ec <malloc+0xc>)
 80070e2:	4601      	mov	r1, r0
 80070e4:	6818      	ldr	r0, [r3, #0]
 80070e6:	f000 b825 	b.w	8007134 <_malloc_r>
 80070ea:	bf00      	nop
 80070ec:	20000020 	.word	0x20000020

080070f0 <sbrk_aligned>:
 80070f0:	b570      	push	{r4, r5, r6, lr}
 80070f2:	4e0f      	ldr	r6, [pc, #60]	@ (8007130 <sbrk_aligned+0x40>)
 80070f4:	460c      	mov	r4, r1
 80070f6:	6831      	ldr	r1, [r6, #0]
 80070f8:	4605      	mov	r5, r0
 80070fa:	b911      	cbnz	r1, 8007102 <sbrk_aligned+0x12>
 80070fc:	f000 fe3a 	bl	8007d74 <_sbrk_r>
 8007100:	6030      	str	r0, [r6, #0]
 8007102:	4621      	mov	r1, r4
 8007104:	4628      	mov	r0, r5
 8007106:	f000 fe35 	bl	8007d74 <_sbrk_r>
 800710a:	1c43      	adds	r3, r0, #1
 800710c:	d103      	bne.n	8007116 <sbrk_aligned+0x26>
 800710e:	f04f 34ff 	mov.w	r4, #4294967295
 8007112:	4620      	mov	r0, r4
 8007114:	bd70      	pop	{r4, r5, r6, pc}
 8007116:	1cc4      	adds	r4, r0, #3
 8007118:	f024 0403 	bic.w	r4, r4, #3
 800711c:	42a0      	cmp	r0, r4
 800711e:	d0f8      	beq.n	8007112 <sbrk_aligned+0x22>
 8007120:	1a21      	subs	r1, r4, r0
 8007122:	4628      	mov	r0, r5
 8007124:	f000 fe26 	bl	8007d74 <_sbrk_r>
 8007128:	3001      	adds	r0, #1
 800712a:	d1f2      	bne.n	8007112 <sbrk_aligned+0x22>
 800712c:	e7ef      	b.n	800710e <sbrk_aligned+0x1e>
 800712e:	bf00      	nop
 8007130:	200006d4 	.word	0x200006d4

08007134 <_malloc_r>:
 8007134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007138:	1ccd      	adds	r5, r1, #3
 800713a:	f025 0503 	bic.w	r5, r5, #3
 800713e:	3508      	adds	r5, #8
 8007140:	2d0c      	cmp	r5, #12
 8007142:	bf38      	it	cc
 8007144:	250c      	movcc	r5, #12
 8007146:	2d00      	cmp	r5, #0
 8007148:	4606      	mov	r6, r0
 800714a:	db01      	blt.n	8007150 <_malloc_r+0x1c>
 800714c:	42a9      	cmp	r1, r5
 800714e:	d904      	bls.n	800715a <_malloc_r+0x26>
 8007150:	230c      	movs	r3, #12
 8007152:	6033      	str	r3, [r6, #0]
 8007154:	2000      	movs	r0, #0
 8007156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800715a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007230 <_malloc_r+0xfc>
 800715e:	f000 f869 	bl	8007234 <__malloc_lock>
 8007162:	f8d8 3000 	ldr.w	r3, [r8]
 8007166:	461c      	mov	r4, r3
 8007168:	bb44      	cbnz	r4, 80071bc <_malloc_r+0x88>
 800716a:	4629      	mov	r1, r5
 800716c:	4630      	mov	r0, r6
 800716e:	f7ff ffbf 	bl	80070f0 <sbrk_aligned>
 8007172:	1c43      	adds	r3, r0, #1
 8007174:	4604      	mov	r4, r0
 8007176:	d158      	bne.n	800722a <_malloc_r+0xf6>
 8007178:	f8d8 4000 	ldr.w	r4, [r8]
 800717c:	4627      	mov	r7, r4
 800717e:	2f00      	cmp	r7, #0
 8007180:	d143      	bne.n	800720a <_malloc_r+0xd6>
 8007182:	2c00      	cmp	r4, #0
 8007184:	d04b      	beq.n	800721e <_malloc_r+0xea>
 8007186:	6823      	ldr	r3, [r4, #0]
 8007188:	4639      	mov	r1, r7
 800718a:	4630      	mov	r0, r6
 800718c:	eb04 0903 	add.w	r9, r4, r3
 8007190:	f000 fdf0 	bl	8007d74 <_sbrk_r>
 8007194:	4581      	cmp	r9, r0
 8007196:	d142      	bne.n	800721e <_malloc_r+0xea>
 8007198:	6821      	ldr	r1, [r4, #0]
 800719a:	4630      	mov	r0, r6
 800719c:	1a6d      	subs	r5, r5, r1
 800719e:	4629      	mov	r1, r5
 80071a0:	f7ff ffa6 	bl	80070f0 <sbrk_aligned>
 80071a4:	3001      	adds	r0, #1
 80071a6:	d03a      	beq.n	800721e <_malloc_r+0xea>
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	442b      	add	r3, r5
 80071ac:	6023      	str	r3, [r4, #0]
 80071ae:	f8d8 3000 	ldr.w	r3, [r8]
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	bb62      	cbnz	r2, 8007210 <_malloc_r+0xdc>
 80071b6:	f8c8 7000 	str.w	r7, [r8]
 80071ba:	e00f      	b.n	80071dc <_malloc_r+0xa8>
 80071bc:	6822      	ldr	r2, [r4, #0]
 80071be:	1b52      	subs	r2, r2, r5
 80071c0:	d420      	bmi.n	8007204 <_malloc_r+0xd0>
 80071c2:	2a0b      	cmp	r2, #11
 80071c4:	d917      	bls.n	80071f6 <_malloc_r+0xc2>
 80071c6:	1961      	adds	r1, r4, r5
 80071c8:	42a3      	cmp	r3, r4
 80071ca:	6025      	str	r5, [r4, #0]
 80071cc:	bf18      	it	ne
 80071ce:	6059      	strne	r1, [r3, #4]
 80071d0:	6863      	ldr	r3, [r4, #4]
 80071d2:	bf08      	it	eq
 80071d4:	f8c8 1000 	streq.w	r1, [r8]
 80071d8:	5162      	str	r2, [r4, r5]
 80071da:	604b      	str	r3, [r1, #4]
 80071dc:	4630      	mov	r0, r6
 80071de:	f000 f82f 	bl	8007240 <__malloc_unlock>
 80071e2:	f104 000b 	add.w	r0, r4, #11
 80071e6:	1d23      	adds	r3, r4, #4
 80071e8:	f020 0007 	bic.w	r0, r0, #7
 80071ec:	1ac2      	subs	r2, r0, r3
 80071ee:	bf1c      	itt	ne
 80071f0:	1a1b      	subne	r3, r3, r0
 80071f2:	50a3      	strne	r3, [r4, r2]
 80071f4:	e7af      	b.n	8007156 <_malloc_r+0x22>
 80071f6:	6862      	ldr	r2, [r4, #4]
 80071f8:	42a3      	cmp	r3, r4
 80071fa:	bf0c      	ite	eq
 80071fc:	f8c8 2000 	streq.w	r2, [r8]
 8007200:	605a      	strne	r2, [r3, #4]
 8007202:	e7eb      	b.n	80071dc <_malloc_r+0xa8>
 8007204:	4623      	mov	r3, r4
 8007206:	6864      	ldr	r4, [r4, #4]
 8007208:	e7ae      	b.n	8007168 <_malloc_r+0x34>
 800720a:	463c      	mov	r4, r7
 800720c:	687f      	ldr	r7, [r7, #4]
 800720e:	e7b6      	b.n	800717e <_malloc_r+0x4a>
 8007210:	461a      	mov	r2, r3
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	42a3      	cmp	r3, r4
 8007216:	d1fb      	bne.n	8007210 <_malloc_r+0xdc>
 8007218:	2300      	movs	r3, #0
 800721a:	6053      	str	r3, [r2, #4]
 800721c:	e7de      	b.n	80071dc <_malloc_r+0xa8>
 800721e:	230c      	movs	r3, #12
 8007220:	4630      	mov	r0, r6
 8007222:	6033      	str	r3, [r6, #0]
 8007224:	f000 f80c 	bl	8007240 <__malloc_unlock>
 8007228:	e794      	b.n	8007154 <_malloc_r+0x20>
 800722a:	6005      	str	r5, [r0, #0]
 800722c:	e7d6      	b.n	80071dc <_malloc_r+0xa8>
 800722e:	bf00      	nop
 8007230:	200006d8 	.word	0x200006d8

08007234 <__malloc_lock>:
 8007234:	4801      	ldr	r0, [pc, #4]	@ (800723c <__malloc_lock+0x8>)
 8007236:	f7ff b89e 	b.w	8006376 <__retarget_lock_acquire_recursive>
 800723a:	bf00      	nop
 800723c:	200006d0 	.word	0x200006d0

08007240 <__malloc_unlock>:
 8007240:	4801      	ldr	r0, [pc, #4]	@ (8007248 <__malloc_unlock+0x8>)
 8007242:	f7ff b899 	b.w	8006378 <__retarget_lock_release_recursive>
 8007246:	bf00      	nop
 8007248:	200006d0 	.word	0x200006d0

0800724c <_Balloc>:
 800724c:	b570      	push	{r4, r5, r6, lr}
 800724e:	69c6      	ldr	r6, [r0, #28]
 8007250:	4604      	mov	r4, r0
 8007252:	460d      	mov	r5, r1
 8007254:	b976      	cbnz	r6, 8007274 <_Balloc+0x28>
 8007256:	2010      	movs	r0, #16
 8007258:	f7ff ff42 	bl	80070e0 <malloc>
 800725c:	4602      	mov	r2, r0
 800725e:	61e0      	str	r0, [r4, #28]
 8007260:	b920      	cbnz	r0, 800726c <_Balloc+0x20>
 8007262:	216b      	movs	r1, #107	@ 0x6b
 8007264:	4b17      	ldr	r3, [pc, #92]	@ (80072c4 <_Balloc+0x78>)
 8007266:	4818      	ldr	r0, [pc, #96]	@ (80072c8 <_Balloc+0x7c>)
 8007268:	f000 fda2 	bl	8007db0 <__assert_func>
 800726c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007270:	6006      	str	r6, [r0, #0]
 8007272:	60c6      	str	r6, [r0, #12]
 8007274:	69e6      	ldr	r6, [r4, #28]
 8007276:	68f3      	ldr	r3, [r6, #12]
 8007278:	b183      	cbz	r3, 800729c <_Balloc+0x50>
 800727a:	69e3      	ldr	r3, [r4, #28]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007282:	b9b8      	cbnz	r0, 80072b4 <_Balloc+0x68>
 8007284:	2101      	movs	r1, #1
 8007286:	fa01 f605 	lsl.w	r6, r1, r5
 800728a:	1d72      	adds	r2, r6, #5
 800728c:	4620      	mov	r0, r4
 800728e:	0092      	lsls	r2, r2, #2
 8007290:	f000 fdac 	bl	8007dec <_calloc_r>
 8007294:	b160      	cbz	r0, 80072b0 <_Balloc+0x64>
 8007296:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800729a:	e00e      	b.n	80072ba <_Balloc+0x6e>
 800729c:	2221      	movs	r2, #33	@ 0x21
 800729e:	2104      	movs	r1, #4
 80072a0:	4620      	mov	r0, r4
 80072a2:	f000 fda3 	bl	8007dec <_calloc_r>
 80072a6:	69e3      	ldr	r3, [r4, #28]
 80072a8:	60f0      	str	r0, [r6, #12]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1e4      	bne.n	800727a <_Balloc+0x2e>
 80072b0:	2000      	movs	r0, #0
 80072b2:	bd70      	pop	{r4, r5, r6, pc}
 80072b4:	6802      	ldr	r2, [r0, #0]
 80072b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072ba:	2300      	movs	r3, #0
 80072bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072c0:	e7f7      	b.n	80072b2 <_Balloc+0x66>
 80072c2:	bf00      	nop
 80072c4:	08008c2f 	.word	0x08008c2f
 80072c8:	08008caf 	.word	0x08008caf

080072cc <_Bfree>:
 80072cc:	b570      	push	{r4, r5, r6, lr}
 80072ce:	69c6      	ldr	r6, [r0, #28]
 80072d0:	4605      	mov	r5, r0
 80072d2:	460c      	mov	r4, r1
 80072d4:	b976      	cbnz	r6, 80072f4 <_Bfree+0x28>
 80072d6:	2010      	movs	r0, #16
 80072d8:	f7ff ff02 	bl	80070e0 <malloc>
 80072dc:	4602      	mov	r2, r0
 80072de:	61e8      	str	r0, [r5, #28]
 80072e0:	b920      	cbnz	r0, 80072ec <_Bfree+0x20>
 80072e2:	218f      	movs	r1, #143	@ 0x8f
 80072e4:	4b08      	ldr	r3, [pc, #32]	@ (8007308 <_Bfree+0x3c>)
 80072e6:	4809      	ldr	r0, [pc, #36]	@ (800730c <_Bfree+0x40>)
 80072e8:	f000 fd62 	bl	8007db0 <__assert_func>
 80072ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072f0:	6006      	str	r6, [r0, #0]
 80072f2:	60c6      	str	r6, [r0, #12]
 80072f4:	b13c      	cbz	r4, 8007306 <_Bfree+0x3a>
 80072f6:	69eb      	ldr	r3, [r5, #28]
 80072f8:	6862      	ldr	r2, [r4, #4]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007300:	6021      	str	r1, [r4, #0]
 8007302:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007306:	bd70      	pop	{r4, r5, r6, pc}
 8007308:	08008c2f 	.word	0x08008c2f
 800730c:	08008caf 	.word	0x08008caf

08007310 <__multadd>:
 8007310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007314:	4607      	mov	r7, r0
 8007316:	460c      	mov	r4, r1
 8007318:	461e      	mov	r6, r3
 800731a:	2000      	movs	r0, #0
 800731c:	690d      	ldr	r5, [r1, #16]
 800731e:	f101 0c14 	add.w	ip, r1, #20
 8007322:	f8dc 3000 	ldr.w	r3, [ip]
 8007326:	3001      	adds	r0, #1
 8007328:	b299      	uxth	r1, r3
 800732a:	fb02 6101 	mla	r1, r2, r1, r6
 800732e:	0c1e      	lsrs	r6, r3, #16
 8007330:	0c0b      	lsrs	r3, r1, #16
 8007332:	fb02 3306 	mla	r3, r2, r6, r3
 8007336:	b289      	uxth	r1, r1
 8007338:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800733c:	4285      	cmp	r5, r0
 800733e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007342:	f84c 1b04 	str.w	r1, [ip], #4
 8007346:	dcec      	bgt.n	8007322 <__multadd+0x12>
 8007348:	b30e      	cbz	r6, 800738e <__multadd+0x7e>
 800734a:	68a3      	ldr	r3, [r4, #8]
 800734c:	42ab      	cmp	r3, r5
 800734e:	dc19      	bgt.n	8007384 <__multadd+0x74>
 8007350:	6861      	ldr	r1, [r4, #4]
 8007352:	4638      	mov	r0, r7
 8007354:	3101      	adds	r1, #1
 8007356:	f7ff ff79 	bl	800724c <_Balloc>
 800735a:	4680      	mov	r8, r0
 800735c:	b928      	cbnz	r0, 800736a <__multadd+0x5a>
 800735e:	4602      	mov	r2, r0
 8007360:	21ba      	movs	r1, #186	@ 0xba
 8007362:	4b0c      	ldr	r3, [pc, #48]	@ (8007394 <__multadd+0x84>)
 8007364:	480c      	ldr	r0, [pc, #48]	@ (8007398 <__multadd+0x88>)
 8007366:	f000 fd23 	bl	8007db0 <__assert_func>
 800736a:	6922      	ldr	r2, [r4, #16]
 800736c:	f104 010c 	add.w	r1, r4, #12
 8007370:	3202      	adds	r2, #2
 8007372:	0092      	lsls	r2, r2, #2
 8007374:	300c      	adds	r0, #12
 8007376:	f000 fd0d 	bl	8007d94 <memcpy>
 800737a:	4621      	mov	r1, r4
 800737c:	4638      	mov	r0, r7
 800737e:	f7ff ffa5 	bl	80072cc <_Bfree>
 8007382:	4644      	mov	r4, r8
 8007384:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007388:	3501      	adds	r5, #1
 800738a:	615e      	str	r6, [r3, #20]
 800738c:	6125      	str	r5, [r4, #16]
 800738e:	4620      	mov	r0, r4
 8007390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007394:	08008c9e 	.word	0x08008c9e
 8007398:	08008caf 	.word	0x08008caf

0800739c <__hi0bits>:
 800739c:	4603      	mov	r3, r0
 800739e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80073a2:	bf3a      	itte	cc
 80073a4:	0403      	lslcc	r3, r0, #16
 80073a6:	2010      	movcc	r0, #16
 80073a8:	2000      	movcs	r0, #0
 80073aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073ae:	bf3c      	itt	cc
 80073b0:	021b      	lslcc	r3, r3, #8
 80073b2:	3008      	addcc	r0, #8
 80073b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073b8:	bf3c      	itt	cc
 80073ba:	011b      	lslcc	r3, r3, #4
 80073bc:	3004      	addcc	r0, #4
 80073be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073c2:	bf3c      	itt	cc
 80073c4:	009b      	lslcc	r3, r3, #2
 80073c6:	3002      	addcc	r0, #2
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	db05      	blt.n	80073d8 <__hi0bits+0x3c>
 80073cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80073d0:	f100 0001 	add.w	r0, r0, #1
 80073d4:	bf08      	it	eq
 80073d6:	2020      	moveq	r0, #32
 80073d8:	4770      	bx	lr

080073da <__lo0bits>:
 80073da:	6803      	ldr	r3, [r0, #0]
 80073dc:	4602      	mov	r2, r0
 80073de:	f013 0007 	ands.w	r0, r3, #7
 80073e2:	d00b      	beq.n	80073fc <__lo0bits+0x22>
 80073e4:	07d9      	lsls	r1, r3, #31
 80073e6:	d421      	bmi.n	800742c <__lo0bits+0x52>
 80073e8:	0798      	lsls	r0, r3, #30
 80073ea:	bf49      	itett	mi
 80073ec:	085b      	lsrmi	r3, r3, #1
 80073ee:	089b      	lsrpl	r3, r3, #2
 80073f0:	2001      	movmi	r0, #1
 80073f2:	6013      	strmi	r3, [r2, #0]
 80073f4:	bf5c      	itt	pl
 80073f6:	2002      	movpl	r0, #2
 80073f8:	6013      	strpl	r3, [r2, #0]
 80073fa:	4770      	bx	lr
 80073fc:	b299      	uxth	r1, r3
 80073fe:	b909      	cbnz	r1, 8007404 <__lo0bits+0x2a>
 8007400:	2010      	movs	r0, #16
 8007402:	0c1b      	lsrs	r3, r3, #16
 8007404:	b2d9      	uxtb	r1, r3
 8007406:	b909      	cbnz	r1, 800740c <__lo0bits+0x32>
 8007408:	3008      	adds	r0, #8
 800740a:	0a1b      	lsrs	r3, r3, #8
 800740c:	0719      	lsls	r1, r3, #28
 800740e:	bf04      	itt	eq
 8007410:	091b      	lsreq	r3, r3, #4
 8007412:	3004      	addeq	r0, #4
 8007414:	0799      	lsls	r1, r3, #30
 8007416:	bf04      	itt	eq
 8007418:	089b      	lsreq	r3, r3, #2
 800741a:	3002      	addeq	r0, #2
 800741c:	07d9      	lsls	r1, r3, #31
 800741e:	d403      	bmi.n	8007428 <__lo0bits+0x4e>
 8007420:	085b      	lsrs	r3, r3, #1
 8007422:	f100 0001 	add.w	r0, r0, #1
 8007426:	d003      	beq.n	8007430 <__lo0bits+0x56>
 8007428:	6013      	str	r3, [r2, #0]
 800742a:	4770      	bx	lr
 800742c:	2000      	movs	r0, #0
 800742e:	4770      	bx	lr
 8007430:	2020      	movs	r0, #32
 8007432:	4770      	bx	lr

08007434 <__i2b>:
 8007434:	b510      	push	{r4, lr}
 8007436:	460c      	mov	r4, r1
 8007438:	2101      	movs	r1, #1
 800743a:	f7ff ff07 	bl	800724c <_Balloc>
 800743e:	4602      	mov	r2, r0
 8007440:	b928      	cbnz	r0, 800744e <__i2b+0x1a>
 8007442:	f240 1145 	movw	r1, #325	@ 0x145
 8007446:	4b04      	ldr	r3, [pc, #16]	@ (8007458 <__i2b+0x24>)
 8007448:	4804      	ldr	r0, [pc, #16]	@ (800745c <__i2b+0x28>)
 800744a:	f000 fcb1 	bl	8007db0 <__assert_func>
 800744e:	2301      	movs	r3, #1
 8007450:	6144      	str	r4, [r0, #20]
 8007452:	6103      	str	r3, [r0, #16]
 8007454:	bd10      	pop	{r4, pc}
 8007456:	bf00      	nop
 8007458:	08008c9e 	.word	0x08008c9e
 800745c:	08008caf 	.word	0x08008caf

08007460 <__multiply>:
 8007460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007464:	4617      	mov	r7, r2
 8007466:	690a      	ldr	r2, [r1, #16]
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	4689      	mov	r9, r1
 800746c:	429a      	cmp	r2, r3
 800746e:	bfa2      	ittt	ge
 8007470:	463b      	movge	r3, r7
 8007472:	460f      	movge	r7, r1
 8007474:	4699      	movge	r9, r3
 8007476:	693d      	ldr	r5, [r7, #16]
 8007478:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	6879      	ldr	r1, [r7, #4]
 8007480:	eb05 060a 	add.w	r6, r5, sl
 8007484:	42b3      	cmp	r3, r6
 8007486:	b085      	sub	sp, #20
 8007488:	bfb8      	it	lt
 800748a:	3101      	addlt	r1, #1
 800748c:	f7ff fede 	bl	800724c <_Balloc>
 8007490:	b930      	cbnz	r0, 80074a0 <__multiply+0x40>
 8007492:	4602      	mov	r2, r0
 8007494:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007498:	4b40      	ldr	r3, [pc, #256]	@ (800759c <__multiply+0x13c>)
 800749a:	4841      	ldr	r0, [pc, #260]	@ (80075a0 <__multiply+0x140>)
 800749c:	f000 fc88 	bl	8007db0 <__assert_func>
 80074a0:	f100 0414 	add.w	r4, r0, #20
 80074a4:	4623      	mov	r3, r4
 80074a6:	2200      	movs	r2, #0
 80074a8:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80074ac:	4573      	cmp	r3, lr
 80074ae:	d320      	bcc.n	80074f2 <__multiply+0x92>
 80074b0:	f107 0814 	add.w	r8, r7, #20
 80074b4:	f109 0114 	add.w	r1, r9, #20
 80074b8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80074bc:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80074c0:	9302      	str	r3, [sp, #8]
 80074c2:	1beb      	subs	r3, r5, r7
 80074c4:	3b15      	subs	r3, #21
 80074c6:	f023 0303 	bic.w	r3, r3, #3
 80074ca:	3304      	adds	r3, #4
 80074cc:	3715      	adds	r7, #21
 80074ce:	42bd      	cmp	r5, r7
 80074d0:	bf38      	it	cc
 80074d2:	2304      	movcc	r3, #4
 80074d4:	9301      	str	r3, [sp, #4]
 80074d6:	9b02      	ldr	r3, [sp, #8]
 80074d8:	9103      	str	r1, [sp, #12]
 80074da:	428b      	cmp	r3, r1
 80074dc:	d80c      	bhi.n	80074f8 <__multiply+0x98>
 80074de:	2e00      	cmp	r6, #0
 80074e0:	dd03      	ble.n	80074ea <__multiply+0x8a>
 80074e2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d055      	beq.n	8007596 <__multiply+0x136>
 80074ea:	6106      	str	r6, [r0, #16]
 80074ec:	b005      	add	sp, #20
 80074ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f2:	f843 2b04 	str.w	r2, [r3], #4
 80074f6:	e7d9      	b.n	80074ac <__multiply+0x4c>
 80074f8:	f8b1 a000 	ldrh.w	sl, [r1]
 80074fc:	f1ba 0f00 	cmp.w	sl, #0
 8007500:	d01f      	beq.n	8007542 <__multiply+0xe2>
 8007502:	46c4      	mov	ip, r8
 8007504:	46a1      	mov	r9, r4
 8007506:	2700      	movs	r7, #0
 8007508:	f85c 2b04 	ldr.w	r2, [ip], #4
 800750c:	f8d9 3000 	ldr.w	r3, [r9]
 8007510:	fa1f fb82 	uxth.w	fp, r2
 8007514:	b29b      	uxth	r3, r3
 8007516:	fb0a 330b 	mla	r3, sl, fp, r3
 800751a:	443b      	add	r3, r7
 800751c:	f8d9 7000 	ldr.w	r7, [r9]
 8007520:	0c12      	lsrs	r2, r2, #16
 8007522:	0c3f      	lsrs	r7, r7, #16
 8007524:	fb0a 7202 	mla	r2, sl, r2, r7
 8007528:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800752c:	b29b      	uxth	r3, r3
 800752e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007532:	4565      	cmp	r5, ip
 8007534:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007538:	f849 3b04 	str.w	r3, [r9], #4
 800753c:	d8e4      	bhi.n	8007508 <__multiply+0xa8>
 800753e:	9b01      	ldr	r3, [sp, #4]
 8007540:	50e7      	str	r7, [r4, r3]
 8007542:	9b03      	ldr	r3, [sp, #12]
 8007544:	3104      	adds	r1, #4
 8007546:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800754a:	f1b9 0f00 	cmp.w	r9, #0
 800754e:	d020      	beq.n	8007592 <__multiply+0x132>
 8007550:	4647      	mov	r7, r8
 8007552:	46a4      	mov	ip, r4
 8007554:	f04f 0a00 	mov.w	sl, #0
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	f8b7 b000 	ldrh.w	fp, [r7]
 800755e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007562:	b29b      	uxth	r3, r3
 8007564:	fb09 220b 	mla	r2, r9, fp, r2
 8007568:	4452      	add	r2, sl
 800756a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800756e:	f84c 3b04 	str.w	r3, [ip], #4
 8007572:	f857 3b04 	ldr.w	r3, [r7], #4
 8007576:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800757a:	f8bc 3000 	ldrh.w	r3, [ip]
 800757e:	42bd      	cmp	r5, r7
 8007580:	fb09 330a 	mla	r3, r9, sl, r3
 8007584:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007588:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800758c:	d8e5      	bhi.n	800755a <__multiply+0xfa>
 800758e:	9a01      	ldr	r2, [sp, #4]
 8007590:	50a3      	str	r3, [r4, r2]
 8007592:	3404      	adds	r4, #4
 8007594:	e79f      	b.n	80074d6 <__multiply+0x76>
 8007596:	3e01      	subs	r6, #1
 8007598:	e7a1      	b.n	80074de <__multiply+0x7e>
 800759a:	bf00      	nop
 800759c:	08008c9e 	.word	0x08008c9e
 80075a0:	08008caf 	.word	0x08008caf

080075a4 <__pow5mult>:
 80075a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075a8:	4615      	mov	r5, r2
 80075aa:	f012 0203 	ands.w	r2, r2, #3
 80075ae:	4607      	mov	r7, r0
 80075b0:	460e      	mov	r6, r1
 80075b2:	d007      	beq.n	80075c4 <__pow5mult+0x20>
 80075b4:	4c25      	ldr	r4, [pc, #148]	@ (800764c <__pow5mult+0xa8>)
 80075b6:	3a01      	subs	r2, #1
 80075b8:	2300      	movs	r3, #0
 80075ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80075be:	f7ff fea7 	bl	8007310 <__multadd>
 80075c2:	4606      	mov	r6, r0
 80075c4:	10ad      	asrs	r5, r5, #2
 80075c6:	d03d      	beq.n	8007644 <__pow5mult+0xa0>
 80075c8:	69fc      	ldr	r4, [r7, #28]
 80075ca:	b97c      	cbnz	r4, 80075ec <__pow5mult+0x48>
 80075cc:	2010      	movs	r0, #16
 80075ce:	f7ff fd87 	bl	80070e0 <malloc>
 80075d2:	4602      	mov	r2, r0
 80075d4:	61f8      	str	r0, [r7, #28]
 80075d6:	b928      	cbnz	r0, 80075e4 <__pow5mult+0x40>
 80075d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80075dc:	4b1c      	ldr	r3, [pc, #112]	@ (8007650 <__pow5mult+0xac>)
 80075de:	481d      	ldr	r0, [pc, #116]	@ (8007654 <__pow5mult+0xb0>)
 80075e0:	f000 fbe6 	bl	8007db0 <__assert_func>
 80075e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80075e8:	6004      	str	r4, [r0, #0]
 80075ea:	60c4      	str	r4, [r0, #12]
 80075ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80075f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80075f4:	b94c      	cbnz	r4, 800760a <__pow5mult+0x66>
 80075f6:	f240 2171 	movw	r1, #625	@ 0x271
 80075fa:	4638      	mov	r0, r7
 80075fc:	f7ff ff1a 	bl	8007434 <__i2b>
 8007600:	2300      	movs	r3, #0
 8007602:	4604      	mov	r4, r0
 8007604:	f8c8 0008 	str.w	r0, [r8, #8]
 8007608:	6003      	str	r3, [r0, #0]
 800760a:	f04f 0900 	mov.w	r9, #0
 800760e:	07eb      	lsls	r3, r5, #31
 8007610:	d50a      	bpl.n	8007628 <__pow5mult+0x84>
 8007612:	4631      	mov	r1, r6
 8007614:	4622      	mov	r2, r4
 8007616:	4638      	mov	r0, r7
 8007618:	f7ff ff22 	bl	8007460 <__multiply>
 800761c:	4680      	mov	r8, r0
 800761e:	4631      	mov	r1, r6
 8007620:	4638      	mov	r0, r7
 8007622:	f7ff fe53 	bl	80072cc <_Bfree>
 8007626:	4646      	mov	r6, r8
 8007628:	106d      	asrs	r5, r5, #1
 800762a:	d00b      	beq.n	8007644 <__pow5mult+0xa0>
 800762c:	6820      	ldr	r0, [r4, #0]
 800762e:	b938      	cbnz	r0, 8007640 <__pow5mult+0x9c>
 8007630:	4622      	mov	r2, r4
 8007632:	4621      	mov	r1, r4
 8007634:	4638      	mov	r0, r7
 8007636:	f7ff ff13 	bl	8007460 <__multiply>
 800763a:	6020      	str	r0, [r4, #0]
 800763c:	f8c0 9000 	str.w	r9, [r0]
 8007640:	4604      	mov	r4, r0
 8007642:	e7e4      	b.n	800760e <__pow5mult+0x6a>
 8007644:	4630      	mov	r0, r6
 8007646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800764a:	bf00      	nop
 800764c:	08008d60 	.word	0x08008d60
 8007650:	08008c2f 	.word	0x08008c2f
 8007654:	08008caf 	.word	0x08008caf

08007658 <__lshift>:
 8007658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800765c:	460c      	mov	r4, r1
 800765e:	4607      	mov	r7, r0
 8007660:	4691      	mov	r9, r2
 8007662:	6923      	ldr	r3, [r4, #16]
 8007664:	6849      	ldr	r1, [r1, #4]
 8007666:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800766a:	68a3      	ldr	r3, [r4, #8]
 800766c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007670:	f108 0601 	add.w	r6, r8, #1
 8007674:	42b3      	cmp	r3, r6
 8007676:	db0b      	blt.n	8007690 <__lshift+0x38>
 8007678:	4638      	mov	r0, r7
 800767a:	f7ff fde7 	bl	800724c <_Balloc>
 800767e:	4605      	mov	r5, r0
 8007680:	b948      	cbnz	r0, 8007696 <__lshift+0x3e>
 8007682:	4602      	mov	r2, r0
 8007684:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007688:	4b27      	ldr	r3, [pc, #156]	@ (8007728 <__lshift+0xd0>)
 800768a:	4828      	ldr	r0, [pc, #160]	@ (800772c <__lshift+0xd4>)
 800768c:	f000 fb90 	bl	8007db0 <__assert_func>
 8007690:	3101      	adds	r1, #1
 8007692:	005b      	lsls	r3, r3, #1
 8007694:	e7ee      	b.n	8007674 <__lshift+0x1c>
 8007696:	2300      	movs	r3, #0
 8007698:	f100 0114 	add.w	r1, r0, #20
 800769c:	f100 0210 	add.w	r2, r0, #16
 80076a0:	4618      	mov	r0, r3
 80076a2:	4553      	cmp	r3, sl
 80076a4:	db33      	blt.n	800770e <__lshift+0xb6>
 80076a6:	6920      	ldr	r0, [r4, #16]
 80076a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076ac:	f104 0314 	add.w	r3, r4, #20
 80076b0:	f019 091f 	ands.w	r9, r9, #31
 80076b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80076b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80076bc:	d02b      	beq.n	8007716 <__lshift+0xbe>
 80076be:	468a      	mov	sl, r1
 80076c0:	2200      	movs	r2, #0
 80076c2:	f1c9 0e20 	rsb	lr, r9, #32
 80076c6:	6818      	ldr	r0, [r3, #0]
 80076c8:	fa00 f009 	lsl.w	r0, r0, r9
 80076cc:	4310      	orrs	r0, r2
 80076ce:	f84a 0b04 	str.w	r0, [sl], #4
 80076d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80076d6:	459c      	cmp	ip, r3
 80076d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80076dc:	d8f3      	bhi.n	80076c6 <__lshift+0x6e>
 80076de:	ebac 0304 	sub.w	r3, ip, r4
 80076e2:	3b15      	subs	r3, #21
 80076e4:	f023 0303 	bic.w	r3, r3, #3
 80076e8:	3304      	adds	r3, #4
 80076ea:	f104 0015 	add.w	r0, r4, #21
 80076ee:	4560      	cmp	r0, ip
 80076f0:	bf88      	it	hi
 80076f2:	2304      	movhi	r3, #4
 80076f4:	50ca      	str	r2, [r1, r3]
 80076f6:	b10a      	cbz	r2, 80076fc <__lshift+0xa4>
 80076f8:	f108 0602 	add.w	r6, r8, #2
 80076fc:	3e01      	subs	r6, #1
 80076fe:	4638      	mov	r0, r7
 8007700:	4621      	mov	r1, r4
 8007702:	612e      	str	r6, [r5, #16]
 8007704:	f7ff fde2 	bl	80072cc <_Bfree>
 8007708:	4628      	mov	r0, r5
 800770a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800770e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007712:	3301      	adds	r3, #1
 8007714:	e7c5      	b.n	80076a2 <__lshift+0x4a>
 8007716:	3904      	subs	r1, #4
 8007718:	f853 2b04 	ldr.w	r2, [r3], #4
 800771c:	459c      	cmp	ip, r3
 800771e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007722:	d8f9      	bhi.n	8007718 <__lshift+0xc0>
 8007724:	e7ea      	b.n	80076fc <__lshift+0xa4>
 8007726:	bf00      	nop
 8007728:	08008c9e 	.word	0x08008c9e
 800772c:	08008caf 	.word	0x08008caf

08007730 <__mcmp>:
 8007730:	4603      	mov	r3, r0
 8007732:	690a      	ldr	r2, [r1, #16]
 8007734:	6900      	ldr	r0, [r0, #16]
 8007736:	b530      	push	{r4, r5, lr}
 8007738:	1a80      	subs	r0, r0, r2
 800773a:	d10e      	bne.n	800775a <__mcmp+0x2a>
 800773c:	3314      	adds	r3, #20
 800773e:	3114      	adds	r1, #20
 8007740:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007744:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007748:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800774c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007750:	4295      	cmp	r5, r2
 8007752:	d003      	beq.n	800775c <__mcmp+0x2c>
 8007754:	d205      	bcs.n	8007762 <__mcmp+0x32>
 8007756:	f04f 30ff 	mov.w	r0, #4294967295
 800775a:	bd30      	pop	{r4, r5, pc}
 800775c:	42a3      	cmp	r3, r4
 800775e:	d3f3      	bcc.n	8007748 <__mcmp+0x18>
 8007760:	e7fb      	b.n	800775a <__mcmp+0x2a>
 8007762:	2001      	movs	r0, #1
 8007764:	e7f9      	b.n	800775a <__mcmp+0x2a>
	...

08007768 <__mdiff>:
 8007768:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800776c:	4689      	mov	r9, r1
 800776e:	4606      	mov	r6, r0
 8007770:	4611      	mov	r1, r2
 8007772:	4648      	mov	r0, r9
 8007774:	4614      	mov	r4, r2
 8007776:	f7ff ffdb 	bl	8007730 <__mcmp>
 800777a:	1e05      	subs	r5, r0, #0
 800777c:	d112      	bne.n	80077a4 <__mdiff+0x3c>
 800777e:	4629      	mov	r1, r5
 8007780:	4630      	mov	r0, r6
 8007782:	f7ff fd63 	bl	800724c <_Balloc>
 8007786:	4602      	mov	r2, r0
 8007788:	b928      	cbnz	r0, 8007796 <__mdiff+0x2e>
 800778a:	f240 2137 	movw	r1, #567	@ 0x237
 800778e:	4b3e      	ldr	r3, [pc, #248]	@ (8007888 <__mdiff+0x120>)
 8007790:	483e      	ldr	r0, [pc, #248]	@ (800788c <__mdiff+0x124>)
 8007792:	f000 fb0d 	bl	8007db0 <__assert_func>
 8007796:	2301      	movs	r3, #1
 8007798:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800779c:	4610      	mov	r0, r2
 800779e:	b003      	add	sp, #12
 80077a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a4:	bfbc      	itt	lt
 80077a6:	464b      	movlt	r3, r9
 80077a8:	46a1      	movlt	r9, r4
 80077aa:	4630      	mov	r0, r6
 80077ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80077b0:	bfba      	itte	lt
 80077b2:	461c      	movlt	r4, r3
 80077b4:	2501      	movlt	r5, #1
 80077b6:	2500      	movge	r5, #0
 80077b8:	f7ff fd48 	bl	800724c <_Balloc>
 80077bc:	4602      	mov	r2, r0
 80077be:	b918      	cbnz	r0, 80077c8 <__mdiff+0x60>
 80077c0:	f240 2145 	movw	r1, #581	@ 0x245
 80077c4:	4b30      	ldr	r3, [pc, #192]	@ (8007888 <__mdiff+0x120>)
 80077c6:	e7e3      	b.n	8007790 <__mdiff+0x28>
 80077c8:	f100 0b14 	add.w	fp, r0, #20
 80077cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80077d0:	f109 0310 	add.w	r3, r9, #16
 80077d4:	60c5      	str	r5, [r0, #12]
 80077d6:	f04f 0c00 	mov.w	ip, #0
 80077da:	f109 0514 	add.w	r5, r9, #20
 80077de:	46d9      	mov	r9, fp
 80077e0:	6926      	ldr	r6, [r4, #16]
 80077e2:	f104 0e14 	add.w	lr, r4, #20
 80077e6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80077ea:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80077ee:	9301      	str	r3, [sp, #4]
 80077f0:	9b01      	ldr	r3, [sp, #4]
 80077f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80077f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80077fa:	b281      	uxth	r1, r0
 80077fc:	9301      	str	r3, [sp, #4]
 80077fe:	fa1f f38a 	uxth.w	r3, sl
 8007802:	1a5b      	subs	r3, r3, r1
 8007804:	0c00      	lsrs	r0, r0, #16
 8007806:	4463      	add	r3, ip
 8007808:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800780c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007810:	b29b      	uxth	r3, r3
 8007812:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007816:	4576      	cmp	r6, lr
 8007818:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800781c:	f849 3b04 	str.w	r3, [r9], #4
 8007820:	d8e6      	bhi.n	80077f0 <__mdiff+0x88>
 8007822:	1b33      	subs	r3, r6, r4
 8007824:	3b15      	subs	r3, #21
 8007826:	f023 0303 	bic.w	r3, r3, #3
 800782a:	3415      	adds	r4, #21
 800782c:	3304      	adds	r3, #4
 800782e:	42a6      	cmp	r6, r4
 8007830:	bf38      	it	cc
 8007832:	2304      	movcc	r3, #4
 8007834:	441d      	add	r5, r3
 8007836:	445b      	add	r3, fp
 8007838:	461e      	mov	r6, r3
 800783a:	462c      	mov	r4, r5
 800783c:	4544      	cmp	r4, r8
 800783e:	d30e      	bcc.n	800785e <__mdiff+0xf6>
 8007840:	f108 0103 	add.w	r1, r8, #3
 8007844:	1b49      	subs	r1, r1, r5
 8007846:	f021 0103 	bic.w	r1, r1, #3
 800784a:	3d03      	subs	r5, #3
 800784c:	45a8      	cmp	r8, r5
 800784e:	bf38      	it	cc
 8007850:	2100      	movcc	r1, #0
 8007852:	440b      	add	r3, r1
 8007854:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007858:	b199      	cbz	r1, 8007882 <__mdiff+0x11a>
 800785a:	6117      	str	r7, [r2, #16]
 800785c:	e79e      	b.n	800779c <__mdiff+0x34>
 800785e:	46e6      	mov	lr, ip
 8007860:	f854 1b04 	ldr.w	r1, [r4], #4
 8007864:	fa1f fc81 	uxth.w	ip, r1
 8007868:	44f4      	add	ip, lr
 800786a:	0c08      	lsrs	r0, r1, #16
 800786c:	4471      	add	r1, lr
 800786e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007872:	b289      	uxth	r1, r1
 8007874:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007878:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800787c:	f846 1b04 	str.w	r1, [r6], #4
 8007880:	e7dc      	b.n	800783c <__mdiff+0xd4>
 8007882:	3f01      	subs	r7, #1
 8007884:	e7e6      	b.n	8007854 <__mdiff+0xec>
 8007886:	bf00      	nop
 8007888:	08008c9e 	.word	0x08008c9e
 800788c:	08008caf 	.word	0x08008caf

08007890 <__d2b>:
 8007890:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007894:	2101      	movs	r1, #1
 8007896:	4690      	mov	r8, r2
 8007898:	4699      	mov	r9, r3
 800789a:	9e08      	ldr	r6, [sp, #32]
 800789c:	f7ff fcd6 	bl	800724c <_Balloc>
 80078a0:	4604      	mov	r4, r0
 80078a2:	b930      	cbnz	r0, 80078b2 <__d2b+0x22>
 80078a4:	4602      	mov	r2, r0
 80078a6:	f240 310f 	movw	r1, #783	@ 0x30f
 80078aa:	4b23      	ldr	r3, [pc, #140]	@ (8007938 <__d2b+0xa8>)
 80078ac:	4823      	ldr	r0, [pc, #140]	@ (800793c <__d2b+0xac>)
 80078ae:	f000 fa7f 	bl	8007db0 <__assert_func>
 80078b2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80078b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078ba:	b10d      	cbz	r5, 80078c0 <__d2b+0x30>
 80078bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078c0:	9301      	str	r3, [sp, #4]
 80078c2:	f1b8 0300 	subs.w	r3, r8, #0
 80078c6:	d024      	beq.n	8007912 <__d2b+0x82>
 80078c8:	4668      	mov	r0, sp
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	f7ff fd85 	bl	80073da <__lo0bits>
 80078d0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80078d4:	b1d8      	cbz	r0, 800790e <__d2b+0x7e>
 80078d6:	f1c0 0320 	rsb	r3, r0, #32
 80078da:	fa02 f303 	lsl.w	r3, r2, r3
 80078de:	430b      	orrs	r3, r1
 80078e0:	40c2      	lsrs	r2, r0
 80078e2:	6163      	str	r3, [r4, #20]
 80078e4:	9201      	str	r2, [sp, #4]
 80078e6:	9b01      	ldr	r3, [sp, #4]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	bf0c      	ite	eq
 80078ec:	2201      	moveq	r2, #1
 80078ee:	2202      	movne	r2, #2
 80078f0:	61a3      	str	r3, [r4, #24]
 80078f2:	6122      	str	r2, [r4, #16]
 80078f4:	b1ad      	cbz	r5, 8007922 <__d2b+0x92>
 80078f6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80078fa:	4405      	add	r5, r0
 80078fc:	6035      	str	r5, [r6, #0]
 80078fe:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007904:	6018      	str	r0, [r3, #0]
 8007906:	4620      	mov	r0, r4
 8007908:	b002      	add	sp, #8
 800790a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800790e:	6161      	str	r1, [r4, #20]
 8007910:	e7e9      	b.n	80078e6 <__d2b+0x56>
 8007912:	a801      	add	r0, sp, #4
 8007914:	f7ff fd61 	bl	80073da <__lo0bits>
 8007918:	9b01      	ldr	r3, [sp, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	6163      	str	r3, [r4, #20]
 800791e:	3020      	adds	r0, #32
 8007920:	e7e7      	b.n	80078f2 <__d2b+0x62>
 8007922:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007926:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800792a:	6030      	str	r0, [r6, #0]
 800792c:	6918      	ldr	r0, [r3, #16]
 800792e:	f7ff fd35 	bl	800739c <__hi0bits>
 8007932:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007936:	e7e4      	b.n	8007902 <__d2b+0x72>
 8007938:	08008c9e 	.word	0x08008c9e
 800793c:	08008caf 	.word	0x08008caf

08007940 <__ssputs_r>:
 8007940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007944:	461f      	mov	r7, r3
 8007946:	688e      	ldr	r6, [r1, #8]
 8007948:	4682      	mov	sl, r0
 800794a:	42be      	cmp	r6, r7
 800794c:	460c      	mov	r4, r1
 800794e:	4690      	mov	r8, r2
 8007950:	680b      	ldr	r3, [r1, #0]
 8007952:	d82d      	bhi.n	80079b0 <__ssputs_r+0x70>
 8007954:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007958:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800795c:	d026      	beq.n	80079ac <__ssputs_r+0x6c>
 800795e:	6965      	ldr	r5, [r4, #20]
 8007960:	6909      	ldr	r1, [r1, #16]
 8007962:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007966:	eba3 0901 	sub.w	r9, r3, r1
 800796a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800796e:	1c7b      	adds	r3, r7, #1
 8007970:	444b      	add	r3, r9
 8007972:	106d      	asrs	r5, r5, #1
 8007974:	429d      	cmp	r5, r3
 8007976:	bf38      	it	cc
 8007978:	461d      	movcc	r5, r3
 800797a:	0553      	lsls	r3, r2, #21
 800797c:	d527      	bpl.n	80079ce <__ssputs_r+0x8e>
 800797e:	4629      	mov	r1, r5
 8007980:	f7ff fbd8 	bl	8007134 <_malloc_r>
 8007984:	4606      	mov	r6, r0
 8007986:	b360      	cbz	r0, 80079e2 <__ssputs_r+0xa2>
 8007988:	464a      	mov	r2, r9
 800798a:	6921      	ldr	r1, [r4, #16]
 800798c:	f000 fa02 	bl	8007d94 <memcpy>
 8007990:	89a3      	ldrh	r3, [r4, #12]
 8007992:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007996:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800799a:	81a3      	strh	r3, [r4, #12]
 800799c:	6126      	str	r6, [r4, #16]
 800799e:	444e      	add	r6, r9
 80079a0:	6026      	str	r6, [r4, #0]
 80079a2:	463e      	mov	r6, r7
 80079a4:	6165      	str	r5, [r4, #20]
 80079a6:	eba5 0509 	sub.w	r5, r5, r9
 80079aa:	60a5      	str	r5, [r4, #8]
 80079ac:	42be      	cmp	r6, r7
 80079ae:	d900      	bls.n	80079b2 <__ssputs_r+0x72>
 80079b0:	463e      	mov	r6, r7
 80079b2:	4632      	mov	r2, r6
 80079b4:	4641      	mov	r1, r8
 80079b6:	6820      	ldr	r0, [r4, #0]
 80079b8:	f000 f9c2 	bl	8007d40 <memmove>
 80079bc:	2000      	movs	r0, #0
 80079be:	68a3      	ldr	r3, [r4, #8]
 80079c0:	1b9b      	subs	r3, r3, r6
 80079c2:	60a3      	str	r3, [r4, #8]
 80079c4:	6823      	ldr	r3, [r4, #0]
 80079c6:	4433      	add	r3, r6
 80079c8:	6023      	str	r3, [r4, #0]
 80079ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ce:	462a      	mov	r2, r5
 80079d0:	f000 fa32 	bl	8007e38 <_realloc_r>
 80079d4:	4606      	mov	r6, r0
 80079d6:	2800      	cmp	r0, #0
 80079d8:	d1e0      	bne.n	800799c <__ssputs_r+0x5c>
 80079da:	4650      	mov	r0, sl
 80079dc:	6921      	ldr	r1, [r4, #16]
 80079de:	f7ff fb37 	bl	8007050 <_free_r>
 80079e2:	230c      	movs	r3, #12
 80079e4:	f8ca 3000 	str.w	r3, [sl]
 80079e8:	89a3      	ldrh	r3, [r4, #12]
 80079ea:	f04f 30ff 	mov.w	r0, #4294967295
 80079ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079f2:	81a3      	strh	r3, [r4, #12]
 80079f4:	e7e9      	b.n	80079ca <__ssputs_r+0x8a>
	...

080079f8 <_svfiprintf_r>:
 80079f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079fc:	4698      	mov	r8, r3
 80079fe:	898b      	ldrh	r3, [r1, #12]
 8007a00:	4607      	mov	r7, r0
 8007a02:	061b      	lsls	r3, r3, #24
 8007a04:	460d      	mov	r5, r1
 8007a06:	4614      	mov	r4, r2
 8007a08:	b09d      	sub	sp, #116	@ 0x74
 8007a0a:	d510      	bpl.n	8007a2e <_svfiprintf_r+0x36>
 8007a0c:	690b      	ldr	r3, [r1, #16]
 8007a0e:	b973      	cbnz	r3, 8007a2e <_svfiprintf_r+0x36>
 8007a10:	2140      	movs	r1, #64	@ 0x40
 8007a12:	f7ff fb8f 	bl	8007134 <_malloc_r>
 8007a16:	6028      	str	r0, [r5, #0]
 8007a18:	6128      	str	r0, [r5, #16]
 8007a1a:	b930      	cbnz	r0, 8007a2a <_svfiprintf_r+0x32>
 8007a1c:	230c      	movs	r3, #12
 8007a1e:	603b      	str	r3, [r7, #0]
 8007a20:	f04f 30ff 	mov.w	r0, #4294967295
 8007a24:	b01d      	add	sp, #116	@ 0x74
 8007a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a2a:	2340      	movs	r3, #64	@ 0x40
 8007a2c:	616b      	str	r3, [r5, #20]
 8007a2e:	2300      	movs	r3, #0
 8007a30:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a32:	2320      	movs	r3, #32
 8007a34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a38:	2330      	movs	r3, #48	@ 0x30
 8007a3a:	f04f 0901 	mov.w	r9, #1
 8007a3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a42:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007bdc <_svfiprintf_r+0x1e4>
 8007a46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a4a:	4623      	mov	r3, r4
 8007a4c:	469a      	mov	sl, r3
 8007a4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a52:	b10a      	cbz	r2, 8007a58 <_svfiprintf_r+0x60>
 8007a54:	2a25      	cmp	r2, #37	@ 0x25
 8007a56:	d1f9      	bne.n	8007a4c <_svfiprintf_r+0x54>
 8007a58:	ebba 0b04 	subs.w	fp, sl, r4
 8007a5c:	d00b      	beq.n	8007a76 <_svfiprintf_r+0x7e>
 8007a5e:	465b      	mov	r3, fp
 8007a60:	4622      	mov	r2, r4
 8007a62:	4629      	mov	r1, r5
 8007a64:	4638      	mov	r0, r7
 8007a66:	f7ff ff6b 	bl	8007940 <__ssputs_r>
 8007a6a:	3001      	adds	r0, #1
 8007a6c:	f000 80a7 	beq.w	8007bbe <_svfiprintf_r+0x1c6>
 8007a70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a72:	445a      	add	r2, fp
 8007a74:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a76:	f89a 3000 	ldrb.w	r3, [sl]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f000 809f 	beq.w	8007bbe <_svfiprintf_r+0x1c6>
 8007a80:	2300      	movs	r3, #0
 8007a82:	f04f 32ff 	mov.w	r2, #4294967295
 8007a86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a8a:	f10a 0a01 	add.w	sl, sl, #1
 8007a8e:	9304      	str	r3, [sp, #16]
 8007a90:	9307      	str	r3, [sp, #28]
 8007a92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a96:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a98:	4654      	mov	r4, sl
 8007a9a:	2205      	movs	r2, #5
 8007a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aa0:	484e      	ldr	r0, [pc, #312]	@ (8007bdc <_svfiprintf_r+0x1e4>)
 8007aa2:	f7fe fc6a 	bl	800637a <memchr>
 8007aa6:	9a04      	ldr	r2, [sp, #16]
 8007aa8:	b9d8      	cbnz	r0, 8007ae2 <_svfiprintf_r+0xea>
 8007aaa:	06d0      	lsls	r0, r2, #27
 8007aac:	bf44      	itt	mi
 8007aae:	2320      	movmi	r3, #32
 8007ab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ab4:	0711      	lsls	r1, r2, #28
 8007ab6:	bf44      	itt	mi
 8007ab8:	232b      	movmi	r3, #43	@ 0x2b
 8007aba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007abe:	f89a 3000 	ldrb.w	r3, [sl]
 8007ac2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ac4:	d015      	beq.n	8007af2 <_svfiprintf_r+0xfa>
 8007ac6:	4654      	mov	r4, sl
 8007ac8:	2000      	movs	r0, #0
 8007aca:	f04f 0c0a 	mov.w	ip, #10
 8007ace:	9a07      	ldr	r2, [sp, #28]
 8007ad0:	4621      	mov	r1, r4
 8007ad2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ad6:	3b30      	subs	r3, #48	@ 0x30
 8007ad8:	2b09      	cmp	r3, #9
 8007ada:	d94b      	bls.n	8007b74 <_svfiprintf_r+0x17c>
 8007adc:	b1b0      	cbz	r0, 8007b0c <_svfiprintf_r+0x114>
 8007ade:	9207      	str	r2, [sp, #28]
 8007ae0:	e014      	b.n	8007b0c <_svfiprintf_r+0x114>
 8007ae2:	eba0 0308 	sub.w	r3, r0, r8
 8007ae6:	fa09 f303 	lsl.w	r3, r9, r3
 8007aea:	4313      	orrs	r3, r2
 8007aec:	46a2      	mov	sl, r4
 8007aee:	9304      	str	r3, [sp, #16]
 8007af0:	e7d2      	b.n	8007a98 <_svfiprintf_r+0xa0>
 8007af2:	9b03      	ldr	r3, [sp, #12]
 8007af4:	1d19      	adds	r1, r3, #4
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	9103      	str	r1, [sp, #12]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	bfbb      	ittet	lt
 8007afe:	425b      	neglt	r3, r3
 8007b00:	f042 0202 	orrlt.w	r2, r2, #2
 8007b04:	9307      	strge	r3, [sp, #28]
 8007b06:	9307      	strlt	r3, [sp, #28]
 8007b08:	bfb8      	it	lt
 8007b0a:	9204      	strlt	r2, [sp, #16]
 8007b0c:	7823      	ldrb	r3, [r4, #0]
 8007b0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b10:	d10a      	bne.n	8007b28 <_svfiprintf_r+0x130>
 8007b12:	7863      	ldrb	r3, [r4, #1]
 8007b14:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b16:	d132      	bne.n	8007b7e <_svfiprintf_r+0x186>
 8007b18:	9b03      	ldr	r3, [sp, #12]
 8007b1a:	3402      	adds	r4, #2
 8007b1c:	1d1a      	adds	r2, r3, #4
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	9203      	str	r2, [sp, #12]
 8007b22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b26:	9305      	str	r3, [sp, #20]
 8007b28:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007be0 <_svfiprintf_r+0x1e8>
 8007b2c:	2203      	movs	r2, #3
 8007b2e:	4650      	mov	r0, sl
 8007b30:	7821      	ldrb	r1, [r4, #0]
 8007b32:	f7fe fc22 	bl	800637a <memchr>
 8007b36:	b138      	cbz	r0, 8007b48 <_svfiprintf_r+0x150>
 8007b38:	2240      	movs	r2, #64	@ 0x40
 8007b3a:	9b04      	ldr	r3, [sp, #16]
 8007b3c:	eba0 000a 	sub.w	r0, r0, sl
 8007b40:	4082      	lsls	r2, r0
 8007b42:	4313      	orrs	r3, r2
 8007b44:	3401      	adds	r4, #1
 8007b46:	9304      	str	r3, [sp, #16]
 8007b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b4c:	2206      	movs	r2, #6
 8007b4e:	4825      	ldr	r0, [pc, #148]	@ (8007be4 <_svfiprintf_r+0x1ec>)
 8007b50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b54:	f7fe fc11 	bl	800637a <memchr>
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	d036      	beq.n	8007bca <_svfiprintf_r+0x1d2>
 8007b5c:	4b22      	ldr	r3, [pc, #136]	@ (8007be8 <_svfiprintf_r+0x1f0>)
 8007b5e:	bb1b      	cbnz	r3, 8007ba8 <_svfiprintf_r+0x1b0>
 8007b60:	9b03      	ldr	r3, [sp, #12]
 8007b62:	3307      	adds	r3, #7
 8007b64:	f023 0307 	bic.w	r3, r3, #7
 8007b68:	3308      	adds	r3, #8
 8007b6a:	9303      	str	r3, [sp, #12]
 8007b6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b6e:	4433      	add	r3, r6
 8007b70:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b72:	e76a      	b.n	8007a4a <_svfiprintf_r+0x52>
 8007b74:	460c      	mov	r4, r1
 8007b76:	2001      	movs	r0, #1
 8007b78:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b7c:	e7a8      	b.n	8007ad0 <_svfiprintf_r+0xd8>
 8007b7e:	2300      	movs	r3, #0
 8007b80:	f04f 0c0a 	mov.w	ip, #10
 8007b84:	4619      	mov	r1, r3
 8007b86:	3401      	adds	r4, #1
 8007b88:	9305      	str	r3, [sp, #20]
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b90:	3a30      	subs	r2, #48	@ 0x30
 8007b92:	2a09      	cmp	r2, #9
 8007b94:	d903      	bls.n	8007b9e <_svfiprintf_r+0x1a6>
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d0c6      	beq.n	8007b28 <_svfiprintf_r+0x130>
 8007b9a:	9105      	str	r1, [sp, #20]
 8007b9c:	e7c4      	b.n	8007b28 <_svfiprintf_r+0x130>
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ba6:	e7f0      	b.n	8007b8a <_svfiprintf_r+0x192>
 8007ba8:	ab03      	add	r3, sp, #12
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	462a      	mov	r2, r5
 8007bae:	4638      	mov	r0, r7
 8007bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8007bec <_svfiprintf_r+0x1f4>)
 8007bb2:	a904      	add	r1, sp, #16
 8007bb4:	f7fd fe7e 	bl	80058b4 <_printf_float>
 8007bb8:	1c42      	adds	r2, r0, #1
 8007bba:	4606      	mov	r6, r0
 8007bbc:	d1d6      	bne.n	8007b6c <_svfiprintf_r+0x174>
 8007bbe:	89ab      	ldrh	r3, [r5, #12]
 8007bc0:	065b      	lsls	r3, r3, #25
 8007bc2:	f53f af2d 	bmi.w	8007a20 <_svfiprintf_r+0x28>
 8007bc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007bc8:	e72c      	b.n	8007a24 <_svfiprintf_r+0x2c>
 8007bca:	ab03      	add	r3, sp, #12
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	462a      	mov	r2, r5
 8007bd0:	4638      	mov	r0, r7
 8007bd2:	4b06      	ldr	r3, [pc, #24]	@ (8007bec <_svfiprintf_r+0x1f4>)
 8007bd4:	a904      	add	r1, sp, #16
 8007bd6:	f7fe f90b 	bl	8005df0 <_printf_i>
 8007bda:	e7ed      	b.n	8007bb8 <_svfiprintf_r+0x1c0>
 8007bdc:	08008d08 	.word	0x08008d08
 8007be0:	08008d0e 	.word	0x08008d0e
 8007be4:	08008d12 	.word	0x08008d12
 8007be8:	080058b5 	.word	0x080058b5
 8007bec:	08007941 	.word	0x08007941

08007bf0 <__sflush_r>:
 8007bf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bf6:	0716      	lsls	r6, r2, #28
 8007bf8:	4605      	mov	r5, r0
 8007bfa:	460c      	mov	r4, r1
 8007bfc:	d454      	bmi.n	8007ca8 <__sflush_r+0xb8>
 8007bfe:	684b      	ldr	r3, [r1, #4]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	dc02      	bgt.n	8007c0a <__sflush_r+0x1a>
 8007c04:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	dd48      	ble.n	8007c9c <__sflush_r+0xac>
 8007c0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c0c:	2e00      	cmp	r6, #0
 8007c0e:	d045      	beq.n	8007c9c <__sflush_r+0xac>
 8007c10:	2300      	movs	r3, #0
 8007c12:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007c16:	682f      	ldr	r7, [r5, #0]
 8007c18:	6a21      	ldr	r1, [r4, #32]
 8007c1a:	602b      	str	r3, [r5, #0]
 8007c1c:	d030      	beq.n	8007c80 <__sflush_r+0x90>
 8007c1e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007c20:	89a3      	ldrh	r3, [r4, #12]
 8007c22:	0759      	lsls	r1, r3, #29
 8007c24:	d505      	bpl.n	8007c32 <__sflush_r+0x42>
 8007c26:	6863      	ldr	r3, [r4, #4]
 8007c28:	1ad2      	subs	r2, r2, r3
 8007c2a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007c2c:	b10b      	cbz	r3, 8007c32 <__sflush_r+0x42>
 8007c2e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007c30:	1ad2      	subs	r2, r2, r3
 8007c32:	2300      	movs	r3, #0
 8007c34:	4628      	mov	r0, r5
 8007c36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c38:	6a21      	ldr	r1, [r4, #32]
 8007c3a:	47b0      	blx	r6
 8007c3c:	1c43      	adds	r3, r0, #1
 8007c3e:	89a3      	ldrh	r3, [r4, #12]
 8007c40:	d106      	bne.n	8007c50 <__sflush_r+0x60>
 8007c42:	6829      	ldr	r1, [r5, #0]
 8007c44:	291d      	cmp	r1, #29
 8007c46:	d82b      	bhi.n	8007ca0 <__sflush_r+0xb0>
 8007c48:	4a28      	ldr	r2, [pc, #160]	@ (8007cec <__sflush_r+0xfc>)
 8007c4a:	40ca      	lsrs	r2, r1
 8007c4c:	07d6      	lsls	r6, r2, #31
 8007c4e:	d527      	bpl.n	8007ca0 <__sflush_r+0xb0>
 8007c50:	2200      	movs	r2, #0
 8007c52:	6062      	str	r2, [r4, #4]
 8007c54:	6922      	ldr	r2, [r4, #16]
 8007c56:	04d9      	lsls	r1, r3, #19
 8007c58:	6022      	str	r2, [r4, #0]
 8007c5a:	d504      	bpl.n	8007c66 <__sflush_r+0x76>
 8007c5c:	1c42      	adds	r2, r0, #1
 8007c5e:	d101      	bne.n	8007c64 <__sflush_r+0x74>
 8007c60:	682b      	ldr	r3, [r5, #0]
 8007c62:	b903      	cbnz	r3, 8007c66 <__sflush_r+0x76>
 8007c64:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c66:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c68:	602f      	str	r7, [r5, #0]
 8007c6a:	b1b9      	cbz	r1, 8007c9c <__sflush_r+0xac>
 8007c6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c70:	4299      	cmp	r1, r3
 8007c72:	d002      	beq.n	8007c7a <__sflush_r+0x8a>
 8007c74:	4628      	mov	r0, r5
 8007c76:	f7ff f9eb 	bl	8007050 <_free_r>
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c7e:	e00d      	b.n	8007c9c <__sflush_r+0xac>
 8007c80:	2301      	movs	r3, #1
 8007c82:	4628      	mov	r0, r5
 8007c84:	47b0      	blx	r6
 8007c86:	4602      	mov	r2, r0
 8007c88:	1c50      	adds	r0, r2, #1
 8007c8a:	d1c9      	bne.n	8007c20 <__sflush_r+0x30>
 8007c8c:	682b      	ldr	r3, [r5, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d0c6      	beq.n	8007c20 <__sflush_r+0x30>
 8007c92:	2b1d      	cmp	r3, #29
 8007c94:	d001      	beq.n	8007c9a <__sflush_r+0xaa>
 8007c96:	2b16      	cmp	r3, #22
 8007c98:	d11d      	bne.n	8007cd6 <__sflush_r+0xe6>
 8007c9a:	602f      	str	r7, [r5, #0]
 8007c9c:	2000      	movs	r0, #0
 8007c9e:	e021      	b.n	8007ce4 <__sflush_r+0xf4>
 8007ca0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ca4:	b21b      	sxth	r3, r3
 8007ca6:	e01a      	b.n	8007cde <__sflush_r+0xee>
 8007ca8:	690f      	ldr	r7, [r1, #16]
 8007caa:	2f00      	cmp	r7, #0
 8007cac:	d0f6      	beq.n	8007c9c <__sflush_r+0xac>
 8007cae:	0793      	lsls	r3, r2, #30
 8007cb0:	bf18      	it	ne
 8007cb2:	2300      	movne	r3, #0
 8007cb4:	680e      	ldr	r6, [r1, #0]
 8007cb6:	bf08      	it	eq
 8007cb8:	694b      	ldreq	r3, [r1, #20]
 8007cba:	1bf6      	subs	r6, r6, r7
 8007cbc:	600f      	str	r7, [r1, #0]
 8007cbe:	608b      	str	r3, [r1, #8]
 8007cc0:	2e00      	cmp	r6, #0
 8007cc2:	ddeb      	ble.n	8007c9c <__sflush_r+0xac>
 8007cc4:	4633      	mov	r3, r6
 8007cc6:	463a      	mov	r2, r7
 8007cc8:	4628      	mov	r0, r5
 8007cca:	6a21      	ldr	r1, [r4, #32]
 8007ccc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007cd0:	47e0      	blx	ip
 8007cd2:	2800      	cmp	r0, #0
 8007cd4:	dc07      	bgt.n	8007ce6 <__sflush_r+0xf6>
 8007cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cde:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce2:	81a3      	strh	r3, [r4, #12]
 8007ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ce6:	4407      	add	r7, r0
 8007ce8:	1a36      	subs	r6, r6, r0
 8007cea:	e7e9      	b.n	8007cc0 <__sflush_r+0xd0>
 8007cec:	20400001 	.word	0x20400001

08007cf0 <_fflush_r>:
 8007cf0:	b538      	push	{r3, r4, r5, lr}
 8007cf2:	690b      	ldr	r3, [r1, #16]
 8007cf4:	4605      	mov	r5, r0
 8007cf6:	460c      	mov	r4, r1
 8007cf8:	b913      	cbnz	r3, 8007d00 <_fflush_r+0x10>
 8007cfa:	2500      	movs	r5, #0
 8007cfc:	4628      	mov	r0, r5
 8007cfe:	bd38      	pop	{r3, r4, r5, pc}
 8007d00:	b118      	cbz	r0, 8007d0a <_fflush_r+0x1a>
 8007d02:	6a03      	ldr	r3, [r0, #32]
 8007d04:	b90b      	cbnz	r3, 8007d0a <_fflush_r+0x1a>
 8007d06:	f7fe fa1d 	bl	8006144 <__sinit>
 8007d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d0f3      	beq.n	8007cfa <_fflush_r+0xa>
 8007d12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007d14:	07d0      	lsls	r0, r2, #31
 8007d16:	d404      	bmi.n	8007d22 <_fflush_r+0x32>
 8007d18:	0599      	lsls	r1, r3, #22
 8007d1a:	d402      	bmi.n	8007d22 <_fflush_r+0x32>
 8007d1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d1e:	f7fe fb2a 	bl	8006376 <__retarget_lock_acquire_recursive>
 8007d22:	4628      	mov	r0, r5
 8007d24:	4621      	mov	r1, r4
 8007d26:	f7ff ff63 	bl	8007bf0 <__sflush_r>
 8007d2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d2c:	4605      	mov	r5, r0
 8007d2e:	07da      	lsls	r2, r3, #31
 8007d30:	d4e4      	bmi.n	8007cfc <_fflush_r+0xc>
 8007d32:	89a3      	ldrh	r3, [r4, #12]
 8007d34:	059b      	lsls	r3, r3, #22
 8007d36:	d4e1      	bmi.n	8007cfc <_fflush_r+0xc>
 8007d38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d3a:	f7fe fb1d 	bl	8006378 <__retarget_lock_release_recursive>
 8007d3e:	e7dd      	b.n	8007cfc <_fflush_r+0xc>

08007d40 <memmove>:
 8007d40:	4288      	cmp	r0, r1
 8007d42:	b510      	push	{r4, lr}
 8007d44:	eb01 0402 	add.w	r4, r1, r2
 8007d48:	d902      	bls.n	8007d50 <memmove+0x10>
 8007d4a:	4284      	cmp	r4, r0
 8007d4c:	4623      	mov	r3, r4
 8007d4e:	d807      	bhi.n	8007d60 <memmove+0x20>
 8007d50:	1e43      	subs	r3, r0, #1
 8007d52:	42a1      	cmp	r1, r4
 8007d54:	d008      	beq.n	8007d68 <memmove+0x28>
 8007d56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d5e:	e7f8      	b.n	8007d52 <memmove+0x12>
 8007d60:	4601      	mov	r1, r0
 8007d62:	4402      	add	r2, r0
 8007d64:	428a      	cmp	r2, r1
 8007d66:	d100      	bne.n	8007d6a <memmove+0x2a>
 8007d68:	bd10      	pop	{r4, pc}
 8007d6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d72:	e7f7      	b.n	8007d64 <memmove+0x24>

08007d74 <_sbrk_r>:
 8007d74:	b538      	push	{r3, r4, r5, lr}
 8007d76:	2300      	movs	r3, #0
 8007d78:	4d05      	ldr	r5, [pc, #20]	@ (8007d90 <_sbrk_r+0x1c>)
 8007d7a:	4604      	mov	r4, r0
 8007d7c:	4608      	mov	r0, r1
 8007d7e:	602b      	str	r3, [r5, #0]
 8007d80:	f7fa fa5a 	bl	8002238 <_sbrk>
 8007d84:	1c43      	adds	r3, r0, #1
 8007d86:	d102      	bne.n	8007d8e <_sbrk_r+0x1a>
 8007d88:	682b      	ldr	r3, [r5, #0]
 8007d8a:	b103      	cbz	r3, 8007d8e <_sbrk_r+0x1a>
 8007d8c:	6023      	str	r3, [r4, #0]
 8007d8e:	bd38      	pop	{r3, r4, r5, pc}
 8007d90:	200006cc 	.word	0x200006cc

08007d94 <memcpy>:
 8007d94:	440a      	add	r2, r1
 8007d96:	4291      	cmp	r1, r2
 8007d98:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d9c:	d100      	bne.n	8007da0 <memcpy+0xc>
 8007d9e:	4770      	bx	lr
 8007da0:	b510      	push	{r4, lr}
 8007da2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007da6:	4291      	cmp	r1, r2
 8007da8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dac:	d1f9      	bne.n	8007da2 <memcpy+0xe>
 8007dae:	bd10      	pop	{r4, pc}

08007db0 <__assert_func>:
 8007db0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007db2:	4614      	mov	r4, r2
 8007db4:	461a      	mov	r2, r3
 8007db6:	4b09      	ldr	r3, [pc, #36]	@ (8007ddc <__assert_func+0x2c>)
 8007db8:	4605      	mov	r5, r0
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	68d8      	ldr	r0, [r3, #12]
 8007dbe:	b14c      	cbz	r4, 8007dd4 <__assert_func+0x24>
 8007dc0:	4b07      	ldr	r3, [pc, #28]	@ (8007de0 <__assert_func+0x30>)
 8007dc2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007dc6:	9100      	str	r1, [sp, #0]
 8007dc8:	462b      	mov	r3, r5
 8007dca:	4906      	ldr	r1, [pc, #24]	@ (8007de4 <__assert_func+0x34>)
 8007dcc:	f000 f870 	bl	8007eb0 <fiprintf>
 8007dd0:	f000 f880 	bl	8007ed4 <abort>
 8007dd4:	4b04      	ldr	r3, [pc, #16]	@ (8007de8 <__assert_func+0x38>)
 8007dd6:	461c      	mov	r4, r3
 8007dd8:	e7f3      	b.n	8007dc2 <__assert_func+0x12>
 8007dda:	bf00      	nop
 8007ddc:	20000020 	.word	0x20000020
 8007de0:	08008d23 	.word	0x08008d23
 8007de4:	08008d30 	.word	0x08008d30
 8007de8:	08008d5e 	.word	0x08008d5e

08007dec <_calloc_r>:
 8007dec:	b570      	push	{r4, r5, r6, lr}
 8007dee:	fba1 5402 	umull	r5, r4, r1, r2
 8007df2:	b934      	cbnz	r4, 8007e02 <_calloc_r+0x16>
 8007df4:	4629      	mov	r1, r5
 8007df6:	f7ff f99d 	bl	8007134 <_malloc_r>
 8007dfa:	4606      	mov	r6, r0
 8007dfc:	b928      	cbnz	r0, 8007e0a <_calloc_r+0x1e>
 8007dfe:	4630      	mov	r0, r6
 8007e00:	bd70      	pop	{r4, r5, r6, pc}
 8007e02:	220c      	movs	r2, #12
 8007e04:	2600      	movs	r6, #0
 8007e06:	6002      	str	r2, [r0, #0]
 8007e08:	e7f9      	b.n	8007dfe <_calloc_r+0x12>
 8007e0a:	462a      	mov	r2, r5
 8007e0c:	4621      	mov	r1, r4
 8007e0e:	f7fe fa34 	bl	800627a <memset>
 8007e12:	e7f4      	b.n	8007dfe <_calloc_r+0x12>

08007e14 <__ascii_mbtowc>:
 8007e14:	b082      	sub	sp, #8
 8007e16:	b901      	cbnz	r1, 8007e1a <__ascii_mbtowc+0x6>
 8007e18:	a901      	add	r1, sp, #4
 8007e1a:	b142      	cbz	r2, 8007e2e <__ascii_mbtowc+0x1a>
 8007e1c:	b14b      	cbz	r3, 8007e32 <__ascii_mbtowc+0x1e>
 8007e1e:	7813      	ldrb	r3, [r2, #0]
 8007e20:	600b      	str	r3, [r1, #0]
 8007e22:	7812      	ldrb	r2, [r2, #0]
 8007e24:	1e10      	subs	r0, r2, #0
 8007e26:	bf18      	it	ne
 8007e28:	2001      	movne	r0, #1
 8007e2a:	b002      	add	sp, #8
 8007e2c:	4770      	bx	lr
 8007e2e:	4610      	mov	r0, r2
 8007e30:	e7fb      	b.n	8007e2a <__ascii_mbtowc+0x16>
 8007e32:	f06f 0001 	mvn.w	r0, #1
 8007e36:	e7f8      	b.n	8007e2a <__ascii_mbtowc+0x16>

08007e38 <_realloc_r>:
 8007e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e3c:	4607      	mov	r7, r0
 8007e3e:	4614      	mov	r4, r2
 8007e40:	460d      	mov	r5, r1
 8007e42:	b921      	cbnz	r1, 8007e4e <_realloc_r+0x16>
 8007e44:	4611      	mov	r1, r2
 8007e46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e4a:	f7ff b973 	b.w	8007134 <_malloc_r>
 8007e4e:	b92a      	cbnz	r2, 8007e5c <_realloc_r+0x24>
 8007e50:	f7ff f8fe 	bl	8007050 <_free_r>
 8007e54:	4625      	mov	r5, r4
 8007e56:	4628      	mov	r0, r5
 8007e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e5c:	f000 f841 	bl	8007ee2 <_malloc_usable_size_r>
 8007e60:	4284      	cmp	r4, r0
 8007e62:	4606      	mov	r6, r0
 8007e64:	d802      	bhi.n	8007e6c <_realloc_r+0x34>
 8007e66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e6a:	d8f4      	bhi.n	8007e56 <_realloc_r+0x1e>
 8007e6c:	4621      	mov	r1, r4
 8007e6e:	4638      	mov	r0, r7
 8007e70:	f7ff f960 	bl	8007134 <_malloc_r>
 8007e74:	4680      	mov	r8, r0
 8007e76:	b908      	cbnz	r0, 8007e7c <_realloc_r+0x44>
 8007e78:	4645      	mov	r5, r8
 8007e7a:	e7ec      	b.n	8007e56 <_realloc_r+0x1e>
 8007e7c:	42b4      	cmp	r4, r6
 8007e7e:	4622      	mov	r2, r4
 8007e80:	4629      	mov	r1, r5
 8007e82:	bf28      	it	cs
 8007e84:	4632      	movcs	r2, r6
 8007e86:	f7ff ff85 	bl	8007d94 <memcpy>
 8007e8a:	4629      	mov	r1, r5
 8007e8c:	4638      	mov	r0, r7
 8007e8e:	f7ff f8df 	bl	8007050 <_free_r>
 8007e92:	e7f1      	b.n	8007e78 <_realloc_r+0x40>

08007e94 <__ascii_wctomb>:
 8007e94:	4603      	mov	r3, r0
 8007e96:	4608      	mov	r0, r1
 8007e98:	b141      	cbz	r1, 8007eac <__ascii_wctomb+0x18>
 8007e9a:	2aff      	cmp	r2, #255	@ 0xff
 8007e9c:	d904      	bls.n	8007ea8 <__ascii_wctomb+0x14>
 8007e9e:	228a      	movs	r2, #138	@ 0x8a
 8007ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea4:	601a      	str	r2, [r3, #0]
 8007ea6:	4770      	bx	lr
 8007ea8:	2001      	movs	r0, #1
 8007eaa:	700a      	strb	r2, [r1, #0]
 8007eac:	4770      	bx	lr
	...

08007eb0 <fiprintf>:
 8007eb0:	b40e      	push	{r1, r2, r3}
 8007eb2:	b503      	push	{r0, r1, lr}
 8007eb4:	4601      	mov	r1, r0
 8007eb6:	ab03      	add	r3, sp, #12
 8007eb8:	4805      	ldr	r0, [pc, #20]	@ (8007ed0 <fiprintf+0x20>)
 8007eba:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ebe:	6800      	ldr	r0, [r0, #0]
 8007ec0:	9301      	str	r3, [sp, #4]
 8007ec2:	f000 f83d 	bl	8007f40 <_vfiprintf_r>
 8007ec6:	b002      	add	sp, #8
 8007ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ecc:	b003      	add	sp, #12
 8007ece:	4770      	bx	lr
 8007ed0:	20000020 	.word	0x20000020

08007ed4 <abort>:
 8007ed4:	2006      	movs	r0, #6
 8007ed6:	b508      	push	{r3, lr}
 8007ed8:	f000 fa06 	bl	80082e8 <raise>
 8007edc:	2001      	movs	r0, #1
 8007ede:	f7fa f936 	bl	800214e <_exit>

08007ee2 <_malloc_usable_size_r>:
 8007ee2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ee6:	1f18      	subs	r0, r3, #4
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	bfbc      	itt	lt
 8007eec:	580b      	ldrlt	r3, [r1, r0]
 8007eee:	18c0      	addlt	r0, r0, r3
 8007ef0:	4770      	bx	lr

08007ef2 <__sfputc_r>:
 8007ef2:	6893      	ldr	r3, [r2, #8]
 8007ef4:	b410      	push	{r4}
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	6093      	str	r3, [r2, #8]
 8007efc:	da07      	bge.n	8007f0e <__sfputc_r+0x1c>
 8007efe:	6994      	ldr	r4, [r2, #24]
 8007f00:	42a3      	cmp	r3, r4
 8007f02:	db01      	blt.n	8007f08 <__sfputc_r+0x16>
 8007f04:	290a      	cmp	r1, #10
 8007f06:	d102      	bne.n	8007f0e <__sfputc_r+0x1c>
 8007f08:	bc10      	pop	{r4}
 8007f0a:	f000 b931 	b.w	8008170 <__swbuf_r>
 8007f0e:	6813      	ldr	r3, [r2, #0]
 8007f10:	1c58      	adds	r0, r3, #1
 8007f12:	6010      	str	r0, [r2, #0]
 8007f14:	7019      	strb	r1, [r3, #0]
 8007f16:	4608      	mov	r0, r1
 8007f18:	bc10      	pop	{r4}
 8007f1a:	4770      	bx	lr

08007f1c <__sfputs_r>:
 8007f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1e:	4606      	mov	r6, r0
 8007f20:	460f      	mov	r7, r1
 8007f22:	4614      	mov	r4, r2
 8007f24:	18d5      	adds	r5, r2, r3
 8007f26:	42ac      	cmp	r4, r5
 8007f28:	d101      	bne.n	8007f2e <__sfputs_r+0x12>
 8007f2a:	2000      	movs	r0, #0
 8007f2c:	e007      	b.n	8007f3e <__sfputs_r+0x22>
 8007f2e:	463a      	mov	r2, r7
 8007f30:	4630      	mov	r0, r6
 8007f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f36:	f7ff ffdc 	bl	8007ef2 <__sfputc_r>
 8007f3a:	1c43      	adds	r3, r0, #1
 8007f3c:	d1f3      	bne.n	8007f26 <__sfputs_r+0xa>
 8007f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f40 <_vfiprintf_r>:
 8007f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f44:	460d      	mov	r5, r1
 8007f46:	4614      	mov	r4, r2
 8007f48:	4698      	mov	r8, r3
 8007f4a:	4606      	mov	r6, r0
 8007f4c:	b09d      	sub	sp, #116	@ 0x74
 8007f4e:	b118      	cbz	r0, 8007f58 <_vfiprintf_r+0x18>
 8007f50:	6a03      	ldr	r3, [r0, #32]
 8007f52:	b90b      	cbnz	r3, 8007f58 <_vfiprintf_r+0x18>
 8007f54:	f7fe f8f6 	bl	8006144 <__sinit>
 8007f58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f5a:	07d9      	lsls	r1, r3, #31
 8007f5c:	d405      	bmi.n	8007f6a <_vfiprintf_r+0x2a>
 8007f5e:	89ab      	ldrh	r3, [r5, #12]
 8007f60:	059a      	lsls	r2, r3, #22
 8007f62:	d402      	bmi.n	8007f6a <_vfiprintf_r+0x2a>
 8007f64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f66:	f7fe fa06 	bl	8006376 <__retarget_lock_acquire_recursive>
 8007f6a:	89ab      	ldrh	r3, [r5, #12]
 8007f6c:	071b      	lsls	r3, r3, #28
 8007f6e:	d501      	bpl.n	8007f74 <_vfiprintf_r+0x34>
 8007f70:	692b      	ldr	r3, [r5, #16]
 8007f72:	b99b      	cbnz	r3, 8007f9c <_vfiprintf_r+0x5c>
 8007f74:	4629      	mov	r1, r5
 8007f76:	4630      	mov	r0, r6
 8007f78:	f000 f938 	bl	80081ec <__swsetup_r>
 8007f7c:	b170      	cbz	r0, 8007f9c <_vfiprintf_r+0x5c>
 8007f7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f80:	07dc      	lsls	r4, r3, #31
 8007f82:	d504      	bpl.n	8007f8e <_vfiprintf_r+0x4e>
 8007f84:	f04f 30ff 	mov.w	r0, #4294967295
 8007f88:	b01d      	add	sp, #116	@ 0x74
 8007f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f8e:	89ab      	ldrh	r3, [r5, #12]
 8007f90:	0598      	lsls	r0, r3, #22
 8007f92:	d4f7      	bmi.n	8007f84 <_vfiprintf_r+0x44>
 8007f94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f96:	f7fe f9ef 	bl	8006378 <__retarget_lock_release_recursive>
 8007f9a:	e7f3      	b.n	8007f84 <_vfiprintf_r+0x44>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fa0:	2320      	movs	r3, #32
 8007fa2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007fa6:	2330      	movs	r3, #48	@ 0x30
 8007fa8:	f04f 0901 	mov.w	r9, #1
 8007fac:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fb0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800815c <_vfiprintf_r+0x21c>
 8007fb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007fb8:	4623      	mov	r3, r4
 8007fba:	469a      	mov	sl, r3
 8007fbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fc0:	b10a      	cbz	r2, 8007fc6 <_vfiprintf_r+0x86>
 8007fc2:	2a25      	cmp	r2, #37	@ 0x25
 8007fc4:	d1f9      	bne.n	8007fba <_vfiprintf_r+0x7a>
 8007fc6:	ebba 0b04 	subs.w	fp, sl, r4
 8007fca:	d00b      	beq.n	8007fe4 <_vfiprintf_r+0xa4>
 8007fcc:	465b      	mov	r3, fp
 8007fce:	4622      	mov	r2, r4
 8007fd0:	4629      	mov	r1, r5
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	f7ff ffa2 	bl	8007f1c <__sfputs_r>
 8007fd8:	3001      	adds	r0, #1
 8007fda:	f000 80a7 	beq.w	800812c <_vfiprintf_r+0x1ec>
 8007fde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fe0:	445a      	add	r2, fp
 8007fe2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f000 809f 	beq.w	800812c <_vfiprintf_r+0x1ec>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ff8:	f10a 0a01 	add.w	sl, sl, #1
 8007ffc:	9304      	str	r3, [sp, #16]
 8007ffe:	9307      	str	r3, [sp, #28]
 8008000:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008004:	931a      	str	r3, [sp, #104]	@ 0x68
 8008006:	4654      	mov	r4, sl
 8008008:	2205      	movs	r2, #5
 800800a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800800e:	4853      	ldr	r0, [pc, #332]	@ (800815c <_vfiprintf_r+0x21c>)
 8008010:	f7fe f9b3 	bl	800637a <memchr>
 8008014:	9a04      	ldr	r2, [sp, #16]
 8008016:	b9d8      	cbnz	r0, 8008050 <_vfiprintf_r+0x110>
 8008018:	06d1      	lsls	r1, r2, #27
 800801a:	bf44      	itt	mi
 800801c:	2320      	movmi	r3, #32
 800801e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008022:	0713      	lsls	r3, r2, #28
 8008024:	bf44      	itt	mi
 8008026:	232b      	movmi	r3, #43	@ 0x2b
 8008028:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800802c:	f89a 3000 	ldrb.w	r3, [sl]
 8008030:	2b2a      	cmp	r3, #42	@ 0x2a
 8008032:	d015      	beq.n	8008060 <_vfiprintf_r+0x120>
 8008034:	4654      	mov	r4, sl
 8008036:	2000      	movs	r0, #0
 8008038:	f04f 0c0a 	mov.w	ip, #10
 800803c:	9a07      	ldr	r2, [sp, #28]
 800803e:	4621      	mov	r1, r4
 8008040:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008044:	3b30      	subs	r3, #48	@ 0x30
 8008046:	2b09      	cmp	r3, #9
 8008048:	d94b      	bls.n	80080e2 <_vfiprintf_r+0x1a2>
 800804a:	b1b0      	cbz	r0, 800807a <_vfiprintf_r+0x13a>
 800804c:	9207      	str	r2, [sp, #28]
 800804e:	e014      	b.n	800807a <_vfiprintf_r+0x13a>
 8008050:	eba0 0308 	sub.w	r3, r0, r8
 8008054:	fa09 f303 	lsl.w	r3, r9, r3
 8008058:	4313      	orrs	r3, r2
 800805a:	46a2      	mov	sl, r4
 800805c:	9304      	str	r3, [sp, #16]
 800805e:	e7d2      	b.n	8008006 <_vfiprintf_r+0xc6>
 8008060:	9b03      	ldr	r3, [sp, #12]
 8008062:	1d19      	adds	r1, r3, #4
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	9103      	str	r1, [sp, #12]
 8008068:	2b00      	cmp	r3, #0
 800806a:	bfbb      	ittet	lt
 800806c:	425b      	neglt	r3, r3
 800806e:	f042 0202 	orrlt.w	r2, r2, #2
 8008072:	9307      	strge	r3, [sp, #28]
 8008074:	9307      	strlt	r3, [sp, #28]
 8008076:	bfb8      	it	lt
 8008078:	9204      	strlt	r2, [sp, #16]
 800807a:	7823      	ldrb	r3, [r4, #0]
 800807c:	2b2e      	cmp	r3, #46	@ 0x2e
 800807e:	d10a      	bne.n	8008096 <_vfiprintf_r+0x156>
 8008080:	7863      	ldrb	r3, [r4, #1]
 8008082:	2b2a      	cmp	r3, #42	@ 0x2a
 8008084:	d132      	bne.n	80080ec <_vfiprintf_r+0x1ac>
 8008086:	9b03      	ldr	r3, [sp, #12]
 8008088:	3402      	adds	r4, #2
 800808a:	1d1a      	adds	r2, r3, #4
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	9203      	str	r2, [sp, #12]
 8008090:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008094:	9305      	str	r3, [sp, #20]
 8008096:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008160 <_vfiprintf_r+0x220>
 800809a:	2203      	movs	r2, #3
 800809c:	4650      	mov	r0, sl
 800809e:	7821      	ldrb	r1, [r4, #0]
 80080a0:	f7fe f96b 	bl	800637a <memchr>
 80080a4:	b138      	cbz	r0, 80080b6 <_vfiprintf_r+0x176>
 80080a6:	2240      	movs	r2, #64	@ 0x40
 80080a8:	9b04      	ldr	r3, [sp, #16]
 80080aa:	eba0 000a 	sub.w	r0, r0, sl
 80080ae:	4082      	lsls	r2, r0
 80080b0:	4313      	orrs	r3, r2
 80080b2:	3401      	adds	r4, #1
 80080b4:	9304      	str	r3, [sp, #16]
 80080b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ba:	2206      	movs	r2, #6
 80080bc:	4829      	ldr	r0, [pc, #164]	@ (8008164 <_vfiprintf_r+0x224>)
 80080be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80080c2:	f7fe f95a 	bl	800637a <memchr>
 80080c6:	2800      	cmp	r0, #0
 80080c8:	d03f      	beq.n	800814a <_vfiprintf_r+0x20a>
 80080ca:	4b27      	ldr	r3, [pc, #156]	@ (8008168 <_vfiprintf_r+0x228>)
 80080cc:	bb1b      	cbnz	r3, 8008116 <_vfiprintf_r+0x1d6>
 80080ce:	9b03      	ldr	r3, [sp, #12]
 80080d0:	3307      	adds	r3, #7
 80080d2:	f023 0307 	bic.w	r3, r3, #7
 80080d6:	3308      	adds	r3, #8
 80080d8:	9303      	str	r3, [sp, #12]
 80080da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080dc:	443b      	add	r3, r7
 80080de:	9309      	str	r3, [sp, #36]	@ 0x24
 80080e0:	e76a      	b.n	8007fb8 <_vfiprintf_r+0x78>
 80080e2:	460c      	mov	r4, r1
 80080e4:	2001      	movs	r0, #1
 80080e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80080ea:	e7a8      	b.n	800803e <_vfiprintf_r+0xfe>
 80080ec:	2300      	movs	r3, #0
 80080ee:	f04f 0c0a 	mov.w	ip, #10
 80080f2:	4619      	mov	r1, r3
 80080f4:	3401      	adds	r4, #1
 80080f6:	9305      	str	r3, [sp, #20]
 80080f8:	4620      	mov	r0, r4
 80080fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080fe:	3a30      	subs	r2, #48	@ 0x30
 8008100:	2a09      	cmp	r2, #9
 8008102:	d903      	bls.n	800810c <_vfiprintf_r+0x1cc>
 8008104:	2b00      	cmp	r3, #0
 8008106:	d0c6      	beq.n	8008096 <_vfiprintf_r+0x156>
 8008108:	9105      	str	r1, [sp, #20]
 800810a:	e7c4      	b.n	8008096 <_vfiprintf_r+0x156>
 800810c:	4604      	mov	r4, r0
 800810e:	2301      	movs	r3, #1
 8008110:	fb0c 2101 	mla	r1, ip, r1, r2
 8008114:	e7f0      	b.n	80080f8 <_vfiprintf_r+0x1b8>
 8008116:	ab03      	add	r3, sp, #12
 8008118:	9300      	str	r3, [sp, #0]
 800811a:	462a      	mov	r2, r5
 800811c:	4630      	mov	r0, r6
 800811e:	4b13      	ldr	r3, [pc, #76]	@ (800816c <_vfiprintf_r+0x22c>)
 8008120:	a904      	add	r1, sp, #16
 8008122:	f7fd fbc7 	bl	80058b4 <_printf_float>
 8008126:	4607      	mov	r7, r0
 8008128:	1c78      	adds	r0, r7, #1
 800812a:	d1d6      	bne.n	80080da <_vfiprintf_r+0x19a>
 800812c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800812e:	07d9      	lsls	r1, r3, #31
 8008130:	d405      	bmi.n	800813e <_vfiprintf_r+0x1fe>
 8008132:	89ab      	ldrh	r3, [r5, #12]
 8008134:	059a      	lsls	r2, r3, #22
 8008136:	d402      	bmi.n	800813e <_vfiprintf_r+0x1fe>
 8008138:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800813a:	f7fe f91d 	bl	8006378 <__retarget_lock_release_recursive>
 800813e:	89ab      	ldrh	r3, [r5, #12]
 8008140:	065b      	lsls	r3, r3, #25
 8008142:	f53f af1f 	bmi.w	8007f84 <_vfiprintf_r+0x44>
 8008146:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008148:	e71e      	b.n	8007f88 <_vfiprintf_r+0x48>
 800814a:	ab03      	add	r3, sp, #12
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	462a      	mov	r2, r5
 8008150:	4630      	mov	r0, r6
 8008152:	4b06      	ldr	r3, [pc, #24]	@ (800816c <_vfiprintf_r+0x22c>)
 8008154:	a904      	add	r1, sp, #16
 8008156:	f7fd fe4b 	bl	8005df0 <_printf_i>
 800815a:	e7e4      	b.n	8008126 <_vfiprintf_r+0x1e6>
 800815c:	08008d08 	.word	0x08008d08
 8008160:	08008d0e 	.word	0x08008d0e
 8008164:	08008d12 	.word	0x08008d12
 8008168:	080058b5 	.word	0x080058b5
 800816c:	08007f1d 	.word	0x08007f1d

08008170 <__swbuf_r>:
 8008170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008172:	460e      	mov	r6, r1
 8008174:	4614      	mov	r4, r2
 8008176:	4605      	mov	r5, r0
 8008178:	b118      	cbz	r0, 8008182 <__swbuf_r+0x12>
 800817a:	6a03      	ldr	r3, [r0, #32]
 800817c:	b90b      	cbnz	r3, 8008182 <__swbuf_r+0x12>
 800817e:	f7fd ffe1 	bl	8006144 <__sinit>
 8008182:	69a3      	ldr	r3, [r4, #24]
 8008184:	60a3      	str	r3, [r4, #8]
 8008186:	89a3      	ldrh	r3, [r4, #12]
 8008188:	071a      	lsls	r2, r3, #28
 800818a:	d501      	bpl.n	8008190 <__swbuf_r+0x20>
 800818c:	6923      	ldr	r3, [r4, #16]
 800818e:	b943      	cbnz	r3, 80081a2 <__swbuf_r+0x32>
 8008190:	4621      	mov	r1, r4
 8008192:	4628      	mov	r0, r5
 8008194:	f000 f82a 	bl	80081ec <__swsetup_r>
 8008198:	b118      	cbz	r0, 80081a2 <__swbuf_r+0x32>
 800819a:	f04f 37ff 	mov.w	r7, #4294967295
 800819e:	4638      	mov	r0, r7
 80081a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081a2:	6823      	ldr	r3, [r4, #0]
 80081a4:	6922      	ldr	r2, [r4, #16]
 80081a6:	b2f6      	uxtb	r6, r6
 80081a8:	1a98      	subs	r0, r3, r2
 80081aa:	6963      	ldr	r3, [r4, #20]
 80081ac:	4637      	mov	r7, r6
 80081ae:	4283      	cmp	r3, r0
 80081b0:	dc05      	bgt.n	80081be <__swbuf_r+0x4e>
 80081b2:	4621      	mov	r1, r4
 80081b4:	4628      	mov	r0, r5
 80081b6:	f7ff fd9b 	bl	8007cf0 <_fflush_r>
 80081ba:	2800      	cmp	r0, #0
 80081bc:	d1ed      	bne.n	800819a <__swbuf_r+0x2a>
 80081be:	68a3      	ldr	r3, [r4, #8]
 80081c0:	3b01      	subs	r3, #1
 80081c2:	60a3      	str	r3, [r4, #8]
 80081c4:	6823      	ldr	r3, [r4, #0]
 80081c6:	1c5a      	adds	r2, r3, #1
 80081c8:	6022      	str	r2, [r4, #0]
 80081ca:	701e      	strb	r6, [r3, #0]
 80081cc:	6962      	ldr	r2, [r4, #20]
 80081ce:	1c43      	adds	r3, r0, #1
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d004      	beq.n	80081de <__swbuf_r+0x6e>
 80081d4:	89a3      	ldrh	r3, [r4, #12]
 80081d6:	07db      	lsls	r3, r3, #31
 80081d8:	d5e1      	bpl.n	800819e <__swbuf_r+0x2e>
 80081da:	2e0a      	cmp	r6, #10
 80081dc:	d1df      	bne.n	800819e <__swbuf_r+0x2e>
 80081de:	4621      	mov	r1, r4
 80081e0:	4628      	mov	r0, r5
 80081e2:	f7ff fd85 	bl	8007cf0 <_fflush_r>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d0d9      	beq.n	800819e <__swbuf_r+0x2e>
 80081ea:	e7d6      	b.n	800819a <__swbuf_r+0x2a>

080081ec <__swsetup_r>:
 80081ec:	b538      	push	{r3, r4, r5, lr}
 80081ee:	4b29      	ldr	r3, [pc, #164]	@ (8008294 <__swsetup_r+0xa8>)
 80081f0:	4605      	mov	r5, r0
 80081f2:	6818      	ldr	r0, [r3, #0]
 80081f4:	460c      	mov	r4, r1
 80081f6:	b118      	cbz	r0, 8008200 <__swsetup_r+0x14>
 80081f8:	6a03      	ldr	r3, [r0, #32]
 80081fa:	b90b      	cbnz	r3, 8008200 <__swsetup_r+0x14>
 80081fc:	f7fd ffa2 	bl	8006144 <__sinit>
 8008200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008204:	0719      	lsls	r1, r3, #28
 8008206:	d422      	bmi.n	800824e <__swsetup_r+0x62>
 8008208:	06da      	lsls	r2, r3, #27
 800820a:	d407      	bmi.n	800821c <__swsetup_r+0x30>
 800820c:	2209      	movs	r2, #9
 800820e:	602a      	str	r2, [r5, #0]
 8008210:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008214:	f04f 30ff 	mov.w	r0, #4294967295
 8008218:	81a3      	strh	r3, [r4, #12]
 800821a:	e033      	b.n	8008284 <__swsetup_r+0x98>
 800821c:	0758      	lsls	r0, r3, #29
 800821e:	d512      	bpl.n	8008246 <__swsetup_r+0x5a>
 8008220:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008222:	b141      	cbz	r1, 8008236 <__swsetup_r+0x4a>
 8008224:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008228:	4299      	cmp	r1, r3
 800822a:	d002      	beq.n	8008232 <__swsetup_r+0x46>
 800822c:	4628      	mov	r0, r5
 800822e:	f7fe ff0f 	bl	8007050 <_free_r>
 8008232:	2300      	movs	r3, #0
 8008234:	6363      	str	r3, [r4, #52]	@ 0x34
 8008236:	89a3      	ldrh	r3, [r4, #12]
 8008238:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800823c:	81a3      	strh	r3, [r4, #12]
 800823e:	2300      	movs	r3, #0
 8008240:	6063      	str	r3, [r4, #4]
 8008242:	6923      	ldr	r3, [r4, #16]
 8008244:	6023      	str	r3, [r4, #0]
 8008246:	89a3      	ldrh	r3, [r4, #12]
 8008248:	f043 0308 	orr.w	r3, r3, #8
 800824c:	81a3      	strh	r3, [r4, #12]
 800824e:	6923      	ldr	r3, [r4, #16]
 8008250:	b94b      	cbnz	r3, 8008266 <__swsetup_r+0x7a>
 8008252:	89a3      	ldrh	r3, [r4, #12]
 8008254:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800825c:	d003      	beq.n	8008266 <__swsetup_r+0x7a>
 800825e:	4621      	mov	r1, r4
 8008260:	4628      	mov	r0, r5
 8008262:	f000 f882 	bl	800836a <__smakebuf_r>
 8008266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800826a:	f013 0201 	ands.w	r2, r3, #1
 800826e:	d00a      	beq.n	8008286 <__swsetup_r+0x9a>
 8008270:	2200      	movs	r2, #0
 8008272:	60a2      	str	r2, [r4, #8]
 8008274:	6962      	ldr	r2, [r4, #20]
 8008276:	4252      	negs	r2, r2
 8008278:	61a2      	str	r2, [r4, #24]
 800827a:	6922      	ldr	r2, [r4, #16]
 800827c:	b942      	cbnz	r2, 8008290 <__swsetup_r+0xa4>
 800827e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008282:	d1c5      	bne.n	8008210 <__swsetup_r+0x24>
 8008284:	bd38      	pop	{r3, r4, r5, pc}
 8008286:	0799      	lsls	r1, r3, #30
 8008288:	bf58      	it	pl
 800828a:	6962      	ldrpl	r2, [r4, #20]
 800828c:	60a2      	str	r2, [r4, #8]
 800828e:	e7f4      	b.n	800827a <__swsetup_r+0x8e>
 8008290:	2000      	movs	r0, #0
 8008292:	e7f7      	b.n	8008284 <__swsetup_r+0x98>
 8008294:	20000020 	.word	0x20000020

08008298 <_raise_r>:
 8008298:	291f      	cmp	r1, #31
 800829a:	b538      	push	{r3, r4, r5, lr}
 800829c:	4605      	mov	r5, r0
 800829e:	460c      	mov	r4, r1
 80082a0:	d904      	bls.n	80082ac <_raise_r+0x14>
 80082a2:	2316      	movs	r3, #22
 80082a4:	6003      	str	r3, [r0, #0]
 80082a6:	f04f 30ff 	mov.w	r0, #4294967295
 80082aa:	bd38      	pop	{r3, r4, r5, pc}
 80082ac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80082ae:	b112      	cbz	r2, 80082b6 <_raise_r+0x1e>
 80082b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082b4:	b94b      	cbnz	r3, 80082ca <_raise_r+0x32>
 80082b6:	4628      	mov	r0, r5
 80082b8:	f000 f830 	bl	800831c <_getpid_r>
 80082bc:	4622      	mov	r2, r4
 80082be:	4601      	mov	r1, r0
 80082c0:	4628      	mov	r0, r5
 80082c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082c6:	f000 b817 	b.w	80082f8 <_kill_r>
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d00a      	beq.n	80082e4 <_raise_r+0x4c>
 80082ce:	1c59      	adds	r1, r3, #1
 80082d0:	d103      	bne.n	80082da <_raise_r+0x42>
 80082d2:	2316      	movs	r3, #22
 80082d4:	6003      	str	r3, [r0, #0]
 80082d6:	2001      	movs	r0, #1
 80082d8:	e7e7      	b.n	80082aa <_raise_r+0x12>
 80082da:	2100      	movs	r1, #0
 80082dc:	4620      	mov	r0, r4
 80082de:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80082e2:	4798      	blx	r3
 80082e4:	2000      	movs	r0, #0
 80082e6:	e7e0      	b.n	80082aa <_raise_r+0x12>

080082e8 <raise>:
 80082e8:	4b02      	ldr	r3, [pc, #8]	@ (80082f4 <raise+0xc>)
 80082ea:	4601      	mov	r1, r0
 80082ec:	6818      	ldr	r0, [r3, #0]
 80082ee:	f7ff bfd3 	b.w	8008298 <_raise_r>
 80082f2:	bf00      	nop
 80082f4:	20000020 	.word	0x20000020

080082f8 <_kill_r>:
 80082f8:	b538      	push	{r3, r4, r5, lr}
 80082fa:	2300      	movs	r3, #0
 80082fc:	4d06      	ldr	r5, [pc, #24]	@ (8008318 <_kill_r+0x20>)
 80082fe:	4604      	mov	r4, r0
 8008300:	4608      	mov	r0, r1
 8008302:	4611      	mov	r1, r2
 8008304:	602b      	str	r3, [r5, #0]
 8008306:	f7f9 ff12 	bl	800212e <_kill>
 800830a:	1c43      	adds	r3, r0, #1
 800830c:	d102      	bne.n	8008314 <_kill_r+0x1c>
 800830e:	682b      	ldr	r3, [r5, #0]
 8008310:	b103      	cbz	r3, 8008314 <_kill_r+0x1c>
 8008312:	6023      	str	r3, [r4, #0]
 8008314:	bd38      	pop	{r3, r4, r5, pc}
 8008316:	bf00      	nop
 8008318:	200006cc 	.word	0x200006cc

0800831c <_getpid_r>:
 800831c:	f7f9 bf00 	b.w	8002120 <_getpid>

08008320 <__swhatbuf_r>:
 8008320:	b570      	push	{r4, r5, r6, lr}
 8008322:	460c      	mov	r4, r1
 8008324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008328:	4615      	mov	r5, r2
 800832a:	2900      	cmp	r1, #0
 800832c:	461e      	mov	r6, r3
 800832e:	b096      	sub	sp, #88	@ 0x58
 8008330:	da0c      	bge.n	800834c <__swhatbuf_r+0x2c>
 8008332:	89a3      	ldrh	r3, [r4, #12]
 8008334:	2100      	movs	r1, #0
 8008336:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800833a:	bf14      	ite	ne
 800833c:	2340      	movne	r3, #64	@ 0x40
 800833e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008342:	2000      	movs	r0, #0
 8008344:	6031      	str	r1, [r6, #0]
 8008346:	602b      	str	r3, [r5, #0]
 8008348:	b016      	add	sp, #88	@ 0x58
 800834a:	bd70      	pop	{r4, r5, r6, pc}
 800834c:	466a      	mov	r2, sp
 800834e:	f000 f849 	bl	80083e4 <_fstat_r>
 8008352:	2800      	cmp	r0, #0
 8008354:	dbed      	blt.n	8008332 <__swhatbuf_r+0x12>
 8008356:	9901      	ldr	r1, [sp, #4]
 8008358:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800835c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008360:	4259      	negs	r1, r3
 8008362:	4159      	adcs	r1, r3
 8008364:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008368:	e7eb      	b.n	8008342 <__swhatbuf_r+0x22>

0800836a <__smakebuf_r>:
 800836a:	898b      	ldrh	r3, [r1, #12]
 800836c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800836e:	079d      	lsls	r5, r3, #30
 8008370:	4606      	mov	r6, r0
 8008372:	460c      	mov	r4, r1
 8008374:	d507      	bpl.n	8008386 <__smakebuf_r+0x1c>
 8008376:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800837a:	6023      	str	r3, [r4, #0]
 800837c:	6123      	str	r3, [r4, #16]
 800837e:	2301      	movs	r3, #1
 8008380:	6163      	str	r3, [r4, #20]
 8008382:	b003      	add	sp, #12
 8008384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008386:	466a      	mov	r2, sp
 8008388:	ab01      	add	r3, sp, #4
 800838a:	f7ff ffc9 	bl	8008320 <__swhatbuf_r>
 800838e:	9f00      	ldr	r7, [sp, #0]
 8008390:	4605      	mov	r5, r0
 8008392:	4639      	mov	r1, r7
 8008394:	4630      	mov	r0, r6
 8008396:	f7fe fecd 	bl	8007134 <_malloc_r>
 800839a:	b948      	cbnz	r0, 80083b0 <__smakebuf_r+0x46>
 800839c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083a0:	059a      	lsls	r2, r3, #22
 80083a2:	d4ee      	bmi.n	8008382 <__smakebuf_r+0x18>
 80083a4:	f023 0303 	bic.w	r3, r3, #3
 80083a8:	f043 0302 	orr.w	r3, r3, #2
 80083ac:	81a3      	strh	r3, [r4, #12]
 80083ae:	e7e2      	b.n	8008376 <__smakebuf_r+0xc>
 80083b0:	89a3      	ldrh	r3, [r4, #12]
 80083b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80083b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083ba:	81a3      	strh	r3, [r4, #12]
 80083bc:	9b01      	ldr	r3, [sp, #4]
 80083be:	6020      	str	r0, [r4, #0]
 80083c0:	b15b      	cbz	r3, 80083da <__smakebuf_r+0x70>
 80083c2:	4630      	mov	r0, r6
 80083c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083c8:	f000 f81e 	bl	8008408 <_isatty_r>
 80083cc:	b128      	cbz	r0, 80083da <__smakebuf_r+0x70>
 80083ce:	89a3      	ldrh	r3, [r4, #12]
 80083d0:	f023 0303 	bic.w	r3, r3, #3
 80083d4:	f043 0301 	orr.w	r3, r3, #1
 80083d8:	81a3      	strh	r3, [r4, #12]
 80083da:	89a3      	ldrh	r3, [r4, #12]
 80083dc:	431d      	orrs	r5, r3
 80083de:	81a5      	strh	r5, [r4, #12]
 80083e0:	e7cf      	b.n	8008382 <__smakebuf_r+0x18>
	...

080083e4 <_fstat_r>:
 80083e4:	b538      	push	{r3, r4, r5, lr}
 80083e6:	2300      	movs	r3, #0
 80083e8:	4d06      	ldr	r5, [pc, #24]	@ (8008404 <_fstat_r+0x20>)
 80083ea:	4604      	mov	r4, r0
 80083ec:	4608      	mov	r0, r1
 80083ee:	4611      	mov	r1, r2
 80083f0:	602b      	str	r3, [r5, #0]
 80083f2:	f7f9 fefb 	bl	80021ec <_fstat>
 80083f6:	1c43      	adds	r3, r0, #1
 80083f8:	d102      	bne.n	8008400 <_fstat_r+0x1c>
 80083fa:	682b      	ldr	r3, [r5, #0]
 80083fc:	b103      	cbz	r3, 8008400 <_fstat_r+0x1c>
 80083fe:	6023      	str	r3, [r4, #0]
 8008400:	bd38      	pop	{r3, r4, r5, pc}
 8008402:	bf00      	nop
 8008404:	200006cc 	.word	0x200006cc

08008408 <_isatty_r>:
 8008408:	b538      	push	{r3, r4, r5, lr}
 800840a:	2300      	movs	r3, #0
 800840c:	4d05      	ldr	r5, [pc, #20]	@ (8008424 <_isatty_r+0x1c>)
 800840e:	4604      	mov	r4, r0
 8008410:	4608      	mov	r0, r1
 8008412:	602b      	str	r3, [r5, #0]
 8008414:	f7f9 fef9 	bl	800220a <_isatty>
 8008418:	1c43      	adds	r3, r0, #1
 800841a:	d102      	bne.n	8008422 <_isatty_r+0x1a>
 800841c:	682b      	ldr	r3, [r5, #0]
 800841e:	b103      	cbz	r3, 8008422 <_isatty_r+0x1a>
 8008420:	6023      	str	r3, [r4, #0]
 8008422:	bd38      	pop	{r3, r4, r5, pc}
 8008424:	200006cc 	.word	0x200006cc

08008428 <_init>:
 8008428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800842a:	bf00      	nop
 800842c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800842e:	bc08      	pop	{r3}
 8008430:	469e      	mov	lr, r3
 8008432:	4770      	bx	lr

08008434 <_fini>:
 8008434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008436:	bf00      	nop
 8008438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800843a:	bc08      	pop	{r3}
 800843c:	469e      	mov	lr, r3
 800843e:	4770      	bx	lr
