
AGRO_RSSI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007484  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b14  08007598  08007598  00017598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080ac  080080ac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080080ac  080080ac  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080080ac  080080ac  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080ac  080080ac  000180ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080b0  080080b0  000180b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080080b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  200001dc  08008290  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000065c  08008290  0002065c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d3a9  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002354  00000000  00000000  0002d5f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca8  00000000  00000000  0002f948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009cb  00000000  00000000  000305f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018d76  00000000  00000000  00030fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010398  00000000  00000000  00049d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087e4f  00000000  00000000  0005a0c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044b8  00000000  00000000  000e1f18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000e63d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800757c 	.word	0x0800757c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800757c 	.word	0x0800757c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <E220_WaitReady>:

/*------------------------------------------*/
extern uint8_t recv[50];
/*------------------------------------------*/
GPIO_PinState E220_WaitReady(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
	while(!(AUX_Flag == true)) {};
 8000a8c:	bf00      	nop
 8000a8e:	4b07      	ldr	r3, [pc, #28]	; (8000aac <E220_WaitReady+0x24>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	f083 0301 	eor.w	r3, r3, #1
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1f8      	bne.n	8000a8e <E220_WaitReady+0x6>
	//while(!(HAL_GPIO_ReadPin(E220_AUX_PORT, E220_AUX_PIN))) {};
	AUX_Flag = false;
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <E220_WaitReady+0x24>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
	return GPIO_PIN_SET;
 8000aa2:	2301      	movs	r3, #1
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	2000020d 	.word	0x2000020d

08000ab0 <E220_CheckSentReadPacket>:
/*------------------------------------------*/
GPIO_PinState E220_CheckSentReadPacket(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
	while(!(AUX_Flag == true)) {};
 8000ab4:	bf00      	nop
 8000ab6:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <E220_CheckSentReadPacket+0x24>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	f083 0301 	eor.w	r3, r3, #1
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1f8      	bne.n	8000ab6 <E220_CheckSentReadPacket+0x6>
	//while(!(HAL_GPIO_ReadPin(E220_AUX_PORT, E220_AUX_PIN))) {};
	AUX_Flag = false;
 8000ac4:	4b03      	ldr	r3, [pc, #12]	; (8000ad4 <E220_CheckSentReadPacket+0x24>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
	return GPIO_PIN_SET;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	2000020d 	.word	0x2000020d

08000ad8 <E220_SetMode>:
	E220_CheckSentReadPacket();
	return GPIO_PIN_SET;
}
/*------------------------------------------*/
OperatingMode E220_SetMode(OperatingMode mode)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
	if(mode == NORMAL)
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d10c      	bne.n	8000b02 <E220_SetMode+0x2a>
	{
		E220_MO_RESET;
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aee:	481f      	ldr	r0, [pc, #124]	; (8000b6c <E220_SetMode+0x94>)
 8000af0:	f001 fe4a 	bl	8002788 <HAL_GPIO_WritePin>
		E220_M1_RESET;
 8000af4:	2200      	movs	r2, #0
 8000af6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000afa:	481d      	ldr	r0, [pc, #116]	; (8000b70 <E220_SetMode+0x98>)
 8000afc:	f001 fe44 	bl	8002788 <HAL_GPIO_WritePin>
 8000b00:	e02e      	b.n	8000b60 <E220_SetMode+0x88>
	}
	else if(mode == WOR_Transmission)
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d10c      	bne.n	8000b22 <E220_SetMode+0x4a>
	{
		E220_MO_SET;
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b0e:	4817      	ldr	r0, [pc, #92]	; (8000b6c <E220_SetMode+0x94>)
 8000b10:	f001 fe3a 	bl	8002788 <HAL_GPIO_WritePin>
		E220_M1_RESET;
 8000b14:	2200      	movs	r2, #0
 8000b16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b1a:	4815      	ldr	r0, [pc, #84]	; (8000b70 <E220_SetMode+0x98>)
 8000b1c:	f001 fe34 	bl	8002788 <HAL_GPIO_WritePin>
 8000b20:	e01e      	b.n	8000b60 <E220_SetMode+0x88>
	}
	else if(mode == WOR_Receiving)
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	d10c      	bne.n	8000b42 <E220_SetMode+0x6a>
	{
		E220_MO_RESET;
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b2e:	480f      	ldr	r0, [pc, #60]	; (8000b6c <E220_SetMode+0x94>)
 8000b30:	f001 fe2a 	bl	8002788 <HAL_GPIO_WritePin>
		E220_M1_SET;
 8000b34:	2201      	movs	r2, #1
 8000b36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b3a:	480d      	ldr	r0, [pc, #52]	; (8000b70 <E220_SetMode+0x98>)
 8000b3c:	f001 fe24 	bl	8002788 <HAL_GPIO_WritePin>
 8000b40:	e00e      	b.n	8000b60 <E220_SetMode+0x88>
	}
	else if(mode == DeepSleep)
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	2b03      	cmp	r3, #3
 8000b46:	d10b      	bne.n	8000b60 <E220_SetMode+0x88>
	{
		E220_MO_SET;
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b4e:	4807      	ldr	r0, [pc, #28]	; (8000b6c <E220_SetMode+0x94>)
 8000b50:	f001 fe1a 	bl	8002788 <HAL_GPIO_WritePin>
		E220_M1_SET;
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <E220_SetMode+0x98>)
 8000b5c:	f001 fe14 	bl	8002788 <HAL_GPIO_WritePin>
	}
	return mode;
 8000b60:	79fb      	ldrb	r3, [r7, #7]
	HAL_Delay(50);
	E220_CheckSentReadPacket();
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40010c00 	.word	0x40010c00
 8000b70:	40010800 	.word	0x40010800

08000b74 <E220_Set_AddressModule>:
/*------------------------------------------*/
void E220_Set_AddressModule(uint16_t addr)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	80fb      	strh	r3, [r7, #6]
	uint8_t addr_h = 0x00;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	75fb      	strb	r3, [r7, #23]
	uint8_t addr_l = 0x00;
 8000b82:	2300      	movs	r3, #0
 8000b84:	75bb      	strb	r3, [r7, #22]
	uint8_t send_data[5] = {E220_CMD0, E220_ADDH, 2, addr_h, addr_l};
 8000b86:	23c0      	movs	r3, #192	; 0xc0
 8000b88:	733b      	strb	r3, [r7, #12]
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	737b      	strb	r3, [r7, #13]
 8000b8e:	2302      	movs	r3, #2
 8000b90:	73bb      	strb	r3, [r7, #14]
 8000b92:	7dfb      	ldrb	r3, [r7, #23]
 8000b94:	73fb      	strb	r3, [r7, #15]
 8000b96:	7dbb      	ldrb	r3, [r7, #22]
 8000b98:	743b      	strb	r3, [r7, #16]
	uint16_t mask = 0xFFFF;
 8000b9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b9e:	82bb      	strh	r3, [r7, #20]

	addr_h = (addr >> 8) & mask;
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	0a1b      	lsrs	r3, r3, #8
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	8abb      	ldrh	r3, [r7, #20]
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	4013      	ands	r3, r2
 8000bae:	75fb      	strb	r3, [r7, #23]
	addr_l = (addr << 0) & mask;
 8000bb0:	88fb      	ldrh	r3, [r7, #6]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	8abb      	ldrh	r3, [r7, #20]
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	4013      	ands	r3, r2
 8000bba:	75bb      	strb	r3, [r7, #22]

	send_data[3] = addr_h;
 8000bbc:	7dfb      	ldrb	r3, [r7, #23]
 8000bbe:	73fb      	strb	r3, [r7, #15]
	send_data[4] = addr_l;
 8000bc0:	7dbb      	ldrb	r3, [r7, #22]
 8000bc2:	743b      	strb	r3, [r7, #16]

	HAL_UART_Transmit(&huart1, send_data, 5, TIMEOUT);
 8000bc4:	f107 010c 	add.w	r1, r7, #12
 8000bc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bcc:	2205      	movs	r2, #5
 8000bce:	4806      	ldr	r0, [pc, #24]	; (8000be8 <E220_Set_AddressModule+0x74>)
 8000bd0:	f003 f84e 	bl	8003c70 <HAL_UART_Transmit>
	E220_CheckSentReadPacket();
 8000bd4:	f7ff ff6c 	bl	8000ab0 <E220_CheckSentReadPacket>
	E220_GlobReg.addr = addr;
 8000bd8:	4a04      	ldr	r2, [pc, #16]	; (8000bec <E220_Set_AddressModule+0x78>)
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	8013      	strh	r3, [r2, #0]
}
 8000bde:	bf00      	nop
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200002bc 	.word	0x200002bc
 8000bec:	200001f8 	.word	0x200001f8

08000bf0 <E220_Set_Uart_Rate_Parity_Data>:
/*------------------------------------------*/
void E220_Set_Uart_Rate_Parity_Data(SerialPortRate rate, SerialPorityBit pority, AirDataRate air_data)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	71bb      	strb	r3, [r7, #6]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	717b      	strb	r3, [r7, #5]
	uint8_t all_data = 0x00;
 8000c02:	2300      	movs	r3, #0
 8000c04:	73fb      	strb	r3, [r7, #15]
	uint8_t send_data[4] = {E220_CMD0, E220_REG0, 1, all_data};
 8000c06:	23c0      	movs	r3, #192	; 0xc0
 8000c08:	723b      	strb	r3, [r7, #8]
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	727b      	strb	r3, [r7, #9]
 8000c0e:	2301      	movs	r3, #1
 8000c10:	72bb      	strb	r3, [r7, #10]
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	72fb      	strb	r3, [r7, #11]
	/*UART Serial Port Rate*/
	if(rate == Rate_1200) all_data |= 0x00;
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d036      	beq.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
	else if(rate == Rate_2400) all_data |= 0x20;
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d104      	bne.n	8000c2c <E220_Set_Uart_Rate_Parity_Data+0x3c>
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	f043 0320 	orr.w	r3, r3, #32
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	e02e      	b.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
	else if(rate == Rate_4800) all_data |= 0x40;
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d104      	bne.n	8000c3c <E220_Set_Uart_Rate_Parity_Data+0x4c>
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c38:	73fb      	strb	r3, [r7, #15]
 8000c3a:	e026      	b.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
	else if(rate == Rate_9600) all_data |= 0x60;
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	2b03      	cmp	r3, #3
 8000c40:	d104      	bne.n	8000c4c <E220_Set_Uart_Rate_Parity_Data+0x5c>
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000c48:	73fb      	strb	r3, [r7, #15]
 8000c4a:	e01e      	b.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
	else if(rate == Rate_19200) all_data |= 0x80;
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	d104      	bne.n	8000c5c <E220_Set_Uart_Rate_Parity_Data+0x6c>
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
 8000c54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c58:	73fb      	strb	r3, [r7, #15]
 8000c5a:	e016      	b.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
	else if(rate == Rate_38400) all_data |= 0xA0;
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	2b05      	cmp	r3, #5
 8000c60:	d104      	bne.n	8000c6c <E220_Set_Uart_Rate_Parity_Data+0x7c>
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8000c68:	73fb      	strb	r3, [r7, #15]
 8000c6a:	e00e      	b.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
	else if(rate == Rate_57600) all_data |= 0xC0;
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b06      	cmp	r3, #6
 8000c70:	d104      	bne.n	8000c7c <E220_Set_Uart_Rate_Parity_Data+0x8c>
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000c78:	73fb      	strb	r3, [r7, #15]
 8000c7a:	e006      	b.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
	else if(rate == Rate_115200) all_data |= 0xE0;
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	2b07      	cmp	r3, #7
 8000c80:	d103      	bne.n	8000c8a <E220_Set_Uart_Rate_Parity_Data+0x9a>
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	f063 031f 	orn	r3, r3, #31
 8000c88:	73fb      	strb	r3, [r7, #15]
	/*UART Serial Port Rate*/
	if(pority == _8N1) all_data |= 0x00;
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d016      	beq.n	8000cbe <E220_Set_Uart_Rate_Parity_Data+0xce>
	else if(pority == _8O1) all_data |= 0x80;
 8000c90:	79bb      	ldrb	r3, [r7, #6]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d104      	bne.n	8000ca0 <E220_Set_Uart_Rate_Parity_Data+0xb0>
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c9c:	73fb      	strb	r3, [r7, #15]
 8000c9e:	e00e      	b.n	8000cbe <E220_Set_Uart_Rate_Parity_Data+0xce>
	else if(pority == _8E1) all_data |= 0x10;
 8000ca0:	79bb      	ldrb	r3, [r7, #6]
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d104      	bne.n	8000cb0 <E220_Set_Uart_Rate_Parity_Data+0xc0>
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	f043 0310 	orr.w	r3, r3, #16
 8000cac:	73fb      	strb	r3, [r7, #15]
 8000cae:	e006      	b.n	8000cbe <E220_Set_Uart_Rate_Parity_Data+0xce>
	else if(pority == _8N1_2) all_data |= 0x18;
 8000cb0:	79bb      	ldrb	r3, [r7, #6]
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	d103      	bne.n	8000cbe <E220_Set_Uart_Rate_Parity_Data+0xce>
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	f043 0318 	orr.w	r3, r3, #24
 8000cbc:	73fb      	strb	r3, [r7, #15]
	/*UART Serial Port Rate*/
	if(air_data == _2_4k) all_data |= 0x00;
 8000cbe:	797b      	ldrb	r3, [r7, #5]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d036      	beq.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
	else if(air_data == _2_4k_2) all_data |= 0x01;
 8000cc4:	797b      	ldrb	r3, [r7, #5]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d104      	bne.n	8000cd4 <E220_Set_Uart_Rate_Parity_Data+0xe4>
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	73fb      	strb	r3, [r7, #15]
 8000cd2:	e02e      	b.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
	else if(air_data == _2_4k_3) all_data |= 0x02;
 8000cd4:	797b      	ldrb	r3, [r7, #5]
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d104      	bne.n	8000ce4 <E220_Set_Uart_Rate_Parity_Data+0xf4>
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	73fb      	strb	r3, [r7, #15]
 8000ce2:	e026      	b.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
	else if(air_data == _4_8k) all_data |= 0x03;
 8000ce4:	797b      	ldrb	r3, [r7, #5]
 8000ce6:	2b03      	cmp	r3, #3
 8000ce8:	d104      	bne.n	8000cf4 <E220_Set_Uart_Rate_Parity_Data+0x104>
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	f043 0303 	orr.w	r3, r3, #3
 8000cf0:	73fb      	strb	r3, [r7, #15]
 8000cf2:	e01e      	b.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
	else if(air_data == _9_6k) all_data |= 0x04;
 8000cf4:	797b      	ldrb	r3, [r7, #5]
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	d104      	bne.n	8000d04 <E220_Set_Uart_Rate_Parity_Data+0x114>
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	f043 0304 	orr.w	r3, r3, #4
 8000d00:	73fb      	strb	r3, [r7, #15]
 8000d02:	e016      	b.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
	else if(air_data == _19_2k) all_data |= 0x05;
 8000d04:	797b      	ldrb	r3, [r7, #5]
 8000d06:	2b05      	cmp	r3, #5
 8000d08:	d104      	bne.n	8000d14 <E220_Set_Uart_Rate_Parity_Data+0x124>
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
 8000d0c:	f043 0305 	orr.w	r3, r3, #5
 8000d10:	73fb      	strb	r3, [r7, #15]
 8000d12:	e00e      	b.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
	else if(air_data == _38_4k) all_data |= 0x06;
 8000d14:	797b      	ldrb	r3, [r7, #5]
 8000d16:	2b06      	cmp	r3, #6
 8000d18:	d104      	bne.n	8000d24 <E220_Set_Uart_Rate_Parity_Data+0x134>
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	f043 0306 	orr.w	r3, r3, #6
 8000d20:	73fb      	strb	r3, [r7, #15]
 8000d22:	e006      	b.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
	else if(air_data == _62_5k) all_data |= 0x07;
 8000d24:	797b      	ldrb	r3, [r7, #5]
 8000d26:	2b07      	cmp	r3, #7
 8000d28:	d103      	bne.n	8000d32 <E220_Set_Uart_Rate_Parity_Data+0x142>
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	f043 0307 	orr.w	r3, r3, #7
 8000d30:	73fb      	strb	r3, [r7, #15]

	send_data[3] = all_data;
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
 8000d34:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit(&huart1, send_data, 4, TIMEOUT);
 8000d36:	f107 0108 	add.w	r1, r7, #8
 8000d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3e:	2204      	movs	r2, #4
 8000d40:	4805      	ldr	r0, [pc, #20]	; (8000d58 <E220_Set_Uart_Rate_Parity_Data+0x168>)
 8000d42:	f002 ff95 	bl	8003c70 <HAL_UART_Transmit>
	E220_CheckSentReadPacket();
 8000d46:	f7ff feb3 	bl	8000ab0 <E220_CheckSentReadPacket>

	E220_GlobReg.reg0 = all_data;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <E220_Set_Uart_Rate_Parity_Data+0x16c>)
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	7093      	strb	r3, [r2, #2]
}
 8000d50:	bf00      	nop
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	200002bc 	.word	0x200002bc
 8000d5c:	200001f8 	.word	0x200001f8

08000d60 <E220_Set_SubPacket_RSSI_TransPower>:
/*------------------------------------------*/
void E220_Set_SubPacket_RSSI_TransPower(SubPacketSetting sub, _Bool RSSIAmbientNoiseEnable, TransmittingPower tr_pow)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	71bb      	strb	r3, [r7, #6]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	717b      	strb	r3, [r7, #5]
	uint8_t all_data = 0x00;
 8000d72:	2300      	movs	r3, #0
 8000d74:	73fb      	strb	r3, [r7, #15]
	uint8_t send_data[4] = {E220_CMD0, E220_REG1, 1, all_data};
 8000d76:	23c0      	movs	r3, #192	; 0xc0
 8000d78:	723b      	strb	r3, [r7, #8]
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	727b      	strb	r3, [r7, #9]
 8000d7e:	2301      	movs	r3, #1
 8000d80:	72bb      	strb	r3, [r7, #10]
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	72fb      	strb	r3, [r7, #11]
	/*Sub-Packet Setting*/
	if(sub == _200bytes) all_data |= 0x00;
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d016      	beq.n	8000dba <E220_Set_SubPacket_RSSI_TransPower+0x5a>
	else if(sub == _128bytes) all_data |= 0x40;
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d104      	bne.n	8000d9c <E220_Set_SubPacket_RSSI_TransPower+0x3c>
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d98:	73fb      	strb	r3, [r7, #15]
 8000d9a:	e00e      	b.n	8000dba <E220_Set_SubPacket_RSSI_TransPower+0x5a>
	else if(sub == _64bytes) all_data |= 0x80;
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d104      	bne.n	8000dac <E220_Set_SubPacket_RSSI_TransPower+0x4c>
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000da8:	73fb      	strb	r3, [r7, #15]
 8000daa:	e006      	b.n	8000dba <E220_Set_SubPacket_RSSI_TransPower+0x5a>
	else if(sub == _32bytes) all_data |= 0xC0;
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	d103      	bne.n	8000dba <E220_Set_SubPacket_RSSI_TransPower+0x5a>
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000db8:	73fb      	strb	r3, [r7, #15]
	/*RSSI Ambient noise enable*/
	if(RSSIAmbientNoiseEnable == true) all_data |= 0x20;
 8000dba:	79bb      	ldrb	r3, [r7, #6]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d003      	beq.n	8000dc8 <E220_Set_SubPacket_RSSI_TransPower+0x68>
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	f043 0320 	orr.w	r3, r3, #32
 8000dc6:	73fb      	strb	r3, [r7, #15]
	else all_data |= 0x00;
	/*Transimitting Power*/
	if(tr_pow == _22dBm) all_data |= 0x00;
 8000dc8:	797b      	ldrb	r3, [r7, #5]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d016      	beq.n	8000dfc <E220_Set_SubPacket_RSSI_TransPower+0x9c>
	else if(tr_pow == _17dBm) all_data |= 0x01;
 8000dce:	797b      	ldrb	r3, [r7, #5]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d104      	bne.n	8000dde <E220_Set_SubPacket_RSSI_TransPower+0x7e>
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	73fb      	strb	r3, [r7, #15]
 8000ddc:	e00e      	b.n	8000dfc <E220_Set_SubPacket_RSSI_TransPower+0x9c>
	else if(tr_pow == _13dBm) all_data |= 0x02;
 8000dde:	797b      	ldrb	r3, [r7, #5]
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d104      	bne.n	8000dee <E220_Set_SubPacket_RSSI_TransPower+0x8e>
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	f043 0302 	orr.w	r3, r3, #2
 8000dea:	73fb      	strb	r3, [r7, #15]
 8000dec:	e006      	b.n	8000dfc <E220_Set_SubPacket_RSSI_TransPower+0x9c>
	else if(tr_pow == _10dBm) all_data |= 0x03;
 8000dee:	797b      	ldrb	r3, [r7, #5]
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d103      	bne.n	8000dfc <E220_Set_SubPacket_RSSI_TransPower+0x9c>
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	f043 0303 	orr.w	r3, r3, #3
 8000dfa:	73fb      	strb	r3, [r7, #15]

	send_data[3] = all_data;
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit(&huart1, send_data, 4, TIMEOUT);
 8000e00:	f107 0108 	add.w	r1, r7, #8
 8000e04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e08:	2204      	movs	r2, #4
 8000e0a:	4806      	ldr	r0, [pc, #24]	; (8000e24 <E220_Set_SubPacket_RSSI_TransPower+0xc4>)
 8000e0c:	f002 ff30 	bl	8003c70 <HAL_UART_Transmit>
	E220_CheckSentReadPacket();
 8000e10:	f7ff fe4e 	bl	8000ab0 <E220_CheckSentReadPacket>
	E220_GlobReg.reg1 = all_data;
 8000e14:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <E220_Set_SubPacket_RSSI_TransPower+0xc8>)
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	70d3      	strb	r3, [r2, #3]
}
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200002bc 	.word	0x200002bc
 8000e28:	200001f8 	.word	0x200001f8

08000e2c <E220_Set_Channel>:
/*------------------------------------------*/
void E220_Set_Channel(uint8_t channel)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
	uint8_t all_data = 0x00;
 8000e36:	2300      	movs	r3, #0
 8000e38:	73fb      	strb	r3, [r7, #15]
	uint8_t send_data[4] = {E220_CMD0, E220_REG2, 1, all_data};
 8000e3a:	23c0      	movs	r3, #192	; 0xc0
 8000e3c:	723b      	strb	r3, [r7, #8]
 8000e3e:	2304      	movs	r3, #4
 8000e40:	727b      	strb	r3, [r7, #9]
 8000e42:	2301      	movs	r3, #1
 8000e44:	72bb      	strb	r3, [r7, #10]
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	72fb      	strb	r3, [r7, #11]
	all_data |= channel;
 8000e4a:	7bfa      	ldrb	r2, [r7, #15]
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	73fb      	strb	r3, [r7, #15]

	send_data[3] = all_data;
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	72fb      	strb	r3, [r7, #11]
	HAL_UART_Transmit(&huart1, send_data, 4, TIMEOUT);
 8000e56:	f107 0108 	add.w	r1, r7, #8
 8000e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5e:	2204      	movs	r2, #4
 8000e60:	4805      	ldr	r0, [pc, #20]	; (8000e78 <E220_Set_Channel+0x4c>)
 8000e62:	f002 ff05 	bl	8003c70 <HAL_UART_Transmit>
	E220_CheckSentReadPacket();
 8000e66:	f7ff fe23 	bl	8000ab0 <E220_CheckSentReadPacket>
	E220_GlobReg.reg2 = all_data;
 8000e6a:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <E220_Set_Channel+0x50>)
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	7113      	strb	r3, [r2, #4]
}
 8000e70:	bf00      	nop
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	200002bc 	.word	0x200002bc
 8000e7c:	200001f8 	.word	0x200001f8

08000e80 <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle>:
/*------------------------------------------*/
void E220_Set_RSSI_TransmissionMethod_LBT_WORCycle(_Bool RSSIByte, TransmissionMethod method, _Bool LBT, WORCycle wor)
{
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4604      	mov	r4, r0
 8000e88:	4608      	mov	r0, r1
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4623      	mov	r3, r4
 8000e90:	71fb      	strb	r3, [r7, #7]
 8000e92:	4603      	mov	r3, r0
 8000e94:	71bb      	strb	r3, [r7, #6]
 8000e96:	460b      	mov	r3, r1
 8000e98:	717b      	strb	r3, [r7, #5]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	713b      	strb	r3, [r7, #4]
	uint8_t all_data = 0x00;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	73fb      	strb	r3, [r7, #15]
	uint8_t send_data[4] = {E220_CMD0, E220_REG3, 1, all_data};
 8000ea2:	23c0      	movs	r3, #192	; 0xc0
 8000ea4:	723b      	strb	r3, [r7, #8]
 8000ea6:	2305      	movs	r3, #5
 8000ea8:	727b      	strb	r3, [r7, #9]
 8000eaa:	2301      	movs	r3, #1
 8000eac:	72bb      	strb	r3, [r7, #10]
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	72fb      	strb	r3, [r7, #11]
	/*Enable RSSI Byte*/
	if(RSSIByte == DISABLE) all_data |= 0x00;
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	f083 0301 	eor.w	r3, r3, #1
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d103      	bne.n	8000ec6 <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x46>
	else all_data |= 0x80;
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ec4:	73fb      	strb	r3, [r7, #15]
	/*Transmission Method*/
	if(method == DISABLE) all_data |= 0x00;
 8000ec6:	79bb      	ldrb	r3, [r7, #6]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d003      	beq.n	8000ed4 <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x54>
	else all_data |= 0x40;
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ed2:	73fb      	strb	r3, [r7, #15]
	/*LBT Enable*/
	if(LBT == DISABLE) all_data |= 0x00;
 8000ed4:	797b      	ldrb	r3, [r7, #5]
 8000ed6:	f083 0301 	eor.w	r3, r3, #1
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d103      	bne.n	8000ee8 <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x68>
	else all_data |= 0x10;
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	f043 0310 	orr.w	r3, r3, #16
 8000ee6:	73fb      	strb	r3, [r7, #15]
	/*WOR Cycle*/
	if(wor == _500ms) all_data |= 0x00;
 8000ee8:	793b      	ldrb	r3, [r7, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d036      	beq.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
	else if(wor == _1000ms) all_data |= 0x01;
 8000eee:	793b      	ldrb	r3, [r7, #4]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d104      	bne.n	8000efe <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x7e>
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	e02e      	b.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
	else if(wor == _1500ms) all_data |= 0x02;
 8000efe:	793b      	ldrb	r3, [r7, #4]
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d104      	bne.n	8000f0e <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x8e>
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	f043 0302 	orr.w	r3, r3, #2
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	e026      	b.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
	else if(wor == _2000ms) all_data |= 0x03;
 8000f0e:	793b      	ldrb	r3, [r7, #4]
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	d104      	bne.n	8000f1e <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x9e>
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	f043 0303 	orr.w	r3, r3, #3
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	e01e      	b.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
	else if(wor == _2500ms) all_data |= 0x04;
 8000f1e:	793b      	ldrb	r3, [r7, #4]
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d104      	bne.n	8000f2e <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xae>
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	f043 0304 	orr.w	r3, r3, #4
 8000f2a:	73fb      	strb	r3, [r7, #15]
 8000f2c:	e016      	b.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
	else if(wor == _3000ms) all_data |= 0x05;
 8000f2e:	793b      	ldrb	r3, [r7, #4]
 8000f30:	2b05      	cmp	r3, #5
 8000f32:	d104      	bne.n	8000f3e <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xbe>
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	f043 0305 	orr.w	r3, r3, #5
 8000f3a:	73fb      	strb	r3, [r7, #15]
 8000f3c:	e00e      	b.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
	else if(wor == _3500ms) all_data |= 0x06;
 8000f3e:	793b      	ldrb	r3, [r7, #4]
 8000f40:	2b06      	cmp	r3, #6
 8000f42:	d104      	bne.n	8000f4e <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xce>
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	f043 0306 	orr.w	r3, r3, #6
 8000f4a:	73fb      	strb	r3, [r7, #15]
 8000f4c:	e006      	b.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
	else if(wor == _4000ms) all_data |= 0x07;
 8000f4e:	793b      	ldrb	r3, [r7, #4]
 8000f50:	2b07      	cmp	r3, #7
 8000f52:	d103      	bne.n	8000f5c <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0xdc>
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	f043 0307 	orr.w	r3, r3, #7
 8000f5a:	73fb      	strb	r3, [r7, #15]

	send_data[3] = all_data;
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	72fb      	strb	r3, [r7, #11]
	HAL_UART_Transmit(&huart1, send_data, 4, TIMEOUT);
 8000f60:	f107 0108 	add.w	r1, r7, #8
 8000f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f68:	2204      	movs	r2, #4
 8000f6a:	4806      	ldr	r0, [pc, #24]	; (8000f84 <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x104>)
 8000f6c:	f002 fe80 	bl	8003c70 <HAL_UART_Transmit>
	E220_CheckSentReadPacket();
 8000f70:	f7ff fd9e 	bl	8000ab0 <E220_CheckSentReadPacket>
	E220_GlobReg.reg3 = all_data;
 8000f74:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle+0x108>)
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	7153      	strb	r3, [r2, #5]
}
 8000f7a:	bf00      	nop
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd90      	pop	{r4, r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200002bc 	.word	0x200002bc
 8000f88:	200001f8 	.word	0x200001f8

08000f8c <E220_Set_Key>:
void E220_Set_Key(uint16_t key)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	80fb      	strh	r3, [r7, #6]
	uint8_t key_h = 0x00;
 8000f96:	2300      	movs	r3, #0
 8000f98:	75fb      	strb	r3, [r7, #23]
	uint8_t key_l = 0x00;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	75bb      	strb	r3, [r7, #22]
	uint8_t send_data[5] = {E220_CMD0, E220_CRYPT_H, 2, key_h, key_l};
 8000f9e:	23c0      	movs	r3, #192	; 0xc0
 8000fa0:	733b      	strb	r3, [r7, #12]
 8000fa2:	2306      	movs	r3, #6
 8000fa4:	737b      	strb	r3, [r7, #13]
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	73bb      	strb	r3, [r7, #14]
 8000faa:	7dfb      	ldrb	r3, [r7, #23]
 8000fac:	73fb      	strb	r3, [r7, #15]
 8000fae:	7dbb      	ldrb	r3, [r7, #22]
 8000fb0:	743b      	strb	r3, [r7, #16]
	uint16_t mask = 0xFFFF;
 8000fb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fb6:	82bb      	strh	r3, [r7, #20]

	key_h = (key >> 8) & mask;
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	0a1b      	lsrs	r3, r3, #8
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	8abb      	ldrh	r3, [r7, #20]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	75fb      	strb	r3, [r7, #23]
	key_l = (key << 0) & mask;
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	8abb      	ldrh	r3, [r7, #20]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	75bb      	strb	r3, [r7, #22]

	send_data[3] = key_h;
 8000fd4:	7dfb      	ldrb	r3, [r7, #23]
 8000fd6:	73fb      	strb	r3, [r7, #15]
	send_data[4] = key_l;
 8000fd8:	7dbb      	ldrb	r3, [r7, #22]
 8000fda:	743b      	strb	r3, [r7, #16]

	HAL_UART_Transmit(&huart1, send_data, 5, TIMEOUT);
 8000fdc:	f107 010c 	add.w	r1, r7, #12
 8000fe0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe4:	2205      	movs	r2, #5
 8000fe6:	4806      	ldr	r0, [pc, #24]	; (8001000 <E220_Set_Key+0x74>)
 8000fe8:	f002 fe42 	bl	8003c70 <HAL_UART_Transmit>
	E220_CheckSentReadPacket();
 8000fec:	f7ff fd60 	bl	8000ab0 <E220_CheckSentReadPacket>
	E220_GlobReg.Key = key;
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <E220_Set_Key+0x78>)
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	80d3      	strh	r3, [r2, #6]
}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200002bc 	.word	0x200002bc
 8001004:	200001f8 	.word	0x200001f8

08001008 <E220_SetDefaultSettings>:
	E220_Set_Key(str.Key);
	HAL_Delay(50);
}
/*------------------------------------------*/
void E220_SetDefaultSettings(uint16_t u1, uint8_t u2, _Bool u3)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	80fb      	strh	r3, [r7, #6]
 8001012:	460b      	mov	r3, r1
 8001014:	717b      	strb	r3, [r7, #5]
 8001016:	4613      	mov	r3, r2
 8001018:	713b      	strb	r3, [r7, #4]
	E220_HandleTypeDef E220_Settings = {0, };
 800101a:	f107 0308 	add.w	r3, r7, #8
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
	E220_Settings.Address = u1;
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	813b      	strh	r3, [r7, #8]
	E220_Settings.Rate = Rate_9600;
 800102c:	2303      	movs	r3, #3
 800102e:	72bb      	strb	r3, [r7, #10]
	E220_Settings.Pority = _8N1;
 8001030:	2300      	movs	r3, #0
 8001032:	72fb      	strb	r3, [r7, #11]
	E220_Settings.AirDataRate = _2_4k;
 8001034:	2300      	movs	r3, #0
 8001036:	733b      	strb	r3, [r7, #12]
	E220_Settings.SubPacket = _200bytes;
 8001038:	2300      	movs	r3, #0
 800103a:	737b      	strb	r3, [r7, #13]
	E220_Settings.RSSIAmbientNoiseEnable = DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	73bb      	strb	r3, [r7, #14]
	E220_Settings.TransPower = _22dBm;
 8001040:	2300      	movs	r3, #0
 8001042:	73fb      	strb	r3, [r7, #15]
	E220_Settings.ChannelControl = u2;
 8001044:	797b      	ldrb	r3, [r7, #5]
 8001046:	743b      	strb	r3, [r7, #16]
	E220_Settings.EnableRSSIByte = u3;
 8001048:	793b      	ldrb	r3, [r7, #4]
 800104a:	747b      	strb	r3, [r7, #17]
	E220_Settings.TransMethod = FixedTransmissionMode;
 800104c:	2301      	movs	r3, #1
 800104e:	74bb      	strb	r3, [r7, #18]
	E220_Settings.LBT = DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	74fb      	strb	r3, [r7, #19]
	E220_Settings.WORCycle = _500ms;
 8001054:	2300      	movs	r3, #0
 8001056:	753b      	strb	r3, [r7, #20]
	E220_Settings.Key = 0x0000;
 8001058:	2300      	movs	r3, #0
 800105a:	82fb      	strh	r3, [r7, #22]

	E220_Set_AddressModule(E220_Settings.Address);
 800105c:	893b      	ldrh	r3, [r7, #8]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fd88 	bl	8000b74 <E220_Set_AddressModule>
	HAL_Delay(30);
 8001064:	201e      	movs	r0, #30
 8001066:	f001 f827 	bl	80020b8 <HAL_Delay>
	E220_Set_Uart_Rate_Parity_Data(E220_Settings.Rate, E220_Settings.Pority, E220_Settings.AirDataRate);
 800106a:	7abb      	ldrb	r3, [r7, #10]
 800106c:	7af9      	ldrb	r1, [r7, #11]
 800106e:	7b3a      	ldrb	r2, [r7, #12]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fdbd 	bl	8000bf0 <E220_Set_Uart_Rate_Parity_Data>
	HAL_Delay(30);
 8001076:	201e      	movs	r0, #30
 8001078:	f001 f81e 	bl	80020b8 <HAL_Delay>
	E220_Set_SubPacket_RSSI_TransPower(E220_Settings.SubPacket, E220_Settings.RSSIAmbientNoiseEnable, E220_Settings.TransPower);
 800107c:	7b7b      	ldrb	r3, [r7, #13]
 800107e:	7bb9      	ldrb	r1, [r7, #14]
 8001080:	7bfa      	ldrb	r2, [r7, #15]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fe6c 	bl	8000d60 <E220_Set_SubPacket_RSSI_TransPower>
	HAL_Delay(30);
 8001088:	201e      	movs	r0, #30
 800108a:	f001 f815 	bl	80020b8 <HAL_Delay>
	E220_Set_Channel(E220_Settings.ChannelControl);
 800108e:	7c3b      	ldrb	r3, [r7, #16]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fecb 	bl	8000e2c <E220_Set_Channel>
	HAL_Delay(30);
 8001096:	201e      	movs	r0, #30
 8001098:	f001 f80e 	bl	80020b8 <HAL_Delay>
	E220_Set_RSSI_TransmissionMethod_LBT_WORCycle(E220_Settings.EnableRSSIByte, E220_Settings.TransMethod, E220_Settings.LBT, E220_Settings.WORCycle);
 800109c:	7c78      	ldrb	r0, [r7, #17]
 800109e:	7cb9      	ldrb	r1, [r7, #18]
 80010a0:	7cfa      	ldrb	r2, [r7, #19]
 80010a2:	7d3b      	ldrb	r3, [r7, #20]
 80010a4:	f7ff feec 	bl	8000e80 <E220_Set_RSSI_TransmissionMethod_LBT_WORCycle>
	HAL_Delay(30);
 80010a8:	201e      	movs	r0, #30
 80010aa:	f001 f805 	bl	80020b8 <HAL_Delay>
	E220_Set_Key(E220_Settings.Key);
 80010ae:	8afb      	ldrh	r3, [r7, #22]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff6b 	bl	8000f8c <E220_Set_Key>
	HAL_Delay(30);
 80010b6:	201e      	movs	r0, #30
 80010b8:	f000 fffe 	bl	80020b8 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <AGRO_Init>:

	return res;
}
//-------------------------------------------------------------------//
NumberDevice AGRO_Init(AGRO_HandleTypeDef Device, NumberDevice divice)
{
 80010c4:	b490      	push	{r4, r7}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	1d3c      	adds	r4, r7, #4
 80010cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010d0:	70fb      	strb	r3, [r7, #3]
	SettingsAllDevice = Device;
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <AGRO_Init+0x30>)
 80010d4:	461c      	mov	r4, r3
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	MyDevice = divice;
 80010e0:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <AGRO_Init+0x34>)
 80010e2:	78fb      	ldrb	r3, [r7, #3]
 80010e4:	7013      	strb	r3, [r2, #0]

	return MyDevice;
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <AGRO_Init+0x34>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc90      	pop	{r4, r7}
 80010f2:	4770      	bx	lr
 80010f4:	20000200 	.word	0x20000200
 80010f8:	2000020c 	.word	0x2000020c

080010fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001102:	f000 ff77 	bl	8001ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001106:	f000 f883 	bl	8001210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110a:	f000 f949 	bl	80013a0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800110e:	f000 f8f3 	bl	80012f8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001112:	f000 f91b 	bl	800134c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001116:	f000 f8c1 	bl	800129c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LED_OFF;
 800111a:	2201      	movs	r2, #1
 800111c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001120:	4834      	ldr	r0, [pc, #208]	; (80011f4 <main+0xf8>)
 8001122:	f001 fb31 	bl	8002788 <HAL_GPIO_WritePin>
  E220_SetMode(DeepSleep); // Режим сна
 8001126:	2003      	movs	r0, #3
 8001128:	f7ff fcd6 	bl	8000ad8 <E220_SetMode>
  E220_WaitReady(); // Ожидание включения
 800112c:	f7ff fcac 	bl	8000a88 <E220_WaitReady>
  LED_ON;
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001136:	482f      	ldr	r0, [pc, #188]	; (80011f4 <main+0xf8>)
 8001138:	f001 fb26 	bl	8002788 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800113c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001140:	f000 ffba 	bl	80020b8 <HAL_Delay>
  LED_OFF;
 8001144:	2201      	movs	r2, #1
 8001146:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800114a:	482a      	ldr	r0, [pc, #168]	; (80011f4 <main+0xf8>)
 800114c:	f001 fb1c 	bl	8002788 <HAL_GPIO_WritePin>
  /*Установка настроек*/
  /*Выбор устройства установка адресов и каналов всех используемых устройств*/

  AGRO_Init(AGRO_Device, Device_0);
 8001150:	4a29      	ldr	r2, [pc, #164]	; (80011f8 <main+0xfc>)
 8001152:	2300      	movs	r3, #0
 8001154:	ca07      	ldmia	r2, {r0, r1, r2}
 8001156:	f7ff ffb5 	bl	80010c4 <AGRO_Init>

  // Передатчик 1
  AGRO_Device.AddrDevice_1 = 0x0001;
 800115a:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <main+0xfc>)
 800115c:	2201      	movs	r2, #1
 800115e:	805a      	strh	r2, [r3, #2]
  AGRO_Device.ChDevice_1 = 0x02;
 8001160:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <main+0xfc>)
 8001162:	2202      	movs	r2, #2
 8001164:	725a      	strb	r2, [r3, #9]

  // Приемник 1
  AGRO_Device.AddrDevice_0 = 0x0003;
 8001166:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <main+0xfc>)
 8001168:	2203      	movs	r2, #3
 800116a:	801a      	strh	r2, [r3, #0]
  AGRO_Device.ChDevice_0 = 0x04;
 800116c:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <main+0xfc>)
 800116e:	2204      	movs	r2, #4
 8001170:	721a      	strb	r2, [r3, #8]

  E220_SetDefaultSettings(AGRO_Device.AddrDevice_0, AGRO_Device.ChDevice_0, DISABLE);
 8001172:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <main+0xfc>)
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	4a20      	ldr	r2, [pc, #128]	; (80011f8 <main+0xfc>)
 8001178:	7a11      	ldrb	r1, [r2, #8]
 800117a:	2200      	movs	r2, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff43 	bl	8001008 <E220_SetDefaultSettings>

  HAL_Delay(500);
 8001182:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001186:	f000 ff97 	bl	80020b8 <HAL_Delay>
  LED_ON;
 800118a:	2200      	movs	r2, #0
 800118c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001190:	4818      	ldr	r0, [pc, #96]	; (80011f4 <main+0xf8>)
 8001192:	f001 faf9 	bl	8002788 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001196:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800119a:	f000 ff8d 	bl	80020b8 <HAL_Delay>
  LED_OFF;
 800119e:	2201      	movs	r2, #1
 80011a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a4:	4813      	ldr	r0, [pc, #76]	; (80011f4 <main+0xf8>)
 80011a6:	f001 faef 	bl	8002788 <HAL_GPIO_WritePin>


  E220_SetMode(NORMAL);
 80011aa:	2000      	movs	r0, #0
 80011ac:	f7ff fc94 	bl	8000ad8 <E220_SetMode>




  HAL_UART_Receive_IT(&huart1, (uint8_t*)&recv, 5);
 80011b0:	2205      	movs	r2, #5
 80011b2:	4912      	ldr	r1, [pc, #72]	; (80011fc <main+0x100>)
 80011b4:	4812      	ldr	r0, [pc, #72]	; (8001200 <main+0x104>)
 80011b6:	f002 fdde 	bl	8003d76 <HAL_UART_Receive_IT>



#if SSD1306_DISPLAY

  SSD1306_Init();
 80011ba:	f000 fa0b 	bl	80015d4 <SSD1306_Init>
  SSD1306_GotoXY(0, 0);
 80011be:	2100      	movs	r1, #0
 80011c0:	2000      	movs	r0, #0
 80011c2:	f000 fb83 	bl	80018cc <SSD1306_GotoXY>
  sprintf(buf, "AGRO ROBOT");
 80011c6:	490f      	ldr	r1, [pc, #60]	; (8001204 <main+0x108>)
 80011c8:	480f      	ldr	r0, [pc, #60]	; (8001208 <main+0x10c>)
 80011ca:	f004 f889 	bl	80052e0 <siprintf>
  SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 80011ce:	2201      	movs	r2, #1
 80011d0:	490e      	ldr	r1, [pc, #56]	; (800120c <main+0x110>)
 80011d2:	480d      	ldr	r0, [pc, #52]	; (8001208 <main+0x10c>)
 80011d4:	f000 fc10 	bl	80019f8 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 80011d8:	f000 fac0 	bl	800175c <SSD1306_UpdateScreen>
  HAL_Delay(1000);
 80011dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011e0:	f000 ff6a 	bl	80020b8 <HAL_Delay>
//	  sprintf(buf, "...");
//	  SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
//	  SSD1306_UpdateScreen();
//	  HAL_Delay(200);
//  }
  SSD1306_Fill(SSD1306_COLOR_BLACK);
 80011e4:	2000      	movs	r0, #0
 80011e6:	f000 faeb 	bl	80017c0 <SSD1306_Fill>
  SSD1306_UpdateScreen();
 80011ea:	f000 fab7 	bl	800175c <SSD1306_UpdateScreen>
#endif

  uint16_t numPack = 100;
 80011ee:	2364      	movs	r3, #100	; 0x64
 80011f0:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <main+0xf6>
 80011f4:	40011000 	.word	0x40011000
 80011f8:	2000034c 	.word	0x2000034c
 80011fc:	20000230 	.word	0x20000230
 8001200:	200002bc 	.word	0x200002bc
 8001204:	08007598 	.word	0x08007598
 8001208:	20000210 	.word	0x20000210
 800120c:	20000000 	.word	0x20000000

08001210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b090      	sub	sp, #64	; 0x40
 8001214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001216:	f107 0318 	add.w	r3, r7, #24
 800121a:	2228      	movs	r2, #40	; 0x28
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f004 f8c1 	bl	80053a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001232:	2301      	movs	r3, #1
 8001234:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001236:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800123a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001240:	2301      	movs	r3, #1
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001244:	2302      	movs	r3, #2
 8001246:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001248:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800124c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800124e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001252:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001254:	f107 0318 	add.w	r3, r7, #24
 8001258:	4618      	mov	r0, r3
 800125a:	f002 f8a9 	bl	80033b0 <HAL_RCC_OscConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001264:	f000 f9b0 	bl	80015c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001268:	230f      	movs	r3, #15
 800126a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800126c:	2302      	movs	r3, #2
 800126e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001278:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800127a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800127e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2102      	movs	r1, #2
 8001284:	4618      	mov	r0, r3
 8001286:	f002 fb15 	bl	80038b4 <HAL_RCC_ClockConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001290:	f000 f99a 	bl	80015c8 <Error_Handler>
  }
}
 8001294:	bf00      	nop
 8001296:	3740      	adds	r7, #64	; 0x40
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <MX_I2C1_Init+0x50>)
 80012a2:	4a13      	ldr	r2, [pc, #76]	; (80012f0 <MX_I2C1_Init+0x54>)
 80012a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MX_I2C1_Init+0x50>)
 80012a8:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <MX_I2C1_Init+0x58>)
 80012aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <MX_I2C1_Init+0x50>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <MX_I2C1_Init+0x50>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MX_I2C1_Init+0x50>)
 80012ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <MX_I2C1_Init+0x50>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_I2C1_Init+0x50>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <MX_I2C1_Init+0x50>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_I2C1_Init+0x50>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <MX_I2C1_Init+0x50>)
 80012da:	f001 fa9f 	bl	800281c <HAL_I2C_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012e4:	f000 f970 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000268 	.word	0x20000268
 80012f0:	40005400 	.word	0x40005400
 80012f4:	000186a0 	.word	0x000186a0

080012f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <MX_USART1_UART_Init+0x4c>)
 80012fe:	4a12      	ldr	r2, [pc, #72]	; (8001348 <MX_USART1_UART_Init+0x50>)
 8001300:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <MX_USART1_UART_Init+0x4c>)
 8001304:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001308:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <MX_USART1_UART_Init+0x4c>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <MX_USART1_UART_Init+0x4c>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <MX_USART1_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <MX_USART1_UART_Init+0x4c>)
 800131e:	220c      	movs	r2, #12
 8001320:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <MX_USART1_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <MX_USART1_UART_Init+0x4c>)
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800132e:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_USART1_UART_Init+0x4c>)
 8001330:	f002 fc4e 	bl	8003bd0 <HAL_UART_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800133a:	f000 f945 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200002bc 	.word	0x200002bc
 8001348:	40013800 	.word	0x40013800

0800134c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <MX_USART3_UART_Init+0x4c>)
 8001352:	4a12      	ldr	r2, [pc, #72]	; (800139c <MX_USART3_UART_Init+0x50>)
 8001354:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <MX_USART3_UART_Init+0x4c>)
 8001358:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800135c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <MX_USART3_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <MX_USART3_UART_Init+0x4c>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <MX_USART3_UART_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <MX_USART3_UART_Init+0x4c>)
 8001372:	220c      	movs	r2, #12
 8001374:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001376:	4b08      	ldr	r3, [pc, #32]	; (8001398 <MX_USART3_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <MX_USART3_UART_Init+0x4c>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_USART3_UART_Init+0x4c>)
 8001384:	f002 fc24 	bl	8003bd0 <HAL_UART_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800138e:	f000 f91b 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000304 	.word	0x20000304
 800139c:	40004800 	.word	0x40004800

080013a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a6:	f107 0310 	add.w	r3, r7, #16
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b4:	4b57      	ldr	r3, [pc, #348]	; (8001514 <MX_GPIO_Init+0x174>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a56      	ldr	r2, [pc, #344]	; (8001514 <MX_GPIO_Init+0x174>)
 80013ba:	f043 0310 	orr.w	r3, r3, #16
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b54      	ldr	r3, [pc, #336]	; (8001514 <MX_GPIO_Init+0x174>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f003 0310 	and.w	r3, r3, #16
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013cc:	4b51      	ldr	r3, [pc, #324]	; (8001514 <MX_GPIO_Init+0x174>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	4a50      	ldr	r2, [pc, #320]	; (8001514 <MX_GPIO_Init+0x174>)
 80013d2:	f043 0320 	orr.w	r3, r3, #32
 80013d6:	6193      	str	r3, [r2, #24]
 80013d8:	4b4e      	ldr	r3, [pc, #312]	; (8001514 <MX_GPIO_Init+0x174>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f003 0320 	and.w	r3, r3, #32
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e4:	4b4b      	ldr	r3, [pc, #300]	; (8001514 <MX_GPIO_Init+0x174>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	4a4a      	ldr	r2, [pc, #296]	; (8001514 <MX_GPIO_Init+0x174>)
 80013ea:	f043 0304 	orr.w	r3, r3, #4
 80013ee:	6193      	str	r3, [r2, #24]
 80013f0:	4b48      	ldr	r3, [pc, #288]	; (8001514 <MX_GPIO_Init+0x174>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fc:	4b45      	ldr	r3, [pc, #276]	; (8001514 <MX_GPIO_Init+0x174>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a44      	ldr	r2, [pc, #272]	; (8001514 <MX_GPIO_Init+0x174>)
 8001402:	f043 0308 	orr.w	r3, r3, #8
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b42      	ldr	r3, [pc, #264]	; (8001514 <MX_GPIO_Init+0x174>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f003 0308 	and.w	r3, r3, #8
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800141a:	483f      	ldr	r0, [pc, #252]	; (8001518 <MX_GPIO_Init+0x178>)
 800141c:	f001 f9b4 	bl	8002788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|E220_M1_Pin, GPIO_PIN_RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001426:	483d      	ldr	r0, [pc, #244]	; (800151c <MX_GPIO_Init+0x17c>)
 8001428:	f001 f9ae 	bl	8002788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|E220_M0_Pin, GPIO_PIN_RESET);
 800142c:	2200      	movs	r2, #0
 800142e:	f248 0101 	movw	r1, #32769	; 0x8001
 8001432:	483b      	ldr	r0, [pc, #236]	; (8001520 <MX_GPIO_Init+0x180>)
 8001434:	f001 f9a8 	bl	8002788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001438:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800143c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143e:	2301      	movs	r3, #1
 8001440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2302      	movs	r3, #2
 8001448:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144a:	f107 0310 	add.w	r3, r7, #16
 800144e:	4619      	mov	r1, r3
 8001450:	4831      	ldr	r0, [pc, #196]	; (8001518 <MX_GPIO_Init+0x178>)
 8001452:	f001 f815 	bl	8002480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001456:	2310      	movs	r3, #16
 8001458:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145a:	2301      	movs	r3, #1
 800145c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2302      	movs	r3, #2
 8001464:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	f107 0310 	add.w	r3, r7, #16
 800146a:	4619      	mov	r1, r3
 800146c:	482b      	ldr	r0, [pc, #172]	; (800151c <MX_GPIO_Init+0x17c>)
 800146e:	f001 f807 	bl	8002480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001472:	2301      	movs	r3, #1
 8001474:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001476:	2301      	movs	r3, #1
 8001478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147e:	2302      	movs	r3, #2
 8001480:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001482:	f107 0310 	add.w	r3, r7, #16
 8001486:	4619      	mov	r1, r3
 8001488:	4825      	ldr	r0, [pc, #148]	; (8001520 <MX_GPIO_Init+0x180>)
 800148a:	f000 fff9 	bl	8002480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800148e:	2302      	movs	r3, #2
 8001490:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001496:	2301      	movs	r3, #1
 8001498:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149a:	f107 0310 	add.w	r3, r7, #16
 800149e:	4619      	mov	r1, r3
 80014a0:	481f      	ldr	r0, [pc, #124]	; (8001520 <MX_GPIO_Init+0x180>)
 80014a2:	f000 ffed 	bl	8002480 <HAL_GPIO_Init>

  /*Configure GPIO pin : E220_M0_Pin */
  GPIO_InitStruct.Pin = E220_M0_Pin;
 80014a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ac:	2301      	movs	r3, #1
 80014ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014b0:	2302      	movs	r3, #2
 80014b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2302      	movs	r3, #2
 80014b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(E220_M0_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	4619      	mov	r1, r3
 80014be:	4818      	ldr	r0, [pc, #96]	; (8001520 <MX_GPIO_Init+0x180>)
 80014c0:	f000 ffde 	bl	8002480 <HAL_GPIO_Init>

  /*Configure GPIO pin : E220_M1_Pin */
  GPIO_InitStruct.Pin = E220_M1_Pin;
 80014c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ca:	2301      	movs	r3, #1
 80014cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014ce:	2302      	movs	r3, #2
 80014d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2302      	movs	r3, #2
 80014d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(E220_M1_GPIO_Port, &GPIO_InitStruct);
 80014d6:	f107 0310 	add.w	r3, r7, #16
 80014da:	4619      	mov	r1, r3
 80014dc:	480f      	ldr	r0, [pc, #60]	; (800151c <MX_GPIO_Init+0x17c>)
 80014de:	f000 ffcf 	bl	8002480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014e8:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <MX_GPIO_Init+0x184>)
 80014ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f0:	f107 0310 	add.w	r3, r7, #16
 80014f4:	4619      	mov	r1, r3
 80014f6:	480a      	ldr	r0, [pc, #40]	; (8001520 <MX_GPIO_Init+0x180>)
 80014f8:	f000 ffc2 	bl	8002480 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80014fc:	2200      	movs	r2, #0
 80014fe:	2100      	movs	r1, #0
 8001500:	2017      	movs	r0, #23
 8001502:	f000 fed4 	bl	80022ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001506:	2017      	movs	r0, #23
 8001508:	f000 feed 	bl	80022e6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800150c:	bf00      	nop
 800150e:	3720      	adds	r7, #32
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40021000 	.word	0x40021000
 8001518:	40011000 	.word	0x40011000
 800151c:	40010800 	.word	0x40010800
 8001520:	40010c00 	.word	0x40010c00
 8001524:	10210000 	.word	0x10210000

08001528 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) //Приняли с радиоканала
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a08      	ldr	r2, [pc, #32]	; (8001554 <HAL_UART_RxCpltCallback+0x2c>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d104      	bne.n	8001542 <HAL_UART_RxCpltCallback+0x1a>
	{

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001538:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800153c:	4806      	ldr	r0, [pc, #24]	; (8001558 <HAL_UART_RxCpltCallback+0x30>)
 800153e:	f001 f93b 	bl	80027b8 <HAL_GPIO_TogglePin>
	else if(huart == &huart3) //Приняли с порта
	{

	}

	HAL_UART_Receive_IT(&huart1, (uint8_t*)&recv, 5);
 8001542:	2205      	movs	r2, #5
 8001544:	4905      	ldr	r1, [pc, #20]	; (800155c <HAL_UART_RxCpltCallback+0x34>)
 8001546:	4803      	ldr	r0, [pc, #12]	; (8001554 <HAL_UART_RxCpltCallback+0x2c>)
 8001548:	f002 fc15 	bl	8003d76 <HAL_UART_Receive_IT>
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	200002bc 	.word	0x200002bc
 8001558:	40011000 	.word	0x40011000
 800155c:	20000230 	.word	0x20000230

08001560 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	UART_ERROR = HAL_UART_GetError(&huart1);
 8001568:	4809      	ldr	r0, [pc, #36]	; (8001590 <HAL_UART_ErrorCallback+0x30>)
 800156a:	f002 fecf 	bl	800430c <HAL_UART_GetError>
 800156e:	4603      	mov	r3, r0
 8001570:	4a08      	ldr	r2, [pc, #32]	; (8001594 <HAL_UART_ErrorCallback+0x34>)
 8001572:	6013      	str	r3, [r2, #0]
	if(UART_ERROR == HAL_UART_ERROR_ORE)	// Ошибка переполнения
 8001574:	4b07      	ldr	r3, [pc, #28]	; (8001594 <HAL_UART_ErrorCallback+0x34>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b08      	cmp	r3, #8
 800157a:	d104      	bne.n	8001586 <HAL_UART_ErrorCallback+0x26>
	{
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&recv, 5);
 800157c:	2205      	movs	r2, #5
 800157e:	4906      	ldr	r1, [pc, #24]	; (8001598 <HAL_UART_ErrorCallback+0x38>)
 8001580:	4803      	ldr	r0, [pc, #12]	; (8001590 <HAL_UART_ErrorCallback+0x30>)
 8001582:	f002 fbf8 	bl	8003d76 <HAL_UART_Receive_IT>
	}

}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200002bc 	.word	0x200002bc
 8001594:	20000264 	.word	0x20000264
 8001598:	20000230 	.word	0x20000230

0800159c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_1)
 80015a6:	88fb      	ldrh	r3, [r7, #6]
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d006      	beq.n	80015ba <HAL_GPIO_EXTI_Callback+0x1e>
	{

	}
	else if(GPIO_Pin == GPIO_PIN_9)
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015b2:	d102      	bne.n	80015ba <HAL_GPIO_EXTI_Callback+0x1e>
	{
		AUX_Flag = true;
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <HAL_GPIO_EXTI_Callback+0x28>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
	}
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr
 80015c4:	2000020d 	.word	0x2000020d

080015c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015cc:	b672      	cpsid	i
}
 80015ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <Error_Handler+0x8>
	...

080015d4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80015da:	f000 fa33 	bl	8001a44 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80015de:	f644 6320 	movw	r3, #20000	; 0x4e20
 80015e2:	2201      	movs	r2, #1
 80015e4:	2178      	movs	r1, #120	; 0x78
 80015e6:	485b      	ldr	r0, [pc, #364]	; (8001754 <SSD1306_Init+0x180>)
 80015e8:	f001 fb5a 	bl	8002ca0 <HAL_I2C_IsDeviceReady>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	e0a9      	b.n	800174a <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80015f6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80015fa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015fc:	e002      	b.n	8001604 <SSD1306_Init+0x30>
		p--;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3b01      	subs	r3, #1
 8001602:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f9      	bne.n	80015fe <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800160a:	22ae      	movs	r2, #174	; 0xae
 800160c:	2100      	movs	r1, #0
 800160e:	2078      	movs	r0, #120	; 0x78
 8001610:	f000 fa92 	bl	8001b38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001614:	2220      	movs	r2, #32
 8001616:	2100      	movs	r1, #0
 8001618:	2078      	movs	r0, #120	; 0x78
 800161a:	f000 fa8d 	bl	8001b38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800161e:	2210      	movs	r2, #16
 8001620:	2100      	movs	r1, #0
 8001622:	2078      	movs	r0, #120	; 0x78
 8001624:	f000 fa88 	bl	8001b38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001628:	22b0      	movs	r2, #176	; 0xb0
 800162a:	2100      	movs	r1, #0
 800162c:	2078      	movs	r0, #120	; 0x78
 800162e:	f000 fa83 	bl	8001b38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001632:	22c8      	movs	r2, #200	; 0xc8
 8001634:	2100      	movs	r1, #0
 8001636:	2078      	movs	r0, #120	; 0x78
 8001638:	f000 fa7e 	bl	8001b38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00); //---set low column address
 800163c:	2200      	movs	r2, #0
 800163e:	2100      	movs	r1, #0
 8001640:	2078      	movs	r0, #120	; 0x78
 8001642:	f000 fa79 	bl	8001b38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001646:	2210      	movs	r2, #16
 8001648:	2100      	movs	r1, #0
 800164a:	2078      	movs	r0, #120	; 0x78
 800164c:	f000 fa74 	bl	8001b38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001650:	2240      	movs	r2, #64	; 0x40
 8001652:	2100      	movs	r1, #0
 8001654:	2078      	movs	r0, #120	; 0x78
 8001656:	f000 fa6f 	bl	8001b38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800165a:	2281      	movs	r2, #129	; 0x81
 800165c:	2100      	movs	r1, #0
 800165e:	2078      	movs	r0, #120	; 0x78
 8001660:	f000 fa6a 	bl	8001b38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xFF);
 8001664:	22ff      	movs	r2, #255	; 0xff
 8001666:	2100      	movs	r1, #0
 8001668:	2078      	movs	r0, #120	; 0x78
 800166a:	f000 fa65 	bl	8001b38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800166e:	22a1      	movs	r2, #161	; 0xa1
 8001670:	2100      	movs	r1, #0
 8001672:	2078      	movs	r0, #120	; 0x78
 8001674:	f000 fa60 	bl	8001b38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001678:	22a6      	movs	r2, #166	; 0xa6
 800167a:	2100      	movs	r1, #0
 800167c:	2078      	movs	r0, #120	; 0x78
 800167e:	f000 fa5b 	bl	8001b38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001682:	22a8      	movs	r2, #168	; 0xa8
 8001684:	2100      	movs	r1, #0
 8001686:	2078      	movs	r0, #120	; 0x78
 8001688:	f000 fa56 	bl	8001b38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x1F); //
 800168c:	221f      	movs	r2, #31
 800168e:	2100      	movs	r1, #0
 8001690:	2078      	movs	r0, #120	; 0x78
 8001692:	f000 fa51 	bl	8001b38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001696:	22a4      	movs	r2, #164	; 0xa4
 8001698:	2100      	movs	r1, #0
 800169a:	2078      	movs	r0, #120	; 0x78
 800169c:	f000 fa4c 	bl	8001b38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80016a0:	22d3      	movs	r2, #211	; 0xd3
 80016a2:	2100      	movs	r1, #0
 80016a4:	2078      	movs	r0, #120	; 0x78
 80016a6:	f000 fa47 	bl	8001b38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00); //-not offset
 80016aa:	2200      	movs	r2, #0
 80016ac:	2100      	movs	r1, #0
 80016ae:	2078      	movs	r0, #120	; 0x78
 80016b0:	f000 fa42 	bl	8001b38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80016b4:	22d5      	movs	r2, #213	; 0xd5
 80016b6:	2100      	movs	r1, #0
 80016b8:	2078      	movs	r0, #120	; 0x78
 80016ba:	f000 fa3d 	bl	8001b38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80016be:	22f0      	movs	r2, #240	; 0xf0
 80016c0:	2100      	movs	r1, #0
 80016c2:	2078      	movs	r0, #120	; 0x78
 80016c4:	f000 fa38 	bl	8001b38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80016c8:	22d9      	movs	r2, #217	; 0xd9
 80016ca:	2100      	movs	r1, #0
 80016cc:	2078      	movs	r0, #120	; 0x78
 80016ce:	f000 fa33 	bl	8001b38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x22); //
 80016d2:	2222      	movs	r2, #34	; 0x22
 80016d4:	2100      	movs	r1, #0
 80016d6:	2078      	movs	r0, #120	; 0x78
 80016d8:	f000 fa2e 	bl	8001b38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80016dc:	22da      	movs	r2, #218	; 0xda
 80016de:	2100      	movs	r1, #0
 80016e0:	2078      	movs	r0, #120	; 0x78
 80016e2:	f000 fa29 	bl	8001b38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x02);
 80016e6:	2202      	movs	r2, #2
 80016e8:	2100      	movs	r1, #0
 80016ea:	2078      	movs	r0, #120	; 0x78
 80016ec:	f000 fa24 	bl	8001b38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80016f0:	22db      	movs	r2, #219	; 0xdb
 80016f2:	2100      	movs	r1, #0
 80016f4:	2078      	movs	r0, #120	; 0x78
 80016f6:	f000 fa1f 	bl	8001b38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80016fa:	2220      	movs	r2, #32
 80016fc:	2100      	movs	r1, #0
 80016fe:	2078      	movs	r0, #120	; 0x78
 8001700:	f000 fa1a 	bl	8001b38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001704:	228d      	movs	r2, #141	; 0x8d
 8001706:	2100      	movs	r1, #0
 8001708:	2078      	movs	r0, #120	; 0x78
 800170a:	f000 fa15 	bl	8001b38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x14); //
 800170e:	2214      	movs	r2, #20
 8001710:	2100      	movs	r1, #0
 8001712:	2078      	movs	r0, #120	; 0x78
 8001714:	f000 fa10 	bl	8001b38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001718:	22af      	movs	r2, #175	; 0xaf
 800171a:	2100      	movs	r1, #0
 800171c:	2078      	movs	r0, #120	; 0x78
 800171e:	f000 fa0b 	bl	8001b38 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001722:	222e      	movs	r2, #46	; 0x2e
 8001724:	2100      	movs	r1, #0
 8001726:	2078      	movs	r0, #120	; 0x78
 8001728:	f000 fa06 	bl	8001b38 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800172c:	2000      	movs	r0, #0
 800172e:	f000 f847 	bl	80017c0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001732:	f000 f813 	bl	800175c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <SSD1306_Init+0x184>)
 8001738:	2200      	movs	r2, #0
 800173a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <SSD1306_Init+0x184>)
 800173e:	2200      	movs	r2, #0
 8001740:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <SSD1306_Init+0x184>)
 8001744:	2201      	movs	r2, #1
 8001746:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001748:	2301      	movs	r3, #1
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000268 	.word	0x20000268
 8001758:	200004fc 	.word	0x200004fc

0800175c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001762:	2300      	movs	r3, #0
 8001764:	71fb      	strb	r3, [r7, #7]
 8001766:	e021      	b.n	80017ac <SSD1306_UpdateScreen+0x50>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	3b50      	subs	r3, #80	; 0x50
 800176c:	b2db      	uxtb	r3, r3
 800176e:	461a      	mov	r2, r3
 8001770:	2100      	movs	r1, #0
 8001772:	2078      	movs	r0, #120	; 0x78
 8001774:	f000 f9e0 	bl	8001b38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001778:	2200      	movs	r2, #0
 800177a:	2100      	movs	r1, #0
 800177c:	2078      	movs	r0, #120	; 0x78
 800177e:	f000 f9db 	bl	8001b38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001782:	2210      	movs	r2, #16
 8001784:	2100      	movs	r1, #0
 8001786:	2078      	movs	r0, #120	; 0x78
 8001788:	f000 f9d6 	bl	8001b38 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800178c:	79fa      	ldrb	r2, [r7, #7]
 800178e:	4613      	mov	r3, r2
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	1a9b      	subs	r3, r3, r2
 8001794:	011a      	lsls	r2, r3, #4
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	4a08      	ldr	r2, [pc, #32]	; (80017bc <SSD1306_UpdateScreen+0x60>)
 800179a:	441a      	add	r2, r3
 800179c:	2369      	movs	r3, #105	; 0x69
 800179e:	2140      	movs	r1, #64	; 0x40
 80017a0:	2078      	movs	r0, #120	; 0x78
 80017a2:	f000 f963 	bl	8001a6c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	3301      	adds	r3, #1
 80017aa:	71fb      	strb	r3, [r7, #7]
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	2b07      	cmp	r3, #7
 80017b0:	d9da      	bls.n	8001768 <SSD1306_UpdateScreen+0xc>
	}
}
 80017b2:	bf00      	nop
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000358 	.word	0x20000358

080017c0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <SSD1306_Fill+0x14>
 80017d0:	2300      	movs	r3, #0
 80017d2:	e000      	b.n	80017d6 <SSD1306_Fill+0x16>
 80017d4:	23ff      	movs	r3, #255	; 0xff
 80017d6:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80017da:	4619      	mov	r1, r3
 80017dc:	4803      	ldr	r0, [pc, #12]	; (80017ec <SSD1306_Fill+0x2c>)
 80017de:	f003 fde2 	bl	80053a6 <memset>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000358 	.word	0x20000358

080017f0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80017f0:	b490      	push	{r4, r7}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	80fb      	strh	r3, [r7, #6]
 80017fa:	460b      	mov	r3, r1
 80017fc:	80bb      	strh	r3, [r7, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	70fb      	strb	r3, [r7, #3]
	if (
 8001802:	88fb      	ldrh	r3, [r7, #6]
 8001804:	2b68      	cmp	r3, #104	; 0x68
 8001806:	d858      	bhi.n	80018ba <SSD1306_DrawPixel+0xca>
		x >= SSD1306_WIDTH ||
 8001808:	88bb      	ldrh	r3, [r7, #4]
 800180a:	2b1f      	cmp	r3, #31
 800180c:	d855      	bhi.n	80018ba <SSD1306_DrawPixel+0xca>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800180e:	4b2d      	ldr	r3, [pc, #180]	; (80018c4 <SSD1306_DrawPixel+0xd4>)
 8001810:	791b      	ldrb	r3, [r3, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d006      	beq.n	8001824 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001816:	78fb      	ldrb	r3, [r7, #3]
 8001818:	2b00      	cmp	r3, #0
 800181a:	bf0c      	ite	eq
 800181c:	2301      	moveq	r3, #1
 800181e:	2300      	movne	r3, #0
 8001820:	b2db      	uxtb	r3, r3
 8001822:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d122      	bne.n	8001870 <SSD1306_DrawPixel+0x80>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800182a:	88fa      	ldrh	r2, [r7, #6]
 800182c:	88bb      	ldrh	r3, [r7, #4]
 800182e:	08db      	lsrs	r3, r3, #3
 8001830:	b298      	uxth	r0, r3
 8001832:	4601      	mov	r1, r0
 8001834:	460b      	mov	r3, r1
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	1a5b      	subs	r3, r3, r1
 800183a:	0119      	lsls	r1, r3, #4
 800183c:	1acb      	subs	r3, r1, r3
 800183e:	4413      	add	r3, r2
 8001840:	4a21      	ldr	r2, [pc, #132]	; (80018c8 <SSD1306_DrawPixel+0xd8>)
 8001842:	5cd3      	ldrb	r3, [r2, r3]
 8001844:	b25a      	sxtb	r2, r3
 8001846:	88bb      	ldrh	r3, [r7, #4]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	2101      	movs	r1, #1
 800184e:	fa01 f303 	lsl.w	r3, r1, r3
 8001852:	b25b      	sxtb	r3, r3
 8001854:	4313      	orrs	r3, r2
 8001856:	b25c      	sxtb	r4, r3
 8001858:	88fa      	ldrh	r2, [r7, #6]
 800185a:	4601      	mov	r1, r0
 800185c:	460b      	mov	r3, r1
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	1a5b      	subs	r3, r3, r1
 8001862:	0119      	lsls	r1, r3, #4
 8001864:	1acb      	subs	r3, r1, r3
 8001866:	4413      	add	r3, r2
 8001868:	b2e1      	uxtb	r1, r4
 800186a:	4a17      	ldr	r2, [pc, #92]	; (80018c8 <SSD1306_DrawPixel+0xd8>)
 800186c:	54d1      	strb	r1, [r2, r3]
 800186e:	e025      	b.n	80018bc <SSD1306_DrawPixel+0xcc>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001870:	88fa      	ldrh	r2, [r7, #6]
 8001872:	88bb      	ldrh	r3, [r7, #4]
 8001874:	08db      	lsrs	r3, r3, #3
 8001876:	b298      	uxth	r0, r3
 8001878:	4601      	mov	r1, r0
 800187a:	460b      	mov	r3, r1
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	1a5b      	subs	r3, r3, r1
 8001880:	0119      	lsls	r1, r3, #4
 8001882:	1acb      	subs	r3, r1, r3
 8001884:	4413      	add	r3, r2
 8001886:	4a10      	ldr	r2, [pc, #64]	; (80018c8 <SSD1306_DrawPixel+0xd8>)
 8001888:	5cd3      	ldrb	r3, [r2, r3]
 800188a:	b25a      	sxtb	r2, r3
 800188c:	88bb      	ldrh	r3, [r7, #4]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	2101      	movs	r1, #1
 8001894:	fa01 f303 	lsl.w	r3, r1, r3
 8001898:	b25b      	sxtb	r3, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	b25b      	sxtb	r3, r3
 800189e:	4013      	ands	r3, r2
 80018a0:	b25c      	sxtb	r4, r3
 80018a2:	88fa      	ldrh	r2, [r7, #6]
 80018a4:	4601      	mov	r1, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	1a5b      	subs	r3, r3, r1
 80018ac:	0119      	lsls	r1, r3, #4
 80018ae:	1acb      	subs	r3, r1, r3
 80018b0:	4413      	add	r3, r2
 80018b2:	b2e1      	uxtb	r1, r4
 80018b4:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <SSD1306_DrawPixel+0xd8>)
 80018b6:	54d1      	strb	r1, [r2, r3]
 80018b8:	e000      	b.n	80018bc <SSD1306_DrawPixel+0xcc>
		return;
 80018ba:	bf00      	nop
	}
}
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc90      	pop	{r4, r7}
 80018c2:	4770      	bx	lr
 80018c4:	200004fc 	.word	0x200004fc
 80018c8:	20000358 	.word	0x20000358

080018cc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	460a      	mov	r2, r1
 80018d6:	80fb      	strh	r3, [r7, #6]
 80018d8:	4613      	mov	r3, r2
 80018da:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80018dc:	4a05      	ldr	r2, [pc, #20]	; (80018f4 <SSD1306_GotoXY+0x28>)
 80018de:	88fb      	ldrh	r3, [r7, #6]
 80018e0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80018e2:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <SSD1306_GotoXY+0x28>)
 80018e4:	88bb      	ldrh	r3, [r7, #4]
 80018e6:	8053      	strh	r3, [r2, #2]
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	200004fc 	.word	0x200004fc

080018f8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	6039      	str	r1, [r7, #0]
 8001902:	71fb      	strb	r3, [r7, #7]
 8001904:	4613      	mov	r3, r2
 8001906:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001908:	4b3a      	ldr	r3, [pc, #232]	; (80019f4 <SSD1306_Putc+0xfc>)
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	4413      	add	r3, r2
	if (
 8001914:	2b68      	cmp	r3, #104	; 0x68
 8001916:	dc07      	bgt.n	8001928 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001918:	4b36      	ldr	r3, [pc, #216]	; (80019f4 <SSD1306_Putc+0xfc>)
 800191a:	885b      	ldrh	r3, [r3, #2]
 800191c:	461a      	mov	r2, r3
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	785b      	ldrb	r3, [r3, #1]
 8001922:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001924:	2b1f      	cmp	r3, #31
 8001926:	dd01      	ble.n	800192c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001928:	2300      	movs	r3, #0
 800192a:	e05e      	b.n	80019ea <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	e04b      	b.n	80019ca <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	3b20      	subs	r3, #32
 800193a:	6839      	ldr	r1, [r7, #0]
 800193c:	7849      	ldrb	r1, [r1, #1]
 800193e:	fb01 f303 	mul.w	r3, r1, r3
 8001942:	4619      	mov	r1, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	440b      	add	r3, r1
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4413      	add	r3, r2
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001950:	2300      	movs	r3, #0
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	e030      	b.n	80019b8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d010      	beq.n	8001988 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001966:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <SSD1306_Putc+0xfc>)
 8001968:	881a      	ldrh	r2, [r3, #0]
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	b29b      	uxth	r3, r3
 800196e:	4413      	add	r3, r2
 8001970:	b298      	uxth	r0, r3
 8001972:	4b20      	ldr	r3, [pc, #128]	; (80019f4 <SSD1306_Putc+0xfc>)
 8001974:	885a      	ldrh	r2, [r3, #2]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	b29b      	uxth	r3, r3
 800197a:	4413      	add	r3, r2
 800197c:	b29b      	uxth	r3, r3
 800197e:	79ba      	ldrb	r2, [r7, #6]
 8001980:	4619      	mov	r1, r3
 8001982:	f7ff ff35 	bl	80017f0 <SSD1306_DrawPixel>
 8001986:	e014      	b.n	80019b2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001988:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <SSD1306_Putc+0xfc>)
 800198a:	881a      	ldrh	r2, [r3, #0]
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	b29b      	uxth	r3, r3
 8001990:	4413      	add	r3, r2
 8001992:	b298      	uxth	r0, r3
 8001994:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <SSD1306_Putc+0xfc>)
 8001996:	885a      	ldrh	r2, [r3, #2]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	b29b      	uxth	r3, r3
 800199c:	4413      	add	r3, r2
 800199e:	b299      	uxth	r1, r3
 80019a0:	79bb      	ldrb	r3, [r7, #6]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	bf0c      	ite	eq
 80019a6:	2301      	moveq	r3, #1
 80019a8:	2300      	movne	r3, #0
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	461a      	mov	r2, r3
 80019ae:	f7ff ff1f 	bl	80017f0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	3301      	adds	r3, #1
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d3c8      	bcc.n	8001956 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	3301      	adds	r3, #1
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	785b      	ldrb	r3, [r3, #1]
 80019ce:	461a      	mov	r2, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d3ad      	bcc.n	8001932 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <SSD1306_Putc+0xfc>)
 80019d8:	881a      	ldrh	r2, [r3, #0]
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	4413      	add	r3, r2
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <SSD1306_Putc+0xfc>)
 80019e6:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80019e8:	79fb      	ldrb	r3, [r7, #7]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	200004fc 	.word	0x200004fc

080019f8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	4613      	mov	r3, r2
 8001a04:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001a06:	e012      	b.n	8001a2e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	79fa      	ldrb	r2, [r7, #7]
 8001a0e:	68b9      	ldr	r1, [r7, #8]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff71 	bl	80018f8 <SSD1306_Putc>
 8001a16:	4603      	mov	r3, r0
 8001a18:	461a      	mov	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d002      	beq.n	8001a28 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	e008      	b.n	8001a3a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1e8      	bne.n	8001a08 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	781b      	ldrb	r3, [r3, #0]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001a4a:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <ssd1306_I2C_Init+0x24>)
 8001a4c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a4e:	e002      	b.n	8001a56 <ssd1306_I2C_Init+0x12>
		p--;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1f9      	bne.n	8001a50 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001a5c:	bf00      	nop
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	0003d090 	.word	0x0003d090

08001a6c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001a6c:	b590      	push	{r4, r7, lr}
 8001a6e:	b0c7      	sub	sp, #284	; 0x11c
 8001a70:	af02      	add	r7, sp, #8
 8001a72:	4604      	mov	r4, r0
 8001a74:	4608      	mov	r0, r1
 8001a76:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001a7a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001a7e:	600a      	str	r2, [r1, #0]
 8001a80:	4619      	mov	r1, r3
 8001a82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a86:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001a8a:	4622      	mov	r2, r4
 8001a8c:	701a      	strb	r2, [r3, #0]
 8001a8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a92:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001a96:	4602      	mov	r2, r0
 8001a98:	701a      	strb	r2, [r3, #0]
 8001a9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a9e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001aa2:	460a      	mov	r2, r1
 8001aa4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001aa6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001aaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001aae:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001ab2:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001ab6:	7812      	ldrb	r2, [r2, #0]
 8001ab8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001ac0:	e015      	b.n	8001aee <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001ac2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ac6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001aca:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	441a      	add	r2, r3
 8001ad2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	7811      	ldrb	r1, [r2, #0]
 8001ada:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001ade:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001ae2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001ae4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ae8:	3301      	adds	r3, #1
 8001aea:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001aee:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001af8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001afc:	8812      	ldrh	r2, [r2, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d8df      	bhi.n	8001ac2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001b02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b06:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	b299      	uxth	r1, r3
 8001b0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	f107 020c 	add.w	r2, r7, #12
 8001b20:	200a      	movs	r0, #10
 8001b22:	9000      	str	r0, [sp, #0]
 8001b24:	4803      	ldr	r0, [pc, #12]	; (8001b34 <ssd1306_I2C_WriteMulti+0xc8>)
 8001b26:	f000 ffbd 	bl	8002aa4 <HAL_I2C_Master_Transmit>
}
 8001b2a:	bf00      	nop
 8001b2c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd90      	pop	{r4, r7, pc}
 8001b34:	20000268 	.word	0x20000268

08001b38 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af02      	add	r7, sp, #8
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
 8001b42:	460b      	mov	r3, r1
 8001b44:	71bb      	strb	r3, [r7, #6]
 8001b46:	4613      	mov	r3, r2
 8001b48:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001b4a:	79bb      	ldrb	r3, [r7, #6]
 8001b4c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001b4e:	797b      	ldrb	r3, [r7, #5]
 8001b50:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	b299      	uxth	r1, r3
 8001b56:	f107 020c 	add.w	r2, r7, #12
 8001b5a:	230a      	movs	r3, #10
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	2302      	movs	r3, #2
 8001b60:	4803      	ldr	r0, [pc, #12]	; (8001b70 <ssd1306_I2C_Write+0x38>)
 8001b62:	f000 ff9f 	bl	8002aa4 <HAL_I2C_Master_Transmit>
}
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000268 	.word	0x20000268

08001b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <HAL_MspInit+0x5c>)
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	4a14      	ldr	r2, [pc, #80]	; (8001bd0 <HAL_MspInit+0x5c>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6193      	str	r3, [r2, #24]
 8001b86:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_MspInit+0x5c>)
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <HAL_MspInit+0x5c>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <HAL_MspInit+0x5c>)
 8001b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	61d3      	str	r3, [r2, #28]
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <HAL_MspInit+0x5c>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <HAL_MspInit+0x60>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <HAL_MspInit+0x60>)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40010000 	.word	0x40010000

08001bd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0310 	add.w	r3, r7, #16
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a15      	ldr	r2, [pc, #84]	; (8001c48 <HAL_I2C_MspInit+0x70>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d123      	bne.n	8001c40 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf8:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <HAL_I2C_MspInit+0x74>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	4a13      	ldr	r2, [pc, #76]	; (8001c4c <HAL_I2C_MspInit+0x74>)
 8001bfe:	f043 0308 	orr.w	r3, r3, #8
 8001c02:	6193      	str	r3, [r2, #24]
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <HAL_I2C_MspInit+0x74>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c10:	23c0      	movs	r3, #192	; 0xc0
 8001c12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c14:	2312      	movs	r3, #18
 8001c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1c:	f107 0310 	add.w	r3, r7, #16
 8001c20:	4619      	mov	r1, r3
 8001c22:	480b      	ldr	r0, [pc, #44]	; (8001c50 <HAL_I2C_MspInit+0x78>)
 8001c24:	f000 fc2c 	bl	8002480 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <HAL_I2C_MspInit+0x74>)
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	4a07      	ldr	r2, [pc, #28]	; (8001c4c <HAL_I2C_MspInit+0x74>)
 8001c2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c32:	61d3      	str	r3, [r2, #28]
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <HAL_I2C_MspInit+0x74>)
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c40:	bf00      	nop
 8001c42:	3720      	adds	r7, #32
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40005400 	.word	0x40005400
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40010c00 	.word	0x40010c00

08001c54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08a      	sub	sp, #40	; 0x28
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	f107 0318 	add.w	r3, r7, #24
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a40      	ldr	r2, [pc, #256]	; (8001d70 <HAL_UART_MspInit+0x11c>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d13a      	bne.n	8001cea <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c74:	4b3f      	ldr	r3, [pc, #252]	; (8001d74 <HAL_UART_MspInit+0x120>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	4a3e      	ldr	r2, [pc, #248]	; (8001d74 <HAL_UART_MspInit+0x120>)
 8001c7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c7e:	6193      	str	r3, [r2, #24]
 8001c80:	4b3c      	ldr	r3, [pc, #240]	; (8001d74 <HAL_UART_MspInit+0x120>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8c:	4b39      	ldr	r3, [pc, #228]	; (8001d74 <HAL_UART_MspInit+0x120>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	4a38      	ldr	r2, [pc, #224]	; (8001d74 <HAL_UART_MspInit+0x120>)
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	6193      	str	r3, [r2, #24]
 8001c98:	4b36      	ldr	r3, [pc, #216]	; (8001d74 <HAL_UART_MspInit+0x120>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ca4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001caa:	2302      	movs	r3, #2
 8001cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb2:	f107 0318 	add.w	r3, r7, #24
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	482f      	ldr	r0, [pc, #188]	; (8001d78 <HAL_UART_MspInit+0x124>)
 8001cba:	f000 fbe1 	bl	8002480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ccc:	f107 0318 	add.w	r3, r7, #24
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4829      	ldr	r0, [pc, #164]	; (8001d78 <HAL_UART_MspInit+0x124>)
 8001cd4:	f000 fbd4 	bl	8002480 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2100      	movs	r1, #0
 8001cdc:	2025      	movs	r0, #37	; 0x25
 8001cde:	f000 fae6 	bl	80022ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ce2:	2025      	movs	r0, #37	; 0x25
 8001ce4:	f000 faff 	bl	80022e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ce8:	e03e      	b.n	8001d68 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART3)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a23      	ldr	r2, [pc, #140]	; (8001d7c <HAL_UART_MspInit+0x128>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d139      	bne.n	8001d68 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cf4:	4b1f      	ldr	r3, [pc, #124]	; (8001d74 <HAL_UART_MspInit+0x120>)
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	4a1e      	ldr	r2, [pc, #120]	; (8001d74 <HAL_UART_MspInit+0x120>)
 8001cfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cfe:	61d3      	str	r3, [r2, #28]
 8001d00:	4b1c      	ldr	r3, [pc, #112]	; (8001d74 <HAL_UART_MspInit+0x120>)
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HAL_UART_MspInit+0x120>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	4a18      	ldr	r2, [pc, #96]	; (8001d74 <HAL_UART_MspInit+0x120>)
 8001d12:	f043 0308 	orr.w	r3, r3, #8
 8001d16:	6193      	str	r3, [r2, #24]
 8001d18:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <HAL_UART_MspInit+0x120>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d32:	f107 0318 	add.w	r3, r7, #24
 8001d36:	4619      	mov	r1, r3
 8001d38:	4811      	ldr	r0, [pc, #68]	; (8001d80 <HAL_UART_MspInit+0x12c>)
 8001d3a:	f000 fba1 	bl	8002480 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4c:	f107 0318 	add.w	r3, r7, #24
 8001d50:	4619      	mov	r1, r3
 8001d52:	480b      	ldr	r0, [pc, #44]	; (8001d80 <HAL_UART_MspInit+0x12c>)
 8001d54:	f000 fb94 	bl	8002480 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	2027      	movs	r0, #39	; 0x27
 8001d5e:	f000 faa6 	bl	80022ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d62:	2027      	movs	r0, #39	; 0x27
 8001d64:	f000 fabf 	bl	80022e6 <HAL_NVIC_EnableIRQ>
}
 8001d68:	bf00      	nop
 8001d6a:	3728      	adds	r7, #40	; 0x28
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40013800 	.word	0x40013800
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40010800 	.word	0x40010800
 8001d7c:	40004800 	.word	0x40004800
 8001d80:	40010c00 	.word	0x40010c00

08001d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <NMI_Handler+0x4>

08001d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d8e:	e7fe      	b.n	8001d8e <HardFault_Handler+0x4>

08001d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d94:	e7fe      	b.n	8001d94 <MemManage_Handler+0x4>

08001d96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d9a:	e7fe      	b.n	8001d9a <BusFault_Handler+0x4>

08001d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da0:	e7fe      	b.n	8001da0 <UsageFault_Handler+0x4>

08001da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr

08001dae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr

08001dba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr
	...

08001dc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	count_sys++;
 8001dcc:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <SysTick_Handler+0x18>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	4a03      	ldr	r2, [pc, #12]	; (8001de0 <SysTick_Handler+0x18>)
 8001dd4:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dd6:	f000 f953 	bl	8002080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000504 	.word	0x20000504

08001de4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001de8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001dec:	f000 fcfe 	bl	80027ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001df8:	4802      	ldr	r0, [pc, #8]	; (8001e04 <USART1_IRQHandler+0x10>)
 8001dfa:	f001 ffe1 	bl	8003dc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	200002bc 	.word	0x200002bc

08001e08 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e0c:	4802      	ldr	r0, [pc, #8]	; (8001e18 <USART3_IRQHandler+0x10>)
 8001e0e:	f001 ffd7 	bl	8003dc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000304 	.word	0x20000304

08001e1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
	return 1;
 8001e20:	2301      	movs	r3, #1
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr

08001e2a <_kill>:

int _kill(int pid, int sig)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e34:	f003 fb0a 	bl	800544c <__errno>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2216      	movs	r2, #22
 8001e3c:	601a      	str	r2, [r3, #0]
	return -1;
 8001e3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <_exit>:

void _exit (int status)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e52:	f04f 31ff 	mov.w	r1, #4294967295
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff ffe7 	bl	8001e2a <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e5c:	e7fe      	b.n	8001e5c <_exit+0x12>

08001e5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	60f8      	str	r0, [r7, #12]
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	e00a      	b.n	8001e86 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e70:	f3af 8000 	nop.w
 8001e74:	4601      	mov	r1, r0
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	1c5a      	adds	r2, r3, #1
 8001e7a:	60ba      	str	r2, [r7, #8]
 8001e7c:	b2ca      	uxtb	r2, r1
 8001e7e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	3301      	adds	r3, #1
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	dbf0      	blt.n	8001e70 <_read+0x12>
	}

return len;
 8001e8e:	687b      	ldr	r3, [r7, #4]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	e009      	b.n	8001ebe <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	1c5a      	adds	r2, r3, #1
 8001eae:	60ba      	str	r2, [r7, #8]
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	617b      	str	r3, [r7, #20]
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	dbf1      	blt.n	8001eaa <_write+0x12>
	}
	return len;
 8001ec6:	687b      	ldr	r3, [r7, #4]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <_close>:

int _close(int file)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	return -1;
 8001ed8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr

08001ee6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ef6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <_isatty>:

int _isatty(int file)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	return 1;
 8001f0c:	2301      	movs	r3, #1
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
	return 0;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f38:	4a14      	ldr	r2, [pc, #80]	; (8001f8c <_sbrk+0x5c>)
 8001f3a:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <_sbrk+0x60>)
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f44:	4b13      	ldr	r3, [pc, #76]	; (8001f94 <_sbrk+0x64>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d102      	bne.n	8001f52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <_sbrk+0x64>)
 8001f4e:	4a12      	ldr	r2, [pc, #72]	; (8001f98 <_sbrk+0x68>)
 8001f50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <_sbrk+0x64>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d207      	bcs.n	8001f70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f60:	f003 fa74 	bl	800544c <__errno>
 8001f64:	4603      	mov	r3, r0
 8001f66:	220c      	movs	r2, #12
 8001f68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6e:	e009      	b.n	8001f84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f70:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <_sbrk+0x64>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f76:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <_sbrk+0x64>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	4a05      	ldr	r2, [pc, #20]	; (8001f94 <_sbrk+0x64>)
 8001f80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f82:	68fb      	ldr	r3, [r7, #12]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20005000 	.word	0x20005000
 8001f90:	00000400 	.word	0x00000400
 8001f94:	20000508 	.word	0x20000508
 8001f98:	20000660 	.word	0x20000660

08001f9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr

08001fa8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fa8:	f7ff fff8 	bl	8001f9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fac:	480b      	ldr	r0, [pc, #44]	; (8001fdc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001fae:	490c      	ldr	r1, [pc, #48]	; (8001fe0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001fb0:	4a0c      	ldr	r2, [pc, #48]	; (8001fe4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb4:	e002      	b.n	8001fbc <LoopCopyDataInit>

08001fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fba:	3304      	adds	r3, #4

08001fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc0:	d3f9      	bcc.n	8001fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fc2:	4a09      	ldr	r2, [pc, #36]	; (8001fe8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001fc4:	4c09      	ldr	r4, [pc, #36]	; (8001fec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc8:	e001      	b.n	8001fce <LoopFillZerobss>

08001fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fcc:	3204      	adds	r2, #4

08001fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd0:	d3fb      	bcc.n	8001fca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fd2:	f003 fa41 	bl	8005458 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fd6:	f7ff f891 	bl	80010fc <main>
  bx lr
 8001fda:	4770      	bx	lr
  ldr r0, =_sdata
 8001fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001fe4:	080080b4 	.word	0x080080b4
  ldr r2, =_sbss
 8001fe8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001fec:	2000065c 	.word	0x2000065c

08001ff0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ff0:	e7fe      	b.n	8001ff0 <ADC1_2_IRQHandler>
	...

08001ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ff8:	4b08      	ldr	r3, [pc, #32]	; (800201c <HAL_Init+0x28>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a07      	ldr	r2, [pc, #28]	; (800201c <HAL_Init+0x28>)
 8001ffe:	f043 0310 	orr.w	r3, r3, #16
 8002002:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002004:	2003      	movs	r0, #3
 8002006:	f000 f947 	bl	8002298 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800200a:	200f      	movs	r0, #15
 800200c:	f000 f808 	bl	8002020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002010:	f7ff fdb0 	bl	8001b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40022000 	.word	0x40022000

08002020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002028:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_InitTick+0x54>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b12      	ldr	r3, [pc, #72]	; (8002078 <HAL_InitTick+0x58>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	4619      	mov	r1, r3
 8002032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002036:	fbb3 f3f1 	udiv	r3, r3, r1
 800203a:	fbb2 f3f3 	udiv	r3, r2, r3
 800203e:	4618      	mov	r0, r3
 8002040:	f000 f95f 	bl	8002302 <HAL_SYSTICK_Config>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e00e      	b.n	800206c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b0f      	cmp	r3, #15
 8002052:	d80a      	bhi.n	800206a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002054:	2200      	movs	r2, #0
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	f04f 30ff 	mov.w	r0, #4294967295
 800205c:	f000 f927 	bl	80022ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002060:	4a06      	ldr	r2, [pc, #24]	; (800207c <HAL_InitTick+0x5c>)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
 8002068:	e000      	b.n	800206c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
}
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000008 	.word	0x20000008
 8002078:	20000010 	.word	0x20000010
 800207c:	2000000c 	.word	0x2000000c

08002080 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <HAL_IncTick+0x1c>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <HAL_IncTick+0x20>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4413      	add	r3, r2
 8002090:	4a03      	ldr	r2, [pc, #12]	; (80020a0 <HAL_IncTick+0x20>)
 8002092:	6013      	str	r3, [r2, #0]
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr
 800209c:	20000010 	.word	0x20000010
 80020a0:	2000050c 	.word	0x2000050c

080020a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return uwTick;
 80020a8:	4b02      	ldr	r3, [pc, #8]	; (80020b4 <HAL_GetTick+0x10>)
 80020aa:	681b      	ldr	r3, [r3, #0]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr
 80020b4:	2000050c 	.word	0x2000050c

080020b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020c0:	f7ff fff0 	bl	80020a4 <HAL_GetTick>
 80020c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d0:	d005      	beq.n	80020de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020d2:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <HAL_Delay+0x44>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4413      	add	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020de:	bf00      	nop
 80020e0:	f7ff ffe0 	bl	80020a4 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d8f7      	bhi.n	80020e0 <HAL_Delay+0x28>
  {
  }
}
 80020f0:	bf00      	nop
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000010 	.word	0x20000010

08002100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <__NVIC_SetPriorityGrouping+0x44>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800211c:	4013      	ands	r3, r2
 800211e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002128:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800212c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002132:	4a04      	ldr	r2, [pc, #16]	; (8002144 <__NVIC_SetPriorityGrouping+0x44>)
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	60d3      	str	r3, [r2, #12]
}
 8002138:	bf00      	nop
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800214c:	4b04      	ldr	r3, [pc, #16]	; (8002160 <__NVIC_GetPriorityGrouping+0x18>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	0a1b      	lsrs	r3, r3, #8
 8002152:	f003 0307 	and.w	r3, r3, #7
}
 8002156:	4618      	mov	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002172:	2b00      	cmp	r3, #0
 8002174:	db0b      	blt.n	800218e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	f003 021f 	and.w	r2, r3, #31
 800217c:	4906      	ldr	r1, [pc, #24]	; (8002198 <__NVIC_EnableIRQ+0x34>)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	095b      	lsrs	r3, r3, #5
 8002184:	2001      	movs	r0, #1
 8002186:	fa00 f202 	lsl.w	r2, r0, r2
 800218a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	e000e100 	.word	0xe000e100

0800219c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	6039      	str	r1, [r7, #0]
 80021a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	db0a      	blt.n	80021c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	490c      	ldr	r1, [pc, #48]	; (80021e8 <__NVIC_SetPriority+0x4c>)
 80021b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ba:	0112      	lsls	r2, r2, #4
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	440b      	add	r3, r1
 80021c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021c4:	e00a      	b.n	80021dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	4908      	ldr	r1, [pc, #32]	; (80021ec <__NVIC_SetPriority+0x50>)
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	3b04      	subs	r3, #4
 80021d4:	0112      	lsls	r2, r2, #4
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	440b      	add	r3, r1
 80021da:	761a      	strb	r2, [r3, #24]
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000e100 	.word	0xe000e100
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b089      	sub	sp, #36	; 0x24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f1c3 0307 	rsb	r3, r3, #7
 800220a:	2b04      	cmp	r3, #4
 800220c:	bf28      	it	cs
 800220e:	2304      	movcs	r3, #4
 8002210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3304      	adds	r3, #4
 8002216:	2b06      	cmp	r3, #6
 8002218:	d902      	bls.n	8002220 <NVIC_EncodePriority+0x30>
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	3b03      	subs	r3, #3
 800221e:	e000      	b.n	8002222 <NVIC_EncodePriority+0x32>
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002224:	f04f 32ff 	mov.w	r2, #4294967295
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43da      	mvns	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	401a      	ands	r2, r3
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002238:	f04f 31ff 	mov.w	r1, #4294967295
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	fa01 f303 	lsl.w	r3, r1, r3
 8002242:	43d9      	mvns	r1, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002248:	4313      	orrs	r3, r2
         );
}
 800224a:	4618      	mov	r0, r3
 800224c:	3724      	adds	r7, #36	; 0x24
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr

08002254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3b01      	subs	r3, #1
 8002260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002264:	d301      	bcc.n	800226a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002266:	2301      	movs	r3, #1
 8002268:	e00f      	b.n	800228a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800226a:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <SysTick_Config+0x40>)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3b01      	subs	r3, #1
 8002270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002272:	210f      	movs	r1, #15
 8002274:	f04f 30ff 	mov.w	r0, #4294967295
 8002278:	f7ff ff90 	bl	800219c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <SysTick_Config+0x40>)
 800227e:	2200      	movs	r2, #0
 8002280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002282:	4b04      	ldr	r3, [pc, #16]	; (8002294 <SysTick_Config+0x40>)
 8002284:	2207      	movs	r2, #7
 8002286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	e000e010 	.word	0xe000e010

08002298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff ff2d 	bl	8002100 <__NVIC_SetPriorityGrouping>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b086      	sub	sp, #24
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	4603      	mov	r3, r0
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	607a      	str	r2, [r7, #4]
 80022ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022c0:	f7ff ff42 	bl	8002148 <__NVIC_GetPriorityGrouping>
 80022c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68b9      	ldr	r1, [r7, #8]
 80022ca:	6978      	ldr	r0, [r7, #20]
 80022cc:	f7ff ff90 	bl	80021f0 <NVIC_EncodePriority>
 80022d0:	4602      	mov	r2, r0
 80022d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022d6:	4611      	mov	r1, r2
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff ff5f 	bl	800219c <__NVIC_SetPriority>
}
 80022de:	bf00      	nop
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	4603      	mov	r3, r0
 80022ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff35 	bl	8002164 <__NVIC_EnableIRQ>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff ffa2 	bl	8002254 <SysTick_Config>
 8002310:	4603      	mov	r3, r0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800231a:	b480      	push	{r7}
 800231c:	b085      	sub	sp, #20
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d008      	beq.n	8002344 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2204      	movs	r2, #4
 8002336:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e020      	b.n	8002386 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 020e 	bic.w	r2, r2, #14
 8002352:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0201 	bic.w	r2, r2, #1
 8002362:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236c:	2101      	movs	r1, #1
 800236e:	fa01 f202 	lsl.w	r2, r1, r2
 8002372:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002384:	7bfb      	ldrb	r3, [r7, #15]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr

08002390 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d005      	beq.n	80023b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2204      	movs	r2, #4
 80023ac:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	73fb      	strb	r3, [r7, #15]
 80023b2:	e051      	b.n	8002458 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 020e 	bic.w	r2, r2, #14
 80023c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0201 	bic.w	r2, r2, #1
 80023d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a22      	ldr	r2, [pc, #136]	; (8002464 <HAL_DMA_Abort_IT+0xd4>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d029      	beq.n	8002432 <HAL_DMA_Abort_IT+0xa2>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a21      	ldr	r2, [pc, #132]	; (8002468 <HAL_DMA_Abort_IT+0xd8>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d022      	beq.n	800242e <HAL_DMA_Abort_IT+0x9e>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a1f      	ldr	r2, [pc, #124]	; (800246c <HAL_DMA_Abort_IT+0xdc>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d01a      	beq.n	8002428 <HAL_DMA_Abort_IT+0x98>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a1e      	ldr	r2, [pc, #120]	; (8002470 <HAL_DMA_Abort_IT+0xe0>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d012      	beq.n	8002422 <HAL_DMA_Abort_IT+0x92>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a1c      	ldr	r2, [pc, #112]	; (8002474 <HAL_DMA_Abort_IT+0xe4>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00a      	beq.n	800241c <HAL_DMA_Abort_IT+0x8c>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a1b      	ldr	r2, [pc, #108]	; (8002478 <HAL_DMA_Abort_IT+0xe8>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d102      	bne.n	8002416 <HAL_DMA_Abort_IT+0x86>
 8002410:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002414:	e00e      	b.n	8002434 <HAL_DMA_Abort_IT+0xa4>
 8002416:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800241a:	e00b      	b.n	8002434 <HAL_DMA_Abort_IT+0xa4>
 800241c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002420:	e008      	b.n	8002434 <HAL_DMA_Abort_IT+0xa4>
 8002422:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002426:	e005      	b.n	8002434 <HAL_DMA_Abort_IT+0xa4>
 8002428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800242c:	e002      	b.n	8002434 <HAL_DMA_Abort_IT+0xa4>
 800242e:	2310      	movs	r3, #16
 8002430:	e000      	b.n	8002434 <HAL_DMA_Abort_IT+0xa4>
 8002432:	2301      	movs	r3, #1
 8002434:	4a11      	ldr	r2, [pc, #68]	; (800247c <HAL_DMA_Abort_IT+0xec>)
 8002436:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	4798      	blx	r3
    } 
  }
  return status;
 8002458:	7bfb      	ldrb	r3, [r7, #15]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40020008 	.word	0x40020008
 8002468:	4002001c 	.word	0x4002001c
 800246c:	40020030 	.word	0x40020030
 8002470:	40020044 	.word	0x40020044
 8002474:	40020058 	.word	0x40020058
 8002478:	4002006c 	.word	0x4002006c
 800247c:	40020000 	.word	0x40020000

08002480 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002480:	b480      	push	{r7}
 8002482:	b08b      	sub	sp, #44	; 0x2c
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800248a:	2300      	movs	r3, #0
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800248e:	2300      	movs	r3, #0
 8002490:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002492:	e169      	b.n	8002768 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002494:	2201      	movs	r2, #1
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	69fa      	ldr	r2, [r7, #28]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	f040 8158 	bne.w	8002762 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	4a9a      	ldr	r2, [pc, #616]	; (8002720 <HAL_GPIO_Init+0x2a0>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d05e      	beq.n	800257a <HAL_GPIO_Init+0xfa>
 80024bc:	4a98      	ldr	r2, [pc, #608]	; (8002720 <HAL_GPIO_Init+0x2a0>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d875      	bhi.n	80025ae <HAL_GPIO_Init+0x12e>
 80024c2:	4a98      	ldr	r2, [pc, #608]	; (8002724 <HAL_GPIO_Init+0x2a4>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d058      	beq.n	800257a <HAL_GPIO_Init+0xfa>
 80024c8:	4a96      	ldr	r2, [pc, #600]	; (8002724 <HAL_GPIO_Init+0x2a4>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d86f      	bhi.n	80025ae <HAL_GPIO_Init+0x12e>
 80024ce:	4a96      	ldr	r2, [pc, #600]	; (8002728 <HAL_GPIO_Init+0x2a8>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d052      	beq.n	800257a <HAL_GPIO_Init+0xfa>
 80024d4:	4a94      	ldr	r2, [pc, #592]	; (8002728 <HAL_GPIO_Init+0x2a8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d869      	bhi.n	80025ae <HAL_GPIO_Init+0x12e>
 80024da:	4a94      	ldr	r2, [pc, #592]	; (800272c <HAL_GPIO_Init+0x2ac>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d04c      	beq.n	800257a <HAL_GPIO_Init+0xfa>
 80024e0:	4a92      	ldr	r2, [pc, #584]	; (800272c <HAL_GPIO_Init+0x2ac>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d863      	bhi.n	80025ae <HAL_GPIO_Init+0x12e>
 80024e6:	4a92      	ldr	r2, [pc, #584]	; (8002730 <HAL_GPIO_Init+0x2b0>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d046      	beq.n	800257a <HAL_GPIO_Init+0xfa>
 80024ec:	4a90      	ldr	r2, [pc, #576]	; (8002730 <HAL_GPIO_Init+0x2b0>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d85d      	bhi.n	80025ae <HAL_GPIO_Init+0x12e>
 80024f2:	2b12      	cmp	r3, #18
 80024f4:	d82a      	bhi.n	800254c <HAL_GPIO_Init+0xcc>
 80024f6:	2b12      	cmp	r3, #18
 80024f8:	d859      	bhi.n	80025ae <HAL_GPIO_Init+0x12e>
 80024fa:	a201      	add	r2, pc, #4	; (adr r2, 8002500 <HAL_GPIO_Init+0x80>)
 80024fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002500:	0800257b 	.word	0x0800257b
 8002504:	08002555 	.word	0x08002555
 8002508:	08002567 	.word	0x08002567
 800250c:	080025a9 	.word	0x080025a9
 8002510:	080025af 	.word	0x080025af
 8002514:	080025af 	.word	0x080025af
 8002518:	080025af 	.word	0x080025af
 800251c:	080025af 	.word	0x080025af
 8002520:	080025af 	.word	0x080025af
 8002524:	080025af 	.word	0x080025af
 8002528:	080025af 	.word	0x080025af
 800252c:	080025af 	.word	0x080025af
 8002530:	080025af 	.word	0x080025af
 8002534:	080025af 	.word	0x080025af
 8002538:	080025af 	.word	0x080025af
 800253c:	080025af 	.word	0x080025af
 8002540:	080025af 	.word	0x080025af
 8002544:	0800255d 	.word	0x0800255d
 8002548:	08002571 	.word	0x08002571
 800254c:	4a79      	ldr	r2, [pc, #484]	; (8002734 <HAL_GPIO_Init+0x2b4>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d013      	beq.n	800257a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002552:	e02c      	b.n	80025ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	623b      	str	r3, [r7, #32]
          break;
 800255a:	e029      	b.n	80025b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	3304      	adds	r3, #4
 8002562:	623b      	str	r3, [r7, #32]
          break;
 8002564:	e024      	b.n	80025b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	3308      	adds	r3, #8
 800256c:	623b      	str	r3, [r7, #32]
          break;
 800256e:	e01f      	b.n	80025b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	330c      	adds	r3, #12
 8002576:	623b      	str	r3, [r7, #32]
          break;
 8002578:	e01a      	b.n	80025b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d102      	bne.n	8002588 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002582:	2304      	movs	r3, #4
 8002584:	623b      	str	r3, [r7, #32]
          break;
 8002586:	e013      	b.n	80025b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d105      	bne.n	800259c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002590:	2308      	movs	r3, #8
 8002592:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69fa      	ldr	r2, [r7, #28]
 8002598:	611a      	str	r2, [r3, #16]
          break;
 800259a:	e009      	b.n	80025b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800259c:	2308      	movs	r3, #8
 800259e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	69fa      	ldr	r2, [r7, #28]
 80025a4:	615a      	str	r2, [r3, #20]
          break;
 80025a6:	e003      	b.n	80025b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025a8:	2300      	movs	r3, #0
 80025aa:	623b      	str	r3, [r7, #32]
          break;
 80025ac:	e000      	b.n	80025b0 <HAL_GPIO_Init+0x130>
          break;
 80025ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	2bff      	cmp	r3, #255	; 0xff
 80025b4:	d801      	bhi.n	80025ba <HAL_GPIO_Init+0x13a>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	e001      	b.n	80025be <HAL_GPIO_Init+0x13e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3304      	adds	r3, #4
 80025be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	2bff      	cmp	r3, #255	; 0xff
 80025c4:	d802      	bhi.n	80025cc <HAL_GPIO_Init+0x14c>
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	e002      	b.n	80025d2 <HAL_GPIO_Init+0x152>
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	3b08      	subs	r3, #8
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	210f      	movs	r1, #15
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	fa01 f303 	lsl.w	r3, r1, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	401a      	ands	r2, r3
 80025e4:	6a39      	ldr	r1, [r7, #32]
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ec:	431a      	orrs	r2, r3
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 80b1 	beq.w	8002762 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002600:	4b4d      	ldr	r3, [pc, #308]	; (8002738 <HAL_GPIO_Init+0x2b8>)
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	4a4c      	ldr	r2, [pc, #304]	; (8002738 <HAL_GPIO_Init+0x2b8>)
 8002606:	f043 0301 	orr.w	r3, r3, #1
 800260a:	6193      	str	r3, [r2, #24]
 800260c:	4b4a      	ldr	r3, [pc, #296]	; (8002738 <HAL_GPIO_Init+0x2b8>)
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002618:	4a48      	ldr	r2, [pc, #288]	; (800273c <HAL_GPIO_Init+0x2bc>)
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	089b      	lsrs	r3, r3, #2
 800261e:	3302      	adds	r3, #2
 8002620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002624:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	220f      	movs	r2, #15
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4013      	ands	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a40      	ldr	r2, [pc, #256]	; (8002740 <HAL_GPIO_Init+0x2c0>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d013      	beq.n	800266c <HAL_GPIO_Init+0x1ec>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a3f      	ldr	r2, [pc, #252]	; (8002744 <HAL_GPIO_Init+0x2c4>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d00d      	beq.n	8002668 <HAL_GPIO_Init+0x1e8>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a3e      	ldr	r2, [pc, #248]	; (8002748 <HAL_GPIO_Init+0x2c8>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d007      	beq.n	8002664 <HAL_GPIO_Init+0x1e4>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a3d      	ldr	r2, [pc, #244]	; (800274c <HAL_GPIO_Init+0x2cc>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d101      	bne.n	8002660 <HAL_GPIO_Init+0x1e0>
 800265c:	2303      	movs	r3, #3
 800265e:	e006      	b.n	800266e <HAL_GPIO_Init+0x1ee>
 8002660:	2304      	movs	r3, #4
 8002662:	e004      	b.n	800266e <HAL_GPIO_Init+0x1ee>
 8002664:	2302      	movs	r3, #2
 8002666:	e002      	b.n	800266e <HAL_GPIO_Init+0x1ee>
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <HAL_GPIO_Init+0x1ee>
 800266c:	2300      	movs	r3, #0
 800266e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002670:	f002 0203 	and.w	r2, r2, #3
 8002674:	0092      	lsls	r2, r2, #2
 8002676:	4093      	lsls	r3, r2
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	4313      	orrs	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800267e:	492f      	ldr	r1, [pc, #188]	; (800273c <HAL_GPIO_Init+0x2bc>)
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	3302      	adds	r3, #2
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d006      	beq.n	80026a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002698:	4b2d      	ldr	r3, [pc, #180]	; (8002750 <HAL_GPIO_Init+0x2d0>)
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	492c      	ldr	r1, [pc, #176]	; (8002750 <HAL_GPIO_Init+0x2d0>)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	608b      	str	r3, [r1, #8]
 80026a4:	e006      	b.n	80026b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026a6:	4b2a      	ldr	r3, [pc, #168]	; (8002750 <HAL_GPIO_Init+0x2d0>)
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	4928      	ldr	r1, [pc, #160]	; (8002750 <HAL_GPIO_Init+0x2d0>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d006      	beq.n	80026ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026c0:	4b23      	ldr	r3, [pc, #140]	; (8002750 <HAL_GPIO_Init+0x2d0>)
 80026c2:	68da      	ldr	r2, [r3, #12]
 80026c4:	4922      	ldr	r1, [pc, #136]	; (8002750 <HAL_GPIO_Init+0x2d0>)
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	60cb      	str	r3, [r1, #12]
 80026cc:	e006      	b.n	80026dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026ce:	4b20      	ldr	r3, [pc, #128]	; (8002750 <HAL_GPIO_Init+0x2d0>)
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	43db      	mvns	r3, r3
 80026d6:	491e      	ldr	r1, [pc, #120]	; (8002750 <HAL_GPIO_Init+0x2d0>)
 80026d8:	4013      	ands	r3, r2
 80026da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d006      	beq.n	80026f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026e8:	4b19      	ldr	r3, [pc, #100]	; (8002750 <HAL_GPIO_Init+0x2d0>)
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	4918      	ldr	r1, [pc, #96]	; (8002750 <HAL_GPIO_Init+0x2d0>)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	604b      	str	r3, [r1, #4]
 80026f4:	e006      	b.n	8002704 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026f6:	4b16      	ldr	r3, [pc, #88]	; (8002750 <HAL_GPIO_Init+0x2d0>)
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	4914      	ldr	r1, [pc, #80]	; (8002750 <HAL_GPIO_Init+0x2d0>)
 8002700:	4013      	ands	r3, r2
 8002702:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d021      	beq.n	8002754 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002710:	4b0f      	ldr	r3, [pc, #60]	; (8002750 <HAL_GPIO_Init+0x2d0>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	490e      	ldr	r1, [pc, #56]	; (8002750 <HAL_GPIO_Init+0x2d0>)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	4313      	orrs	r3, r2
 800271a:	600b      	str	r3, [r1, #0]
 800271c:	e021      	b.n	8002762 <HAL_GPIO_Init+0x2e2>
 800271e:	bf00      	nop
 8002720:	10320000 	.word	0x10320000
 8002724:	10310000 	.word	0x10310000
 8002728:	10220000 	.word	0x10220000
 800272c:	10210000 	.word	0x10210000
 8002730:	10120000 	.word	0x10120000
 8002734:	10110000 	.word	0x10110000
 8002738:	40021000 	.word	0x40021000
 800273c:	40010000 	.word	0x40010000
 8002740:	40010800 	.word	0x40010800
 8002744:	40010c00 	.word	0x40010c00
 8002748:	40011000 	.word	0x40011000
 800274c:	40011400 	.word	0x40011400
 8002750:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HAL_GPIO_Init+0x304>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	43db      	mvns	r3, r3
 800275c:	4909      	ldr	r1, [pc, #36]	; (8002784 <HAL_GPIO_Init+0x304>)
 800275e:	4013      	ands	r3, r2
 8002760:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	3301      	adds	r3, #1
 8002766:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	fa22 f303 	lsr.w	r3, r2, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	f47f ae8e 	bne.w	8002494 <HAL_GPIO_Init+0x14>
  }
}
 8002778:	bf00      	nop
 800277a:	bf00      	nop
 800277c:	372c      	adds	r7, #44	; 0x2c
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr
 8002784:	40010400 	.word	0x40010400

08002788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	807b      	strh	r3, [r7, #2]
 8002794:	4613      	mov	r3, r2
 8002796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002798:	787b      	ldrb	r3, [r7, #1]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800279e:	887a      	ldrh	r2, [r7, #2]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027a4:	e003      	b.n	80027ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027a6:	887b      	ldrh	r3, [r7, #2]
 80027a8:	041a      	lsls	r2, r3, #16
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	611a      	str	r2, [r3, #16]
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027ca:	887a      	ldrh	r2, [r7, #2]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4013      	ands	r3, r2
 80027d0:	041a      	lsls	r2, r3, #16
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	43d9      	mvns	r1, r3
 80027d6:	887b      	ldrh	r3, [r7, #2]
 80027d8:	400b      	ands	r3, r1
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	611a      	str	r2, [r3, #16]
}
 80027e0:	bf00      	nop
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr
	...

080027ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027f6:	4b08      	ldr	r3, [pc, #32]	; (8002818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	4013      	ands	r3, r2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d006      	beq.n	8002810 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002802:	4a05      	ldr	r2, [pc, #20]	; (8002818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002804:	88fb      	ldrh	r3, [r7, #6]
 8002806:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002808:	88fb      	ldrh	r3, [r7, #6]
 800280a:	4618      	mov	r0, r3
 800280c:	f7fe fec6 	bl	800159c <HAL_GPIO_EXTI_Callback>
  }
}
 8002810:	bf00      	nop
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40010400 	.word	0x40010400

0800281c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e12b      	b.n	8002a86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d106      	bne.n	8002848 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff f9c8 	bl	8001bd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2224      	movs	r2, #36	; 0x24
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0201 	bic.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800286e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800287e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002880:	f001 f960 	bl	8003b44 <HAL_RCC_GetPCLK1Freq>
 8002884:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	4a81      	ldr	r2, [pc, #516]	; (8002a90 <HAL_I2C_Init+0x274>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d807      	bhi.n	80028a0 <HAL_I2C_Init+0x84>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4a80      	ldr	r2, [pc, #512]	; (8002a94 <HAL_I2C_Init+0x278>)
 8002894:	4293      	cmp	r3, r2
 8002896:	bf94      	ite	ls
 8002898:	2301      	movls	r3, #1
 800289a:	2300      	movhi	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	e006      	b.n	80028ae <HAL_I2C_Init+0x92>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4a7d      	ldr	r2, [pc, #500]	; (8002a98 <HAL_I2C_Init+0x27c>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	bf94      	ite	ls
 80028a8:	2301      	movls	r3, #1
 80028aa:	2300      	movhi	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e0e7      	b.n	8002a86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	4a78      	ldr	r2, [pc, #480]	; (8002a9c <HAL_I2C_Init+0x280>)
 80028ba:	fba2 2303 	umull	r2, r3, r2, r3
 80028be:	0c9b      	lsrs	r3, r3, #18
 80028c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	4a6a      	ldr	r2, [pc, #424]	; (8002a90 <HAL_I2C_Init+0x274>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d802      	bhi.n	80028f0 <HAL_I2C_Init+0xd4>
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	3301      	adds	r3, #1
 80028ee:	e009      	b.n	8002904 <HAL_I2C_Init+0xe8>
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028f6:	fb02 f303 	mul.w	r3, r2, r3
 80028fa:	4a69      	ldr	r2, [pc, #420]	; (8002aa0 <HAL_I2C_Init+0x284>)
 80028fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002900:	099b      	lsrs	r3, r3, #6
 8002902:	3301      	adds	r3, #1
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	430b      	orrs	r3, r1
 800290a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002916:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	495c      	ldr	r1, [pc, #368]	; (8002a90 <HAL_I2C_Init+0x274>)
 8002920:	428b      	cmp	r3, r1
 8002922:	d819      	bhi.n	8002958 <HAL_I2C_Init+0x13c>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	1e59      	subs	r1, r3, #1
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002932:	1c59      	adds	r1, r3, #1
 8002934:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002938:	400b      	ands	r3, r1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00a      	beq.n	8002954 <HAL_I2C_Init+0x138>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	1e59      	subs	r1, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	fbb1 f3f3 	udiv	r3, r1, r3
 800294c:	3301      	adds	r3, #1
 800294e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002952:	e051      	b.n	80029f8 <HAL_I2C_Init+0x1dc>
 8002954:	2304      	movs	r3, #4
 8002956:	e04f      	b.n	80029f8 <HAL_I2C_Init+0x1dc>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d111      	bne.n	8002984 <HAL_I2C_Init+0x168>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	1e58      	subs	r0, r3, #1
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6859      	ldr	r1, [r3, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	440b      	add	r3, r1
 800296e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002972:	3301      	adds	r3, #1
 8002974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002978:	2b00      	cmp	r3, #0
 800297a:	bf0c      	ite	eq
 800297c:	2301      	moveq	r3, #1
 800297e:	2300      	movne	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	e012      	b.n	80029aa <HAL_I2C_Init+0x18e>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	1e58      	subs	r0, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6859      	ldr	r1, [r3, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	0099      	lsls	r1, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	fbb0 f3f3 	udiv	r3, r0, r3
 800299a:	3301      	adds	r3, #1
 800299c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf0c      	ite	eq
 80029a4:	2301      	moveq	r3, #1
 80029a6:	2300      	movne	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_I2C_Init+0x196>
 80029ae:	2301      	movs	r3, #1
 80029b0:	e022      	b.n	80029f8 <HAL_I2C_Init+0x1dc>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10e      	bne.n	80029d8 <HAL_I2C_Init+0x1bc>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1e58      	subs	r0, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6859      	ldr	r1, [r3, #4]
 80029c2:	460b      	mov	r3, r1
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	440b      	add	r3, r1
 80029c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80029cc:	3301      	adds	r3, #1
 80029ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029d6:	e00f      	b.n	80029f8 <HAL_I2C_Init+0x1dc>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	1e58      	subs	r0, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6859      	ldr	r1, [r3, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	0099      	lsls	r1, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ee:	3301      	adds	r3, #1
 80029f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	6809      	ldr	r1, [r1, #0]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69da      	ldr	r2, [r3, #28]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6911      	ldr	r1, [r2, #16]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68d2      	ldr	r2, [r2, #12]
 8002a32:	4311      	orrs	r1, r2
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6812      	ldr	r2, [r2, #0]
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695a      	ldr	r2, [r3, #20]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0201 	orr.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2220      	movs	r2, #32
 8002a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	000186a0 	.word	0x000186a0
 8002a94:	001e847f 	.word	0x001e847f
 8002a98:	003d08ff 	.word	0x003d08ff
 8002a9c:	431bde83 	.word	0x431bde83
 8002aa0:	10624dd3 	.word	0x10624dd3

08002aa4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af02      	add	r7, sp, #8
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	607a      	str	r2, [r7, #4]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	817b      	strh	r3, [r7, #10]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ab8:	f7ff faf4 	bl	80020a4 <HAL_GetTick>
 8002abc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b20      	cmp	r3, #32
 8002ac8:	f040 80e0 	bne.w	8002c8c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	2319      	movs	r3, #25
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	4970      	ldr	r1, [pc, #448]	; (8002c98 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 fa92 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e0d3      	b.n	8002c8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <HAL_I2C_Master_Transmit+0x50>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e0cc      	b.n	8002c8e <HAL_I2C_Master_Transmit+0x1ea>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d007      	beq.n	8002b1a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 0201 	orr.w	r2, r2, #1
 8002b18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2221      	movs	r2, #33	; 0x21
 8002b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2210      	movs	r2, #16
 8002b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	893a      	ldrh	r2, [r7, #8]
 8002b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4a50      	ldr	r2, [pc, #320]	; (8002c9c <HAL_I2C_Master_Transmit+0x1f8>)
 8002b5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b5c:	8979      	ldrh	r1, [r7, #10]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	6a3a      	ldr	r2, [r7, #32]
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f000 f9ca 	bl	8002efc <I2C_MasterRequestWrite>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e08d      	b.n	8002c8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b88:	e066      	b.n	8002c58 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	6a39      	ldr	r1, [r7, #32]
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 fb50 	bl	8003234 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00d      	beq.n	8002bb6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d107      	bne.n	8002bb2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e06b      	b.n	8002c8e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	781a      	ldrb	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	d11b      	bne.n	8002c2c <HAL_I2C_Master_Transmit+0x188>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d017      	beq.n	8002c2c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	781a      	ldrb	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	6a39      	ldr	r1, [r7, #32]
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 fb47 	bl	80032c4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00d      	beq.n	8002c58 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d107      	bne.n	8002c54 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c52:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e01a      	b.n	8002c8e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d194      	bne.n	8002b8a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	e000      	b.n	8002c8e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c8c:	2302      	movs	r3, #2
  }
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	00100002 	.word	0x00100002
 8002c9c:	ffff0000 	.word	0xffff0000

08002ca0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af02      	add	r7, sp, #8
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	607a      	str	r2, [r7, #4]
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	460b      	mov	r3, r1
 8002cae:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002cb0:	f7ff f9f8 	bl	80020a4 <HAL_GetTick>
 8002cb4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	f040 8111 	bne.w	8002eea <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	2319      	movs	r3, #25
 8002cce:	2201      	movs	r2, #1
 8002cd0:	4988      	ldr	r1, [pc, #544]	; (8002ef4 <HAL_I2C_IsDeviceReady+0x254>)
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f994 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e104      	b.n	8002eec <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_I2C_IsDeviceReady+0x50>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e0fd      	b.n	8002eec <HAL_I2C_IsDeviceReady+0x24c>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d007      	beq.n	8002d16 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0201 	orr.w	r2, r2, #1
 8002d14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2224      	movs	r2, #36	; 0x24
 8002d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4a70      	ldr	r2, [pc, #448]	; (8002ef8 <HAL_I2C_IsDeviceReady+0x258>)
 8002d38:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d48:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 f952 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00d      	beq.n	8002d7e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d70:	d103      	bne.n	8002d7a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d78:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e0b6      	b.n	8002eec <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d7e:	897b      	ldrh	r3, [r7, #10]
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	461a      	mov	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d8c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002d8e:	f7ff f989 	bl	80020a4 <HAL_GetTick>
 8002d92:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	bf0c      	ite	eq
 8002da2:	2301      	moveq	r3, #1
 8002da4:	2300      	movne	r3, #0
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db8:	bf0c      	ite	eq
 8002dba:	2301      	moveq	r3, #1
 8002dbc:	2300      	movne	r3, #0
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002dc2:	e025      	b.n	8002e10 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dc4:	f7ff f96e 	bl	80020a4 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d302      	bcc.n	8002dda <HAL_I2C_IsDeviceReady+0x13a>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d103      	bne.n	8002de2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	22a0      	movs	r2, #160	; 0xa0
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	bf0c      	ite	eq
 8002df0:	2301      	moveq	r3, #1
 8002df2:	2300      	movne	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e06:	bf0c      	ite	eq
 8002e08:	2301      	moveq	r3, #1
 8002e0a:	2300      	movne	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2ba0      	cmp	r3, #160	; 0xa0
 8002e1a:	d005      	beq.n	8002e28 <HAL_I2C_IsDeviceReady+0x188>
 8002e1c:	7dfb      	ldrb	r3, [r7, #23]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d102      	bne.n	8002e28 <HAL_I2C_IsDeviceReady+0x188>
 8002e22:	7dbb      	ldrb	r3, [r7, #22]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0cd      	beq.n	8002dc4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d129      	bne.n	8002e92 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e4c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e4e:	2300      	movs	r3, #0
 8002e50:	613b      	str	r3, [r7, #16]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	613b      	str	r3, [r7, #16]
 8002e62:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	2319      	movs	r3, #25
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	4921      	ldr	r1, [pc, #132]	; (8002ef4 <HAL_I2C_IsDeviceReady+0x254>)
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 f8c6 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e036      	b.n	8002eec <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	e02c      	b.n	8002eec <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ea0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eaa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	2319      	movs	r3, #25
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	490f      	ldr	r1, [pc, #60]	; (8002ef4 <HAL_I2C_IsDeviceReady+0x254>)
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f8a2 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e012      	b.n	8002eec <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	f4ff af32 	bcc.w	8002d3a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002eea:	2302      	movs	r3, #2
  }
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3720      	adds	r7, #32
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	00100002 	.word	0x00100002
 8002ef8:	ffff0000 	.word	0xffff0000

08002efc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	607a      	str	r2, [r7, #4]
 8002f06:	603b      	str	r3, [r7, #0]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d006      	beq.n	8002f26 <I2C_MasterRequestWrite+0x2a>
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d003      	beq.n	8002f26 <I2C_MasterRequestWrite+0x2a>
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f24:	d108      	bne.n	8002f38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	e00b      	b.n	8002f50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3c:	2b12      	cmp	r3, #18
 8002f3e:	d107      	bne.n	8002f50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 f84f 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00d      	beq.n	8002f84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f76:	d103      	bne.n	8002f80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e035      	b.n	8002ff0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f8c:	d108      	bne.n	8002fa0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f8e:	897b      	ldrh	r3, [r7, #10]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f9c:	611a      	str	r2, [r3, #16]
 8002f9e:	e01b      	b.n	8002fd8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fa0:	897b      	ldrh	r3, [r7, #10]
 8002fa2:	11db      	asrs	r3, r3, #7
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	f003 0306 	and.w	r3, r3, #6
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	f063 030f 	orn	r3, r3, #15
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	490e      	ldr	r1, [pc, #56]	; (8002ff8 <I2C_MasterRequestWrite+0xfc>)
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 f898 	bl	80030f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e010      	b.n	8002ff0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002fce:	897b      	ldrh	r3, [r7, #10]
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	4907      	ldr	r1, [pc, #28]	; (8002ffc <I2C_MasterRequestWrite+0x100>)
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 f888 	bl	80030f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	00010008 	.word	0x00010008
 8002ffc:	00010002 	.word	0x00010002

08003000 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	4613      	mov	r3, r2
 800300e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003010:	e048      	b.n	80030a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003018:	d044      	beq.n	80030a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301a:	f7ff f843 	bl	80020a4 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d302      	bcc.n	8003030 <I2C_WaitOnFlagUntilTimeout+0x30>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d139      	bne.n	80030a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	0c1b      	lsrs	r3, r3, #16
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b01      	cmp	r3, #1
 8003038:	d10d      	bne.n	8003056 <I2C_WaitOnFlagUntilTimeout+0x56>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	43da      	mvns	r2, r3
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	4013      	ands	r3, r2
 8003046:	b29b      	uxth	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	bf0c      	ite	eq
 800304c:	2301      	moveq	r3, #1
 800304e:	2300      	movne	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	461a      	mov	r2, r3
 8003054:	e00c      	b.n	8003070 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	43da      	mvns	r2, r3
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	4013      	ands	r3, r2
 8003062:	b29b      	uxth	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	bf0c      	ite	eq
 8003068:	2301      	moveq	r3, #1
 800306a:	2300      	movne	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	461a      	mov	r2, r3
 8003070:	79fb      	ldrb	r3, [r7, #7]
 8003072:	429a      	cmp	r2, r3
 8003074:	d116      	bne.n	80030a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	f043 0220 	orr.w	r2, r3, #32
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e023      	b.n	80030ec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	0c1b      	lsrs	r3, r3, #16
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d10d      	bne.n	80030ca <I2C_WaitOnFlagUntilTimeout+0xca>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	43da      	mvns	r2, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	4013      	ands	r3, r2
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf0c      	ite	eq
 80030c0:	2301      	moveq	r3, #1
 80030c2:	2300      	movne	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	461a      	mov	r2, r3
 80030c8:	e00c      	b.n	80030e4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	43da      	mvns	r2, r3
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	4013      	ands	r3, r2
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	bf0c      	ite	eq
 80030dc:	2301      	moveq	r3, #1
 80030de:	2300      	movne	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d093      	beq.n	8003012 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003102:	e071      	b.n	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003112:	d123      	bne.n	800315c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003122:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800312c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2220      	movs	r2, #32
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	f043 0204 	orr.w	r2, r3, #4
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e067      	b.n	800322c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003162:	d041      	beq.n	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003164:	f7fe ff9e 	bl	80020a4 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	429a      	cmp	r2, r3
 8003172:	d302      	bcc.n	800317a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d136      	bne.n	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	0c1b      	lsrs	r3, r3, #16
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b01      	cmp	r3, #1
 8003182:	d10c      	bne.n	800319e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	43da      	mvns	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	4013      	ands	r3, r2
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	bf14      	ite	ne
 8003196:	2301      	movne	r3, #1
 8003198:	2300      	moveq	r3, #0
 800319a:	b2db      	uxtb	r3, r3
 800319c:	e00b      	b.n	80031b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	43da      	mvns	r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	4013      	ands	r3, r2
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	bf14      	ite	ne
 80031b0:	2301      	movne	r3, #1
 80031b2:	2300      	moveq	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d016      	beq.n	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	f043 0220 	orr.w	r2, r3, #32
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e021      	b.n	800322c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	0c1b      	lsrs	r3, r3, #16
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d10c      	bne.n	800320c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	43da      	mvns	r2, r3
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	4013      	ands	r3, r2
 80031fe:	b29b      	uxth	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	bf14      	ite	ne
 8003204:	2301      	movne	r3, #1
 8003206:	2300      	moveq	r3, #0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	e00b      	b.n	8003224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	43da      	mvns	r2, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	4013      	ands	r3, r2
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	bf14      	ite	ne
 800321e:	2301      	movne	r3, #1
 8003220:	2300      	moveq	r3, #0
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	f47f af6d 	bne.w	8003104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003240:	e034      	b.n	80032ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 f886 	bl	8003354 <I2C_IsAcknowledgeFailed>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e034      	b.n	80032bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003258:	d028      	beq.n	80032ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800325a:	f7fe ff23 	bl	80020a4 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	429a      	cmp	r2, r3
 8003268:	d302      	bcc.n	8003270 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d11d      	bne.n	80032ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327a:	2b80      	cmp	r3, #128	; 0x80
 800327c:	d016      	beq.n	80032ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2220      	movs	r2, #32
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	f043 0220 	orr.w	r2, r3, #32
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e007      	b.n	80032bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b6:	2b80      	cmp	r3, #128	; 0x80
 80032b8:	d1c3      	bne.n	8003242 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032d0:	e034      	b.n	800333c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f83e 	bl	8003354 <I2C_IsAcknowledgeFailed>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e034      	b.n	800334c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e8:	d028      	beq.n	800333c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ea:	f7fe fedb 	bl	80020a4 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d302      	bcc.n	8003300 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d11d      	bne.n	800333c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b04      	cmp	r3, #4
 800330c:	d016      	beq.n	800333c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	f043 0220 	orr.w	r2, r3, #32
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e007      	b.n	800334c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b04      	cmp	r3, #4
 8003348:	d1c3      	bne.n	80032d2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800336a:	d11b      	bne.n	80033a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003374:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	f043 0204 	orr.w	r2, r3, #4
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e000      	b.n	80033a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr

080033b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e272      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 8087 	beq.w	80034de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033d0:	4b92      	ldr	r3, [pc, #584]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 030c 	and.w	r3, r3, #12
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d00c      	beq.n	80033f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033dc:	4b8f      	ldr	r3, [pc, #572]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f003 030c 	and.w	r3, r3, #12
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d112      	bne.n	800340e <HAL_RCC_OscConfig+0x5e>
 80033e8:	4b8c      	ldr	r3, [pc, #560]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f4:	d10b      	bne.n	800340e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f6:	4b89      	ldr	r3, [pc, #548]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d06c      	beq.n	80034dc <HAL_RCC_OscConfig+0x12c>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d168      	bne.n	80034dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e24c      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003416:	d106      	bne.n	8003426 <HAL_RCC_OscConfig+0x76>
 8003418:	4b80      	ldr	r3, [pc, #512]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a7f      	ldr	r2, [pc, #508]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 800341e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003422:	6013      	str	r3, [r2, #0]
 8003424:	e02e      	b.n	8003484 <HAL_RCC_OscConfig+0xd4>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10c      	bne.n	8003448 <HAL_RCC_OscConfig+0x98>
 800342e:	4b7b      	ldr	r3, [pc, #492]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a7a      	ldr	r2, [pc, #488]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 8003434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	4b78      	ldr	r3, [pc, #480]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a77      	ldr	r2, [pc, #476]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 8003440:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	e01d      	b.n	8003484 <HAL_RCC_OscConfig+0xd4>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003450:	d10c      	bne.n	800346c <HAL_RCC_OscConfig+0xbc>
 8003452:	4b72      	ldr	r3, [pc, #456]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a71      	ldr	r2, [pc, #452]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 8003458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	4b6f      	ldr	r3, [pc, #444]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a6e      	ldr	r2, [pc, #440]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 8003464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	e00b      	b.n	8003484 <HAL_RCC_OscConfig+0xd4>
 800346c:	4b6b      	ldr	r3, [pc, #428]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a6a      	ldr	r2, [pc, #424]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 8003472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003476:	6013      	str	r3, [r2, #0]
 8003478:	4b68      	ldr	r3, [pc, #416]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a67      	ldr	r2, [pc, #412]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 800347e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003482:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d013      	beq.n	80034b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7fe fe0a 	bl	80020a4 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003494:	f7fe fe06 	bl	80020a4 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b64      	cmp	r3, #100	; 0x64
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e200      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a6:	4b5d      	ldr	r3, [pc, #372]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCC_OscConfig+0xe4>
 80034b2:	e014      	b.n	80034de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b4:	f7fe fdf6 	bl	80020a4 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034bc:	f7fe fdf2 	bl	80020a4 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b64      	cmp	r3, #100	; 0x64
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e1ec      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ce:	4b53      	ldr	r3, [pc, #332]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0x10c>
 80034da:	e000      	b.n	80034de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d063      	beq.n	80035b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034ea:	4b4c      	ldr	r3, [pc, #304]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 030c 	and.w	r3, r3, #12
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00b      	beq.n	800350e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034f6:	4b49      	ldr	r3, [pc, #292]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d11c      	bne.n	800353c <HAL_RCC_OscConfig+0x18c>
 8003502:	4b46      	ldr	r3, [pc, #280]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d116      	bne.n	800353c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350e:	4b43      	ldr	r3, [pc, #268]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d005      	beq.n	8003526 <HAL_RCC_OscConfig+0x176>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d001      	beq.n	8003526 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e1c0      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003526:	4b3d      	ldr	r3, [pc, #244]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	4939      	ldr	r1, [pc, #228]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 8003536:	4313      	orrs	r3, r2
 8003538:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800353a:	e03a      	b.n	80035b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d020      	beq.n	8003586 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003544:	4b36      	ldr	r3, [pc, #216]	; (8003620 <HAL_RCC_OscConfig+0x270>)
 8003546:	2201      	movs	r2, #1
 8003548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354a:	f7fe fdab 	bl	80020a4 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003552:	f7fe fda7 	bl	80020a4 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e1a1      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003564:	4b2d      	ldr	r3, [pc, #180]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0f0      	beq.n	8003552 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003570:	4b2a      	ldr	r3, [pc, #168]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	4927      	ldr	r1, [pc, #156]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 8003580:	4313      	orrs	r3, r2
 8003582:	600b      	str	r3, [r1, #0]
 8003584:	e015      	b.n	80035b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003586:	4b26      	ldr	r3, [pc, #152]	; (8003620 <HAL_RCC_OscConfig+0x270>)
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358c:	f7fe fd8a 	bl	80020a4 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003594:	f7fe fd86 	bl	80020a4 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e180      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a6:	4b1d      	ldr	r3, [pc, #116]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f0      	bne.n	8003594 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d03a      	beq.n	8003634 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d019      	beq.n	80035fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035c6:	4b17      	ldr	r3, [pc, #92]	; (8003624 <HAL_RCC_OscConfig+0x274>)
 80035c8:	2201      	movs	r2, #1
 80035ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035cc:	f7fe fd6a 	bl	80020a4 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035d4:	f7fe fd66 	bl	80020a4 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e160      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e6:	4b0d      	ldr	r3, [pc, #52]	; (800361c <HAL_RCC_OscConfig+0x26c>)
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035f2:	2001      	movs	r0, #1
 80035f4:	f000 face 	bl	8003b94 <RCC_Delay>
 80035f8:	e01c      	b.n	8003634 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035fa:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <HAL_RCC_OscConfig+0x274>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003600:	f7fe fd50 	bl	80020a4 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003606:	e00f      	b.n	8003628 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003608:	f7fe fd4c 	bl	80020a4 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d908      	bls.n	8003628 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e146      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000
 8003620:	42420000 	.word	0x42420000
 8003624:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003628:	4b92      	ldr	r3, [pc, #584]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e9      	bne.n	8003608 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 80a6 	beq.w	800378e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003642:	2300      	movs	r3, #0
 8003644:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003646:	4b8b      	ldr	r3, [pc, #556]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10d      	bne.n	800366e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003652:	4b88      	ldr	r3, [pc, #544]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	4a87      	ldr	r2, [pc, #540]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800365c:	61d3      	str	r3, [r2, #28]
 800365e:	4b85      	ldr	r3, [pc, #532]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003666:	60bb      	str	r3, [r7, #8]
 8003668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800366a:	2301      	movs	r3, #1
 800366c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366e:	4b82      	ldr	r3, [pc, #520]	; (8003878 <HAL_RCC_OscConfig+0x4c8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003676:	2b00      	cmp	r3, #0
 8003678:	d118      	bne.n	80036ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800367a:	4b7f      	ldr	r3, [pc, #508]	; (8003878 <HAL_RCC_OscConfig+0x4c8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a7e      	ldr	r2, [pc, #504]	; (8003878 <HAL_RCC_OscConfig+0x4c8>)
 8003680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003686:	f7fe fd0d 	bl	80020a4 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800368e:	f7fe fd09 	bl	80020a4 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b64      	cmp	r3, #100	; 0x64
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e103      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a0:	4b75      	ldr	r3, [pc, #468]	; (8003878 <HAL_RCC_OscConfig+0x4c8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d106      	bne.n	80036c2 <HAL_RCC_OscConfig+0x312>
 80036b4:	4b6f      	ldr	r3, [pc, #444]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	4a6e      	ldr	r2, [pc, #440]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80036ba:	f043 0301 	orr.w	r3, r3, #1
 80036be:	6213      	str	r3, [r2, #32]
 80036c0:	e02d      	b.n	800371e <HAL_RCC_OscConfig+0x36e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10c      	bne.n	80036e4 <HAL_RCC_OscConfig+0x334>
 80036ca:	4b6a      	ldr	r3, [pc, #424]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	4a69      	ldr	r2, [pc, #420]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80036d0:	f023 0301 	bic.w	r3, r3, #1
 80036d4:	6213      	str	r3, [r2, #32]
 80036d6:	4b67      	ldr	r3, [pc, #412]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	4a66      	ldr	r2, [pc, #408]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80036dc:	f023 0304 	bic.w	r3, r3, #4
 80036e0:	6213      	str	r3, [r2, #32]
 80036e2:	e01c      	b.n	800371e <HAL_RCC_OscConfig+0x36e>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	2b05      	cmp	r3, #5
 80036ea:	d10c      	bne.n	8003706 <HAL_RCC_OscConfig+0x356>
 80036ec:	4b61      	ldr	r3, [pc, #388]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	4a60      	ldr	r2, [pc, #384]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80036f2:	f043 0304 	orr.w	r3, r3, #4
 80036f6:	6213      	str	r3, [r2, #32]
 80036f8:	4b5e      	ldr	r3, [pc, #376]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	4a5d      	ldr	r2, [pc, #372]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80036fe:	f043 0301 	orr.w	r3, r3, #1
 8003702:	6213      	str	r3, [r2, #32]
 8003704:	e00b      	b.n	800371e <HAL_RCC_OscConfig+0x36e>
 8003706:	4b5b      	ldr	r3, [pc, #364]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	4a5a      	ldr	r2, [pc, #360]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 800370c:	f023 0301 	bic.w	r3, r3, #1
 8003710:	6213      	str	r3, [r2, #32]
 8003712:	4b58      	ldr	r3, [pc, #352]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	4a57      	ldr	r2, [pc, #348]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003718:	f023 0304 	bic.w	r3, r3, #4
 800371c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d015      	beq.n	8003752 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003726:	f7fe fcbd 	bl	80020a4 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800372c:	e00a      	b.n	8003744 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372e:	f7fe fcb9 	bl	80020a4 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	f241 3288 	movw	r2, #5000	; 0x1388
 800373c:	4293      	cmp	r3, r2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e0b1      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003744:	4b4b      	ldr	r3, [pc, #300]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0ee      	beq.n	800372e <HAL_RCC_OscConfig+0x37e>
 8003750:	e014      	b.n	800377c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003752:	f7fe fca7 	bl	80020a4 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003758:	e00a      	b.n	8003770 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375a:	f7fe fca3 	bl	80020a4 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	f241 3288 	movw	r2, #5000	; 0x1388
 8003768:	4293      	cmp	r3, r2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e09b      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003770:	4b40      	ldr	r3, [pc, #256]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1ee      	bne.n	800375a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800377c:	7dfb      	ldrb	r3, [r7, #23]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d105      	bne.n	800378e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003782:	4b3c      	ldr	r3, [pc, #240]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	4a3b      	ldr	r2, [pc, #236]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003788:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800378c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 8087 	beq.w	80038a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003798:	4b36      	ldr	r3, [pc, #216]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 030c 	and.w	r3, r3, #12
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d061      	beq.n	8003868 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d146      	bne.n	800383a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ac:	4b33      	ldr	r3, [pc, #204]	; (800387c <HAL_RCC_OscConfig+0x4cc>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b2:	f7fe fc77 	bl	80020a4 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ba:	f7fe fc73 	bl	80020a4 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e06d      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037cc:	4b29      	ldr	r3, [pc, #164]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1f0      	bne.n	80037ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e0:	d108      	bne.n	80037f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037e2:	4b24      	ldr	r3, [pc, #144]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	4921      	ldr	r1, [pc, #132]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037f4:	4b1f      	ldr	r3, [pc, #124]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a19      	ldr	r1, [r3, #32]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	430b      	orrs	r3, r1
 8003806:	491b      	ldr	r1, [pc, #108]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003808:	4313      	orrs	r3, r2
 800380a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800380c:	4b1b      	ldr	r3, [pc, #108]	; (800387c <HAL_RCC_OscConfig+0x4cc>)
 800380e:	2201      	movs	r2, #1
 8003810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003812:	f7fe fc47 	bl	80020a4 <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800381a:	f7fe fc43 	bl	80020a4 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e03d      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800382c:	4b11      	ldr	r3, [pc, #68]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0f0      	beq.n	800381a <HAL_RCC_OscConfig+0x46a>
 8003838:	e035      	b.n	80038a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800383a:	4b10      	ldr	r3, [pc, #64]	; (800387c <HAL_RCC_OscConfig+0x4cc>)
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003840:	f7fe fc30 	bl	80020a4 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003848:	f7fe fc2c 	bl	80020a4 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e026      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800385a:	4b06      	ldr	r3, [pc, #24]	; (8003874 <HAL_RCC_OscConfig+0x4c4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f0      	bne.n	8003848 <HAL_RCC_OscConfig+0x498>
 8003866:	e01e      	b.n	80038a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d107      	bne.n	8003880 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e019      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
 8003874:	40021000 	.word	0x40021000
 8003878:	40007000 	.word	0x40007000
 800387c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003880:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <HAL_RCC_OscConfig+0x500>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	429a      	cmp	r2, r3
 8003892:	d106      	bne.n	80038a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800389e:	429a      	cmp	r2, r3
 80038a0:	d001      	beq.n	80038a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e000      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40021000 	.word	0x40021000

080038b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e0d0      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038c8:	4b6a      	ldr	r3, [pc, #424]	; (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d910      	bls.n	80038f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d6:	4b67      	ldr	r3, [pc, #412]	; (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f023 0207 	bic.w	r2, r3, #7
 80038de:	4965      	ldr	r1, [pc, #404]	; (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e6:	4b63      	ldr	r3, [pc, #396]	; (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d001      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0b8      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d020      	beq.n	8003946 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003910:	4b59      	ldr	r3, [pc, #356]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	4a58      	ldr	r2, [pc, #352]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003916:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800391a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003928:	4b53      	ldr	r3, [pc, #332]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	4a52      	ldr	r2, [pc, #328]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 800392e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003932:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003934:	4b50      	ldr	r3, [pc, #320]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	494d      	ldr	r1, [pc, #308]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003942:	4313      	orrs	r3, r2
 8003944:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d040      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d107      	bne.n	800396a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395a:	4b47      	ldr	r3, [pc, #284]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d115      	bne.n	8003992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e07f      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b02      	cmp	r3, #2
 8003970:	d107      	bne.n	8003982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003972:	4b41      	ldr	r3, [pc, #260]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e073      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003982:	4b3d      	ldr	r3, [pc, #244]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e06b      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003992:	4b39      	ldr	r3, [pc, #228]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f023 0203 	bic.w	r2, r3, #3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	4936      	ldr	r1, [pc, #216]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039a4:	f7fe fb7e 	bl	80020a4 <HAL_GetTick>
 80039a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039aa:	e00a      	b.n	80039c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ac:	f7fe fb7a 	bl	80020a4 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e053      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c2:	4b2d      	ldr	r3, [pc, #180]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f003 020c 	and.w	r2, r3, #12
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d1eb      	bne.n	80039ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039d4:	4b27      	ldr	r3, [pc, #156]	; (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d210      	bcs.n	8003a04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e2:	4b24      	ldr	r3, [pc, #144]	; (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f023 0207 	bic.w	r2, r3, #7
 80039ea:	4922      	ldr	r1, [pc, #136]	; (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f2:	4b20      	ldr	r3, [pc, #128]	; (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d001      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e032      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a10:	4b19      	ldr	r3, [pc, #100]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	4916      	ldr	r1, [pc, #88]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a2e:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	490e      	ldr	r1, [pc, #56]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a42:	f000 f821 	bl	8003a88 <HAL_RCC_GetSysClockFreq>
 8003a46:	4602      	mov	r2, r0
 8003a48:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	091b      	lsrs	r3, r3, #4
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	490a      	ldr	r1, [pc, #40]	; (8003a7c <HAL_RCC_ClockConfig+0x1c8>)
 8003a54:	5ccb      	ldrb	r3, [r1, r3]
 8003a56:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5a:	4a09      	ldr	r2, [pc, #36]	; (8003a80 <HAL_RCC_ClockConfig+0x1cc>)
 8003a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a5e:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <HAL_RCC_ClockConfig+0x1d0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fe fadc 	bl	8002020 <HAL_InitTick>

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40022000 	.word	0x40022000
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	08007d10 	.word	0x08007d10
 8003a80:	20000008 	.word	0x20000008
 8003a84:	2000000c 	.word	0x2000000c

08003a88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	2300      	movs	r3, #0
 8003a94:	60bb      	str	r3, [r7, #8]
 8003a96:	2300      	movs	r3, #0
 8003a98:	617b      	str	r3, [r7, #20]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003aa2:	4b1e      	ldr	r3, [pc, #120]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x94>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f003 030c 	and.w	r3, r3, #12
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d002      	beq.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x30>
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d003      	beq.n	8003abe <HAL_RCC_GetSysClockFreq+0x36>
 8003ab6:	e027      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ab8:	4b19      	ldr	r3, [pc, #100]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003aba:	613b      	str	r3, [r7, #16]
      break;
 8003abc:	e027      	b.n	8003b0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	0c9b      	lsrs	r3, r3, #18
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	4a17      	ldr	r2, [pc, #92]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ac8:	5cd3      	ldrb	r3, [r2, r3]
 8003aca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d010      	beq.n	8003af8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ad6:	4b11      	ldr	r3, [pc, #68]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x94>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	0c5b      	lsrs	r3, r3, #17
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	4a11      	ldr	r2, [pc, #68]	; (8003b28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ae2:	5cd3      	ldrb	r3, [r2, r3]
 8003ae4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a0d      	ldr	r2, [pc, #52]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003aea:	fb03 f202 	mul.w	r2, r3, r2
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af4:	617b      	str	r3, [r7, #20]
 8003af6:	e004      	b.n	8003b02 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a0c      	ldr	r2, [pc, #48]	; (8003b2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003afc:	fb02 f303 	mul.w	r3, r2, r3
 8003b00:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	613b      	str	r3, [r7, #16]
      break;
 8003b06:	e002      	b.n	8003b0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b08:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b0a:	613b      	str	r3, [r7, #16]
      break;
 8003b0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b0e:	693b      	ldr	r3, [r7, #16]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	371c      	adds	r7, #28
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bc80      	pop	{r7}
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	007a1200 	.word	0x007a1200
 8003b24:	08007d28 	.word	0x08007d28
 8003b28:	08007d38 	.word	0x08007d38
 8003b2c:	003d0900 	.word	0x003d0900

08003b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b34:	4b02      	ldr	r3, [pc, #8]	; (8003b40 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b36:	681b      	ldr	r3, [r3, #0]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr
 8003b40:	20000008 	.word	0x20000008

08003b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b48:	f7ff fff2 	bl	8003b30 <HAL_RCC_GetHCLKFreq>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	0a1b      	lsrs	r3, r3, #8
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	4903      	ldr	r1, [pc, #12]	; (8003b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b5a:	5ccb      	ldrb	r3, [r1, r3]
 8003b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40021000 	.word	0x40021000
 8003b68:	08007d20 	.word	0x08007d20

08003b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b70:	f7ff ffde 	bl	8003b30 <HAL_RCC_GetHCLKFreq>
 8003b74:	4602      	mov	r2, r0
 8003b76:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	0adb      	lsrs	r3, r3, #11
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	4903      	ldr	r1, [pc, #12]	; (8003b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b82:	5ccb      	ldrb	r3, [r1, r3]
 8003b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	08007d20 	.word	0x08007d20

08003b94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b9c:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <RCC_Delay+0x34>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a0a      	ldr	r2, [pc, #40]	; (8003bcc <RCC_Delay+0x38>)
 8003ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba6:	0a5b      	lsrs	r3, r3, #9
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	fb02 f303 	mul.w	r3, r2, r3
 8003bae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003bb0:	bf00      	nop
  }
  while (Delay --);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	1e5a      	subs	r2, r3, #1
 8003bb6:	60fa      	str	r2, [r7, #12]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1f9      	bne.n	8003bb0 <RCC_Delay+0x1c>
}
 8003bbc:	bf00      	nop
 8003bbe:	bf00      	nop
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr
 8003bc8:	20000008 	.word	0x20000008
 8003bcc:	10624dd3 	.word	0x10624dd3

08003bd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e042      	b.n	8003c68 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d106      	bne.n	8003bfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7fe f82c 	bl	8001c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2224      	movs	r2, #36	; 0x24
 8003c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 fdc7 	bl	80047a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	691a      	ldr	r2, [r3, #16]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695a      	ldr	r2, [r3, #20]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08a      	sub	sp, #40	; 0x28
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	603b      	str	r3, [r7, #0]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d16d      	bne.n	8003d6c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <HAL_UART_Transmit+0x2c>
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e066      	b.n	8003d6e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2221      	movs	r2, #33	; 0x21
 8003caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cae:	f7fe f9f9 	bl	80020a4 <HAL_GetTick>
 8003cb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	88fa      	ldrh	r2, [r7, #6]
 8003cb8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	88fa      	ldrh	r2, [r7, #6]
 8003cbe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc8:	d108      	bne.n	8003cdc <HAL_UART_Transmit+0x6c>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d104      	bne.n	8003cdc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	61bb      	str	r3, [r7, #24]
 8003cda:	e003      	b.n	8003ce4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ce4:	e02a      	b.n	8003d3c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2200      	movs	r2, #0
 8003cee:	2180      	movs	r1, #128	; 0x80
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 fb16 	bl	8004322 <UART_WaitOnFlagUntilTimeout>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e036      	b.n	8003d6e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10b      	bne.n	8003d1e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	3302      	adds	r3, #2
 8003d1a:	61bb      	str	r3, [r7, #24]
 8003d1c:	e007      	b.n	8003d2e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	781a      	ldrb	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1cf      	bne.n	8003ce6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	2140      	movs	r1, #64	; 0x40
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 fae6 	bl	8004322 <UART_WaitOnFlagUntilTimeout>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e006      	b.n	8003d6e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	e000      	b.n	8003d6e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003d6c:	2302      	movs	r3, #2
  }
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3720      	adds	r7, #32
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b084      	sub	sp, #16
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	60f8      	str	r0, [r7, #12]
 8003d7e:	60b9      	str	r1, [r7, #8]
 8003d80:	4613      	mov	r3, r2
 8003d82:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	d112      	bne.n	8003db6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <HAL_UART_Receive_IT+0x26>
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e00b      	b.n	8003db8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003da6:	88fb      	ldrh	r3, [r7, #6]
 8003da8:	461a      	mov	r2, r3
 8003daa:	68b9      	ldr	r1, [r7, #8]
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 fb26 	bl	80043fe <UART_Start_Receive_IT>
 8003db2:	4603      	mov	r3, r0
 8003db4:	e000      	b.n	8003db8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003db6:	2302      	movs	r3, #2
  }
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b0ba      	sub	sp, #232	; 0xe8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003dfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10f      	bne.n	8003e26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e0a:	f003 0320 	and.w	r3, r3, #32
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d009      	beq.n	8003e26 <HAL_UART_IRQHandler+0x66>
 8003e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 fc03 	bl	800462a <UART_Receive_IT>
      return;
 8003e24:	e25b      	b.n	80042de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 80de 	beq.w	8003fec <HAL_UART_IRQHandler+0x22c>
 8003e30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d106      	bne.n	8003e4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e40:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 80d1 	beq.w	8003fec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00b      	beq.n	8003e6e <HAL_UART_IRQHandler+0xae>
 8003e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d005      	beq.n	8003e6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e66:	f043 0201 	orr.w	r2, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e72:	f003 0304 	and.w	r3, r3, #4
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00b      	beq.n	8003e92 <HAL_UART_IRQHandler+0xd2>
 8003e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d005      	beq.n	8003e92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8a:	f043 0202 	orr.w	r2, r3, #2
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00b      	beq.n	8003eb6 <HAL_UART_IRQHandler+0xf6>
 8003e9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d005      	beq.n	8003eb6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eae:	f043 0204 	orr.w	r2, r3, #4
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d011      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x126>
 8003ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ec6:	f003 0320 	and.w	r3, r3, #32
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d105      	bne.n	8003eda <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ece:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d005      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ede:	f043 0208 	orr.w	r2, r3, #8
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 81f2 	beq.w	80042d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d008      	beq.n	8003f0e <HAL_UART_IRQHandler+0x14e>
 8003efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f00:	f003 0320 	and.w	r3, r3, #32
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 fb8e 	bl	800462a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bf14      	ite	ne
 8003f1c:	2301      	movne	r3, #1
 8003f1e:	2300      	moveq	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d103      	bne.n	8003f3a <HAL_UART_IRQHandler+0x17a>
 8003f32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d04f      	beq.n	8003fda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fa98 	bl	8004470 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d041      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3314      	adds	r3, #20
 8003f54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f5c:	e853 3f00 	ldrex	r3, [r3]
 8003f60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3314      	adds	r3, #20
 8003f76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f8a:	e841 2300 	strex	r3, r2, [r1]
 8003f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1d9      	bne.n	8003f4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d013      	beq.n	8003fca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa6:	4a7e      	ldr	r2, [pc, #504]	; (80041a0 <HAL_UART_IRQHandler+0x3e0>)
 8003fa8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fe f9ee 	bl	8002390 <HAL_DMA_Abort_IT>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d016      	beq.n	8003fe8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003fc4:	4610      	mov	r0, r2
 8003fc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc8:	e00e      	b.n	8003fe8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fd fac8 	bl	8001560 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd0:	e00a      	b.n	8003fe8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fd fac4 	bl	8001560 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd8:	e006      	b.n	8003fe8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fd fac0 	bl	8001560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003fe6:	e175      	b.n	80042d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe8:	bf00      	nop
    return;
 8003fea:	e173      	b.n	80042d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	f040 814f 	bne.w	8004294 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ffa:	f003 0310 	and.w	r3, r3, #16
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 8148 	beq.w	8004294 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004008:	f003 0310 	and.w	r3, r3, #16
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 8141 	beq.w	8004294 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004012:	2300      	movs	r3, #0
 8004014:	60bb      	str	r3, [r7, #8]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	60bb      	str	r3, [r7, #8]
 8004026:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 80b6 	beq.w	80041a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004044:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 8145 	beq.w	80042d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004052:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004056:	429a      	cmp	r2, r3
 8004058:	f080 813e 	bcs.w	80042d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004062:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	2b20      	cmp	r3, #32
 800406c:	f000 8088 	beq.w	8004180 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	330c      	adds	r3, #12
 8004076:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800407e:	e853 3f00 	ldrex	r3, [r3]
 8004082:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004086:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800408a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800408e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	330c      	adds	r3, #12
 8004098:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800409c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80040a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80040ac:	e841 2300 	strex	r3, r2, [r1]
 80040b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80040b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1d9      	bne.n	8004070 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3314      	adds	r3, #20
 80040c2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040c6:	e853 3f00 	ldrex	r3, [r3]
 80040ca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80040cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040ce:	f023 0301 	bic.w	r3, r3, #1
 80040d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3314      	adds	r3, #20
 80040dc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040e0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80040e4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80040e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80040ec:	e841 2300 	strex	r3, r2, [r1]
 80040f0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80040f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1e1      	bne.n	80040bc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3314      	adds	r3, #20
 80040fe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004100:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004102:	e853 3f00 	ldrex	r3, [r3]
 8004106:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004108:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800410a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800410e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	3314      	adds	r3, #20
 8004118:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800411c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800411e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004120:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004122:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004124:	e841 2300 	strex	r3, r2, [r1]
 8004128:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800412a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1e3      	bne.n	80040f8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2220      	movs	r2, #32
 8004134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	330c      	adds	r3, #12
 8004144:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004148:	e853 3f00 	ldrex	r3, [r3]
 800414c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800414e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004150:	f023 0310 	bic.w	r3, r3, #16
 8004154:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	330c      	adds	r3, #12
 800415e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004162:	65ba      	str	r2, [r7, #88]	; 0x58
 8004164:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004166:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004168:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800416a:	e841 2300 	strex	r3, r2, [r1]
 800416e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1e3      	bne.n	800413e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417a:	4618      	mov	r0, r3
 800417c:	f7fe f8cd 	bl	800231a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800418e:	b29b      	uxth	r3, r3
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	b29b      	uxth	r3, r3
 8004194:	4619      	mov	r1, r3
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f8ad 	bl	80042f6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800419c:	e09c      	b.n	80042d8 <HAL_UART_IRQHandler+0x518>
 800419e:	bf00      	nop
 80041a0:	08004535 	.word	0x08004535
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 808e 	beq.w	80042dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80041c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 8089 	beq.w	80042dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	330c      	adds	r3, #12
 80041d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d4:	e853 3f00 	ldrex	r3, [r3]
 80041d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	330c      	adds	r3, #12
 80041ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80041ee:	647a      	str	r2, [r7, #68]	; 0x44
 80041f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041f6:	e841 2300 	strex	r3, r2, [r1]
 80041fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1e3      	bne.n	80041ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3314      	adds	r3, #20
 8004208:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	623b      	str	r3, [r7, #32]
   return(result);
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	f023 0301 	bic.w	r3, r3, #1
 8004218:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3314      	adds	r3, #20
 8004222:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004226:	633a      	str	r2, [r7, #48]	; 0x30
 8004228:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800422c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800422e:	e841 2300 	strex	r3, r2, [r1]
 8004232:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1e3      	bne.n	8004202 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2220      	movs	r2, #32
 800423e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	330c      	adds	r3, #12
 800424e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	e853 3f00 	ldrex	r3, [r3]
 8004256:	60fb      	str	r3, [r7, #12]
   return(result);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 0310 	bic.w	r3, r3, #16
 800425e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	330c      	adds	r3, #12
 8004268:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800426c:	61fa      	str	r2, [r7, #28]
 800426e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004270:	69b9      	ldr	r1, [r7, #24]
 8004272:	69fa      	ldr	r2, [r7, #28]
 8004274:	e841 2300 	strex	r3, r2, [r1]
 8004278:	617b      	str	r3, [r7, #20]
   return(result);
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1e3      	bne.n	8004248 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004286:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800428a:	4619      	mov	r1, r3
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f832 	bl	80042f6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004292:	e023      	b.n	80042dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429c:	2b00      	cmp	r3, #0
 800429e:	d009      	beq.n	80042b4 <HAL_UART_IRQHandler+0x4f4>
 80042a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f955 	bl	800455c <UART_Transmit_IT>
    return;
 80042b2:	e014      	b.n	80042de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00e      	beq.n	80042de <HAL_UART_IRQHandler+0x51e>
 80042c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d008      	beq.n	80042de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f994 	bl	80045fa <UART_EndTransmit_IT>
    return;
 80042d2:	e004      	b.n	80042de <HAL_UART_IRQHandler+0x51e>
    return;
 80042d4:	bf00      	nop
 80042d6:	e002      	b.n	80042de <HAL_UART_IRQHandler+0x51e>
      return;
 80042d8:	bf00      	nop
 80042da:	e000      	b.n	80042de <HAL_UART_IRQHandler+0x51e>
      return;
 80042dc:	bf00      	nop
  }
}
 80042de:	37e8      	adds	r7, #232	; 0xe8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bc80      	pop	{r7}
 80042f4:	4770      	bx	lr

080042f6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b083      	sub	sp, #12
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
 80042fe:	460b      	mov	r3, r1
 8004300:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr

0800430c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8004318:	4618      	mov	r0, r3
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	bc80      	pop	{r7}
 8004320:	4770      	bx	lr

08004322 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b090      	sub	sp, #64	; 0x40
 8004326:	af00      	add	r7, sp, #0
 8004328:	60f8      	str	r0, [r7, #12]
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	603b      	str	r3, [r7, #0]
 800432e:	4613      	mov	r3, r2
 8004330:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004332:	e050      	b.n	80043d6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433a:	d04c      	beq.n	80043d6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800433c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800433e:	2b00      	cmp	r3, #0
 8004340:	d007      	beq.n	8004352 <UART_WaitOnFlagUntilTimeout+0x30>
 8004342:	f7fd feaf 	bl	80020a4 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800434e:	429a      	cmp	r2, r3
 8004350:	d241      	bcs.n	80043d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	330c      	adds	r3, #12
 8004358:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435c:	e853 3f00 	ldrex	r3, [r3]
 8004360:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004368:	63fb      	str	r3, [r7, #60]	; 0x3c
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	330c      	adds	r3, #12
 8004370:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004372:	637a      	str	r2, [r7, #52]	; 0x34
 8004374:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004376:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004378:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800437a:	e841 2300 	strex	r3, r2, [r1]
 800437e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1e5      	bne.n	8004352 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3314      	adds	r3, #20
 800438c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	e853 3f00 	ldrex	r3, [r3]
 8004394:	613b      	str	r3, [r7, #16]
   return(result);
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f023 0301 	bic.w	r3, r3, #1
 800439c:	63bb      	str	r3, [r7, #56]	; 0x38
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3314      	adds	r3, #20
 80043a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043a6:	623a      	str	r2, [r7, #32]
 80043a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043aa:	69f9      	ldr	r1, [r7, #28]
 80043ac:	6a3a      	ldr	r2, [r7, #32]
 80043ae:	e841 2300 	strex	r3, r2, [r1]
 80043b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1e5      	bne.n	8004386 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2220      	movs	r2, #32
 80043be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e00f      	b.n	80043f6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	4013      	ands	r3, r2
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	bf0c      	ite	eq
 80043e6:	2301      	moveq	r3, #1
 80043e8:	2300      	movne	r3, #0
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	461a      	mov	r2, r3
 80043ee:	79fb      	ldrb	r3, [r7, #7]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d09f      	beq.n	8004334 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3740      	adds	r7, #64	; 0x40
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043fe:	b480      	push	{r7}
 8004400:	b085      	sub	sp, #20
 8004402:	af00      	add	r7, sp, #0
 8004404:	60f8      	str	r0, [r7, #12]
 8004406:	60b9      	str	r1, [r7, #8]
 8004408:	4613      	mov	r3, r2
 800440a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	88fa      	ldrh	r2, [r7, #6]
 8004416:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	88fa      	ldrh	r2, [r7, #6]
 800441c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2222      	movs	r2, #34	; 0x22
 8004428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d007      	beq.n	8004444 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004442:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695a      	ldr	r2, [r3, #20]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0201 	orr.w	r2, r2, #1
 8004452:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68da      	ldr	r2, [r3, #12]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0220 	orr.w	r2, r2, #32
 8004462:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr

08004470 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004470:	b480      	push	{r7}
 8004472:	b095      	sub	sp, #84	; 0x54
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	330c      	adds	r3, #12
 800447e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004482:	e853 3f00 	ldrex	r3, [r3]
 8004486:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800448e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	330c      	adds	r3, #12
 8004496:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004498:	643a      	str	r2, [r7, #64]	; 0x40
 800449a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800449e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044a0:	e841 2300 	strex	r3, r2, [r1]
 80044a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1e5      	bne.n	8004478 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3314      	adds	r3, #20
 80044b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	e853 3f00 	ldrex	r3, [r3]
 80044ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	f023 0301 	bic.w	r3, r3, #1
 80044c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	3314      	adds	r3, #20
 80044ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044d4:	e841 2300 	strex	r3, r2, [r1]
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1e5      	bne.n	80044ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d119      	bne.n	800451c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	330c      	adds	r3, #12
 80044ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	e853 3f00 	ldrex	r3, [r3]
 80044f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f023 0310 	bic.w	r3, r3, #16
 80044fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	330c      	adds	r3, #12
 8004506:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004508:	61ba      	str	r2, [r7, #24]
 800450a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450c:	6979      	ldr	r1, [r7, #20]
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	e841 2300 	strex	r3, r2, [r1]
 8004514:	613b      	str	r3, [r7, #16]
   return(result);
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1e5      	bne.n	80044e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	631a      	str	r2, [r3, #48]	; 0x30
}
 800452a:	bf00      	nop
 800452c:	3754      	adds	r7, #84	; 0x54
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr

08004534 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f7fd f806 	bl	8001560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004554:	bf00      	nop
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b21      	cmp	r3, #33	; 0x21
 800456e:	d13e      	bne.n	80045ee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004578:	d114      	bne.n	80045a4 <UART_Transmit_IT+0x48>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d110      	bne.n	80045a4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	461a      	mov	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004596:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	1c9a      	adds	r2, r3, #2
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	621a      	str	r2, [r3, #32]
 80045a2:	e008      	b.n	80045b6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	1c59      	adds	r1, r3, #1
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	6211      	str	r1, [r2, #32]
 80045ae:	781a      	ldrb	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29b      	uxth	r3, r3
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	4619      	mov	r1, r3
 80045c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10f      	bne.n	80045ea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68da      	ldr	r2, [r3, #12]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	e000      	b.n	80045f0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045ee:	2302      	movs	r3, #2
  }
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bc80      	pop	{r7}
 80045f8:	4770      	bx	lr

080045fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b082      	sub	sp, #8
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004610:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2220      	movs	r2, #32
 8004616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7ff fe62 	bl	80042e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b08c      	sub	sp, #48	; 0x30
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b22      	cmp	r3, #34	; 0x22
 800463c:	f040 80ae 	bne.w	800479c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004648:	d117      	bne.n	800467a <UART_Receive_IT+0x50>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d113      	bne.n	800467a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004652:	2300      	movs	r3, #0
 8004654:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	b29b      	uxth	r3, r3
 8004664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004668:	b29a      	uxth	r2, r3
 800466a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004672:	1c9a      	adds	r2, r3, #2
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	629a      	str	r2, [r3, #40]	; 0x28
 8004678:	e026      	b.n	80046c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004680:	2300      	movs	r3, #0
 8004682:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800468c:	d007      	beq.n	800469e <UART_Receive_IT+0x74>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10a      	bne.n	80046ac <UART_Receive_IT+0x82>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d106      	bne.n	80046ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a8:	701a      	strb	r2, [r3, #0]
 80046aa:	e008      	b.n	80046be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	3b01      	subs	r3, #1
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	4619      	mov	r1, r3
 80046d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d15d      	bne.n	8004798 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68da      	ldr	r2, [r3, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0220 	bic.w	r2, r2, #32
 80046ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	695a      	ldr	r2, [r3, #20]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0201 	bic.w	r2, r2, #1
 800470a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	2b01      	cmp	r3, #1
 8004720:	d135      	bne.n	800478e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	330c      	adds	r3, #12
 800472e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	e853 3f00 	ldrex	r3, [r3]
 8004736:	613b      	str	r3, [r7, #16]
   return(result);
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f023 0310 	bic.w	r3, r3, #16
 800473e:	627b      	str	r3, [r7, #36]	; 0x24
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	330c      	adds	r3, #12
 8004746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004748:	623a      	str	r2, [r7, #32]
 800474a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474c:	69f9      	ldr	r1, [r7, #28]
 800474e:	6a3a      	ldr	r2, [r7, #32]
 8004750:	e841 2300 	strex	r3, r2, [r1]
 8004754:	61bb      	str	r3, [r7, #24]
   return(result);
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e5      	bne.n	8004728 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0310 	and.w	r3, r3, #16
 8004766:	2b10      	cmp	r3, #16
 8004768:	d10a      	bne.n	8004780 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800476a:	2300      	movs	r3, #0
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004784:	4619      	mov	r1, r3
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7ff fdb5 	bl	80042f6 <HAL_UARTEx_RxEventCallback>
 800478c:	e002      	b.n	8004794 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7fc feca 	bl	8001528 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	e002      	b.n	800479e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004798:	2300      	movs	r3, #0
 800479a:	e000      	b.n	800479e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800479c:	2302      	movs	r3, #2
  }
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3730      	adds	r7, #48	; 0x30
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689a      	ldr	r2, [r3, #8]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80047e2:	f023 030c 	bic.w	r3, r3, #12
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6812      	ldr	r2, [r2, #0]
 80047ea:	68b9      	ldr	r1, [r7, #8]
 80047ec:	430b      	orrs	r3, r1
 80047ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699a      	ldr	r2, [r3, #24]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a2c      	ldr	r2, [pc, #176]	; (80048bc <UART_SetConfig+0x114>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d103      	bne.n	8004818 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004810:	f7ff f9ac 	bl	8003b6c <HAL_RCC_GetPCLK2Freq>
 8004814:	60f8      	str	r0, [r7, #12]
 8004816:	e002      	b.n	800481e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004818:	f7ff f994 	bl	8003b44 <HAL_RCC_GetPCLK1Freq>
 800481c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4613      	mov	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	009a      	lsls	r2, r3, #2
 8004828:	441a      	add	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	fbb2 f3f3 	udiv	r3, r2, r3
 8004834:	4a22      	ldr	r2, [pc, #136]	; (80048c0 <UART_SetConfig+0x118>)
 8004836:	fba2 2303 	umull	r2, r3, r2, r3
 800483a:	095b      	lsrs	r3, r3, #5
 800483c:	0119      	lsls	r1, r3, #4
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	4613      	mov	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	009a      	lsls	r2, r3, #2
 8004848:	441a      	add	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	fbb2 f2f3 	udiv	r2, r2, r3
 8004854:	4b1a      	ldr	r3, [pc, #104]	; (80048c0 <UART_SetConfig+0x118>)
 8004856:	fba3 0302 	umull	r0, r3, r3, r2
 800485a:	095b      	lsrs	r3, r3, #5
 800485c:	2064      	movs	r0, #100	; 0x64
 800485e:	fb00 f303 	mul.w	r3, r0, r3
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	011b      	lsls	r3, r3, #4
 8004866:	3332      	adds	r3, #50	; 0x32
 8004868:	4a15      	ldr	r2, [pc, #84]	; (80048c0 <UART_SetConfig+0x118>)
 800486a:	fba2 2303 	umull	r2, r3, r2, r3
 800486e:	095b      	lsrs	r3, r3, #5
 8004870:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004874:	4419      	add	r1, r3
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	4613      	mov	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4413      	add	r3, r2
 800487e:	009a      	lsls	r2, r3, #2
 8004880:	441a      	add	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	fbb2 f2f3 	udiv	r2, r2, r3
 800488c:	4b0c      	ldr	r3, [pc, #48]	; (80048c0 <UART_SetConfig+0x118>)
 800488e:	fba3 0302 	umull	r0, r3, r3, r2
 8004892:	095b      	lsrs	r3, r3, #5
 8004894:	2064      	movs	r0, #100	; 0x64
 8004896:	fb00 f303 	mul.w	r3, r0, r3
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	011b      	lsls	r3, r3, #4
 800489e:	3332      	adds	r3, #50	; 0x32
 80048a0:	4a07      	ldr	r2, [pc, #28]	; (80048c0 <UART_SetConfig+0x118>)
 80048a2:	fba2 2303 	umull	r2, r3, r2, r3
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	f003 020f 	and.w	r2, r3, #15
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	440a      	add	r2, r1
 80048b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048b4:	bf00      	nop
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40013800 	.word	0x40013800
 80048c0:	51eb851f 	.word	0x51eb851f

080048c4 <__cvt>:
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048ca:	461f      	mov	r7, r3
 80048cc:	bfbb      	ittet	lt
 80048ce:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80048d2:	461f      	movlt	r7, r3
 80048d4:	2300      	movge	r3, #0
 80048d6:	232d      	movlt	r3, #45	; 0x2d
 80048d8:	b088      	sub	sp, #32
 80048da:	4614      	mov	r4, r2
 80048dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80048de:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80048e0:	7013      	strb	r3, [r2, #0]
 80048e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80048e4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80048e8:	f023 0820 	bic.w	r8, r3, #32
 80048ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048f0:	d005      	beq.n	80048fe <__cvt+0x3a>
 80048f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80048f6:	d100      	bne.n	80048fa <__cvt+0x36>
 80048f8:	3501      	adds	r5, #1
 80048fa:	2302      	movs	r3, #2
 80048fc:	e000      	b.n	8004900 <__cvt+0x3c>
 80048fe:	2303      	movs	r3, #3
 8004900:	aa07      	add	r2, sp, #28
 8004902:	9204      	str	r2, [sp, #16]
 8004904:	aa06      	add	r2, sp, #24
 8004906:	e9cd a202 	strd	sl, r2, [sp, #8]
 800490a:	e9cd 3500 	strd	r3, r5, [sp]
 800490e:	4622      	mov	r2, r4
 8004910:	463b      	mov	r3, r7
 8004912:	f000 fe61 	bl	80055d8 <_dtoa_r>
 8004916:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800491a:	4606      	mov	r6, r0
 800491c:	d102      	bne.n	8004924 <__cvt+0x60>
 800491e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004920:	07db      	lsls	r3, r3, #31
 8004922:	d522      	bpl.n	800496a <__cvt+0xa6>
 8004924:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004928:	eb06 0905 	add.w	r9, r6, r5
 800492c:	d110      	bne.n	8004950 <__cvt+0x8c>
 800492e:	7833      	ldrb	r3, [r6, #0]
 8004930:	2b30      	cmp	r3, #48	; 0x30
 8004932:	d10a      	bne.n	800494a <__cvt+0x86>
 8004934:	2200      	movs	r2, #0
 8004936:	2300      	movs	r3, #0
 8004938:	4620      	mov	r0, r4
 800493a:	4639      	mov	r1, r7
 800493c:	f7fc f834 	bl	80009a8 <__aeabi_dcmpeq>
 8004940:	b918      	cbnz	r0, 800494a <__cvt+0x86>
 8004942:	f1c5 0501 	rsb	r5, r5, #1
 8004946:	f8ca 5000 	str.w	r5, [sl]
 800494a:	f8da 3000 	ldr.w	r3, [sl]
 800494e:	4499      	add	r9, r3
 8004950:	2200      	movs	r2, #0
 8004952:	2300      	movs	r3, #0
 8004954:	4620      	mov	r0, r4
 8004956:	4639      	mov	r1, r7
 8004958:	f7fc f826 	bl	80009a8 <__aeabi_dcmpeq>
 800495c:	b108      	cbz	r0, 8004962 <__cvt+0x9e>
 800495e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004962:	2230      	movs	r2, #48	; 0x30
 8004964:	9b07      	ldr	r3, [sp, #28]
 8004966:	454b      	cmp	r3, r9
 8004968:	d307      	bcc.n	800497a <__cvt+0xb6>
 800496a:	4630      	mov	r0, r6
 800496c:	9b07      	ldr	r3, [sp, #28]
 800496e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004970:	1b9b      	subs	r3, r3, r6
 8004972:	6013      	str	r3, [r2, #0]
 8004974:	b008      	add	sp, #32
 8004976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800497a:	1c59      	adds	r1, r3, #1
 800497c:	9107      	str	r1, [sp, #28]
 800497e:	701a      	strb	r2, [r3, #0]
 8004980:	e7f0      	b.n	8004964 <__cvt+0xa0>

08004982 <__exponent>:
 8004982:	4603      	mov	r3, r0
 8004984:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004986:	2900      	cmp	r1, #0
 8004988:	f803 2b02 	strb.w	r2, [r3], #2
 800498c:	bfb6      	itet	lt
 800498e:	222d      	movlt	r2, #45	; 0x2d
 8004990:	222b      	movge	r2, #43	; 0x2b
 8004992:	4249      	neglt	r1, r1
 8004994:	2909      	cmp	r1, #9
 8004996:	7042      	strb	r2, [r0, #1]
 8004998:	dd2a      	ble.n	80049f0 <__exponent+0x6e>
 800499a:	f10d 0207 	add.w	r2, sp, #7
 800499e:	4617      	mov	r7, r2
 80049a0:	260a      	movs	r6, #10
 80049a2:	fb91 f5f6 	sdiv	r5, r1, r6
 80049a6:	4694      	mov	ip, r2
 80049a8:	fb06 1415 	mls	r4, r6, r5, r1
 80049ac:	3430      	adds	r4, #48	; 0x30
 80049ae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80049b2:	460c      	mov	r4, r1
 80049b4:	2c63      	cmp	r4, #99	; 0x63
 80049b6:	4629      	mov	r1, r5
 80049b8:	f102 32ff 	add.w	r2, r2, #4294967295
 80049bc:	dcf1      	bgt.n	80049a2 <__exponent+0x20>
 80049be:	3130      	adds	r1, #48	; 0x30
 80049c0:	f1ac 0402 	sub.w	r4, ip, #2
 80049c4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80049c8:	4622      	mov	r2, r4
 80049ca:	1c41      	adds	r1, r0, #1
 80049cc:	42ba      	cmp	r2, r7
 80049ce:	d30a      	bcc.n	80049e6 <__exponent+0x64>
 80049d0:	f10d 0209 	add.w	r2, sp, #9
 80049d4:	eba2 020c 	sub.w	r2, r2, ip
 80049d8:	42bc      	cmp	r4, r7
 80049da:	bf88      	it	hi
 80049dc:	2200      	movhi	r2, #0
 80049de:	4413      	add	r3, r2
 80049e0:	1a18      	subs	r0, r3, r0
 80049e2:	b003      	add	sp, #12
 80049e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049e6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80049ea:	f801 5f01 	strb.w	r5, [r1, #1]!
 80049ee:	e7ed      	b.n	80049cc <__exponent+0x4a>
 80049f0:	2330      	movs	r3, #48	; 0x30
 80049f2:	3130      	adds	r1, #48	; 0x30
 80049f4:	7083      	strb	r3, [r0, #2]
 80049f6:	70c1      	strb	r1, [r0, #3]
 80049f8:	1d03      	adds	r3, r0, #4
 80049fa:	e7f1      	b.n	80049e0 <__exponent+0x5e>

080049fc <_printf_float>:
 80049fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a00:	b091      	sub	sp, #68	; 0x44
 8004a02:	460c      	mov	r4, r1
 8004a04:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004a08:	4616      	mov	r6, r2
 8004a0a:	461f      	mov	r7, r3
 8004a0c:	4605      	mov	r5, r0
 8004a0e:	f000 fcd3 	bl	80053b8 <_localeconv_r>
 8004a12:	6803      	ldr	r3, [r0, #0]
 8004a14:	4618      	mov	r0, r3
 8004a16:	9309      	str	r3, [sp, #36]	; 0x24
 8004a18:	f7fb fb9a 	bl	8000150 <strlen>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	930e      	str	r3, [sp, #56]	; 0x38
 8004a20:	f8d8 3000 	ldr.w	r3, [r8]
 8004a24:	900a      	str	r0, [sp, #40]	; 0x28
 8004a26:	3307      	adds	r3, #7
 8004a28:	f023 0307 	bic.w	r3, r3, #7
 8004a2c:	f103 0208 	add.w	r2, r3, #8
 8004a30:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004a34:	f8d4 b000 	ldr.w	fp, [r4]
 8004a38:	f8c8 2000 	str.w	r2, [r8]
 8004a3c:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004a40:	4652      	mov	r2, sl
 8004a42:	4643      	mov	r3, r8
 8004a44:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a48:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004a4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a52:	4650      	mov	r0, sl
 8004a54:	4b9c      	ldr	r3, [pc, #624]	; (8004cc8 <_printf_float+0x2cc>)
 8004a56:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a58:	f7fb ffd8 	bl	8000a0c <__aeabi_dcmpun>
 8004a5c:	bb70      	cbnz	r0, 8004abc <_printf_float+0xc0>
 8004a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a62:	4650      	mov	r0, sl
 8004a64:	4b98      	ldr	r3, [pc, #608]	; (8004cc8 <_printf_float+0x2cc>)
 8004a66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a68:	f7fb ffb2 	bl	80009d0 <__aeabi_dcmple>
 8004a6c:	bb30      	cbnz	r0, 8004abc <_printf_float+0xc0>
 8004a6e:	2200      	movs	r2, #0
 8004a70:	2300      	movs	r3, #0
 8004a72:	4650      	mov	r0, sl
 8004a74:	4641      	mov	r1, r8
 8004a76:	f7fb ffa1 	bl	80009bc <__aeabi_dcmplt>
 8004a7a:	b110      	cbz	r0, 8004a82 <_printf_float+0x86>
 8004a7c:	232d      	movs	r3, #45	; 0x2d
 8004a7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a82:	4a92      	ldr	r2, [pc, #584]	; (8004ccc <_printf_float+0x2d0>)
 8004a84:	4b92      	ldr	r3, [pc, #584]	; (8004cd0 <_printf_float+0x2d4>)
 8004a86:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004a8a:	bf94      	ite	ls
 8004a8c:	4690      	movls	r8, r2
 8004a8e:	4698      	movhi	r8, r3
 8004a90:	2303      	movs	r3, #3
 8004a92:	f04f 0a00 	mov.w	sl, #0
 8004a96:	6123      	str	r3, [r4, #16]
 8004a98:	f02b 0304 	bic.w	r3, fp, #4
 8004a9c:	6023      	str	r3, [r4, #0]
 8004a9e:	4633      	mov	r3, r6
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	9700      	str	r7, [sp, #0]
 8004aa6:	aa0f      	add	r2, sp, #60	; 0x3c
 8004aa8:	f000 f9d6 	bl	8004e58 <_printf_common>
 8004aac:	3001      	adds	r0, #1
 8004aae:	f040 8090 	bne.w	8004bd2 <_printf_float+0x1d6>
 8004ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab6:	b011      	add	sp, #68	; 0x44
 8004ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004abc:	4652      	mov	r2, sl
 8004abe:	4643      	mov	r3, r8
 8004ac0:	4650      	mov	r0, sl
 8004ac2:	4641      	mov	r1, r8
 8004ac4:	f7fb ffa2 	bl	8000a0c <__aeabi_dcmpun>
 8004ac8:	b148      	cbz	r0, 8004ade <_printf_float+0xe2>
 8004aca:	f1b8 0f00 	cmp.w	r8, #0
 8004ace:	bfb8      	it	lt
 8004ad0:	232d      	movlt	r3, #45	; 0x2d
 8004ad2:	4a80      	ldr	r2, [pc, #512]	; (8004cd4 <_printf_float+0x2d8>)
 8004ad4:	bfb8      	it	lt
 8004ad6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004ada:	4b7f      	ldr	r3, [pc, #508]	; (8004cd8 <_printf_float+0x2dc>)
 8004adc:	e7d3      	b.n	8004a86 <_printf_float+0x8a>
 8004ade:	6863      	ldr	r3, [r4, #4]
 8004ae0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	d142      	bne.n	8004b6e <_printf_float+0x172>
 8004ae8:	2306      	movs	r3, #6
 8004aea:	6063      	str	r3, [r4, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	9206      	str	r2, [sp, #24]
 8004af0:	aa0e      	add	r2, sp, #56	; 0x38
 8004af2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004af6:	aa0d      	add	r2, sp, #52	; 0x34
 8004af8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004afc:	9203      	str	r2, [sp, #12]
 8004afe:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004b02:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004b06:	6023      	str	r3, [r4, #0]
 8004b08:	6863      	ldr	r3, [r4, #4]
 8004b0a:	4652      	mov	r2, sl
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	4628      	mov	r0, r5
 8004b10:	4643      	mov	r3, r8
 8004b12:	910b      	str	r1, [sp, #44]	; 0x2c
 8004b14:	f7ff fed6 	bl	80048c4 <__cvt>
 8004b18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b1a:	4680      	mov	r8, r0
 8004b1c:	2947      	cmp	r1, #71	; 0x47
 8004b1e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b20:	d108      	bne.n	8004b34 <_printf_float+0x138>
 8004b22:	1cc8      	adds	r0, r1, #3
 8004b24:	db02      	blt.n	8004b2c <_printf_float+0x130>
 8004b26:	6863      	ldr	r3, [r4, #4]
 8004b28:	4299      	cmp	r1, r3
 8004b2a:	dd40      	ble.n	8004bae <_printf_float+0x1b2>
 8004b2c:	f1a9 0902 	sub.w	r9, r9, #2
 8004b30:	fa5f f989 	uxtb.w	r9, r9
 8004b34:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004b38:	d81f      	bhi.n	8004b7a <_printf_float+0x17e>
 8004b3a:	464a      	mov	r2, r9
 8004b3c:	3901      	subs	r1, #1
 8004b3e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b42:	910d      	str	r1, [sp, #52]	; 0x34
 8004b44:	f7ff ff1d 	bl	8004982 <__exponent>
 8004b48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b4a:	4682      	mov	sl, r0
 8004b4c:	1813      	adds	r3, r2, r0
 8004b4e:	2a01      	cmp	r2, #1
 8004b50:	6123      	str	r3, [r4, #16]
 8004b52:	dc02      	bgt.n	8004b5a <_printf_float+0x15e>
 8004b54:	6822      	ldr	r2, [r4, #0]
 8004b56:	07d2      	lsls	r2, r2, #31
 8004b58:	d501      	bpl.n	8004b5e <_printf_float+0x162>
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	6123      	str	r3, [r4, #16]
 8004b5e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d09b      	beq.n	8004a9e <_printf_float+0xa2>
 8004b66:	232d      	movs	r3, #45	; 0x2d
 8004b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b6c:	e797      	b.n	8004a9e <_printf_float+0xa2>
 8004b6e:	2947      	cmp	r1, #71	; 0x47
 8004b70:	d1bc      	bne.n	8004aec <_printf_float+0xf0>
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1ba      	bne.n	8004aec <_printf_float+0xf0>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e7b7      	b.n	8004aea <_printf_float+0xee>
 8004b7a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004b7e:	d118      	bne.n	8004bb2 <_printf_float+0x1b6>
 8004b80:	2900      	cmp	r1, #0
 8004b82:	6863      	ldr	r3, [r4, #4]
 8004b84:	dd0b      	ble.n	8004b9e <_printf_float+0x1a2>
 8004b86:	6121      	str	r1, [r4, #16]
 8004b88:	b913      	cbnz	r3, 8004b90 <_printf_float+0x194>
 8004b8a:	6822      	ldr	r2, [r4, #0]
 8004b8c:	07d0      	lsls	r0, r2, #31
 8004b8e:	d502      	bpl.n	8004b96 <_printf_float+0x19a>
 8004b90:	3301      	adds	r3, #1
 8004b92:	440b      	add	r3, r1
 8004b94:	6123      	str	r3, [r4, #16]
 8004b96:	f04f 0a00 	mov.w	sl, #0
 8004b9a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004b9c:	e7df      	b.n	8004b5e <_printf_float+0x162>
 8004b9e:	b913      	cbnz	r3, 8004ba6 <_printf_float+0x1aa>
 8004ba0:	6822      	ldr	r2, [r4, #0]
 8004ba2:	07d2      	lsls	r2, r2, #31
 8004ba4:	d501      	bpl.n	8004baa <_printf_float+0x1ae>
 8004ba6:	3302      	adds	r3, #2
 8004ba8:	e7f4      	b.n	8004b94 <_printf_float+0x198>
 8004baa:	2301      	movs	r3, #1
 8004bac:	e7f2      	b.n	8004b94 <_printf_float+0x198>
 8004bae:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004bb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bb4:	4299      	cmp	r1, r3
 8004bb6:	db05      	blt.n	8004bc4 <_printf_float+0x1c8>
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	6121      	str	r1, [r4, #16]
 8004bbc:	07d8      	lsls	r0, r3, #31
 8004bbe:	d5ea      	bpl.n	8004b96 <_printf_float+0x19a>
 8004bc0:	1c4b      	adds	r3, r1, #1
 8004bc2:	e7e7      	b.n	8004b94 <_printf_float+0x198>
 8004bc4:	2900      	cmp	r1, #0
 8004bc6:	bfcc      	ite	gt
 8004bc8:	2201      	movgt	r2, #1
 8004bca:	f1c1 0202 	rsble	r2, r1, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	e7e0      	b.n	8004b94 <_printf_float+0x198>
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	055a      	lsls	r2, r3, #21
 8004bd6:	d407      	bmi.n	8004be8 <_printf_float+0x1ec>
 8004bd8:	6923      	ldr	r3, [r4, #16]
 8004bda:	4642      	mov	r2, r8
 8004bdc:	4631      	mov	r1, r6
 8004bde:	4628      	mov	r0, r5
 8004be0:	47b8      	blx	r7
 8004be2:	3001      	adds	r0, #1
 8004be4:	d12b      	bne.n	8004c3e <_printf_float+0x242>
 8004be6:	e764      	b.n	8004ab2 <_printf_float+0xb6>
 8004be8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004bec:	f240 80dd 	bls.w	8004daa <_printf_float+0x3ae>
 8004bf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f7fb fed6 	bl	80009a8 <__aeabi_dcmpeq>
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	d033      	beq.n	8004c68 <_printf_float+0x26c>
 8004c00:	2301      	movs	r3, #1
 8004c02:	4631      	mov	r1, r6
 8004c04:	4628      	mov	r0, r5
 8004c06:	4a35      	ldr	r2, [pc, #212]	; (8004cdc <_printf_float+0x2e0>)
 8004c08:	47b8      	blx	r7
 8004c0a:	3001      	adds	r0, #1
 8004c0c:	f43f af51 	beq.w	8004ab2 <_printf_float+0xb6>
 8004c10:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c14:	429a      	cmp	r2, r3
 8004c16:	db02      	blt.n	8004c1e <_printf_float+0x222>
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	07d8      	lsls	r0, r3, #31
 8004c1c:	d50f      	bpl.n	8004c3e <_printf_float+0x242>
 8004c1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c22:	4631      	mov	r1, r6
 8004c24:	4628      	mov	r0, r5
 8004c26:	47b8      	blx	r7
 8004c28:	3001      	adds	r0, #1
 8004c2a:	f43f af42 	beq.w	8004ab2 <_printf_float+0xb6>
 8004c2e:	f04f 0800 	mov.w	r8, #0
 8004c32:	f104 091a 	add.w	r9, r4, #26
 8004c36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	4543      	cmp	r3, r8
 8004c3c:	dc09      	bgt.n	8004c52 <_printf_float+0x256>
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	079b      	lsls	r3, r3, #30
 8004c42:	f100 8104 	bmi.w	8004e4e <_printf_float+0x452>
 8004c46:	68e0      	ldr	r0, [r4, #12]
 8004c48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c4a:	4298      	cmp	r0, r3
 8004c4c:	bfb8      	it	lt
 8004c4e:	4618      	movlt	r0, r3
 8004c50:	e731      	b.n	8004ab6 <_printf_float+0xba>
 8004c52:	2301      	movs	r3, #1
 8004c54:	464a      	mov	r2, r9
 8004c56:	4631      	mov	r1, r6
 8004c58:	4628      	mov	r0, r5
 8004c5a:	47b8      	blx	r7
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	f43f af28 	beq.w	8004ab2 <_printf_float+0xb6>
 8004c62:	f108 0801 	add.w	r8, r8, #1
 8004c66:	e7e6      	b.n	8004c36 <_printf_float+0x23a>
 8004c68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	dc38      	bgt.n	8004ce0 <_printf_float+0x2e4>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	4631      	mov	r1, r6
 8004c72:	4628      	mov	r0, r5
 8004c74:	4a19      	ldr	r2, [pc, #100]	; (8004cdc <_printf_float+0x2e0>)
 8004c76:	47b8      	blx	r7
 8004c78:	3001      	adds	r0, #1
 8004c7a:	f43f af1a 	beq.w	8004ab2 <_printf_float+0xb6>
 8004c7e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004c82:	4313      	orrs	r3, r2
 8004c84:	d102      	bne.n	8004c8c <_printf_float+0x290>
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	07d9      	lsls	r1, r3, #31
 8004c8a:	d5d8      	bpl.n	8004c3e <_printf_float+0x242>
 8004c8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c90:	4631      	mov	r1, r6
 8004c92:	4628      	mov	r0, r5
 8004c94:	47b8      	blx	r7
 8004c96:	3001      	adds	r0, #1
 8004c98:	f43f af0b 	beq.w	8004ab2 <_printf_float+0xb6>
 8004c9c:	f04f 0900 	mov.w	r9, #0
 8004ca0:	f104 0a1a 	add.w	sl, r4, #26
 8004ca4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ca6:	425b      	negs	r3, r3
 8004ca8:	454b      	cmp	r3, r9
 8004caa:	dc01      	bgt.n	8004cb0 <_printf_float+0x2b4>
 8004cac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cae:	e794      	b.n	8004bda <_printf_float+0x1de>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	4652      	mov	r2, sl
 8004cb4:	4631      	mov	r1, r6
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	47b8      	blx	r7
 8004cba:	3001      	adds	r0, #1
 8004cbc:	f43f aef9 	beq.w	8004ab2 <_printf_float+0xb6>
 8004cc0:	f109 0901 	add.w	r9, r9, #1
 8004cc4:	e7ee      	b.n	8004ca4 <_printf_float+0x2a8>
 8004cc6:	bf00      	nop
 8004cc8:	7fefffff 	.word	0x7fefffff
 8004ccc:	08007d3a 	.word	0x08007d3a
 8004cd0:	08007d3e 	.word	0x08007d3e
 8004cd4:	08007d42 	.word	0x08007d42
 8004cd8:	08007d46 	.word	0x08007d46
 8004cdc:	08007d4a 	.word	0x08007d4a
 8004ce0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ce2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	bfa8      	it	ge
 8004ce8:	461a      	movge	r2, r3
 8004cea:	2a00      	cmp	r2, #0
 8004cec:	4691      	mov	r9, r2
 8004cee:	dc37      	bgt.n	8004d60 <_printf_float+0x364>
 8004cf0:	f04f 0b00 	mov.w	fp, #0
 8004cf4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cf8:	f104 021a 	add.w	r2, r4, #26
 8004cfc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004d00:	ebaa 0309 	sub.w	r3, sl, r9
 8004d04:	455b      	cmp	r3, fp
 8004d06:	dc33      	bgt.n	8004d70 <_printf_float+0x374>
 8004d08:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	db3b      	blt.n	8004d88 <_printf_float+0x38c>
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	07da      	lsls	r2, r3, #31
 8004d14:	d438      	bmi.n	8004d88 <_printf_float+0x38c>
 8004d16:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004d1a:	eba2 0903 	sub.w	r9, r2, r3
 8004d1e:	eba2 020a 	sub.w	r2, r2, sl
 8004d22:	4591      	cmp	r9, r2
 8004d24:	bfa8      	it	ge
 8004d26:	4691      	movge	r9, r2
 8004d28:	f1b9 0f00 	cmp.w	r9, #0
 8004d2c:	dc34      	bgt.n	8004d98 <_printf_float+0x39c>
 8004d2e:	f04f 0800 	mov.w	r8, #0
 8004d32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d36:	f104 0a1a 	add.w	sl, r4, #26
 8004d3a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d3e:	1a9b      	subs	r3, r3, r2
 8004d40:	eba3 0309 	sub.w	r3, r3, r9
 8004d44:	4543      	cmp	r3, r8
 8004d46:	f77f af7a 	ble.w	8004c3e <_printf_float+0x242>
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	4652      	mov	r2, sl
 8004d4e:	4631      	mov	r1, r6
 8004d50:	4628      	mov	r0, r5
 8004d52:	47b8      	blx	r7
 8004d54:	3001      	adds	r0, #1
 8004d56:	f43f aeac 	beq.w	8004ab2 <_printf_float+0xb6>
 8004d5a:	f108 0801 	add.w	r8, r8, #1
 8004d5e:	e7ec      	b.n	8004d3a <_printf_float+0x33e>
 8004d60:	4613      	mov	r3, r2
 8004d62:	4631      	mov	r1, r6
 8004d64:	4642      	mov	r2, r8
 8004d66:	4628      	mov	r0, r5
 8004d68:	47b8      	blx	r7
 8004d6a:	3001      	adds	r0, #1
 8004d6c:	d1c0      	bne.n	8004cf0 <_printf_float+0x2f4>
 8004d6e:	e6a0      	b.n	8004ab2 <_printf_float+0xb6>
 8004d70:	2301      	movs	r3, #1
 8004d72:	4631      	mov	r1, r6
 8004d74:	4628      	mov	r0, r5
 8004d76:	920b      	str	r2, [sp, #44]	; 0x2c
 8004d78:	47b8      	blx	r7
 8004d7a:	3001      	adds	r0, #1
 8004d7c:	f43f ae99 	beq.w	8004ab2 <_printf_float+0xb6>
 8004d80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d82:	f10b 0b01 	add.w	fp, fp, #1
 8004d86:	e7b9      	b.n	8004cfc <_printf_float+0x300>
 8004d88:	4631      	mov	r1, r6
 8004d8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d8e:	4628      	mov	r0, r5
 8004d90:	47b8      	blx	r7
 8004d92:	3001      	adds	r0, #1
 8004d94:	d1bf      	bne.n	8004d16 <_printf_float+0x31a>
 8004d96:	e68c      	b.n	8004ab2 <_printf_float+0xb6>
 8004d98:	464b      	mov	r3, r9
 8004d9a:	4631      	mov	r1, r6
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	eb08 020a 	add.w	r2, r8, sl
 8004da2:	47b8      	blx	r7
 8004da4:	3001      	adds	r0, #1
 8004da6:	d1c2      	bne.n	8004d2e <_printf_float+0x332>
 8004da8:	e683      	b.n	8004ab2 <_printf_float+0xb6>
 8004daa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004dac:	2a01      	cmp	r2, #1
 8004dae:	dc01      	bgt.n	8004db4 <_printf_float+0x3b8>
 8004db0:	07db      	lsls	r3, r3, #31
 8004db2:	d539      	bpl.n	8004e28 <_printf_float+0x42c>
 8004db4:	2301      	movs	r3, #1
 8004db6:	4642      	mov	r2, r8
 8004db8:	4631      	mov	r1, r6
 8004dba:	4628      	mov	r0, r5
 8004dbc:	47b8      	blx	r7
 8004dbe:	3001      	adds	r0, #1
 8004dc0:	f43f ae77 	beq.w	8004ab2 <_printf_float+0xb6>
 8004dc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dc8:	4631      	mov	r1, r6
 8004dca:	4628      	mov	r0, r5
 8004dcc:	47b8      	blx	r7
 8004dce:	3001      	adds	r0, #1
 8004dd0:	f43f ae6f 	beq.w	8004ab2 <_printf_float+0xb6>
 8004dd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004dd8:	2200      	movs	r2, #0
 8004dda:	2300      	movs	r3, #0
 8004ddc:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004de0:	f7fb fde2 	bl	80009a8 <__aeabi_dcmpeq>
 8004de4:	b9d8      	cbnz	r0, 8004e1e <_printf_float+0x422>
 8004de6:	f109 33ff 	add.w	r3, r9, #4294967295
 8004dea:	f108 0201 	add.w	r2, r8, #1
 8004dee:	4631      	mov	r1, r6
 8004df0:	4628      	mov	r0, r5
 8004df2:	47b8      	blx	r7
 8004df4:	3001      	adds	r0, #1
 8004df6:	d10e      	bne.n	8004e16 <_printf_float+0x41a>
 8004df8:	e65b      	b.n	8004ab2 <_printf_float+0xb6>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	464a      	mov	r2, r9
 8004dfe:	4631      	mov	r1, r6
 8004e00:	4628      	mov	r0, r5
 8004e02:	47b8      	blx	r7
 8004e04:	3001      	adds	r0, #1
 8004e06:	f43f ae54 	beq.w	8004ab2 <_printf_float+0xb6>
 8004e0a:	f108 0801 	add.w	r8, r8, #1
 8004e0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e10:	3b01      	subs	r3, #1
 8004e12:	4543      	cmp	r3, r8
 8004e14:	dcf1      	bgt.n	8004dfa <_printf_float+0x3fe>
 8004e16:	4653      	mov	r3, sl
 8004e18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e1c:	e6de      	b.n	8004bdc <_printf_float+0x1e0>
 8004e1e:	f04f 0800 	mov.w	r8, #0
 8004e22:	f104 091a 	add.w	r9, r4, #26
 8004e26:	e7f2      	b.n	8004e0e <_printf_float+0x412>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	4642      	mov	r2, r8
 8004e2c:	e7df      	b.n	8004dee <_printf_float+0x3f2>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	464a      	mov	r2, r9
 8004e32:	4631      	mov	r1, r6
 8004e34:	4628      	mov	r0, r5
 8004e36:	47b8      	blx	r7
 8004e38:	3001      	adds	r0, #1
 8004e3a:	f43f ae3a 	beq.w	8004ab2 <_printf_float+0xb6>
 8004e3e:	f108 0801 	add.w	r8, r8, #1
 8004e42:	68e3      	ldr	r3, [r4, #12]
 8004e44:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004e46:	1a5b      	subs	r3, r3, r1
 8004e48:	4543      	cmp	r3, r8
 8004e4a:	dcf0      	bgt.n	8004e2e <_printf_float+0x432>
 8004e4c:	e6fb      	b.n	8004c46 <_printf_float+0x24a>
 8004e4e:	f04f 0800 	mov.w	r8, #0
 8004e52:	f104 0919 	add.w	r9, r4, #25
 8004e56:	e7f4      	b.n	8004e42 <_printf_float+0x446>

08004e58 <_printf_common>:
 8004e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e5c:	4616      	mov	r6, r2
 8004e5e:	4699      	mov	r9, r3
 8004e60:	688a      	ldr	r2, [r1, #8]
 8004e62:	690b      	ldr	r3, [r1, #16]
 8004e64:	4607      	mov	r7, r0
 8004e66:	4293      	cmp	r3, r2
 8004e68:	bfb8      	it	lt
 8004e6a:	4613      	movlt	r3, r2
 8004e6c:	6033      	str	r3, [r6, #0]
 8004e6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e72:	460c      	mov	r4, r1
 8004e74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e78:	b10a      	cbz	r2, 8004e7e <_printf_common+0x26>
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	6033      	str	r3, [r6, #0]
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	0699      	lsls	r1, r3, #26
 8004e82:	bf42      	ittt	mi
 8004e84:	6833      	ldrmi	r3, [r6, #0]
 8004e86:	3302      	addmi	r3, #2
 8004e88:	6033      	strmi	r3, [r6, #0]
 8004e8a:	6825      	ldr	r5, [r4, #0]
 8004e8c:	f015 0506 	ands.w	r5, r5, #6
 8004e90:	d106      	bne.n	8004ea0 <_printf_common+0x48>
 8004e92:	f104 0a19 	add.w	sl, r4, #25
 8004e96:	68e3      	ldr	r3, [r4, #12]
 8004e98:	6832      	ldr	r2, [r6, #0]
 8004e9a:	1a9b      	subs	r3, r3, r2
 8004e9c:	42ab      	cmp	r3, r5
 8004e9e:	dc2b      	bgt.n	8004ef8 <_printf_common+0xa0>
 8004ea0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ea4:	1e13      	subs	r3, r2, #0
 8004ea6:	6822      	ldr	r2, [r4, #0]
 8004ea8:	bf18      	it	ne
 8004eaa:	2301      	movne	r3, #1
 8004eac:	0692      	lsls	r2, r2, #26
 8004eae:	d430      	bmi.n	8004f12 <_printf_common+0xba>
 8004eb0:	4649      	mov	r1, r9
 8004eb2:	4638      	mov	r0, r7
 8004eb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004eb8:	47c0      	blx	r8
 8004eba:	3001      	adds	r0, #1
 8004ebc:	d023      	beq.n	8004f06 <_printf_common+0xae>
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	6922      	ldr	r2, [r4, #16]
 8004ec2:	f003 0306 	and.w	r3, r3, #6
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	bf14      	ite	ne
 8004eca:	2500      	movne	r5, #0
 8004ecc:	6833      	ldreq	r3, [r6, #0]
 8004ece:	f04f 0600 	mov.w	r6, #0
 8004ed2:	bf08      	it	eq
 8004ed4:	68e5      	ldreq	r5, [r4, #12]
 8004ed6:	f104 041a 	add.w	r4, r4, #26
 8004eda:	bf08      	it	eq
 8004edc:	1aed      	subeq	r5, r5, r3
 8004ede:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004ee2:	bf08      	it	eq
 8004ee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	bfc4      	itt	gt
 8004eec:	1a9b      	subgt	r3, r3, r2
 8004eee:	18ed      	addgt	r5, r5, r3
 8004ef0:	42b5      	cmp	r5, r6
 8004ef2:	d11a      	bne.n	8004f2a <_printf_common+0xd2>
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	e008      	b.n	8004f0a <_printf_common+0xb2>
 8004ef8:	2301      	movs	r3, #1
 8004efa:	4652      	mov	r2, sl
 8004efc:	4649      	mov	r1, r9
 8004efe:	4638      	mov	r0, r7
 8004f00:	47c0      	blx	r8
 8004f02:	3001      	adds	r0, #1
 8004f04:	d103      	bne.n	8004f0e <_printf_common+0xb6>
 8004f06:	f04f 30ff 	mov.w	r0, #4294967295
 8004f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f0e:	3501      	adds	r5, #1
 8004f10:	e7c1      	b.n	8004e96 <_printf_common+0x3e>
 8004f12:	2030      	movs	r0, #48	; 0x30
 8004f14:	18e1      	adds	r1, r4, r3
 8004f16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f20:	4422      	add	r2, r4
 8004f22:	3302      	adds	r3, #2
 8004f24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f28:	e7c2      	b.n	8004eb0 <_printf_common+0x58>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	4622      	mov	r2, r4
 8004f2e:	4649      	mov	r1, r9
 8004f30:	4638      	mov	r0, r7
 8004f32:	47c0      	blx	r8
 8004f34:	3001      	adds	r0, #1
 8004f36:	d0e6      	beq.n	8004f06 <_printf_common+0xae>
 8004f38:	3601      	adds	r6, #1
 8004f3a:	e7d9      	b.n	8004ef0 <_printf_common+0x98>

08004f3c <_printf_i>:
 8004f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f40:	7e0f      	ldrb	r7, [r1, #24]
 8004f42:	4691      	mov	r9, r2
 8004f44:	2f78      	cmp	r7, #120	; 0x78
 8004f46:	4680      	mov	r8, r0
 8004f48:	460c      	mov	r4, r1
 8004f4a:	469a      	mov	sl, r3
 8004f4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f52:	d807      	bhi.n	8004f64 <_printf_i+0x28>
 8004f54:	2f62      	cmp	r7, #98	; 0x62
 8004f56:	d80a      	bhi.n	8004f6e <_printf_i+0x32>
 8004f58:	2f00      	cmp	r7, #0
 8004f5a:	f000 80d5 	beq.w	8005108 <_printf_i+0x1cc>
 8004f5e:	2f58      	cmp	r7, #88	; 0x58
 8004f60:	f000 80c1 	beq.w	80050e6 <_printf_i+0x1aa>
 8004f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f6c:	e03a      	b.n	8004fe4 <_printf_i+0xa8>
 8004f6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f72:	2b15      	cmp	r3, #21
 8004f74:	d8f6      	bhi.n	8004f64 <_printf_i+0x28>
 8004f76:	a101      	add	r1, pc, #4	; (adr r1, 8004f7c <_printf_i+0x40>)
 8004f78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f7c:	08004fd5 	.word	0x08004fd5
 8004f80:	08004fe9 	.word	0x08004fe9
 8004f84:	08004f65 	.word	0x08004f65
 8004f88:	08004f65 	.word	0x08004f65
 8004f8c:	08004f65 	.word	0x08004f65
 8004f90:	08004f65 	.word	0x08004f65
 8004f94:	08004fe9 	.word	0x08004fe9
 8004f98:	08004f65 	.word	0x08004f65
 8004f9c:	08004f65 	.word	0x08004f65
 8004fa0:	08004f65 	.word	0x08004f65
 8004fa4:	08004f65 	.word	0x08004f65
 8004fa8:	080050ef 	.word	0x080050ef
 8004fac:	08005015 	.word	0x08005015
 8004fb0:	080050a9 	.word	0x080050a9
 8004fb4:	08004f65 	.word	0x08004f65
 8004fb8:	08004f65 	.word	0x08004f65
 8004fbc:	08005111 	.word	0x08005111
 8004fc0:	08004f65 	.word	0x08004f65
 8004fc4:	08005015 	.word	0x08005015
 8004fc8:	08004f65 	.word	0x08004f65
 8004fcc:	08004f65 	.word	0x08004f65
 8004fd0:	080050b1 	.word	0x080050b1
 8004fd4:	682b      	ldr	r3, [r5, #0]
 8004fd6:	1d1a      	adds	r2, r3, #4
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	602a      	str	r2, [r5, #0]
 8004fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e0a0      	b.n	800512a <_printf_i+0x1ee>
 8004fe8:	6820      	ldr	r0, [r4, #0]
 8004fea:	682b      	ldr	r3, [r5, #0]
 8004fec:	0607      	lsls	r7, r0, #24
 8004fee:	f103 0104 	add.w	r1, r3, #4
 8004ff2:	6029      	str	r1, [r5, #0]
 8004ff4:	d501      	bpl.n	8004ffa <_printf_i+0xbe>
 8004ff6:	681e      	ldr	r6, [r3, #0]
 8004ff8:	e003      	b.n	8005002 <_printf_i+0xc6>
 8004ffa:	0646      	lsls	r6, r0, #25
 8004ffc:	d5fb      	bpl.n	8004ff6 <_printf_i+0xba>
 8004ffe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005002:	2e00      	cmp	r6, #0
 8005004:	da03      	bge.n	800500e <_printf_i+0xd2>
 8005006:	232d      	movs	r3, #45	; 0x2d
 8005008:	4276      	negs	r6, r6
 800500a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800500e:	230a      	movs	r3, #10
 8005010:	4859      	ldr	r0, [pc, #356]	; (8005178 <_printf_i+0x23c>)
 8005012:	e012      	b.n	800503a <_printf_i+0xfe>
 8005014:	682b      	ldr	r3, [r5, #0]
 8005016:	6820      	ldr	r0, [r4, #0]
 8005018:	1d19      	adds	r1, r3, #4
 800501a:	6029      	str	r1, [r5, #0]
 800501c:	0605      	lsls	r5, r0, #24
 800501e:	d501      	bpl.n	8005024 <_printf_i+0xe8>
 8005020:	681e      	ldr	r6, [r3, #0]
 8005022:	e002      	b.n	800502a <_printf_i+0xee>
 8005024:	0641      	lsls	r1, r0, #25
 8005026:	d5fb      	bpl.n	8005020 <_printf_i+0xe4>
 8005028:	881e      	ldrh	r6, [r3, #0]
 800502a:	2f6f      	cmp	r7, #111	; 0x6f
 800502c:	bf0c      	ite	eq
 800502e:	2308      	moveq	r3, #8
 8005030:	230a      	movne	r3, #10
 8005032:	4851      	ldr	r0, [pc, #324]	; (8005178 <_printf_i+0x23c>)
 8005034:	2100      	movs	r1, #0
 8005036:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800503a:	6865      	ldr	r5, [r4, #4]
 800503c:	2d00      	cmp	r5, #0
 800503e:	bfa8      	it	ge
 8005040:	6821      	ldrge	r1, [r4, #0]
 8005042:	60a5      	str	r5, [r4, #8]
 8005044:	bfa4      	itt	ge
 8005046:	f021 0104 	bicge.w	r1, r1, #4
 800504a:	6021      	strge	r1, [r4, #0]
 800504c:	b90e      	cbnz	r6, 8005052 <_printf_i+0x116>
 800504e:	2d00      	cmp	r5, #0
 8005050:	d04b      	beq.n	80050ea <_printf_i+0x1ae>
 8005052:	4615      	mov	r5, r2
 8005054:	fbb6 f1f3 	udiv	r1, r6, r3
 8005058:	fb03 6711 	mls	r7, r3, r1, r6
 800505c:	5dc7      	ldrb	r7, [r0, r7]
 800505e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005062:	4637      	mov	r7, r6
 8005064:	42bb      	cmp	r3, r7
 8005066:	460e      	mov	r6, r1
 8005068:	d9f4      	bls.n	8005054 <_printf_i+0x118>
 800506a:	2b08      	cmp	r3, #8
 800506c:	d10b      	bne.n	8005086 <_printf_i+0x14a>
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	07de      	lsls	r6, r3, #31
 8005072:	d508      	bpl.n	8005086 <_printf_i+0x14a>
 8005074:	6923      	ldr	r3, [r4, #16]
 8005076:	6861      	ldr	r1, [r4, #4]
 8005078:	4299      	cmp	r1, r3
 800507a:	bfde      	ittt	le
 800507c:	2330      	movle	r3, #48	; 0x30
 800507e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005082:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005086:	1b52      	subs	r2, r2, r5
 8005088:	6122      	str	r2, [r4, #16]
 800508a:	464b      	mov	r3, r9
 800508c:	4621      	mov	r1, r4
 800508e:	4640      	mov	r0, r8
 8005090:	f8cd a000 	str.w	sl, [sp]
 8005094:	aa03      	add	r2, sp, #12
 8005096:	f7ff fedf 	bl	8004e58 <_printf_common>
 800509a:	3001      	adds	r0, #1
 800509c:	d14a      	bne.n	8005134 <_printf_i+0x1f8>
 800509e:	f04f 30ff 	mov.w	r0, #4294967295
 80050a2:	b004      	add	sp, #16
 80050a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a8:	6823      	ldr	r3, [r4, #0]
 80050aa:	f043 0320 	orr.w	r3, r3, #32
 80050ae:	6023      	str	r3, [r4, #0]
 80050b0:	2778      	movs	r7, #120	; 0x78
 80050b2:	4832      	ldr	r0, [pc, #200]	; (800517c <_printf_i+0x240>)
 80050b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	6829      	ldr	r1, [r5, #0]
 80050bc:	061f      	lsls	r7, r3, #24
 80050be:	f851 6b04 	ldr.w	r6, [r1], #4
 80050c2:	d402      	bmi.n	80050ca <_printf_i+0x18e>
 80050c4:	065f      	lsls	r7, r3, #25
 80050c6:	bf48      	it	mi
 80050c8:	b2b6      	uxthmi	r6, r6
 80050ca:	07df      	lsls	r7, r3, #31
 80050cc:	bf48      	it	mi
 80050ce:	f043 0320 	orrmi.w	r3, r3, #32
 80050d2:	6029      	str	r1, [r5, #0]
 80050d4:	bf48      	it	mi
 80050d6:	6023      	strmi	r3, [r4, #0]
 80050d8:	b91e      	cbnz	r6, 80050e2 <_printf_i+0x1a6>
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	f023 0320 	bic.w	r3, r3, #32
 80050e0:	6023      	str	r3, [r4, #0]
 80050e2:	2310      	movs	r3, #16
 80050e4:	e7a6      	b.n	8005034 <_printf_i+0xf8>
 80050e6:	4824      	ldr	r0, [pc, #144]	; (8005178 <_printf_i+0x23c>)
 80050e8:	e7e4      	b.n	80050b4 <_printf_i+0x178>
 80050ea:	4615      	mov	r5, r2
 80050ec:	e7bd      	b.n	800506a <_printf_i+0x12e>
 80050ee:	682b      	ldr	r3, [r5, #0]
 80050f0:	6826      	ldr	r6, [r4, #0]
 80050f2:	1d18      	adds	r0, r3, #4
 80050f4:	6961      	ldr	r1, [r4, #20]
 80050f6:	6028      	str	r0, [r5, #0]
 80050f8:	0635      	lsls	r5, r6, #24
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	d501      	bpl.n	8005102 <_printf_i+0x1c6>
 80050fe:	6019      	str	r1, [r3, #0]
 8005100:	e002      	b.n	8005108 <_printf_i+0x1cc>
 8005102:	0670      	lsls	r0, r6, #25
 8005104:	d5fb      	bpl.n	80050fe <_printf_i+0x1c2>
 8005106:	8019      	strh	r1, [r3, #0]
 8005108:	2300      	movs	r3, #0
 800510a:	4615      	mov	r5, r2
 800510c:	6123      	str	r3, [r4, #16]
 800510e:	e7bc      	b.n	800508a <_printf_i+0x14e>
 8005110:	682b      	ldr	r3, [r5, #0]
 8005112:	2100      	movs	r1, #0
 8005114:	1d1a      	adds	r2, r3, #4
 8005116:	602a      	str	r2, [r5, #0]
 8005118:	681d      	ldr	r5, [r3, #0]
 800511a:	6862      	ldr	r2, [r4, #4]
 800511c:	4628      	mov	r0, r5
 800511e:	f000 f9c1 	bl	80054a4 <memchr>
 8005122:	b108      	cbz	r0, 8005128 <_printf_i+0x1ec>
 8005124:	1b40      	subs	r0, r0, r5
 8005126:	6060      	str	r0, [r4, #4]
 8005128:	6863      	ldr	r3, [r4, #4]
 800512a:	6123      	str	r3, [r4, #16]
 800512c:	2300      	movs	r3, #0
 800512e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005132:	e7aa      	b.n	800508a <_printf_i+0x14e>
 8005134:	462a      	mov	r2, r5
 8005136:	4649      	mov	r1, r9
 8005138:	4640      	mov	r0, r8
 800513a:	6923      	ldr	r3, [r4, #16]
 800513c:	47d0      	blx	sl
 800513e:	3001      	adds	r0, #1
 8005140:	d0ad      	beq.n	800509e <_printf_i+0x162>
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	079b      	lsls	r3, r3, #30
 8005146:	d413      	bmi.n	8005170 <_printf_i+0x234>
 8005148:	68e0      	ldr	r0, [r4, #12]
 800514a:	9b03      	ldr	r3, [sp, #12]
 800514c:	4298      	cmp	r0, r3
 800514e:	bfb8      	it	lt
 8005150:	4618      	movlt	r0, r3
 8005152:	e7a6      	b.n	80050a2 <_printf_i+0x166>
 8005154:	2301      	movs	r3, #1
 8005156:	4632      	mov	r2, r6
 8005158:	4649      	mov	r1, r9
 800515a:	4640      	mov	r0, r8
 800515c:	47d0      	blx	sl
 800515e:	3001      	adds	r0, #1
 8005160:	d09d      	beq.n	800509e <_printf_i+0x162>
 8005162:	3501      	adds	r5, #1
 8005164:	68e3      	ldr	r3, [r4, #12]
 8005166:	9903      	ldr	r1, [sp, #12]
 8005168:	1a5b      	subs	r3, r3, r1
 800516a:	42ab      	cmp	r3, r5
 800516c:	dcf2      	bgt.n	8005154 <_printf_i+0x218>
 800516e:	e7eb      	b.n	8005148 <_printf_i+0x20c>
 8005170:	2500      	movs	r5, #0
 8005172:	f104 0619 	add.w	r6, r4, #25
 8005176:	e7f5      	b.n	8005164 <_printf_i+0x228>
 8005178:	08007d4c 	.word	0x08007d4c
 800517c:	08007d5d 	.word	0x08007d5d

08005180 <std>:
 8005180:	2300      	movs	r3, #0
 8005182:	b510      	push	{r4, lr}
 8005184:	4604      	mov	r4, r0
 8005186:	e9c0 3300 	strd	r3, r3, [r0]
 800518a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800518e:	6083      	str	r3, [r0, #8]
 8005190:	8181      	strh	r1, [r0, #12]
 8005192:	6643      	str	r3, [r0, #100]	; 0x64
 8005194:	81c2      	strh	r2, [r0, #14]
 8005196:	6183      	str	r3, [r0, #24]
 8005198:	4619      	mov	r1, r3
 800519a:	2208      	movs	r2, #8
 800519c:	305c      	adds	r0, #92	; 0x5c
 800519e:	f000 f902 	bl	80053a6 <memset>
 80051a2:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <std+0x38>)
 80051a4:	6224      	str	r4, [r4, #32]
 80051a6:	6263      	str	r3, [r4, #36]	; 0x24
 80051a8:	4b04      	ldr	r3, [pc, #16]	; (80051bc <std+0x3c>)
 80051aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80051ac:	4b04      	ldr	r3, [pc, #16]	; (80051c0 <std+0x40>)
 80051ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051b0:	4b04      	ldr	r3, [pc, #16]	; (80051c4 <std+0x44>)
 80051b2:	6323      	str	r3, [r4, #48]	; 0x30
 80051b4:	bd10      	pop	{r4, pc}
 80051b6:	bf00      	nop
 80051b8:	08005321 	.word	0x08005321
 80051bc:	08005343 	.word	0x08005343
 80051c0:	0800537b 	.word	0x0800537b
 80051c4:	0800539f 	.word	0x0800539f

080051c8 <stdio_exit_handler>:
 80051c8:	4a02      	ldr	r2, [pc, #8]	; (80051d4 <stdio_exit_handler+0xc>)
 80051ca:	4903      	ldr	r1, [pc, #12]	; (80051d8 <stdio_exit_handler+0x10>)
 80051cc:	4803      	ldr	r0, [pc, #12]	; (80051dc <stdio_exit_handler+0x14>)
 80051ce:	f000 b869 	b.w	80052a4 <_fwalk_sglue>
 80051d2:	bf00      	nop
 80051d4:	20000014 	.word	0x20000014
 80051d8:	08006e3d 	.word	0x08006e3d
 80051dc:	20000020 	.word	0x20000020

080051e0 <cleanup_stdio>:
 80051e0:	6841      	ldr	r1, [r0, #4]
 80051e2:	4b0c      	ldr	r3, [pc, #48]	; (8005214 <cleanup_stdio+0x34>)
 80051e4:	b510      	push	{r4, lr}
 80051e6:	4299      	cmp	r1, r3
 80051e8:	4604      	mov	r4, r0
 80051ea:	d001      	beq.n	80051f0 <cleanup_stdio+0x10>
 80051ec:	f001 fe26 	bl	8006e3c <_fflush_r>
 80051f0:	68a1      	ldr	r1, [r4, #8]
 80051f2:	4b09      	ldr	r3, [pc, #36]	; (8005218 <cleanup_stdio+0x38>)
 80051f4:	4299      	cmp	r1, r3
 80051f6:	d002      	beq.n	80051fe <cleanup_stdio+0x1e>
 80051f8:	4620      	mov	r0, r4
 80051fa:	f001 fe1f 	bl	8006e3c <_fflush_r>
 80051fe:	68e1      	ldr	r1, [r4, #12]
 8005200:	4b06      	ldr	r3, [pc, #24]	; (800521c <cleanup_stdio+0x3c>)
 8005202:	4299      	cmp	r1, r3
 8005204:	d004      	beq.n	8005210 <cleanup_stdio+0x30>
 8005206:	4620      	mov	r0, r4
 8005208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800520c:	f001 be16 	b.w	8006e3c <_fflush_r>
 8005210:	bd10      	pop	{r4, pc}
 8005212:	bf00      	nop
 8005214:	20000510 	.word	0x20000510
 8005218:	20000578 	.word	0x20000578
 800521c:	200005e0 	.word	0x200005e0

08005220 <global_stdio_init.part.0>:
 8005220:	b510      	push	{r4, lr}
 8005222:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <global_stdio_init.part.0+0x30>)
 8005224:	4c0b      	ldr	r4, [pc, #44]	; (8005254 <global_stdio_init.part.0+0x34>)
 8005226:	4a0c      	ldr	r2, [pc, #48]	; (8005258 <global_stdio_init.part.0+0x38>)
 8005228:	4620      	mov	r0, r4
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	2104      	movs	r1, #4
 800522e:	2200      	movs	r2, #0
 8005230:	f7ff ffa6 	bl	8005180 <std>
 8005234:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005238:	2201      	movs	r2, #1
 800523a:	2109      	movs	r1, #9
 800523c:	f7ff ffa0 	bl	8005180 <std>
 8005240:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005244:	2202      	movs	r2, #2
 8005246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800524a:	2112      	movs	r1, #18
 800524c:	f7ff bf98 	b.w	8005180 <std>
 8005250:	20000648 	.word	0x20000648
 8005254:	20000510 	.word	0x20000510
 8005258:	080051c9 	.word	0x080051c9

0800525c <__sfp_lock_acquire>:
 800525c:	4801      	ldr	r0, [pc, #4]	; (8005264 <__sfp_lock_acquire+0x8>)
 800525e:	f000 b91f 	b.w	80054a0 <__retarget_lock_acquire_recursive>
 8005262:	bf00      	nop
 8005264:	20000651 	.word	0x20000651

08005268 <__sfp_lock_release>:
 8005268:	4801      	ldr	r0, [pc, #4]	; (8005270 <__sfp_lock_release+0x8>)
 800526a:	f000 b91a 	b.w	80054a2 <__retarget_lock_release_recursive>
 800526e:	bf00      	nop
 8005270:	20000651 	.word	0x20000651

08005274 <__sinit>:
 8005274:	b510      	push	{r4, lr}
 8005276:	4604      	mov	r4, r0
 8005278:	f7ff fff0 	bl	800525c <__sfp_lock_acquire>
 800527c:	6a23      	ldr	r3, [r4, #32]
 800527e:	b11b      	cbz	r3, 8005288 <__sinit+0x14>
 8005280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005284:	f7ff bff0 	b.w	8005268 <__sfp_lock_release>
 8005288:	4b04      	ldr	r3, [pc, #16]	; (800529c <__sinit+0x28>)
 800528a:	6223      	str	r3, [r4, #32]
 800528c:	4b04      	ldr	r3, [pc, #16]	; (80052a0 <__sinit+0x2c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1f5      	bne.n	8005280 <__sinit+0xc>
 8005294:	f7ff ffc4 	bl	8005220 <global_stdio_init.part.0>
 8005298:	e7f2      	b.n	8005280 <__sinit+0xc>
 800529a:	bf00      	nop
 800529c:	080051e1 	.word	0x080051e1
 80052a0:	20000648 	.word	0x20000648

080052a4 <_fwalk_sglue>:
 80052a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052a8:	4607      	mov	r7, r0
 80052aa:	4688      	mov	r8, r1
 80052ac:	4614      	mov	r4, r2
 80052ae:	2600      	movs	r6, #0
 80052b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052b4:	f1b9 0901 	subs.w	r9, r9, #1
 80052b8:	d505      	bpl.n	80052c6 <_fwalk_sglue+0x22>
 80052ba:	6824      	ldr	r4, [r4, #0]
 80052bc:	2c00      	cmp	r4, #0
 80052be:	d1f7      	bne.n	80052b0 <_fwalk_sglue+0xc>
 80052c0:	4630      	mov	r0, r6
 80052c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052c6:	89ab      	ldrh	r3, [r5, #12]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d907      	bls.n	80052dc <_fwalk_sglue+0x38>
 80052cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052d0:	3301      	adds	r3, #1
 80052d2:	d003      	beq.n	80052dc <_fwalk_sglue+0x38>
 80052d4:	4629      	mov	r1, r5
 80052d6:	4638      	mov	r0, r7
 80052d8:	47c0      	blx	r8
 80052da:	4306      	orrs	r6, r0
 80052dc:	3568      	adds	r5, #104	; 0x68
 80052de:	e7e9      	b.n	80052b4 <_fwalk_sglue+0x10>

080052e0 <siprintf>:
 80052e0:	b40e      	push	{r1, r2, r3}
 80052e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80052e6:	b500      	push	{lr}
 80052e8:	b09c      	sub	sp, #112	; 0x70
 80052ea:	ab1d      	add	r3, sp, #116	; 0x74
 80052ec:	9002      	str	r0, [sp, #8]
 80052ee:	9006      	str	r0, [sp, #24]
 80052f0:	9107      	str	r1, [sp, #28]
 80052f2:	9104      	str	r1, [sp, #16]
 80052f4:	4808      	ldr	r0, [pc, #32]	; (8005318 <siprintf+0x38>)
 80052f6:	4909      	ldr	r1, [pc, #36]	; (800531c <siprintf+0x3c>)
 80052f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80052fc:	9105      	str	r1, [sp, #20]
 80052fe:	6800      	ldr	r0, [r0, #0]
 8005300:	a902      	add	r1, sp, #8
 8005302:	9301      	str	r3, [sp, #4]
 8005304:	f001 fc1a 	bl	8006b3c <_svfiprintf_r>
 8005308:	2200      	movs	r2, #0
 800530a:	9b02      	ldr	r3, [sp, #8]
 800530c:	701a      	strb	r2, [r3, #0]
 800530e:	b01c      	add	sp, #112	; 0x70
 8005310:	f85d eb04 	ldr.w	lr, [sp], #4
 8005314:	b003      	add	sp, #12
 8005316:	4770      	bx	lr
 8005318:	2000006c 	.word	0x2000006c
 800531c:	ffff0208 	.word	0xffff0208

08005320 <__sread>:
 8005320:	b510      	push	{r4, lr}
 8005322:	460c      	mov	r4, r1
 8005324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005328:	f000 f86c 	bl	8005404 <_read_r>
 800532c:	2800      	cmp	r0, #0
 800532e:	bfab      	itete	ge
 8005330:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005332:	89a3      	ldrhlt	r3, [r4, #12]
 8005334:	181b      	addge	r3, r3, r0
 8005336:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800533a:	bfac      	ite	ge
 800533c:	6563      	strge	r3, [r4, #84]	; 0x54
 800533e:	81a3      	strhlt	r3, [r4, #12]
 8005340:	bd10      	pop	{r4, pc}

08005342 <__swrite>:
 8005342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005346:	461f      	mov	r7, r3
 8005348:	898b      	ldrh	r3, [r1, #12]
 800534a:	4605      	mov	r5, r0
 800534c:	05db      	lsls	r3, r3, #23
 800534e:	460c      	mov	r4, r1
 8005350:	4616      	mov	r6, r2
 8005352:	d505      	bpl.n	8005360 <__swrite+0x1e>
 8005354:	2302      	movs	r3, #2
 8005356:	2200      	movs	r2, #0
 8005358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800535c:	f000 f840 	bl	80053e0 <_lseek_r>
 8005360:	89a3      	ldrh	r3, [r4, #12]
 8005362:	4632      	mov	r2, r6
 8005364:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005368:	81a3      	strh	r3, [r4, #12]
 800536a:	4628      	mov	r0, r5
 800536c:	463b      	mov	r3, r7
 800536e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005376:	f000 b857 	b.w	8005428 <_write_r>

0800537a <__sseek>:
 800537a:	b510      	push	{r4, lr}
 800537c:	460c      	mov	r4, r1
 800537e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005382:	f000 f82d 	bl	80053e0 <_lseek_r>
 8005386:	1c43      	adds	r3, r0, #1
 8005388:	89a3      	ldrh	r3, [r4, #12]
 800538a:	bf15      	itete	ne
 800538c:	6560      	strne	r0, [r4, #84]	; 0x54
 800538e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005392:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005396:	81a3      	strheq	r3, [r4, #12]
 8005398:	bf18      	it	ne
 800539a:	81a3      	strhne	r3, [r4, #12]
 800539c:	bd10      	pop	{r4, pc}

0800539e <__sclose>:
 800539e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053a2:	f000 b80d 	b.w	80053c0 <_close_r>

080053a6 <memset>:
 80053a6:	4603      	mov	r3, r0
 80053a8:	4402      	add	r2, r0
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d100      	bne.n	80053b0 <memset+0xa>
 80053ae:	4770      	bx	lr
 80053b0:	f803 1b01 	strb.w	r1, [r3], #1
 80053b4:	e7f9      	b.n	80053aa <memset+0x4>
	...

080053b8 <_localeconv_r>:
 80053b8:	4800      	ldr	r0, [pc, #0]	; (80053bc <_localeconv_r+0x4>)
 80053ba:	4770      	bx	lr
 80053bc:	20000160 	.word	0x20000160

080053c0 <_close_r>:
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	2300      	movs	r3, #0
 80053c4:	4d05      	ldr	r5, [pc, #20]	; (80053dc <_close_r+0x1c>)
 80053c6:	4604      	mov	r4, r0
 80053c8:	4608      	mov	r0, r1
 80053ca:	602b      	str	r3, [r5, #0]
 80053cc:	f7fc fd80 	bl	8001ed0 <_close>
 80053d0:	1c43      	adds	r3, r0, #1
 80053d2:	d102      	bne.n	80053da <_close_r+0x1a>
 80053d4:	682b      	ldr	r3, [r5, #0]
 80053d6:	b103      	cbz	r3, 80053da <_close_r+0x1a>
 80053d8:	6023      	str	r3, [r4, #0]
 80053da:	bd38      	pop	{r3, r4, r5, pc}
 80053dc:	2000064c 	.word	0x2000064c

080053e0 <_lseek_r>:
 80053e0:	b538      	push	{r3, r4, r5, lr}
 80053e2:	4604      	mov	r4, r0
 80053e4:	4608      	mov	r0, r1
 80053e6:	4611      	mov	r1, r2
 80053e8:	2200      	movs	r2, #0
 80053ea:	4d05      	ldr	r5, [pc, #20]	; (8005400 <_lseek_r+0x20>)
 80053ec:	602a      	str	r2, [r5, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	f7fc fd92 	bl	8001f18 <_lseek>
 80053f4:	1c43      	adds	r3, r0, #1
 80053f6:	d102      	bne.n	80053fe <_lseek_r+0x1e>
 80053f8:	682b      	ldr	r3, [r5, #0]
 80053fa:	b103      	cbz	r3, 80053fe <_lseek_r+0x1e>
 80053fc:	6023      	str	r3, [r4, #0]
 80053fe:	bd38      	pop	{r3, r4, r5, pc}
 8005400:	2000064c 	.word	0x2000064c

08005404 <_read_r>:
 8005404:	b538      	push	{r3, r4, r5, lr}
 8005406:	4604      	mov	r4, r0
 8005408:	4608      	mov	r0, r1
 800540a:	4611      	mov	r1, r2
 800540c:	2200      	movs	r2, #0
 800540e:	4d05      	ldr	r5, [pc, #20]	; (8005424 <_read_r+0x20>)
 8005410:	602a      	str	r2, [r5, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	f7fc fd23 	bl	8001e5e <_read>
 8005418:	1c43      	adds	r3, r0, #1
 800541a:	d102      	bne.n	8005422 <_read_r+0x1e>
 800541c:	682b      	ldr	r3, [r5, #0]
 800541e:	b103      	cbz	r3, 8005422 <_read_r+0x1e>
 8005420:	6023      	str	r3, [r4, #0]
 8005422:	bd38      	pop	{r3, r4, r5, pc}
 8005424:	2000064c 	.word	0x2000064c

08005428 <_write_r>:
 8005428:	b538      	push	{r3, r4, r5, lr}
 800542a:	4604      	mov	r4, r0
 800542c:	4608      	mov	r0, r1
 800542e:	4611      	mov	r1, r2
 8005430:	2200      	movs	r2, #0
 8005432:	4d05      	ldr	r5, [pc, #20]	; (8005448 <_write_r+0x20>)
 8005434:	602a      	str	r2, [r5, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	f7fc fd2e 	bl	8001e98 <_write>
 800543c:	1c43      	adds	r3, r0, #1
 800543e:	d102      	bne.n	8005446 <_write_r+0x1e>
 8005440:	682b      	ldr	r3, [r5, #0]
 8005442:	b103      	cbz	r3, 8005446 <_write_r+0x1e>
 8005444:	6023      	str	r3, [r4, #0]
 8005446:	bd38      	pop	{r3, r4, r5, pc}
 8005448:	2000064c 	.word	0x2000064c

0800544c <__errno>:
 800544c:	4b01      	ldr	r3, [pc, #4]	; (8005454 <__errno+0x8>)
 800544e:	6818      	ldr	r0, [r3, #0]
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	2000006c 	.word	0x2000006c

08005458 <__libc_init_array>:
 8005458:	b570      	push	{r4, r5, r6, lr}
 800545a:	2600      	movs	r6, #0
 800545c:	4d0c      	ldr	r5, [pc, #48]	; (8005490 <__libc_init_array+0x38>)
 800545e:	4c0d      	ldr	r4, [pc, #52]	; (8005494 <__libc_init_array+0x3c>)
 8005460:	1b64      	subs	r4, r4, r5
 8005462:	10a4      	asrs	r4, r4, #2
 8005464:	42a6      	cmp	r6, r4
 8005466:	d109      	bne.n	800547c <__libc_init_array+0x24>
 8005468:	f002 f888 	bl	800757c <_init>
 800546c:	2600      	movs	r6, #0
 800546e:	4d0a      	ldr	r5, [pc, #40]	; (8005498 <__libc_init_array+0x40>)
 8005470:	4c0a      	ldr	r4, [pc, #40]	; (800549c <__libc_init_array+0x44>)
 8005472:	1b64      	subs	r4, r4, r5
 8005474:	10a4      	asrs	r4, r4, #2
 8005476:	42a6      	cmp	r6, r4
 8005478:	d105      	bne.n	8005486 <__libc_init_array+0x2e>
 800547a:	bd70      	pop	{r4, r5, r6, pc}
 800547c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005480:	4798      	blx	r3
 8005482:	3601      	adds	r6, #1
 8005484:	e7ee      	b.n	8005464 <__libc_init_array+0xc>
 8005486:	f855 3b04 	ldr.w	r3, [r5], #4
 800548a:	4798      	blx	r3
 800548c:	3601      	adds	r6, #1
 800548e:	e7f2      	b.n	8005476 <__libc_init_array+0x1e>
 8005490:	080080ac 	.word	0x080080ac
 8005494:	080080ac 	.word	0x080080ac
 8005498:	080080ac 	.word	0x080080ac
 800549c:	080080b0 	.word	0x080080b0

080054a0 <__retarget_lock_acquire_recursive>:
 80054a0:	4770      	bx	lr

080054a2 <__retarget_lock_release_recursive>:
 80054a2:	4770      	bx	lr

080054a4 <memchr>:
 80054a4:	4603      	mov	r3, r0
 80054a6:	b510      	push	{r4, lr}
 80054a8:	b2c9      	uxtb	r1, r1
 80054aa:	4402      	add	r2, r0
 80054ac:	4293      	cmp	r3, r2
 80054ae:	4618      	mov	r0, r3
 80054b0:	d101      	bne.n	80054b6 <memchr+0x12>
 80054b2:	2000      	movs	r0, #0
 80054b4:	e003      	b.n	80054be <memchr+0x1a>
 80054b6:	7804      	ldrb	r4, [r0, #0]
 80054b8:	3301      	adds	r3, #1
 80054ba:	428c      	cmp	r4, r1
 80054bc:	d1f6      	bne.n	80054ac <memchr+0x8>
 80054be:	bd10      	pop	{r4, pc}

080054c0 <quorem>:
 80054c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c4:	6903      	ldr	r3, [r0, #16]
 80054c6:	690c      	ldr	r4, [r1, #16]
 80054c8:	4607      	mov	r7, r0
 80054ca:	42a3      	cmp	r3, r4
 80054cc:	db7f      	blt.n	80055ce <quorem+0x10e>
 80054ce:	3c01      	subs	r4, #1
 80054d0:	f100 0514 	add.w	r5, r0, #20
 80054d4:	f101 0814 	add.w	r8, r1, #20
 80054d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054dc:	9301      	str	r3, [sp, #4]
 80054de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80054e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80054e6:	3301      	adds	r3, #1
 80054e8:	429a      	cmp	r2, r3
 80054ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80054ee:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80054f2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80054f6:	d331      	bcc.n	800555c <quorem+0x9c>
 80054f8:	f04f 0e00 	mov.w	lr, #0
 80054fc:	4640      	mov	r0, r8
 80054fe:	46ac      	mov	ip, r5
 8005500:	46f2      	mov	sl, lr
 8005502:	f850 2b04 	ldr.w	r2, [r0], #4
 8005506:	b293      	uxth	r3, r2
 8005508:	fb06 e303 	mla	r3, r6, r3, lr
 800550c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005510:	0c1a      	lsrs	r2, r3, #16
 8005512:	b29b      	uxth	r3, r3
 8005514:	fb06 220e 	mla	r2, r6, lr, r2
 8005518:	ebaa 0303 	sub.w	r3, sl, r3
 800551c:	f8dc a000 	ldr.w	sl, [ip]
 8005520:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005524:	fa1f fa8a 	uxth.w	sl, sl
 8005528:	4453      	add	r3, sl
 800552a:	f8dc a000 	ldr.w	sl, [ip]
 800552e:	b292      	uxth	r2, r2
 8005530:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005534:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005538:	b29b      	uxth	r3, r3
 800553a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800553e:	4581      	cmp	r9, r0
 8005540:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005544:	f84c 3b04 	str.w	r3, [ip], #4
 8005548:	d2db      	bcs.n	8005502 <quorem+0x42>
 800554a:	f855 300b 	ldr.w	r3, [r5, fp]
 800554e:	b92b      	cbnz	r3, 800555c <quorem+0x9c>
 8005550:	9b01      	ldr	r3, [sp, #4]
 8005552:	3b04      	subs	r3, #4
 8005554:	429d      	cmp	r5, r3
 8005556:	461a      	mov	r2, r3
 8005558:	d32d      	bcc.n	80055b6 <quorem+0xf6>
 800555a:	613c      	str	r4, [r7, #16]
 800555c:	4638      	mov	r0, r7
 800555e:	f001 f995 	bl	800688c <__mcmp>
 8005562:	2800      	cmp	r0, #0
 8005564:	db23      	blt.n	80055ae <quorem+0xee>
 8005566:	4629      	mov	r1, r5
 8005568:	2000      	movs	r0, #0
 800556a:	3601      	adds	r6, #1
 800556c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005570:	f8d1 c000 	ldr.w	ip, [r1]
 8005574:	b293      	uxth	r3, r2
 8005576:	1ac3      	subs	r3, r0, r3
 8005578:	0c12      	lsrs	r2, r2, #16
 800557a:	fa1f f08c 	uxth.w	r0, ip
 800557e:	4403      	add	r3, r0
 8005580:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005584:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005588:	b29b      	uxth	r3, r3
 800558a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800558e:	45c1      	cmp	r9, r8
 8005590:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005594:	f841 3b04 	str.w	r3, [r1], #4
 8005598:	d2e8      	bcs.n	800556c <quorem+0xac>
 800559a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800559e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055a2:	b922      	cbnz	r2, 80055ae <quorem+0xee>
 80055a4:	3b04      	subs	r3, #4
 80055a6:	429d      	cmp	r5, r3
 80055a8:	461a      	mov	r2, r3
 80055aa:	d30a      	bcc.n	80055c2 <quorem+0x102>
 80055ac:	613c      	str	r4, [r7, #16]
 80055ae:	4630      	mov	r0, r6
 80055b0:	b003      	add	sp, #12
 80055b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055b6:	6812      	ldr	r2, [r2, #0]
 80055b8:	3b04      	subs	r3, #4
 80055ba:	2a00      	cmp	r2, #0
 80055bc:	d1cd      	bne.n	800555a <quorem+0x9a>
 80055be:	3c01      	subs	r4, #1
 80055c0:	e7c8      	b.n	8005554 <quorem+0x94>
 80055c2:	6812      	ldr	r2, [r2, #0]
 80055c4:	3b04      	subs	r3, #4
 80055c6:	2a00      	cmp	r2, #0
 80055c8:	d1f0      	bne.n	80055ac <quorem+0xec>
 80055ca:	3c01      	subs	r4, #1
 80055cc:	e7eb      	b.n	80055a6 <quorem+0xe6>
 80055ce:	2000      	movs	r0, #0
 80055d0:	e7ee      	b.n	80055b0 <quorem+0xf0>
 80055d2:	0000      	movs	r0, r0
 80055d4:	0000      	movs	r0, r0
	...

080055d8 <_dtoa_r>:
 80055d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055dc:	4616      	mov	r6, r2
 80055de:	461f      	mov	r7, r3
 80055e0:	69c4      	ldr	r4, [r0, #28]
 80055e2:	b099      	sub	sp, #100	; 0x64
 80055e4:	4605      	mov	r5, r0
 80055e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80055ea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80055ee:	b974      	cbnz	r4, 800560e <_dtoa_r+0x36>
 80055f0:	2010      	movs	r0, #16
 80055f2:	f000 fe1d 	bl	8006230 <malloc>
 80055f6:	4602      	mov	r2, r0
 80055f8:	61e8      	str	r0, [r5, #28]
 80055fa:	b920      	cbnz	r0, 8005606 <_dtoa_r+0x2e>
 80055fc:	21ef      	movs	r1, #239	; 0xef
 80055fe:	4bac      	ldr	r3, [pc, #688]	; (80058b0 <_dtoa_r+0x2d8>)
 8005600:	48ac      	ldr	r0, [pc, #688]	; (80058b4 <_dtoa_r+0x2dc>)
 8005602:	f001 fc7b 	bl	8006efc <__assert_func>
 8005606:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800560a:	6004      	str	r4, [r0, #0]
 800560c:	60c4      	str	r4, [r0, #12]
 800560e:	69eb      	ldr	r3, [r5, #28]
 8005610:	6819      	ldr	r1, [r3, #0]
 8005612:	b151      	cbz	r1, 800562a <_dtoa_r+0x52>
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	2301      	movs	r3, #1
 8005618:	4093      	lsls	r3, r2
 800561a:	604a      	str	r2, [r1, #4]
 800561c:	608b      	str	r3, [r1, #8]
 800561e:	4628      	mov	r0, r5
 8005620:	f000 fefa 	bl	8006418 <_Bfree>
 8005624:	2200      	movs	r2, #0
 8005626:	69eb      	ldr	r3, [r5, #28]
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	1e3b      	subs	r3, r7, #0
 800562c:	bfaf      	iteee	ge
 800562e:	2300      	movge	r3, #0
 8005630:	2201      	movlt	r2, #1
 8005632:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005636:	9305      	strlt	r3, [sp, #20]
 8005638:	bfa8      	it	ge
 800563a:	f8c8 3000 	strge.w	r3, [r8]
 800563e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005642:	4b9d      	ldr	r3, [pc, #628]	; (80058b8 <_dtoa_r+0x2e0>)
 8005644:	bfb8      	it	lt
 8005646:	f8c8 2000 	strlt.w	r2, [r8]
 800564a:	ea33 0309 	bics.w	r3, r3, r9
 800564e:	d119      	bne.n	8005684 <_dtoa_r+0xac>
 8005650:	f242 730f 	movw	r3, #9999	; 0x270f
 8005654:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005656:	6013      	str	r3, [r2, #0]
 8005658:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800565c:	4333      	orrs	r3, r6
 800565e:	f000 8589 	beq.w	8006174 <_dtoa_r+0xb9c>
 8005662:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005664:	b953      	cbnz	r3, 800567c <_dtoa_r+0xa4>
 8005666:	4b95      	ldr	r3, [pc, #596]	; (80058bc <_dtoa_r+0x2e4>)
 8005668:	e023      	b.n	80056b2 <_dtoa_r+0xda>
 800566a:	4b95      	ldr	r3, [pc, #596]	; (80058c0 <_dtoa_r+0x2e8>)
 800566c:	9303      	str	r3, [sp, #12]
 800566e:	3308      	adds	r3, #8
 8005670:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	9803      	ldr	r0, [sp, #12]
 8005676:	b019      	add	sp, #100	; 0x64
 8005678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800567c:	4b8f      	ldr	r3, [pc, #572]	; (80058bc <_dtoa_r+0x2e4>)
 800567e:	9303      	str	r3, [sp, #12]
 8005680:	3303      	adds	r3, #3
 8005682:	e7f5      	b.n	8005670 <_dtoa_r+0x98>
 8005684:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005688:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800568c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005690:	2200      	movs	r2, #0
 8005692:	2300      	movs	r3, #0
 8005694:	f7fb f988 	bl	80009a8 <__aeabi_dcmpeq>
 8005698:	4680      	mov	r8, r0
 800569a:	b160      	cbz	r0, 80056b6 <_dtoa_r+0xde>
 800569c:	2301      	movs	r3, #1
 800569e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80056a0:	6013      	str	r3, [r2, #0]
 80056a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 8562 	beq.w	800616e <_dtoa_r+0xb96>
 80056aa:	4b86      	ldr	r3, [pc, #536]	; (80058c4 <_dtoa_r+0x2ec>)
 80056ac:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80056ae:	6013      	str	r3, [r2, #0]
 80056b0:	3b01      	subs	r3, #1
 80056b2:	9303      	str	r3, [sp, #12]
 80056b4:	e7de      	b.n	8005674 <_dtoa_r+0x9c>
 80056b6:	ab16      	add	r3, sp, #88	; 0x58
 80056b8:	9301      	str	r3, [sp, #4]
 80056ba:	ab17      	add	r3, sp, #92	; 0x5c
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	4628      	mov	r0, r5
 80056c0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80056c4:	f001 f98a 	bl	80069dc <__d2b>
 80056c8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80056cc:	4682      	mov	sl, r0
 80056ce:	2c00      	cmp	r4, #0
 80056d0:	d07e      	beq.n	80057d0 <_dtoa_r+0x1f8>
 80056d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056d8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80056dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056e0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80056e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80056e8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80056ec:	4619      	mov	r1, r3
 80056ee:	2200      	movs	r2, #0
 80056f0:	4b75      	ldr	r3, [pc, #468]	; (80058c8 <_dtoa_r+0x2f0>)
 80056f2:	f7fa fd39 	bl	8000168 <__aeabi_dsub>
 80056f6:	a368      	add	r3, pc, #416	; (adr r3, 8005898 <_dtoa_r+0x2c0>)
 80056f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fc:	f7fa feec 	bl	80004d8 <__aeabi_dmul>
 8005700:	a367      	add	r3, pc, #412	; (adr r3, 80058a0 <_dtoa_r+0x2c8>)
 8005702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005706:	f7fa fd31 	bl	800016c <__adddf3>
 800570a:	4606      	mov	r6, r0
 800570c:	4620      	mov	r0, r4
 800570e:	460f      	mov	r7, r1
 8005710:	f7fa fe78 	bl	8000404 <__aeabi_i2d>
 8005714:	a364      	add	r3, pc, #400	; (adr r3, 80058a8 <_dtoa_r+0x2d0>)
 8005716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571a:	f7fa fedd 	bl	80004d8 <__aeabi_dmul>
 800571e:	4602      	mov	r2, r0
 8005720:	460b      	mov	r3, r1
 8005722:	4630      	mov	r0, r6
 8005724:	4639      	mov	r1, r7
 8005726:	f7fa fd21 	bl	800016c <__adddf3>
 800572a:	4606      	mov	r6, r0
 800572c:	460f      	mov	r7, r1
 800572e:	f7fb f983 	bl	8000a38 <__aeabi_d2iz>
 8005732:	2200      	movs	r2, #0
 8005734:	4683      	mov	fp, r0
 8005736:	2300      	movs	r3, #0
 8005738:	4630      	mov	r0, r6
 800573a:	4639      	mov	r1, r7
 800573c:	f7fb f93e 	bl	80009bc <__aeabi_dcmplt>
 8005740:	b148      	cbz	r0, 8005756 <_dtoa_r+0x17e>
 8005742:	4658      	mov	r0, fp
 8005744:	f7fa fe5e 	bl	8000404 <__aeabi_i2d>
 8005748:	4632      	mov	r2, r6
 800574a:	463b      	mov	r3, r7
 800574c:	f7fb f92c 	bl	80009a8 <__aeabi_dcmpeq>
 8005750:	b908      	cbnz	r0, 8005756 <_dtoa_r+0x17e>
 8005752:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005756:	f1bb 0f16 	cmp.w	fp, #22
 800575a:	d857      	bhi.n	800580c <_dtoa_r+0x234>
 800575c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005760:	4b5a      	ldr	r3, [pc, #360]	; (80058cc <_dtoa_r+0x2f4>)
 8005762:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576a:	f7fb f927 	bl	80009bc <__aeabi_dcmplt>
 800576e:	2800      	cmp	r0, #0
 8005770:	d04e      	beq.n	8005810 <_dtoa_r+0x238>
 8005772:	2300      	movs	r3, #0
 8005774:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005778:	930f      	str	r3, [sp, #60]	; 0x3c
 800577a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800577c:	1b1b      	subs	r3, r3, r4
 800577e:	1e5a      	subs	r2, r3, #1
 8005780:	bf46      	itte	mi
 8005782:	f1c3 0901 	rsbmi	r9, r3, #1
 8005786:	2300      	movmi	r3, #0
 8005788:	f04f 0900 	movpl.w	r9, #0
 800578c:	9209      	str	r2, [sp, #36]	; 0x24
 800578e:	bf48      	it	mi
 8005790:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005792:	f1bb 0f00 	cmp.w	fp, #0
 8005796:	db3d      	blt.n	8005814 <_dtoa_r+0x23c>
 8005798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800579a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800579e:	445b      	add	r3, fp
 80057a0:	9309      	str	r3, [sp, #36]	; 0x24
 80057a2:	2300      	movs	r3, #0
 80057a4:	930a      	str	r3, [sp, #40]	; 0x28
 80057a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057a8:	2b09      	cmp	r3, #9
 80057aa:	d867      	bhi.n	800587c <_dtoa_r+0x2a4>
 80057ac:	2b05      	cmp	r3, #5
 80057ae:	bfc4      	itt	gt
 80057b0:	3b04      	subgt	r3, #4
 80057b2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80057b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057b6:	bfc8      	it	gt
 80057b8:	2400      	movgt	r4, #0
 80057ba:	f1a3 0302 	sub.w	r3, r3, #2
 80057be:	bfd8      	it	le
 80057c0:	2401      	movle	r4, #1
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	f200 8086 	bhi.w	80058d4 <_dtoa_r+0x2fc>
 80057c8:	e8df f003 	tbb	[pc, r3]
 80057cc:	5637392c 	.word	0x5637392c
 80057d0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80057d4:	441c      	add	r4, r3
 80057d6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80057da:	2b20      	cmp	r3, #32
 80057dc:	bfc1      	itttt	gt
 80057de:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80057e2:	fa09 f903 	lslgt.w	r9, r9, r3
 80057e6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80057ea:	fa26 f303 	lsrgt.w	r3, r6, r3
 80057ee:	bfd6      	itet	le
 80057f0:	f1c3 0320 	rsble	r3, r3, #32
 80057f4:	ea49 0003 	orrgt.w	r0, r9, r3
 80057f8:	fa06 f003 	lslle.w	r0, r6, r3
 80057fc:	f7fa fdf2 	bl	80003e4 <__aeabi_ui2d>
 8005800:	2201      	movs	r2, #1
 8005802:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005806:	3c01      	subs	r4, #1
 8005808:	9213      	str	r2, [sp, #76]	; 0x4c
 800580a:	e76f      	b.n	80056ec <_dtoa_r+0x114>
 800580c:	2301      	movs	r3, #1
 800580e:	e7b3      	b.n	8005778 <_dtoa_r+0x1a0>
 8005810:	900f      	str	r0, [sp, #60]	; 0x3c
 8005812:	e7b2      	b.n	800577a <_dtoa_r+0x1a2>
 8005814:	f1cb 0300 	rsb	r3, fp, #0
 8005818:	930a      	str	r3, [sp, #40]	; 0x28
 800581a:	2300      	movs	r3, #0
 800581c:	eba9 090b 	sub.w	r9, r9, fp
 8005820:	930e      	str	r3, [sp, #56]	; 0x38
 8005822:	e7c0      	b.n	80057a6 <_dtoa_r+0x1ce>
 8005824:	2300      	movs	r3, #0
 8005826:	930b      	str	r3, [sp, #44]	; 0x2c
 8005828:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800582a:	2b00      	cmp	r3, #0
 800582c:	dc55      	bgt.n	80058da <_dtoa_r+0x302>
 800582e:	2301      	movs	r3, #1
 8005830:	461a      	mov	r2, r3
 8005832:	9306      	str	r3, [sp, #24]
 8005834:	9308      	str	r3, [sp, #32]
 8005836:	9223      	str	r2, [sp, #140]	; 0x8c
 8005838:	e00b      	b.n	8005852 <_dtoa_r+0x27a>
 800583a:	2301      	movs	r3, #1
 800583c:	e7f3      	b.n	8005826 <_dtoa_r+0x24e>
 800583e:	2300      	movs	r3, #0
 8005840:	930b      	str	r3, [sp, #44]	; 0x2c
 8005842:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005844:	445b      	add	r3, fp
 8005846:	9306      	str	r3, [sp, #24]
 8005848:	3301      	adds	r3, #1
 800584a:	2b01      	cmp	r3, #1
 800584c:	9308      	str	r3, [sp, #32]
 800584e:	bfb8      	it	lt
 8005850:	2301      	movlt	r3, #1
 8005852:	2100      	movs	r1, #0
 8005854:	2204      	movs	r2, #4
 8005856:	69e8      	ldr	r0, [r5, #28]
 8005858:	f102 0614 	add.w	r6, r2, #20
 800585c:	429e      	cmp	r6, r3
 800585e:	d940      	bls.n	80058e2 <_dtoa_r+0x30a>
 8005860:	6041      	str	r1, [r0, #4]
 8005862:	4628      	mov	r0, r5
 8005864:	f000 fd98 	bl	8006398 <_Balloc>
 8005868:	9003      	str	r0, [sp, #12]
 800586a:	2800      	cmp	r0, #0
 800586c:	d13c      	bne.n	80058e8 <_dtoa_r+0x310>
 800586e:	4602      	mov	r2, r0
 8005870:	f240 11af 	movw	r1, #431	; 0x1af
 8005874:	4b16      	ldr	r3, [pc, #88]	; (80058d0 <_dtoa_r+0x2f8>)
 8005876:	e6c3      	b.n	8005600 <_dtoa_r+0x28>
 8005878:	2301      	movs	r3, #1
 800587a:	e7e1      	b.n	8005840 <_dtoa_r+0x268>
 800587c:	2401      	movs	r4, #1
 800587e:	2300      	movs	r3, #0
 8005880:	940b      	str	r4, [sp, #44]	; 0x2c
 8005882:	9322      	str	r3, [sp, #136]	; 0x88
 8005884:	f04f 33ff 	mov.w	r3, #4294967295
 8005888:	2200      	movs	r2, #0
 800588a:	9306      	str	r3, [sp, #24]
 800588c:	9308      	str	r3, [sp, #32]
 800588e:	2312      	movs	r3, #18
 8005890:	e7d1      	b.n	8005836 <_dtoa_r+0x25e>
 8005892:	bf00      	nop
 8005894:	f3af 8000 	nop.w
 8005898:	636f4361 	.word	0x636f4361
 800589c:	3fd287a7 	.word	0x3fd287a7
 80058a0:	8b60c8b3 	.word	0x8b60c8b3
 80058a4:	3fc68a28 	.word	0x3fc68a28
 80058a8:	509f79fb 	.word	0x509f79fb
 80058ac:	3fd34413 	.word	0x3fd34413
 80058b0:	08007d7b 	.word	0x08007d7b
 80058b4:	08007d92 	.word	0x08007d92
 80058b8:	7ff00000 	.word	0x7ff00000
 80058bc:	08007d77 	.word	0x08007d77
 80058c0:	08007d6e 	.word	0x08007d6e
 80058c4:	08007d4b 	.word	0x08007d4b
 80058c8:	3ff80000 	.word	0x3ff80000
 80058cc:	08007e80 	.word	0x08007e80
 80058d0:	08007dea 	.word	0x08007dea
 80058d4:	2301      	movs	r3, #1
 80058d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80058d8:	e7d4      	b.n	8005884 <_dtoa_r+0x2ac>
 80058da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80058dc:	9306      	str	r3, [sp, #24]
 80058de:	9308      	str	r3, [sp, #32]
 80058e0:	e7b7      	b.n	8005852 <_dtoa_r+0x27a>
 80058e2:	3101      	adds	r1, #1
 80058e4:	0052      	lsls	r2, r2, #1
 80058e6:	e7b7      	b.n	8005858 <_dtoa_r+0x280>
 80058e8:	69eb      	ldr	r3, [r5, #28]
 80058ea:	9a03      	ldr	r2, [sp, #12]
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	9b08      	ldr	r3, [sp, #32]
 80058f0:	2b0e      	cmp	r3, #14
 80058f2:	f200 80a8 	bhi.w	8005a46 <_dtoa_r+0x46e>
 80058f6:	2c00      	cmp	r4, #0
 80058f8:	f000 80a5 	beq.w	8005a46 <_dtoa_r+0x46e>
 80058fc:	f1bb 0f00 	cmp.w	fp, #0
 8005900:	dd34      	ble.n	800596c <_dtoa_r+0x394>
 8005902:	4b9a      	ldr	r3, [pc, #616]	; (8005b6c <_dtoa_r+0x594>)
 8005904:	f00b 020f 	and.w	r2, fp, #15
 8005908:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800590c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005910:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005914:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005918:	ea4f 142b 	mov.w	r4, fp, asr #4
 800591c:	d016      	beq.n	800594c <_dtoa_r+0x374>
 800591e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005922:	4b93      	ldr	r3, [pc, #588]	; (8005b70 <_dtoa_r+0x598>)
 8005924:	2703      	movs	r7, #3
 8005926:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800592a:	f7fa feff 	bl	800072c <__aeabi_ddiv>
 800592e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005932:	f004 040f 	and.w	r4, r4, #15
 8005936:	4e8e      	ldr	r6, [pc, #568]	; (8005b70 <_dtoa_r+0x598>)
 8005938:	b954      	cbnz	r4, 8005950 <_dtoa_r+0x378>
 800593a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800593e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005942:	f7fa fef3 	bl	800072c <__aeabi_ddiv>
 8005946:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800594a:	e029      	b.n	80059a0 <_dtoa_r+0x3c8>
 800594c:	2702      	movs	r7, #2
 800594e:	e7f2      	b.n	8005936 <_dtoa_r+0x35e>
 8005950:	07e1      	lsls	r1, r4, #31
 8005952:	d508      	bpl.n	8005966 <_dtoa_r+0x38e>
 8005954:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005958:	e9d6 2300 	ldrd	r2, r3, [r6]
 800595c:	f7fa fdbc 	bl	80004d8 <__aeabi_dmul>
 8005960:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005964:	3701      	adds	r7, #1
 8005966:	1064      	asrs	r4, r4, #1
 8005968:	3608      	adds	r6, #8
 800596a:	e7e5      	b.n	8005938 <_dtoa_r+0x360>
 800596c:	f000 80a5 	beq.w	8005aba <_dtoa_r+0x4e2>
 8005970:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005974:	f1cb 0400 	rsb	r4, fp, #0
 8005978:	4b7c      	ldr	r3, [pc, #496]	; (8005b6c <_dtoa_r+0x594>)
 800597a:	f004 020f 	and.w	r2, r4, #15
 800597e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005986:	f7fa fda7 	bl	80004d8 <__aeabi_dmul>
 800598a:	2702      	movs	r7, #2
 800598c:	2300      	movs	r3, #0
 800598e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005992:	4e77      	ldr	r6, [pc, #476]	; (8005b70 <_dtoa_r+0x598>)
 8005994:	1124      	asrs	r4, r4, #4
 8005996:	2c00      	cmp	r4, #0
 8005998:	f040 8084 	bne.w	8005aa4 <_dtoa_r+0x4cc>
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1d2      	bne.n	8005946 <_dtoa_r+0x36e>
 80059a0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80059a4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80059a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 8087 	beq.w	8005abe <_dtoa_r+0x4e6>
 80059b0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80059b4:	2200      	movs	r2, #0
 80059b6:	4b6f      	ldr	r3, [pc, #444]	; (8005b74 <_dtoa_r+0x59c>)
 80059b8:	f7fb f800 	bl	80009bc <__aeabi_dcmplt>
 80059bc:	2800      	cmp	r0, #0
 80059be:	d07e      	beq.n	8005abe <_dtoa_r+0x4e6>
 80059c0:	9b08      	ldr	r3, [sp, #32]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d07b      	beq.n	8005abe <_dtoa_r+0x4e6>
 80059c6:	9b06      	ldr	r3, [sp, #24]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	dd38      	ble.n	8005a3e <_dtoa_r+0x466>
 80059cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80059d0:	2200      	movs	r2, #0
 80059d2:	4b69      	ldr	r3, [pc, #420]	; (8005b78 <_dtoa_r+0x5a0>)
 80059d4:	f7fa fd80 	bl	80004d8 <__aeabi_dmul>
 80059d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059dc:	9c06      	ldr	r4, [sp, #24]
 80059de:	f10b 38ff 	add.w	r8, fp, #4294967295
 80059e2:	3701      	adds	r7, #1
 80059e4:	4638      	mov	r0, r7
 80059e6:	f7fa fd0d 	bl	8000404 <__aeabi_i2d>
 80059ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059ee:	f7fa fd73 	bl	80004d8 <__aeabi_dmul>
 80059f2:	2200      	movs	r2, #0
 80059f4:	4b61      	ldr	r3, [pc, #388]	; (8005b7c <_dtoa_r+0x5a4>)
 80059f6:	f7fa fbb9 	bl	800016c <__adddf3>
 80059fa:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80059fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005a02:	9611      	str	r6, [sp, #68]	; 0x44
 8005a04:	2c00      	cmp	r4, #0
 8005a06:	d15d      	bne.n	8005ac4 <_dtoa_r+0x4ec>
 8005a08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	4b5c      	ldr	r3, [pc, #368]	; (8005b80 <_dtoa_r+0x5a8>)
 8005a10:	f7fa fbaa 	bl	8000168 <__aeabi_dsub>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a1c:	4633      	mov	r3, r6
 8005a1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a20:	f7fa ffea 	bl	80009f8 <__aeabi_dcmpgt>
 8005a24:	2800      	cmp	r0, #0
 8005a26:	f040 8295 	bne.w	8005f54 <_dtoa_r+0x97c>
 8005a2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a30:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005a34:	f7fa ffc2 	bl	80009bc <__aeabi_dcmplt>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	f040 8289 	bne.w	8005f50 <_dtoa_r+0x978>
 8005a3e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005a42:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005a46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f2c0 8151 	blt.w	8005cf0 <_dtoa_r+0x718>
 8005a4e:	f1bb 0f0e 	cmp.w	fp, #14
 8005a52:	f300 814d 	bgt.w	8005cf0 <_dtoa_r+0x718>
 8005a56:	4b45      	ldr	r3, [pc, #276]	; (8005b6c <_dtoa_r+0x594>)
 8005a58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005a5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a60:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005a64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f280 80da 	bge.w	8005c20 <_dtoa_r+0x648>
 8005a6c:	9b08      	ldr	r3, [sp, #32]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f300 80d6 	bgt.w	8005c20 <_dtoa_r+0x648>
 8005a74:	f040 826b 	bne.w	8005f4e <_dtoa_r+0x976>
 8005a78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	4b40      	ldr	r3, [pc, #256]	; (8005b80 <_dtoa_r+0x5a8>)
 8005a80:	f7fa fd2a 	bl	80004d8 <__aeabi_dmul>
 8005a84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a88:	f7fa ffac 	bl	80009e4 <__aeabi_dcmpge>
 8005a8c:	9c08      	ldr	r4, [sp, #32]
 8005a8e:	4626      	mov	r6, r4
 8005a90:	2800      	cmp	r0, #0
 8005a92:	f040 8241 	bne.w	8005f18 <_dtoa_r+0x940>
 8005a96:	2331      	movs	r3, #49	; 0x31
 8005a98:	9f03      	ldr	r7, [sp, #12]
 8005a9a:	f10b 0b01 	add.w	fp, fp, #1
 8005a9e:	f807 3b01 	strb.w	r3, [r7], #1
 8005aa2:	e23d      	b.n	8005f20 <_dtoa_r+0x948>
 8005aa4:	07e2      	lsls	r2, r4, #31
 8005aa6:	d505      	bpl.n	8005ab4 <_dtoa_r+0x4dc>
 8005aa8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005aac:	f7fa fd14 	bl	80004d8 <__aeabi_dmul>
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	3701      	adds	r7, #1
 8005ab4:	1064      	asrs	r4, r4, #1
 8005ab6:	3608      	adds	r6, #8
 8005ab8:	e76d      	b.n	8005996 <_dtoa_r+0x3be>
 8005aba:	2702      	movs	r7, #2
 8005abc:	e770      	b.n	80059a0 <_dtoa_r+0x3c8>
 8005abe:	46d8      	mov	r8, fp
 8005ac0:	9c08      	ldr	r4, [sp, #32]
 8005ac2:	e78f      	b.n	80059e4 <_dtoa_r+0x40c>
 8005ac4:	9903      	ldr	r1, [sp, #12]
 8005ac6:	4b29      	ldr	r3, [pc, #164]	; (8005b6c <_dtoa_r+0x594>)
 8005ac8:	4421      	add	r1, r4
 8005aca:	9112      	str	r1, [sp, #72]	; 0x48
 8005acc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ace:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005ad2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005ad6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005ada:	2900      	cmp	r1, #0
 8005adc:	d054      	beq.n	8005b88 <_dtoa_r+0x5b0>
 8005ade:	2000      	movs	r0, #0
 8005ae0:	4928      	ldr	r1, [pc, #160]	; (8005b84 <_dtoa_r+0x5ac>)
 8005ae2:	f7fa fe23 	bl	800072c <__aeabi_ddiv>
 8005ae6:	463b      	mov	r3, r7
 8005ae8:	4632      	mov	r2, r6
 8005aea:	f7fa fb3d 	bl	8000168 <__aeabi_dsub>
 8005aee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005af2:	9f03      	ldr	r7, [sp, #12]
 8005af4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005af8:	f7fa ff9e 	bl	8000a38 <__aeabi_d2iz>
 8005afc:	4604      	mov	r4, r0
 8005afe:	f7fa fc81 	bl	8000404 <__aeabi_i2d>
 8005b02:	4602      	mov	r2, r0
 8005b04:	460b      	mov	r3, r1
 8005b06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b0a:	f7fa fb2d 	bl	8000168 <__aeabi_dsub>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	3430      	adds	r4, #48	; 0x30
 8005b14:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b1c:	f807 4b01 	strb.w	r4, [r7], #1
 8005b20:	f7fa ff4c 	bl	80009bc <__aeabi_dcmplt>
 8005b24:	2800      	cmp	r0, #0
 8005b26:	d173      	bne.n	8005c10 <_dtoa_r+0x638>
 8005b28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	4911      	ldr	r1, [pc, #68]	; (8005b74 <_dtoa_r+0x59c>)
 8005b30:	f7fa fb1a 	bl	8000168 <__aeabi_dsub>
 8005b34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b38:	f7fa ff40 	bl	80009bc <__aeabi_dcmplt>
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	f040 80b6 	bne.w	8005cae <_dtoa_r+0x6d6>
 8005b42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b44:	429f      	cmp	r7, r3
 8005b46:	f43f af7a 	beq.w	8005a3e <_dtoa_r+0x466>
 8005b4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b4e:	2200      	movs	r2, #0
 8005b50:	4b09      	ldr	r3, [pc, #36]	; (8005b78 <_dtoa_r+0x5a0>)
 8005b52:	f7fa fcc1 	bl	80004d8 <__aeabi_dmul>
 8005b56:	2200      	movs	r2, #0
 8005b58:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b60:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <_dtoa_r+0x5a0>)
 8005b62:	f7fa fcb9 	bl	80004d8 <__aeabi_dmul>
 8005b66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b6a:	e7c3      	b.n	8005af4 <_dtoa_r+0x51c>
 8005b6c:	08007e80 	.word	0x08007e80
 8005b70:	08007e58 	.word	0x08007e58
 8005b74:	3ff00000 	.word	0x3ff00000
 8005b78:	40240000 	.word	0x40240000
 8005b7c:	401c0000 	.word	0x401c0000
 8005b80:	40140000 	.word	0x40140000
 8005b84:	3fe00000 	.word	0x3fe00000
 8005b88:	4630      	mov	r0, r6
 8005b8a:	4639      	mov	r1, r7
 8005b8c:	f7fa fca4 	bl	80004d8 <__aeabi_dmul>
 8005b90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b92:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b96:	9c03      	ldr	r4, [sp, #12]
 8005b98:	9314      	str	r3, [sp, #80]	; 0x50
 8005b9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b9e:	f7fa ff4b 	bl	8000a38 <__aeabi_d2iz>
 8005ba2:	9015      	str	r0, [sp, #84]	; 0x54
 8005ba4:	f7fa fc2e 	bl	8000404 <__aeabi_i2d>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	460b      	mov	r3, r1
 8005bac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bb0:	f7fa fada 	bl	8000168 <__aeabi_dsub>
 8005bb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005bb6:	4606      	mov	r6, r0
 8005bb8:	3330      	adds	r3, #48	; 0x30
 8005bba:	f804 3b01 	strb.w	r3, [r4], #1
 8005bbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005bc0:	460f      	mov	r7, r1
 8005bc2:	429c      	cmp	r4, r3
 8005bc4:	f04f 0200 	mov.w	r2, #0
 8005bc8:	d124      	bne.n	8005c14 <_dtoa_r+0x63c>
 8005bca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005bce:	4baf      	ldr	r3, [pc, #700]	; (8005e8c <_dtoa_r+0x8b4>)
 8005bd0:	f7fa facc 	bl	800016c <__adddf3>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	4630      	mov	r0, r6
 8005bda:	4639      	mov	r1, r7
 8005bdc:	f7fa ff0c 	bl	80009f8 <__aeabi_dcmpgt>
 8005be0:	2800      	cmp	r0, #0
 8005be2:	d163      	bne.n	8005cac <_dtoa_r+0x6d4>
 8005be4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005be8:	2000      	movs	r0, #0
 8005bea:	49a8      	ldr	r1, [pc, #672]	; (8005e8c <_dtoa_r+0x8b4>)
 8005bec:	f7fa fabc 	bl	8000168 <__aeabi_dsub>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4630      	mov	r0, r6
 8005bf6:	4639      	mov	r1, r7
 8005bf8:	f7fa fee0 	bl	80009bc <__aeabi_dcmplt>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	f43f af1e 	beq.w	8005a3e <_dtoa_r+0x466>
 8005c02:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005c04:	1e7b      	subs	r3, r7, #1
 8005c06:	9314      	str	r3, [sp, #80]	; 0x50
 8005c08:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005c0c:	2b30      	cmp	r3, #48	; 0x30
 8005c0e:	d0f8      	beq.n	8005c02 <_dtoa_r+0x62a>
 8005c10:	46c3      	mov	fp, r8
 8005c12:	e03b      	b.n	8005c8c <_dtoa_r+0x6b4>
 8005c14:	4b9e      	ldr	r3, [pc, #632]	; (8005e90 <_dtoa_r+0x8b8>)
 8005c16:	f7fa fc5f 	bl	80004d8 <__aeabi_dmul>
 8005c1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c1e:	e7bc      	b.n	8005b9a <_dtoa_r+0x5c2>
 8005c20:	9f03      	ldr	r7, [sp, #12]
 8005c22:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005c26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c2a:	4640      	mov	r0, r8
 8005c2c:	4649      	mov	r1, r9
 8005c2e:	f7fa fd7d 	bl	800072c <__aeabi_ddiv>
 8005c32:	f7fa ff01 	bl	8000a38 <__aeabi_d2iz>
 8005c36:	4604      	mov	r4, r0
 8005c38:	f7fa fbe4 	bl	8000404 <__aeabi_i2d>
 8005c3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c40:	f7fa fc4a 	bl	80004d8 <__aeabi_dmul>
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	4640      	mov	r0, r8
 8005c4a:	4649      	mov	r1, r9
 8005c4c:	f7fa fa8c 	bl	8000168 <__aeabi_dsub>
 8005c50:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005c54:	f807 6b01 	strb.w	r6, [r7], #1
 8005c58:	9e03      	ldr	r6, [sp, #12]
 8005c5a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005c5e:	1bbe      	subs	r6, r7, r6
 8005c60:	45b4      	cmp	ip, r6
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	d136      	bne.n	8005cd6 <_dtoa_r+0x6fe>
 8005c68:	f7fa fa80 	bl	800016c <__adddf3>
 8005c6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c70:	4680      	mov	r8, r0
 8005c72:	4689      	mov	r9, r1
 8005c74:	f7fa fec0 	bl	80009f8 <__aeabi_dcmpgt>
 8005c78:	bb58      	cbnz	r0, 8005cd2 <_dtoa_r+0x6fa>
 8005c7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c7e:	4640      	mov	r0, r8
 8005c80:	4649      	mov	r1, r9
 8005c82:	f7fa fe91 	bl	80009a8 <__aeabi_dcmpeq>
 8005c86:	b108      	cbz	r0, 8005c8c <_dtoa_r+0x6b4>
 8005c88:	07e3      	lsls	r3, r4, #31
 8005c8a:	d422      	bmi.n	8005cd2 <_dtoa_r+0x6fa>
 8005c8c:	4651      	mov	r1, sl
 8005c8e:	4628      	mov	r0, r5
 8005c90:	f000 fbc2 	bl	8006418 <_Bfree>
 8005c94:	2300      	movs	r3, #0
 8005c96:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005c98:	703b      	strb	r3, [r7, #0]
 8005c9a:	f10b 0301 	add.w	r3, fp, #1
 8005c9e:	6013      	str	r3, [r2, #0]
 8005ca0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f43f ace6 	beq.w	8005674 <_dtoa_r+0x9c>
 8005ca8:	601f      	str	r7, [r3, #0]
 8005caa:	e4e3      	b.n	8005674 <_dtoa_r+0x9c>
 8005cac:	4627      	mov	r7, r4
 8005cae:	463b      	mov	r3, r7
 8005cb0:	461f      	mov	r7, r3
 8005cb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cb6:	2a39      	cmp	r2, #57	; 0x39
 8005cb8:	d107      	bne.n	8005cca <_dtoa_r+0x6f2>
 8005cba:	9a03      	ldr	r2, [sp, #12]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d1f7      	bne.n	8005cb0 <_dtoa_r+0x6d8>
 8005cc0:	2230      	movs	r2, #48	; 0x30
 8005cc2:	9903      	ldr	r1, [sp, #12]
 8005cc4:	f108 0801 	add.w	r8, r8, #1
 8005cc8:	700a      	strb	r2, [r1, #0]
 8005cca:	781a      	ldrb	r2, [r3, #0]
 8005ccc:	3201      	adds	r2, #1
 8005cce:	701a      	strb	r2, [r3, #0]
 8005cd0:	e79e      	b.n	8005c10 <_dtoa_r+0x638>
 8005cd2:	46d8      	mov	r8, fp
 8005cd4:	e7eb      	b.n	8005cae <_dtoa_r+0x6d6>
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	4b6d      	ldr	r3, [pc, #436]	; (8005e90 <_dtoa_r+0x8b8>)
 8005cda:	f7fa fbfd 	bl	80004d8 <__aeabi_dmul>
 8005cde:	2200      	movs	r2, #0
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	4680      	mov	r8, r0
 8005ce4:	4689      	mov	r9, r1
 8005ce6:	f7fa fe5f 	bl	80009a8 <__aeabi_dcmpeq>
 8005cea:	2800      	cmp	r0, #0
 8005cec:	d09b      	beq.n	8005c26 <_dtoa_r+0x64e>
 8005cee:	e7cd      	b.n	8005c8c <_dtoa_r+0x6b4>
 8005cf0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005cf2:	2a00      	cmp	r2, #0
 8005cf4:	f000 80c4 	beq.w	8005e80 <_dtoa_r+0x8a8>
 8005cf8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005cfa:	2a01      	cmp	r2, #1
 8005cfc:	f300 80a8 	bgt.w	8005e50 <_dtoa_r+0x878>
 8005d00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005d02:	2a00      	cmp	r2, #0
 8005d04:	f000 80a0 	beq.w	8005e48 <_dtoa_r+0x870>
 8005d08:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d0c:	464f      	mov	r7, r9
 8005d0e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005d10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d12:	2101      	movs	r1, #1
 8005d14:	441a      	add	r2, r3
 8005d16:	4628      	mov	r0, r5
 8005d18:	4499      	add	r9, r3
 8005d1a:	9209      	str	r2, [sp, #36]	; 0x24
 8005d1c:	f000 fc32 	bl	8006584 <__i2b>
 8005d20:	4606      	mov	r6, r0
 8005d22:	b15f      	cbz	r7, 8005d3c <_dtoa_r+0x764>
 8005d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	dd08      	ble.n	8005d3c <_dtoa_r+0x764>
 8005d2a:	42bb      	cmp	r3, r7
 8005d2c:	bfa8      	it	ge
 8005d2e:	463b      	movge	r3, r7
 8005d30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d32:	eba9 0903 	sub.w	r9, r9, r3
 8005d36:	1aff      	subs	r7, r7, r3
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d3e:	b1f3      	cbz	r3, 8005d7e <_dtoa_r+0x7a6>
 8005d40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f000 80a0 	beq.w	8005e88 <_dtoa_r+0x8b0>
 8005d48:	2c00      	cmp	r4, #0
 8005d4a:	dd10      	ble.n	8005d6e <_dtoa_r+0x796>
 8005d4c:	4631      	mov	r1, r6
 8005d4e:	4622      	mov	r2, r4
 8005d50:	4628      	mov	r0, r5
 8005d52:	f000 fcd5 	bl	8006700 <__pow5mult>
 8005d56:	4652      	mov	r2, sl
 8005d58:	4601      	mov	r1, r0
 8005d5a:	4606      	mov	r6, r0
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	f000 fc27 	bl	80065b0 <__multiply>
 8005d62:	4680      	mov	r8, r0
 8005d64:	4651      	mov	r1, sl
 8005d66:	4628      	mov	r0, r5
 8005d68:	f000 fb56 	bl	8006418 <_Bfree>
 8005d6c:	46c2      	mov	sl, r8
 8005d6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d70:	1b1a      	subs	r2, r3, r4
 8005d72:	d004      	beq.n	8005d7e <_dtoa_r+0x7a6>
 8005d74:	4651      	mov	r1, sl
 8005d76:	4628      	mov	r0, r5
 8005d78:	f000 fcc2 	bl	8006700 <__pow5mult>
 8005d7c:	4682      	mov	sl, r0
 8005d7e:	2101      	movs	r1, #1
 8005d80:	4628      	mov	r0, r5
 8005d82:	f000 fbff 	bl	8006584 <__i2b>
 8005d86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d88:	4604      	mov	r4, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f340 8082 	ble.w	8005e94 <_dtoa_r+0x8bc>
 8005d90:	461a      	mov	r2, r3
 8005d92:	4601      	mov	r1, r0
 8005d94:	4628      	mov	r0, r5
 8005d96:	f000 fcb3 	bl	8006700 <__pow5mult>
 8005d9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d9c:	4604      	mov	r4, r0
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	dd7b      	ble.n	8005e9a <_dtoa_r+0x8c2>
 8005da2:	f04f 0800 	mov.w	r8, #0
 8005da6:	6923      	ldr	r3, [r4, #16]
 8005da8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005dac:	6918      	ldr	r0, [r3, #16]
 8005dae:	f000 fb9b 	bl	80064e8 <__hi0bits>
 8005db2:	f1c0 0020 	rsb	r0, r0, #32
 8005db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db8:	4418      	add	r0, r3
 8005dba:	f010 001f 	ands.w	r0, r0, #31
 8005dbe:	f000 8092 	beq.w	8005ee6 <_dtoa_r+0x90e>
 8005dc2:	f1c0 0320 	rsb	r3, r0, #32
 8005dc6:	2b04      	cmp	r3, #4
 8005dc8:	f340 8085 	ble.w	8005ed6 <_dtoa_r+0x8fe>
 8005dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dce:	f1c0 001c 	rsb	r0, r0, #28
 8005dd2:	4403      	add	r3, r0
 8005dd4:	4481      	add	r9, r0
 8005dd6:	4407      	add	r7, r0
 8005dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8005dda:	f1b9 0f00 	cmp.w	r9, #0
 8005dde:	dd05      	ble.n	8005dec <_dtoa_r+0x814>
 8005de0:	4651      	mov	r1, sl
 8005de2:	464a      	mov	r2, r9
 8005de4:	4628      	mov	r0, r5
 8005de6:	f000 fce5 	bl	80067b4 <__lshift>
 8005dea:	4682      	mov	sl, r0
 8005dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	dd05      	ble.n	8005dfe <_dtoa_r+0x826>
 8005df2:	4621      	mov	r1, r4
 8005df4:	461a      	mov	r2, r3
 8005df6:	4628      	mov	r0, r5
 8005df8:	f000 fcdc 	bl	80067b4 <__lshift>
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d072      	beq.n	8005eea <_dtoa_r+0x912>
 8005e04:	4621      	mov	r1, r4
 8005e06:	4650      	mov	r0, sl
 8005e08:	f000 fd40 	bl	800688c <__mcmp>
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	da6c      	bge.n	8005eea <_dtoa_r+0x912>
 8005e10:	2300      	movs	r3, #0
 8005e12:	4651      	mov	r1, sl
 8005e14:	220a      	movs	r2, #10
 8005e16:	4628      	mov	r0, r5
 8005e18:	f000 fb20 	bl	800645c <__multadd>
 8005e1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e1e:	4682      	mov	sl, r0
 8005e20:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 81ac 	beq.w	8006182 <_dtoa_r+0xbaa>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	4631      	mov	r1, r6
 8005e2e:	220a      	movs	r2, #10
 8005e30:	4628      	mov	r0, r5
 8005e32:	f000 fb13 	bl	800645c <__multadd>
 8005e36:	9b06      	ldr	r3, [sp, #24]
 8005e38:	4606      	mov	r6, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f300 8093 	bgt.w	8005f66 <_dtoa_r+0x98e>
 8005e40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	dc59      	bgt.n	8005efa <_dtoa_r+0x922>
 8005e46:	e08e      	b.n	8005f66 <_dtoa_r+0x98e>
 8005e48:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005e4a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005e4e:	e75d      	b.n	8005d0c <_dtoa_r+0x734>
 8005e50:	9b08      	ldr	r3, [sp, #32]
 8005e52:	1e5c      	subs	r4, r3, #1
 8005e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e56:	42a3      	cmp	r3, r4
 8005e58:	bfbf      	itttt	lt
 8005e5a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005e5c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8005e5e:	1ae3      	sublt	r3, r4, r3
 8005e60:	18d2      	addlt	r2, r2, r3
 8005e62:	bfa8      	it	ge
 8005e64:	1b1c      	subge	r4, r3, r4
 8005e66:	9b08      	ldr	r3, [sp, #32]
 8005e68:	bfbe      	ittt	lt
 8005e6a:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005e6c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8005e6e:	2400      	movlt	r4, #0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	bfb5      	itete	lt
 8005e74:	eba9 0703 	sublt.w	r7, r9, r3
 8005e78:	464f      	movge	r7, r9
 8005e7a:	2300      	movlt	r3, #0
 8005e7c:	9b08      	ldrge	r3, [sp, #32]
 8005e7e:	e747      	b.n	8005d10 <_dtoa_r+0x738>
 8005e80:	464f      	mov	r7, r9
 8005e82:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005e84:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005e86:	e74c      	b.n	8005d22 <_dtoa_r+0x74a>
 8005e88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e8a:	e773      	b.n	8005d74 <_dtoa_r+0x79c>
 8005e8c:	3fe00000 	.word	0x3fe00000
 8005e90:	40240000 	.word	0x40240000
 8005e94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	dc18      	bgt.n	8005ecc <_dtoa_r+0x8f4>
 8005e9a:	9b04      	ldr	r3, [sp, #16]
 8005e9c:	b9b3      	cbnz	r3, 8005ecc <_dtoa_r+0x8f4>
 8005e9e:	9b05      	ldr	r3, [sp, #20]
 8005ea0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ea4:	b993      	cbnz	r3, 8005ecc <_dtoa_r+0x8f4>
 8005ea6:	9b05      	ldr	r3, [sp, #20]
 8005ea8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005eac:	0d1b      	lsrs	r3, r3, #20
 8005eae:	051b      	lsls	r3, r3, #20
 8005eb0:	b17b      	cbz	r3, 8005ed2 <_dtoa_r+0x8fa>
 8005eb2:	f04f 0801 	mov.w	r8, #1
 8005eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eb8:	f109 0901 	add.w	r9, r9, #1
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8005ec0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f47f af6f 	bne.w	8005da6 <_dtoa_r+0x7ce>
 8005ec8:	2001      	movs	r0, #1
 8005eca:	e774      	b.n	8005db6 <_dtoa_r+0x7de>
 8005ecc:	f04f 0800 	mov.w	r8, #0
 8005ed0:	e7f6      	b.n	8005ec0 <_dtoa_r+0x8e8>
 8005ed2:	4698      	mov	r8, r3
 8005ed4:	e7f4      	b.n	8005ec0 <_dtoa_r+0x8e8>
 8005ed6:	d080      	beq.n	8005dda <_dtoa_r+0x802>
 8005ed8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005eda:	331c      	adds	r3, #28
 8005edc:	441a      	add	r2, r3
 8005ede:	4499      	add	r9, r3
 8005ee0:	441f      	add	r7, r3
 8005ee2:	9209      	str	r2, [sp, #36]	; 0x24
 8005ee4:	e779      	b.n	8005dda <_dtoa_r+0x802>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	e7f6      	b.n	8005ed8 <_dtoa_r+0x900>
 8005eea:	9b08      	ldr	r3, [sp, #32]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	dc34      	bgt.n	8005f5a <_dtoa_r+0x982>
 8005ef0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	dd31      	ble.n	8005f5a <_dtoa_r+0x982>
 8005ef6:	9b08      	ldr	r3, [sp, #32]
 8005ef8:	9306      	str	r3, [sp, #24]
 8005efa:	9b06      	ldr	r3, [sp, #24]
 8005efc:	b963      	cbnz	r3, 8005f18 <_dtoa_r+0x940>
 8005efe:	4621      	mov	r1, r4
 8005f00:	2205      	movs	r2, #5
 8005f02:	4628      	mov	r0, r5
 8005f04:	f000 faaa 	bl	800645c <__multadd>
 8005f08:	4601      	mov	r1, r0
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	4650      	mov	r0, sl
 8005f0e:	f000 fcbd 	bl	800688c <__mcmp>
 8005f12:	2800      	cmp	r0, #0
 8005f14:	f73f adbf 	bgt.w	8005a96 <_dtoa_r+0x4be>
 8005f18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f1a:	9f03      	ldr	r7, [sp, #12]
 8005f1c:	ea6f 0b03 	mvn.w	fp, r3
 8005f20:	f04f 0800 	mov.w	r8, #0
 8005f24:	4621      	mov	r1, r4
 8005f26:	4628      	mov	r0, r5
 8005f28:	f000 fa76 	bl	8006418 <_Bfree>
 8005f2c:	2e00      	cmp	r6, #0
 8005f2e:	f43f aead 	beq.w	8005c8c <_dtoa_r+0x6b4>
 8005f32:	f1b8 0f00 	cmp.w	r8, #0
 8005f36:	d005      	beq.n	8005f44 <_dtoa_r+0x96c>
 8005f38:	45b0      	cmp	r8, r6
 8005f3a:	d003      	beq.n	8005f44 <_dtoa_r+0x96c>
 8005f3c:	4641      	mov	r1, r8
 8005f3e:	4628      	mov	r0, r5
 8005f40:	f000 fa6a 	bl	8006418 <_Bfree>
 8005f44:	4631      	mov	r1, r6
 8005f46:	4628      	mov	r0, r5
 8005f48:	f000 fa66 	bl	8006418 <_Bfree>
 8005f4c:	e69e      	b.n	8005c8c <_dtoa_r+0x6b4>
 8005f4e:	2400      	movs	r4, #0
 8005f50:	4626      	mov	r6, r4
 8005f52:	e7e1      	b.n	8005f18 <_dtoa_r+0x940>
 8005f54:	46c3      	mov	fp, r8
 8005f56:	4626      	mov	r6, r4
 8005f58:	e59d      	b.n	8005a96 <_dtoa_r+0x4be>
 8005f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f000 80c8 	beq.w	80060f2 <_dtoa_r+0xb1a>
 8005f62:	9b08      	ldr	r3, [sp, #32]
 8005f64:	9306      	str	r3, [sp, #24]
 8005f66:	2f00      	cmp	r7, #0
 8005f68:	dd05      	ble.n	8005f76 <_dtoa_r+0x99e>
 8005f6a:	4631      	mov	r1, r6
 8005f6c:	463a      	mov	r2, r7
 8005f6e:	4628      	mov	r0, r5
 8005f70:	f000 fc20 	bl	80067b4 <__lshift>
 8005f74:	4606      	mov	r6, r0
 8005f76:	f1b8 0f00 	cmp.w	r8, #0
 8005f7a:	d05b      	beq.n	8006034 <_dtoa_r+0xa5c>
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	6871      	ldr	r1, [r6, #4]
 8005f80:	f000 fa0a 	bl	8006398 <_Balloc>
 8005f84:	4607      	mov	r7, r0
 8005f86:	b928      	cbnz	r0, 8005f94 <_dtoa_r+0x9bc>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005f8e:	4b81      	ldr	r3, [pc, #516]	; (8006194 <_dtoa_r+0xbbc>)
 8005f90:	f7ff bb36 	b.w	8005600 <_dtoa_r+0x28>
 8005f94:	6932      	ldr	r2, [r6, #16]
 8005f96:	f106 010c 	add.w	r1, r6, #12
 8005f9a:	3202      	adds	r2, #2
 8005f9c:	0092      	lsls	r2, r2, #2
 8005f9e:	300c      	adds	r0, #12
 8005fa0:	f000 ff9e 	bl	8006ee0 <memcpy>
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	4639      	mov	r1, r7
 8005fa8:	4628      	mov	r0, r5
 8005faa:	f000 fc03 	bl	80067b4 <__lshift>
 8005fae:	46b0      	mov	r8, r6
 8005fb0:	4606      	mov	r6, r0
 8005fb2:	9b03      	ldr	r3, [sp, #12]
 8005fb4:	9a03      	ldr	r2, [sp, #12]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	9308      	str	r3, [sp, #32]
 8005fba:	9b06      	ldr	r3, [sp, #24]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fc0:	9b04      	ldr	r3, [sp, #16]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	930a      	str	r3, [sp, #40]	; 0x28
 8005fc8:	9b08      	ldr	r3, [sp, #32]
 8005fca:	4621      	mov	r1, r4
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	4650      	mov	r0, sl
 8005fd0:	9304      	str	r3, [sp, #16]
 8005fd2:	f7ff fa75 	bl	80054c0 <quorem>
 8005fd6:	4641      	mov	r1, r8
 8005fd8:	9006      	str	r0, [sp, #24]
 8005fda:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005fde:	4650      	mov	r0, sl
 8005fe0:	f000 fc54 	bl	800688c <__mcmp>
 8005fe4:	4632      	mov	r2, r6
 8005fe6:	9009      	str	r0, [sp, #36]	; 0x24
 8005fe8:	4621      	mov	r1, r4
 8005fea:	4628      	mov	r0, r5
 8005fec:	f000 fc6a 	bl	80068c4 <__mdiff>
 8005ff0:	68c2      	ldr	r2, [r0, #12]
 8005ff2:	4607      	mov	r7, r0
 8005ff4:	bb02      	cbnz	r2, 8006038 <_dtoa_r+0xa60>
 8005ff6:	4601      	mov	r1, r0
 8005ff8:	4650      	mov	r0, sl
 8005ffa:	f000 fc47 	bl	800688c <__mcmp>
 8005ffe:	4602      	mov	r2, r0
 8006000:	4639      	mov	r1, r7
 8006002:	4628      	mov	r0, r5
 8006004:	920c      	str	r2, [sp, #48]	; 0x30
 8006006:	f000 fa07 	bl	8006418 <_Bfree>
 800600a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800600c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800600e:	9f08      	ldr	r7, [sp, #32]
 8006010:	ea43 0102 	orr.w	r1, r3, r2
 8006014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006016:	4319      	orrs	r1, r3
 8006018:	d110      	bne.n	800603c <_dtoa_r+0xa64>
 800601a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800601e:	d029      	beq.n	8006074 <_dtoa_r+0xa9c>
 8006020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006022:	2b00      	cmp	r3, #0
 8006024:	dd02      	ble.n	800602c <_dtoa_r+0xa54>
 8006026:	9b06      	ldr	r3, [sp, #24]
 8006028:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800602c:	9b04      	ldr	r3, [sp, #16]
 800602e:	f883 9000 	strb.w	r9, [r3]
 8006032:	e777      	b.n	8005f24 <_dtoa_r+0x94c>
 8006034:	4630      	mov	r0, r6
 8006036:	e7ba      	b.n	8005fae <_dtoa_r+0x9d6>
 8006038:	2201      	movs	r2, #1
 800603a:	e7e1      	b.n	8006000 <_dtoa_r+0xa28>
 800603c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800603e:	2b00      	cmp	r3, #0
 8006040:	db04      	blt.n	800604c <_dtoa_r+0xa74>
 8006042:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006044:	430b      	orrs	r3, r1
 8006046:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006048:	430b      	orrs	r3, r1
 800604a:	d120      	bne.n	800608e <_dtoa_r+0xab6>
 800604c:	2a00      	cmp	r2, #0
 800604e:	dded      	ble.n	800602c <_dtoa_r+0xa54>
 8006050:	4651      	mov	r1, sl
 8006052:	2201      	movs	r2, #1
 8006054:	4628      	mov	r0, r5
 8006056:	f000 fbad 	bl	80067b4 <__lshift>
 800605a:	4621      	mov	r1, r4
 800605c:	4682      	mov	sl, r0
 800605e:	f000 fc15 	bl	800688c <__mcmp>
 8006062:	2800      	cmp	r0, #0
 8006064:	dc03      	bgt.n	800606e <_dtoa_r+0xa96>
 8006066:	d1e1      	bne.n	800602c <_dtoa_r+0xa54>
 8006068:	f019 0f01 	tst.w	r9, #1
 800606c:	d0de      	beq.n	800602c <_dtoa_r+0xa54>
 800606e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006072:	d1d8      	bne.n	8006026 <_dtoa_r+0xa4e>
 8006074:	2339      	movs	r3, #57	; 0x39
 8006076:	9a04      	ldr	r2, [sp, #16]
 8006078:	7013      	strb	r3, [r2, #0]
 800607a:	463b      	mov	r3, r7
 800607c:	461f      	mov	r7, r3
 800607e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006082:	3b01      	subs	r3, #1
 8006084:	2a39      	cmp	r2, #57	; 0x39
 8006086:	d06b      	beq.n	8006160 <_dtoa_r+0xb88>
 8006088:	3201      	adds	r2, #1
 800608a:	701a      	strb	r2, [r3, #0]
 800608c:	e74a      	b.n	8005f24 <_dtoa_r+0x94c>
 800608e:	2a00      	cmp	r2, #0
 8006090:	dd07      	ble.n	80060a2 <_dtoa_r+0xaca>
 8006092:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006096:	d0ed      	beq.n	8006074 <_dtoa_r+0xa9c>
 8006098:	9a04      	ldr	r2, [sp, #16]
 800609a:	f109 0301 	add.w	r3, r9, #1
 800609e:	7013      	strb	r3, [r2, #0]
 80060a0:	e740      	b.n	8005f24 <_dtoa_r+0x94c>
 80060a2:	9b08      	ldr	r3, [sp, #32]
 80060a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80060a6:	f803 9c01 	strb.w	r9, [r3, #-1]
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d042      	beq.n	8006134 <_dtoa_r+0xb5c>
 80060ae:	4651      	mov	r1, sl
 80060b0:	2300      	movs	r3, #0
 80060b2:	220a      	movs	r2, #10
 80060b4:	4628      	mov	r0, r5
 80060b6:	f000 f9d1 	bl	800645c <__multadd>
 80060ba:	45b0      	cmp	r8, r6
 80060bc:	4682      	mov	sl, r0
 80060be:	f04f 0300 	mov.w	r3, #0
 80060c2:	f04f 020a 	mov.w	r2, #10
 80060c6:	4641      	mov	r1, r8
 80060c8:	4628      	mov	r0, r5
 80060ca:	d107      	bne.n	80060dc <_dtoa_r+0xb04>
 80060cc:	f000 f9c6 	bl	800645c <__multadd>
 80060d0:	4680      	mov	r8, r0
 80060d2:	4606      	mov	r6, r0
 80060d4:	9b08      	ldr	r3, [sp, #32]
 80060d6:	3301      	adds	r3, #1
 80060d8:	9308      	str	r3, [sp, #32]
 80060da:	e775      	b.n	8005fc8 <_dtoa_r+0x9f0>
 80060dc:	f000 f9be 	bl	800645c <__multadd>
 80060e0:	4631      	mov	r1, r6
 80060e2:	4680      	mov	r8, r0
 80060e4:	2300      	movs	r3, #0
 80060e6:	220a      	movs	r2, #10
 80060e8:	4628      	mov	r0, r5
 80060ea:	f000 f9b7 	bl	800645c <__multadd>
 80060ee:	4606      	mov	r6, r0
 80060f0:	e7f0      	b.n	80060d4 <_dtoa_r+0xafc>
 80060f2:	9b08      	ldr	r3, [sp, #32]
 80060f4:	9306      	str	r3, [sp, #24]
 80060f6:	9f03      	ldr	r7, [sp, #12]
 80060f8:	4621      	mov	r1, r4
 80060fa:	4650      	mov	r0, sl
 80060fc:	f7ff f9e0 	bl	80054c0 <quorem>
 8006100:	9b03      	ldr	r3, [sp, #12]
 8006102:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006106:	f807 9b01 	strb.w	r9, [r7], #1
 800610a:	1afa      	subs	r2, r7, r3
 800610c:	9b06      	ldr	r3, [sp, #24]
 800610e:	4293      	cmp	r3, r2
 8006110:	dd07      	ble.n	8006122 <_dtoa_r+0xb4a>
 8006112:	4651      	mov	r1, sl
 8006114:	2300      	movs	r3, #0
 8006116:	220a      	movs	r2, #10
 8006118:	4628      	mov	r0, r5
 800611a:	f000 f99f 	bl	800645c <__multadd>
 800611e:	4682      	mov	sl, r0
 8006120:	e7ea      	b.n	80060f8 <_dtoa_r+0xb20>
 8006122:	9b06      	ldr	r3, [sp, #24]
 8006124:	f04f 0800 	mov.w	r8, #0
 8006128:	2b00      	cmp	r3, #0
 800612a:	bfcc      	ite	gt
 800612c:	461f      	movgt	r7, r3
 800612e:	2701      	movle	r7, #1
 8006130:	9b03      	ldr	r3, [sp, #12]
 8006132:	441f      	add	r7, r3
 8006134:	4651      	mov	r1, sl
 8006136:	2201      	movs	r2, #1
 8006138:	4628      	mov	r0, r5
 800613a:	f000 fb3b 	bl	80067b4 <__lshift>
 800613e:	4621      	mov	r1, r4
 8006140:	4682      	mov	sl, r0
 8006142:	f000 fba3 	bl	800688c <__mcmp>
 8006146:	2800      	cmp	r0, #0
 8006148:	dc97      	bgt.n	800607a <_dtoa_r+0xaa2>
 800614a:	d102      	bne.n	8006152 <_dtoa_r+0xb7a>
 800614c:	f019 0f01 	tst.w	r9, #1
 8006150:	d193      	bne.n	800607a <_dtoa_r+0xaa2>
 8006152:	463b      	mov	r3, r7
 8006154:	461f      	mov	r7, r3
 8006156:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800615a:	2a30      	cmp	r2, #48	; 0x30
 800615c:	d0fa      	beq.n	8006154 <_dtoa_r+0xb7c>
 800615e:	e6e1      	b.n	8005f24 <_dtoa_r+0x94c>
 8006160:	9a03      	ldr	r2, [sp, #12]
 8006162:	429a      	cmp	r2, r3
 8006164:	d18a      	bne.n	800607c <_dtoa_r+0xaa4>
 8006166:	2331      	movs	r3, #49	; 0x31
 8006168:	f10b 0b01 	add.w	fp, fp, #1
 800616c:	e797      	b.n	800609e <_dtoa_r+0xac6>
 800616e:	4b0a      	ldr	r3, [pc, #40]	; (8006198 <_dtoa_r+0xbc0>)
 8006170:	f7ff ba9f 	b.w	80056b2 <_dtoa_r+0xda>
 8006174:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006176:	2b00      	cmp	r3, #0
 8006178:	f47f aa77 	bne.w	800566a <_dtoa_r+0x92>
 800617c:	4b07      	ldr	r3, [pc, #28]	; (800619c <_dtoa_r+0xbc4>)
 800617e:	f7ff ba98 	b.w	80056b2 <_dtoa_r+0xda>
 8006182:	9b06      	ldr	r3, [sp, #24]
 8006184:	2b00      	cmp	r3, #0
 8006186:	dcb6      	bgt.n	80060f6 <_dtoa_r+0xb1e>
 8006188:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800618a:	2b02      	cmp	r3, #2
 800618c:	f73f aeb5 	bgt.w	8005efa <_dtoa_r+0x922>
 8006190:	e7b1      	b.n	80060f6 <_dtoa_r+0xb1e>
 8006192:	bf00      	nop
 8006194:	08007dea 	.word	0x08007dea
 8006198:	08007d4a 	.word	0x08007d4a
 800619c:	08007d6e 	.word	0x08007d6e

080061a0 <_free_r>:
 80061a0:	b538      	push	{r3, r4, r5, lr}
 80061a2:	4605      	mov	r5, r0
 80061a4:	2900      	cmp	r1, #0
 80061a6:	d040      	beq.n	800622a <_free_r+0x8a>
 80061a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061ac:	1f0c      	subs	r4, r1, #4
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	bfb8      	it	lt
 80061b2:	18e4      	addlt	r4, r4, r3
 80061b4:	f000 f8e4 	bl	8006380 <__malloc_lock>
 80061b8:	4a1c      	ldr	r2, [pc, #112]	; (800622c <_free_r+0x8c>)
 80061ba:	6813      	ldr	r3, [r2, #0]
 80061bc:	b933      	cbnz	r3, 80061cc <_free_r+0x2c>
 80061be:	6063      	str	r3, [r4, #4]
 80061c0:	6014      	str	r4, [r2, #0]
 80061c2:	4628      	mov	r0, r5
 80061c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061c8:	f000 b8e0 	b.w	800638c <__malloc_unlock>
 80061cc:	42a3      	cmp	r3, r4
 80061ce:	d908      	bls.n	80061e2 <_free_r+0x42>
 80061d0:	6820      	ldr	r0, [r4, #0]
 80061d2:	1821      	adds	r1, r4, r0
 80061d4:	428b      	cmp	r3, r1
 80061d6:	bf01      	itttt	eq
 80061d8:	6819      	ldreq	r1, [r3, #0]
 80061da:	685b      	ldreq	r3, [r3, #4]
 80061dc:	1809      	addeq	r1, r1, r0
 80061de:	6021      	streq	r1, [r4, #0]
 80061e0:	e7ed      	b.n	80061be <_free_r+0x1e>
 80061e2:	461a      	mov	r2, r3
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	b10b      	cbz	r3, 80061ec <_free_r+0x4c>
 80061e8:	42a3      	cmp	r3, r4
 80061ea:	d9fa      	bls.n	80061e2 <_free_r+0x42>
 80061ec:	6811      	ldr	r1, [r2, #0]
 80061ee:	1850      	adds	r0, r2, r1
 80061f0:	42a0      	cmp	r0, r4
 80061f2:	d10b      	bne.n	800620c <_free_r+0x6c>
 80061f4:	6820      	ldr	r0, [r4, #0]
 80061f6:	4401      	add	r1, r0
 80061f8:	1850      	adds	r0, r2, r1
 80061fa:	4283      	cmp	r3, r0
 80061fc:	6011      	str	r1, [r2, #0]
 80061fe:	d1e0      	bne.n	80061c2 <_free_r+0x22>
 8006200:	6818      	ldr	r0, [r3, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	4408      	add	r0, r1
 8006206:	6010      	str	r0, [r2, #0]
 8006208:	6053      	str	r3, [r2, #4]
 800620a:	e7da      	b.n	80061c2 <_free_r+0x22>
 800620c:	d902      	bls.n	8006214 <_free_r+0x74>
 800620e:	230c      	movs	r3, #12
 8006210:	602b      	str	r3, [r5, #0]
 8006212:	e7d6      	b.n	80061c2 <_free_r+0x22>
 8006214:	6820      	ldr	r0, [r4, #0]
 8006216:	1821      	adds	r1, r4, r0
 8006218:	428b      	cmp	r3, r1
 800621a:	bf01      	itttt	eq
 800621c:	6819      	ldreq	r1, [r3, #0]
 800621e:	685b      	ldreq	r3, [r3, #4]
 8006220:	1809      	addeq	r1, r1, r0
 8006222:	6021      	streq	r1, [r4, #0]
 8006224:	6063      	str	r3, [r4, #4]
 8006226:	6054      	str	r4, [r2, #4]
 8006228:	e7cb      	b.n	80061c2 <_free_r+0x22>
 800622a:	bd38      	pop	{r3, r4, r5, pc}
 800622c:	20000654 	.word	0x20000654

08006230 <malloc>:
 8006230:	4b02      	ldr	r3, [pc, #8]	; (800623c <malloc+0xc>)
 8006232:	4601      	mov	r1, r0
 8006234:	6818      	ldr	r0, [r3, #0]
 8006236:	f000 b823 	b.w	8006280 <_malloc_r>
 800623a:	bf00      	nop
 800623c:	2000006c 	.word	0x2000006c

08006240 <sbrk_aligned>:
 8006240:	b570      	push	{r4, r5, r6, lr}
 8006242:	4e0e      	ldr	r6, [pc, #56]	; (800627c <sbrk_aligned+0x3c>)
 8006244:	460c      	mov	r4, r1
 8006246:	6831      	ldr	r1, [r6, #0]
 8006248:	4605      	mov	r5, r0
 800624a:	b911      	cbnz	r1, 8006252 <sbrk_aligned+0x12>
 800624c:	f000 fe38 	bl	8006ec0 <_sbrk_r>
 8006250:	6030      	str	r0, [r6, #0]
 8006252:	4621      	mov	r1, r4
 8006254:	4628      	mov	r0, r5
 8006256:	f000 fe33 	bl	8006ec0 <_sbrk_r>
 800625a:	1c43      	adds	r3, r0, #1
 800625c:	d00a      	beq.n	8006274 <sbrk_aligned+0x34>
 800625e:	1cc4      	adds	r4, r0, #3
 8006260:	f024 0403 	bic.w	r4, r4, #3
 8006264:	42a0      	cmp	r0, r4
 8006266:	d007      	beq.n	8006278 <sbrk_aligned+0x38>
 8006268:	1a21      	subs	r1, r4, r0
 800626a:	4628      	mov	r0, r5
 800626c:	f000 fe28 	bl	8006ec0 <_sbrk_r>
 8006270:	3001      	adds	r0, #1
 8006272:	d101      	bne.n	8006278 <sbrk_aligned+0x38>
 8006274:	f04f 34ff 	mov.w	r4, #4294967295
 8006278:	4620      	mov	r0, r4
 800627a:	bd70      	pop	{r4, r5, r6, pc}
 800627c:	20000658 	.word	0x20000658

08006280 <_malloc_r>:
 8006280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006284:	1ccd      	adds	r5, r1, #3
 8006286:	f025 0503 	bic.w	r5, r5, #3
 800628a:	3508      	adds	r5, #8
 800628c:	2d0c      	cmp	r5, #12
 800628e:	bf38      	it	cc
 8006290:	250c      	movcc	r5, #12
 8006292:	2d00      	cmp	r5, #0
 8006294:	4607      	mov	r7, r0
 8006296:	db01      	blt.n	800629c <_malloc_r+0x1c>
 8006298:	42a9      	cmp	r1, r5
 800629a:	d905      	bls.n	80062a8 <_malloc_r+0x28>
 800629c:	230c      	movs	r3, #12
 800629e:	2600      	movs	r6, #0
 80062a0:	603b      	str	r3, [r7, #0]
 80062a2:	4630      	mov	r0, r6
 80062a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800637c <_malloc_r+0xfc>
 80062ac:	f000 f868 	bl	8006380 <__malloc_lock>
 80062b0:	f8d8 3000 	ldr.w	r3, [r8]
 80062b4:	461c      	mov	r4, r3
 80062b6:	bb5c      	cbnz	r4, 8006310 <_malloc_r+0x90>
 80062b8:	4629      	mov	r1, r5
 80062ba:	4638      	mov	r0, r7
 80062bc:	f7ff ffc0 	bl	8006240 <sbrk_aligned>
 80062c0:	1c43      	adds	r3, r0, #1
 80062c2:	4604      	mov	r4, r0
 80062c4:	d155      	bne.n	8006372 <_malloc_r+0xf2>
 80062c6:	f8d8 4000 	ldr.w	r4, [r8]
 80062ca:	4626      	mov	r6, r4
 80062cc:	2e00      	cmp	r6, #0
 80062ce:	d145      	bne.n	800635c <_malloc_r+0xdc>
 80062d0:	2c00      	cmp	r4, #0
 80062d2:	d048      	beq.n	8006366 <_malloc_r+0xe6>
 80062d4:	6823      	ldr	r3, [r4, #0]
 80062d6:	4631      	mov	r1, r6
 80062d8:	4638      	mov	r0, r7
 80062da:	eb04 0903 	add.w	r9, r4, r3
 80062de:	f000 fdef 	bl	8006ec0 <_sbrk_r>
 80062e2:	4581      	cmp	r9, r0
 80062e4:	d13f      	bne.n	8006366 <_malloc_r+0xe6>
 80062e6:	6821      	ldr	r1, [r4, #0]
 80062e8:	4638      	mov	r0, r7
 80062ea:	1a6d      	subs	r5, r5, r1
 80062ec:	4629      	mov	r1, r5
 80062ee:	f7ff ffa7 	bl	8006240 <sbrk_aligned>
 80062f2:	3001      	adds	r0, #1
 80062f4:	d037      	beq.n	8006366 <_malloc_r+0xe6>
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	442b      	add	r3, r5
 80062fa:	6023      	str	r3, [r4, #0]
 80062fc:	f8d8 3000 	ldr.w	r3, [r8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d038      	beq.n	8006376 <_malloc_r+0xf6>
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	42a2      	cmp	r2, r4
 8006308:	d12b      	bne.n	8006362 <_malloc_r+0xe2>
 800630a:	2200      	movs	r2, #0
 800630c:	605a      	str	r2, [r3, #4]
 800630e:	e00f      	b.n	8006330 <_malloc_r+0xb0>
 8006310:	6822      	ldr	r2, [r4, #0]
 8006312:	1b52      	subs	r2, r2, r5
 8006314:	d41f      	bmi.n	8006356 <_malloc_r+0xd6>
 8006316:	2a0b      	cmp	r2, #11
 8006318:	d917      	bls.n	800634a <_malloc_r+0xca>
 800631a:	1961      	adds	r1, r4, r5
 800631c:	42a3      	cmp	r3, r4
 800631e:	6025      	str	r5, [r4, #0]
 8006320:	bf18      	it	ne
 8006322:	6059      	strne	r1, [r3, #4]
 8006324:	6863      	ldr	r3, [r4, #4]
 8006326:	bf08      	it	eq
 8006328:	f8c8 1000 	streq.w	r1, [r8]
 800632c:	5162      	str	r2, [r4, r5]
 800632e:	604b      	str	r3, [r1, #4]
 8006330:	4638      	mov	r0, r7
 8006332:	f104 060b 	add.w	r6, r4, #11
 8006336:	f000 f829 	bl	800638c <__malloc_unlock>
 800633a:	f026 0607 	bic.w	r6, r6, #7
 800633e:	1d23      	adds	r3, r4, #4
 8006340:	1af2      	subs	r2, r6, r3
 8006342:	d0ae      	beq.n	80062a2 <_malloc_r+0x22>
 8006344:	1b9b      	subs	r3, r3, r6
 8006346:	50a3      	str	r3, [r4, r2]
 8006348:	e7ab      	b.n	80062a2 <_malloc_r+0x22>
 800634a:	42a3      	cmp	r3, r4
 800634c:	6862      	ldr	r2, [r4, #4]
 800634e:	d1dd      	bne.n	800630c <_malloc_r+0x8c>
 8006350:	f8c8 2000 	str.w	r2, [r8]
 8006354:	e7ec      	b.n	8006330 <_malloc_r+0xb0>
 8006356:	4623      	mov	r3, r4
 8006358:	6864      	ldr	r4, [r4, #4]
 800635a:	e7ac      	b.n	80062b6 <_malloc_r+0x36>
 800635c:	4634      	mov	r4, r6
 800635e:	6876      	ldr	r6, [r6, #4]
 8006360:	e7b4      	b.n	80062cc <_malloc_r+0x4c>
 8006362:	4613      	mov	r3, r2
 8006364:	e7cc      	b.n	8006300 <_malloc_r+0x80>
 8006366:	230c      	movs	r3, #12
 8006368:	4638      	mov	r0, r7
 800636a:	603b      	str	r3, [r7, #0]
 800636c:	f000 f80e 	bl	800638c <__malloc_unlock>
 8006370:	e797      	b.n	80062a2 <_malloc_r+0x22>
 8006372:	6025      	str	r5, [r4, #0]
 8006374:	e7dc      	b.n	8006330 <_malloc_r+0xb0>
 8006376:	605b      	str	r3, [r3, #4]
 8006378:	deff      	udf	#255	; 0xff
 800637a:	bf00      	nop
 800637c:	20000654 	.word	0x20000654

08006380 <__malloc_lock>:
 8006380:	4801      	ldr	r0, [pc, #4]	; (8006388 <__malloc_lock+0x8>)
 8006382:	f7ff b88d 	b.w	80054a0 <__retarget_lock_acquire_recursive>
 8006386:	bf00      	nop
 8006388:	20000650 	.word	0x20000650

0800638c <__malloc_unlock>:
 800638c:	4801      	ldr	r0, [pc, #4]	; (8006394 <__malloc_unlock+0x8>)
 800638e:	f7ff b888 	b.w	80054a2 <__retarget_lock_release_recursive>
 8006392:	bf00      	nop
 8006394:	20000650 	.word	0x20000650

08006398 <_Balloc>:
 8006398:	b570      	push	{r4, r5, r6, lr}
 800639a:	69c6      	ldr	r6, [r0, #28]
 800639c:	4604      	mov	r4, r0
 800639e:	460d      	mov	r5, r1
 80063a0:	b976      	cbnz	r6, 80063c0 <_Balloc+0x28>
 80063a2:	2010      	movs	r0, #16
 80063a4:	f7ff ff44 	bl	8006230 <malloc>
 80063a8:	4602      	mov	r2, r0
 80063aa:	61e0      	str	r0, [r4, #28]
 80063ac:	b920      	cbnz	r0, 80063b8 <_Balloc+0x20>
 80063ae:	216b      	movs	r1, #107	; 0x6b
 80063b0:	4b17      	ldr	r3, [pc, #92]	; (8006410 <_Balloc+0x78>)
 80063b2:	4818      	ldr	r0, [pc, #96]	; (8006414 <_Balloc+0x7c>)
 80063b4:	f000 fda2 	bl	8006efc <__assert_func>
 80063b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063bc:	6006      	str	r6, [r0, #0]
 80063be:	60c6      	str	r6, [r0, #12]
 80063c0:	69e6      	ldr	r6, [r4, #28]
 80063c2:	68f3      	ldr	r3, [r6, #12]
 80063c4:	b183      	cbz	r3, 80063e8 <_Balloc+0x50>
 80063c6:	69e3      	ldr	r3, [r4, #28]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80063ce:	b9b8      	cbnz	r0, 8006400 <_Balloc+0x68>
 80063d0:	2101      	movs	r1, #1
 80063d2:	fa01 f605 	lsl.w	r6, r1, r5
 80063d6:	1d72      	adds	r2, r6, #5
 80063d8:	4620      	mov	r0, r4
 80063da:	0092      	lsls	r2, r2, #2
 80063dc:	f000 fdac 	bl	8006f38 <_calloc_r>
 80063e0:	b160      	cbz	r0, 80063fc <_Balloc+0x64>
 80063e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80063e6:	e00e      	b.n	8006406 <_Balloc+0x6e>
 80063e8:	2221      	movs	r2, #33	; 0x21
 80063ea:	2104      	movs	r1, #4
 80063ec:	4620      	mov	r0, r4
 80063ee:	f000 fda3 	bl	8006f38 <_calloc_r>
 80063f2:	69e3      	ldr	r3, [r4, #28]
 80063f4:	60f0      	str	r0, [r6, #12]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1e4      	bne.n	80063c6 <_Balloc+0x2e>
 80063fc:	2000      	movs	r0, #0
 80063fe:	bd70      	pop	{r4, r5, r6, pc}
 8006400:	6802      	ldr	r2, [r0, #0]
 8006402:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006406:	2300      	movs	r3, #0
 8006408:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800640c:	e7f7      	b.n	80063fe <_Balloc+0x66>
 800640e:	bf00      	nop
 8006410:	08007d7b 	.word	0x08007d7b
 8006414:	08007dfb 	.word	0x08007dfb

08006418 <_Bfree>:
 8006418:	b570      	push	{r4, r5, r6, lr}
 800641a:	69c6      	ldr	r6, [r0, #28]
 800641c:	4605      	mov	r5, r0
 800641e:	460c      	mov	r4, r1
 8006420:	b976      	cbnz	r6, 8006440 <_Bfree+0x28>
 8006422:	2010      	movs	r0, #16
 8006424:	f7ff ff04 	bl	8006230 <malloc>
 8006428:	4602      	mov	r2, r0
 800642a:	61e8      	str	r0, [r5, #28]
 800642c:	b920      	cbnz	r0, 8006438 <_Bfree+0x20>
 800642e:	218f      	movs	r1, #143	; 0x8f
 8006430:	4b08      	ldr	r3, [pc, #32]	; (8006454 <_Bfree+0x3c>)
 8006432:	4809      	ldr	r0, [pc, #36]	; (8006458 <_Bfree+0x40>)
 8006434:	f000 fd62 	bl	8006efc <__assert_func>
 8006438:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800643c:	6006      	str	r6, [r0, #0]
 800643e:	60c6      	str	r6, [r0, #12]
 8006440:	b13c      	cbz	r4, 8006452 <_Bfree+0x3a>
 8006442:	69eb      	ldr	r3, [r5, #28]
 8006444:	6862      	ldr	r2, [r4, #4]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800644c:	6021      	str	r1, [r4, #0]
 800644e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006452:	bd70      	pop	{r4, r5, r6, pc}
 8006454:	08007d7b 	.word	0x08007d7b
 8006458:	08007dfb 	.word	0x08007dfb

0800645c <__multadd>:
 800645c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006460:	4607      	mov	r7, r0
 8006462:	460c      	mov	r4, r1
 8006464:	461e      	mov	r6, r3
 8006466:	2000      	movs	r0, #0
 8006468:	690d      	ldr	r5, [r1, #16]
 800646a:	f101 0c14 	add.w	ip, r1, #20
 800646e:	f8dc 3000 	ldr.w	r3, [ip]
 8006472:	3001      	adds	r0, #1
 8006474:	b299      	uxth	r1, r3
 8006476:	fb02 6101 	mla	r1, r2, r1, r6
 800647a:	0c1e      	lsrs	r6, r3, #16
 800647c:	0c0b      	lsrs	r3, r1, #16
 800647e:	fb02 3306 	mla	r3, r2, r6, r3
 8006482:	b289      	uxth	r1, r1
 8006484:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006488:	4285      	cmp	r5, r0
 800648a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800648e:	f84c 1b04 	str.w	r1, [ip], #4
 8006492:	dcec      	bgt.n	800646e <__multadd+0x12>
 8006494:	b30e      	cbz	r6, 80064da <__multadd+0x7e>
 8006496:	68a3      	ldr	r3, [r4, #8]
 8006498:	42ab      	cmp	r3, r5
 800649a:	dc19      	bgt.n	80064d0 <__multadd+0x74>
 800649c:	6861      	ldr	r1, [r4, #4]
 800649e:	4638      	mov	r0, r7
 80064a0:	3101      	adds	r1, #1
 80064a2:	f7ff ff79 	bl	8006398 <_Balloc>
 80064a6:	4680      	mov	r8, r0
 80064a8:	b928      	cbnz	r0, 80064b6 <__multadd+0x5a>
 80064aa:	4602      	mov	r2, r0
 80064ac:	21ba      	movs	r1, #186	; 0xba
 80064ae:	4b0c      	ldr	r3, [pc, #48]	; (80064e0 <__multadd+0x84>)
 80064b0:	480c      	ldr	r0, [pc, #48]	; (80064e4 <__multadd+0x88>)
 80064b2:	f000 fd23 	bl	8006efc <__assert_func>
 80064b6:	6922      	ldr	r2, [r4, #16]
 80064b8:	f104 010c 	add.w	r1, r4, #12
 80064bc:	3202      	adds	r2, #2
 80064be:	0092      	lsls	r2, r2, #2
 80064c0:	300c      	adds	r0, #12
 80064c2:	f000 fd0d 	bl	8006ee0 <memcpy>
 80064c6:	4621      	mov	r1, r4
 80064c8:	4638      	mov	r0, r7
 80064ca:	f7ff ffa5 	bl	8006418 <_Bfree>
 80064ce:	4644      	mov	r4, r8
 80064d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80064d4:	3501      	adds	r5, #1
 80064d6:	615e      	str	r6, [r3, #20]
 80064d8:	6125      	str	r5, [r4, #16]
 80064da:	4620      	mov	r0, r4
 80064dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064e0:	08007dea 	.word	0x08007dea
 80064e4:	08007dfb 	.word	0x08007dfb

080064e8 <__hi0bits>:
 80064e8:	0c02      	lsrs	r2, r0, #16
 80064ea:	0412      	lsls	r2, r2, #16
 80064ec:	4603      	mov	r3, r0
 80064ee:	b9ca      	cbnz	r2, 8006524 <__hi0bits+0x3c>
 80064f0:	0403      	lsls	r3, r0, #16
 80064f2:	2010      	movs	r0, #16
 80064f4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80064f8:	bf04      	itt	eq
 80064fa:	021b      	lsleq	r3, r3, #8
 80064fc:	3008      	addeq	r0, #8
 80064fe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006502:	bf04      	itt	eq
 8006504:	011b      	lsleq	r3, r3, #4
 8006506:	3004      	addeq	r0, #4
 8006508:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800650c:	bf04      	itt	eq
 800650e:	009b      	lsleq	r3, r3, #2
 8006510:	3002      	addeq	r0, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	db05      	blt.n	8006522 <__hi0bits+0x3a>
 8006516:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800651a:	f100 0001 	add.w	r0, r0, #1
 800651e:	bf08      	it	eq
 8006520:	2020      	moveq	r0, #32
 8006522:	4770      	bx	lr
 8006524:	2000      	movs	r0, #0
 8006526:	e7e5      	b.n	80064f4 <__hi0bits+0xc>

08006528 <__lo0bits>:
 8006528:	6803      	ldr	r3, [r0, #0]
 800652a:	4602      	mov	r2, r0
 800652c:	f013 0007 	ands.w	r0, r3, #7
 8006530:	d00b      	beq.n	800654a <__lo0bits+0x22>
 8006532:	07d9      	lsls	r1, r3, #31
 8006534:	d421      	bmi.n	800657a <__lo0bits+0x52>
 8006536:	0798      	lsls	r0, r3, #30
 8006538:	bf49      	itett	mi
 800653a:	085b      	lsrmi	r3, r3, #1
 800653c:	089b      	lsrpl	r3, r3, #2
 800653e:	2001      	movmi	r0, #1
 8006540:	6013      	strmi	r3, [r2, #0]
 8006542:	bf5c      	itt	pl
 8006544:	2002      	movpl	r0, #2
 8006546:	6013      	strpl	r3, [r2, #0]
 8006548:	4770      	bx	lr
 800654a:	b299      	uxth	r1, r3
 800654c:	b909      	cbnz	r1, 8006552 <__lo0bits+0x2a>
 800654e:	2010      	movs	r0, #16
 8006550:	0c1b      	lsrs	r3, r3, #16
 8006552:	b2d9      	uxtb	r1, r3
 8006554:	b909      	cbnz	r1, 800655a <__lo0bits+0x32>
 8006556:	3008      	adds	r0, #8
 8006558:	0a1b      	lsrs	r3, r3, #8
 800655a:	0719      	lsls	r1, r3, #28
 800655c:	bf04      	itt	eq
 800655e:	091b      	lsreq	r3, r3, #4
 8006560:	3004      	addeq	r0, #4
 8006562:	0799      	lsls	r1, r3, #30
 8006564:	bf04      	itt	eq
 8006566:	089b      	lsreq	r3, r3, #2
 8006568:	3002      	addeq	r0, #2
 800656a:	07d9      	lsls	r1, r3, #31
 800656c:	d403      	bmi.n	8006576 <__lo0bits+0x4e>
 800656e:	085b      	lsrs	r3, r3, #1
 8006570:	f100 0001 	add.w	r0, r0, #1
 8006574:	d003      	beq.n	800657e <__lo0bits+0x56>
 8006576:	6013      	str	r3, [r2, #0]
 8006578:	4770      	bx	lr
 800657a:	2000      	movs	r0, #0
 800657c:	4770      	bx	lr
 800657e:	2020      	movs	r0, #32
 8006580:	4770      	bx	lr
	...

08006584 <__i2b>:
 8006584:	b510      	push	{r4, lr}
 8006586:	460c      	mov	r4, r1
 8006588:	2101      	movs	r1, #1
 800658a:	f7ff ff05 	bl	8006398 <_Balloc>
 800658e:	4602      	mov	r2, r0
 8006590:	b928      	cbnz	r0, 800659e <__i2b+0x1a>
 8006592:	f240 1145 	movw	r1, #325	; 0x145
 8006596:	4b04      	ldr	r3, [pc, #16]	; (80065a8 <__i2b+0x24>)
 8006598:	4804      	ldr	r0, [pc, #16]	; (80065ac <__i2b+0x28>)
 800659a:	f000 fcaf 	bl	8006efc <__assert_func>
 800659e:	2301      	movs	r3, #1
 80065a0:	6144      	str	r4, [r0, #20]
 80065a2:	6103      	str	r3, [r0, #16]
 80065a4:	bd10      	pop	{r4, pc}
 80065a6:	bf00      	nop
 80065a8:	08007dea 	.word	0x08007dea
 80065ac:	08007dfb 	.word	0x08007dfb

080065b0 <__multiply>:
 80065b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065b4:	4691      	mov	r9, r2
 80065b6:	690a      	ldr	r2, [r1, #16]
 80065b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80065bc:	460c      	mov	r4, r1
 80065be:	429a      	cmp	r2, r3
 80065c0:	bfbe      	ittt	lt
 80065c2:	460b      	movlt	r3, r1
 80065c4:	464c      	movlt	r4, r9
 80065c6:	4699      	movlt	r9, r3
 80065c8:	6927      	ldr	r7, [r4, #16]
 80065ca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80065ce:	68a3      	ldr	r3, [r4, #8]
 80065d0:	6861      	ldr	r1, [r4, #4]
 80065d2:	eb07 060a 	add.w	r6, r7, sl
 80065d6:	42b3      	cmp	r3, r6
 80065d8:	b085      	sub	sp, #20
 80065da:	bfb8      	it	lt
 80065dc:	3101      	addlt	r1, #1
 80065de:	f7ff fedb 	bl	8006398 <_Balloc>
 80065e2:	b930      	cbnz	r0, 80065f2 <__multiply+0x42>
 80065e4:	4602      	mov	r2, r0
 80065e6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80065ea:	4b43      	ldr	r3, [pc, #268]	; (80066f8 <__multiply+0x148>)
 80065ec:	4843      	ldr	r0, [pc, #268]	; (80066fc <__multiply+0x14c>)
 80065ee:	f000 fc85 	bl	8006efc <__assert_func>
 80065f2:	f100 0514 	add.w	r5, r0, #20
 80065f6:	462b      	mov	r3, r5
 80065f8:	2200      	movs	r2, #0
 80065fa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80065fe:	4543      	cmp	r3, r8
 8006600:	d321      	bcc.n	8006646 <__multiply+0x96>
 8006602:	f104 0314 	add.w	r3, r4, #20
 8006606:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800660a:	f109 0314 	add.w	r3, r9, #20
 800660e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006612:	9202      	str	r2, [sp, #8]
 8006614:	1b3a      	subs	r2, r7, r4
 8006616:	3a15      	subs	r2, #21
 8006618:	f022 0203 	bic.w	r2, r2, #3
 800661c:	3204      	adds	r2, #4
 800661e:	f104 0115 	add.w	r1, r4, #21
 8006622:	428f      	cmp	r7, r1
 8006624:	bf38      	it	cc
 8006626:	2204      	movcc	r2, #4
 8006628:	9201      	str	r2, [sp, #4]
 800662a:	9a02      	ldr	r2, [sp, #8]
 800662c:	9303      	str	r3, [sp, #12]
 800662e:	429a      	cmp	r2, r3
 8006630:	d80c      	bhi.n	800664c <__multiply+0x9c>
 8006632:	2e00      	cmp	r6, #0
 8006634:	dd03      	ble.n	800663e <__multiply+0x8e>
 8006636:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800663a:	2b00      	cmp	r3, #0
 800663c:	d05a      	beq.n	80066f4 <__multiply+0x144>
 800663e:	6106      	str	r6, [r0, #16]
 8006640:	b005      	add	sp, #20
 8006642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006646:	f843 2b04 	str.w	r2, [r3], #4
 800664a:	e7d8      	b.n	80065fe <__multiply+0x4e>
 800664c:	f8b3 a000 	ldrh.w	sl, [r3]
 8006650:	f1ba 0f00 	cmp.w	sl, #0
 8006654:	d023      	beq.n	800669e <__multiply+0xee>
 8006656:	46a9      	mov	r9, r5
 8006658:	f04f 0c00 	mov.w	ip, #0
 800665c:	f104 0e14 	add.w	lr, r4, #20
 8006660:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006664:	f8d9 1000 	ldr.w	r1, [r9]
 8006668:	fa1f fb82 	uxth.w	fp, r2
 800666c:	b289      	uxth	r1, r1
 800666e:	fb0a 110b 	mla	r1, sl, fp, r1
 8006672:	4461      	add	r1, ip
 8006674:	f8d9 c000 	ldr.w	ip, [r9]
 8006678:	0c12      	lsrs	r2, r2, #16
 800667a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800667e:	fb0a c202 	mla	r2, sl, r2, ip
 8006682:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006686:	b289      	uxth	r1, r1
 8006688:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800668c:	4577      	cmp	r7, lr
 800668e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006692:	f849 1b04 	str.w	r1, [r9], #4
 8006696:	d8e3      	bhi.n	8006660 <__multiply+0xb0>
 8006698:	9a01      	ldr	r2, [sp, #4]
 800669a:	f845 c002 	str.w	ip, [r5, r2]
 800669e:	9a03      	ldr	r2, [sp, #12]
 80066a0:	3304      	adds	r3, #4
 80066a2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80066a6:	f1b9 0f00 	cmp.w	r9, #0
 80066aa:	d021      	beq.n	80066f0 <__multiply+0x140>
 80066ac:	46ae      	mov	lr, r5
 80066ae:	f04f 0a00 	mov.w	sl, #0
 80066b2:	6829      	ldr	r1, [r5, #0]
 80066b4:	f104 0c14 	add.w	ip, r4, #20
 80066b8:	f8bc b000 	ldrh.w	fp, [ip]
 80066bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80066c0:	b289      	uxth	r1, r1
 80066c2:	fb09 220b 	mla	r2, r9, fp, r2
 80066c6:	4452      	add	r2, sl
 80066c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80066cc:	f84e 1b04 	str.w	r1, [lr], #4
 80066d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80066d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80066d8:	f8be 1000 	ldrh.w	r1, [lr]
 80066dc:	4567      	cmp	r7, ip
 80066de:	fb09 110a 	mla	r1, r9, sl, r1
 80066e2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80066e6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80066ea:	d8e5      	bhi.n	80066b8 <__multiply+0x108>
 80066ec:	9a01      	ldr	r2, [sp, #4]
 80066ee:	50a9      	str	r1, [r5, r2]
 80066f0:	3504      	adds	r5, #4
 80066f2:	e79a      	b.n	800662a <__multiply+0x7a>
 80066f4:	3e01      	subs	r6, #1
 80066f6:	e79c      	b.n	8006632 <__multiply+0x82>
 80066f8:	08007dea 	.word	0x08007dea
 80066fc:	08007dfb 	.word	0x08007dfb

08006700 <__pow5mult>:
 8006700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006704:	4615      	mov	r5, r2
 8006706:	f012 0203 	ands.w	r2, r2, #3
 800670a:	4606      	mov	r6, r0
 800670c:	460f      	mov	r7, r1
 800670e:	d007      	beq.n	8006720 <__pow5mult+0x20>
 8006710:	4c25      	ldr	r4, [pc, #148]	; (80067a8 <__pow5mult+0xa8>)
 8006712:	3a01      	subs	r2, #1
 8006714:	2300      	movs	r3, #0
 8006716:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800671a:	f7ff fe9f 	bl	800645c <__multadd>
 800671e:	4607      	mov	r7, r0
 8006720:	10ad      	asrs	r5, r5, #2
 8006722:	d03d      	beq.n	80067a0 <__pow5mult+0xa0>
 8006724:	69f4      	ldr	r4, [r6, #28]
 8006726:	b97c      	cbnz	r4, 8006748 <__pow5mult+0x48>
 8006728:	2010      	movs	r0, #16
 800672a:	f7ff fd81 	bl	8006230 <malloc>
 800672e:	4602      	mov	r2, r0
 8006730:	61f0      	str	r0, [r6, #28]
 8006732:	b928      	cbnz	r0, 8006740 <__pow5mult+0x40>
 8006734:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006738:	4b1c      	ldr	r3, [pc, #112]	; (80067ac <__pow5mult+0xac>)
 800673a:	481d      	ldr	r0, [pc, #116]	; (80067b0 <__pow5mult+0xb0>)
 800673c:	f000 fbde 	bl	8006efc <__assert_func>
 8006740:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006744:	6004      	str	r4, [r0, #0]
 8006746:	60c4      	str	r4, [r0, #12]
 8006748:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800674c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006750:	b94c      	cbnz	r4, 8006766 <__pow5mult+0x66>
 8006752:	f240 2171 	movw	r1, #625	; 0x271
 8006756:	4630      	mov	r0, r6
 8006758:	f7ff ff14 	bl	8006584 <__i2b>
 800675c:	2300      	movs	r3, #0
 800675e:	4604      	mov	r4, r0
 8006760:	f8c8 0008 	str.w	r0, [r8, #8]
 8006764:	6003      	str	r3, [r0, #0]
 8006766:	f04f 0900 	mov.w	r9, #0
 800676a:	07eb      	lsls	r3, r5, #31
 800676c:	d50a      	bpl.n	8006784 <__pow5mult+0x84>
 800676e:	4639      	mov	r1, r7
 8006770:	4622      	mov	r2, r4
 8006772:	4630      	mov	r0, r6
 8006774:	f7ff ff1c 	bl	80065b0 <__multiply>
 8006778:	4680      	mov	r8, r0
 800677a:	4639      	mov	r1, r7
 800677c:	4630      	mov	r0, r6
 800677e:	f7ff fe4b 	bl	8006418 <_Bfree>
 8006782:	4647      	mov	r7, r8
 8006784:	106d      	asrs	r5, r5, #1
 8006786:	d00b      	beq.n	80067a0 <__pow5mult+0xa0>
 8006788:	6820      	ldr	r0, [r4, #0]
 800678a:	b938      	cbnz	r0, 800679c <__pow5mult+0x9c>
 800678c:	4622      	mov	r2, r4
 800678e:	4621      	mov	r1, r4
 8006790:	4630      	mov	r0, r6
 8006792:	f7ff ff0d 	bl	80065b0 <__multiply>
 8006796:	6020      	str	r0, [r4, #0]
 8006798:	f8c0 9000 	str.w	r9, [r0]
 800679c:	4604      	mov	r4, r0
 800679e:	e7e4      	b.n	800676a <__pow5mult+0x6a>
 80067a0:	4638      	mov	r0, r7
 80067a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067a6:	bf00      	nop
 80067a8:	08007f48 	.word	0x08007f48
 80067ac:	08007d7b 	.word	0x08007d7b
 80067b0:	08007dfb 	.word	0x08007dfb

080067b4 <__lshift>:
 80067b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067b8:	460c      	mov	r4, r1
 80067ba:	4607      	mov	r7, r0
 80067bc:	4691      	mov	r9, r2
 80067be:	6923      	ldr	r3, [r4, #16]
 80067c0:	6849      	ldr	r1, [r1, #4]
 80067c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80067c6:	68a3      	ldr	r3, [r4, #8]
 80067c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80067cc:	f108 0601 	add.w	r6, r8, #1
 80067d0:	42b3      	cmp	r3, r6
 80067d2:	db0b      	blt.n	80067ec <__lshift+0x38>
 80067d4:	4638      	mov	r0, r7
 80067d6:	f7ff fddf 	bl	8006398 <_Balloc>
 80067da:	4605      	mov	r5, r0
 80067dc:	b948      	cbnz	r0, 80067f2 <__lshift+0x3e>
 80067de:	4602      	mov	r2, r0
 80067e0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80067e4:	4b27      	ldr	r3, [pc, #156]	; (8006884 <__lshift+0xd0>)
 80067e6:	4828      	ldr	r0, [pc, #160]	; (8006888 <__lshift+0xd4>)
 80067e8:	f000 fb88 	bl	8006efc <__assert_func>
 80067ec:	3101      	adds	r1, #1
 80067ee:	005b      	lsls	r3, r3, #1
 80067f0:	e7ee      	b.n	80067d0 <__lshift+0x1c>
 80067f2:	2300      	movs	r3, #0
 80067f4:	f100 0114 	add.w	r1, r0, #20
 80067f8:	f100 0210 	add.w	r2, r0, #16
 80067fc:	4618      	mov	r0, r3
 80067fe:	4553      	cmp	r3, sl
 8006800:	db33      	blt.n	800686a <__lshift+0xb6>
 8006802:	6920      	ldr	r0, [r4, #16]
 8006804:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006808:	f104 0314 	add.w	r3, r4, #20
 800680c:	f019 091f 	ands.w	r9, r9, #31
 8006810:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006814:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006818:	d02b      	beq.n	8006872 <__lshift+0xbe>
 800681a:	468a      	mov	sl, r1
 800681c:	2200      	movs	r2, #0
 800681e:	f1c9 0e20 	rsb	lr, r9, #32
 8006822:	6818      	ldr	r0, [r3, #0]
 8006824:	fa00 f009 	lsl.w	r0, r0, r9
 8006828:	4310      	orrs	r0, r2
 800682a:	f84a 0b04 	str.w	r0, [sl], #4
 800682e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006832:	459c      	cmp	ip, r3
 8006834:	fa22 f20e 	lsr.w	r2, r2, lr
 8006838:	d8f3      	bhi.n	8006822 <__lshift+0x6e>
 800683a:	ebac 0304 	sub.w	r3, ip, r4
 800683e:	3b15      	subs	r3, #21
 8006840:	f023 0303 	bic.w	r3, r3, #3
 8006844:	3304      	adds	r3, #4
 8006846:	f104 0015 	add.w	r0, r4, #21
 800684a:	4584      	cmp	ip, r0
 800684c:	bf38      	it	cc
 800684e:	2304      	movcc	r3, #4
 8006850:	50ca      	str	r2, [r1, r3]
 8006852:	b10a      	cbz	r2, 8006858 <__lshift+0xa4>
 8006854:	f108 0602 	add.w	r6, r8, #2
 8006858:	3e01      	subs	r6, #1
 800685a:	4638      	mov	r0, r7
 800685c:	4621      	mov	r1, r4
 800685e:	612e      	str	r6, [r5, #16]
 8006860:	f7ff fdda 	bl	8006418 <_Bfree>
 8006864:	4628      	mov	r0, r5
 8006866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800686a:	f842 0f04 	str.w	r0, [r2, #4]!
 800686e:	3301      	adds	r3, #1
 8006870:	e7c5      	b.n	80067fe <__lshift+0x4a>
 8006872:	3904      	subs	r1, #4
 8006874:	f853 2b04 	ldr.w	r2, [r3], #4
 8006878:	459c      	cmp	ip, r3
 800687a:	f841 2f04 	str.w	r2, [r1, #4]!
 800687e:	d8f9      	bhi.n	8006874 <__lshift+0xc0>
 8006880:	e7ea      	b.n	8006858 <__lshift+0xa4>
 8006882:	bf00      	nop
 8006884:	08007dea 	.word	0x08007dea
 8006888:	08007dfb 	.word	0x08007dfb

0800688c <__mcmp>:
 800688c:	4603      	mov	r3, r0
 800688e:	690a      	ldr	r2, [r1, #16]
 8006890:	6900      	ldr	r0, [r0, #16]
 8006892:	b530      	push	{r4, r5, lr}
 8006894:	1a80      	subs	r0, r0, r2
 8006896:	d10d      	bne.n	80068b4 <__mcmp+0x28>
 8006898:	3314      	adds	r3, #20
 800689a:	3114      	adds	r1, #20
 800689c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80068a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80068a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80068a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80068ac:	4295      	cmp	r5, r2
 80068ae:	d002      	beq.n	80068b6 <__mcmp+0x2a>
 80068b0:	d304      	bcc.n	80068bc <__mcmp+0x30>
 80068b2:	2001      	movs	r0, #1
 80068b4:	bd30      	pop	{r4, r5, pc}
 80068b6:	42a3      	cmp	r3, r4
 80068b8:	d3f4      	bcc.n	80068a4 <__mcmp+0x18>
 80068ba:	e7fb      	b.n	80068b4 <__mcmp+0x28>
 80068bc:	f04f 30ff 	mov.w	r0, #4294967295
 80068c0:	e7f8      	b.n	80068b4 <__mcmp+0x28>
	...

080068c4 <__mdiff>:
 80068c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c8:	460d      	mov	r5, r1
 80068ca:	4607      	mov	r7, r0
 80068cc:	4611      	mov	r1, r2
 80068ce:	4628      	mov	r0, r5
 80068d0:	4614      	mov	r4, r2
 80068d2:	f7ff ffdb 	bl	800688c <__mcmp>
 80068d6:	1e06      	subs	r6, r0, #0
 80068d8:	d111      	bne.n	80068fe <__mdiff+0x3a>
 80068da:	4631      	mov	r1, r6
 80068dc:	4638      	mov	r0, r7
 80068de:	f7ff fd5b 	bl	8006398 <_Balloc>
 80068e2:	4602      	mov	r2, r0
 80068e4:	b928      	cbnz	r0, 80068f2 <__mdiff+0x2e>
 80068e6:	f240 2137 	movw	r1, #567	; 0x237
 80068ea:	4b3a      	ldr	r3, [pc, #232]	; (80069d4 <__mdiff+0x110>)
 80068ec:	483a      	ldr	r0, [pc, #232]	; (80069d8 <__mdiff+0x114>)
 80068ee:	f000 fb05 	bl	8006efc <__assert_func>
 80068f2:	2301      	movs	r3, #1
 80068f4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80068f8:	4610      	mov	r0, r2
 80068fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068fe:	bfa4      	itt	ge
 8006900:	4623      	movge	r3, r4
 8006902:	462c      	movge	r4, r5
 8006904:	4638      	mov	r0, r7
 8006906:	6861      	ldr	r1, [r4, #4]
 8006908:	bfa6      	itte	ge
 800690a:	461d      	movge	r5, r3
 800690c:	2600      	movge	r6, #0
 800690e:	2601      	movlt	r6, #1
 8006910:	f7ff fd42 	bl	8006398 <_Balloc>
 8006914:	4602      	mov	r2, r0
 8006916:	b918      	cbnz	r0, 8006920 <__mdiff+0x5c>
 8006918:	f240 2145 	movw	r1, #581	; 0x245
 800691c:	4b2d      	ldr	r3, [pc, #180]	; (80069d4 <__mdiff+0x110>)
 800691e:	e7e5      	b.n	80068ec <__mdiff+0x28>
 8006920:	f102 0814 	add.w	r8, r2, #20
 8006924:	46c2      	mov	sl, r8
 8006926:	f04f 0c00 	mov.w	ip, #0
 800692a:	6927      	ldr	r7, [r4, #16]
 800692c:	60c6      	str	r6, [r0, #12]
 800692e:	692e      	ldr	r6, [r5, #16]
 8006930:	f104 0014 	add.w	r0, r4, #20
 8006934:	f105 0914 	add.w	r9, r5, #20
 8006938:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800693c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006940:	3410      	adds	r4, #16
 8006942:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006946:	f859 3b04 	ldr.w	r3, [r9], #4
 800694a:	fa1f f18b 	uxth.w	r1, fp
 800694e:	4461      	add	r1, ip
 8006950:	fa1f fc83 	uxth.w	ip, r3
 8006954:	0c1b      	lsrs	r3, r3, #16
 8006956:	eba1 010c 	sub.w	r1, r1, ip
 800695a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800695e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006962:	b289      	uxth	r1, r1
 8006964:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006968:	454e      	cmp	r6, r9
 800696a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800696e:	f84a 1b04 	str.w	r1, [sl], #4
 8006972:	d8e6      	bhi.n	8006942 <__mdiff+0x7e>
 8006974:	1b73      	subs	r3, r6, r5
 8006976:	3b15      	subs	r3, #21
 8006978:	f023 0303 	bic.w	r3, r3, #3
 800697c:	3515      	adds	r5, #21
 800697e:	3304      	adds	r3, #4
 8006980:	42ae      	cmp	r6, r5
 8006982:	bf38      	it	cc
 8006984:	2304      	movcc	r3, #4
 8006986:	4418      	add	r0, r3
 8006988:	4443      	add	r3, r8
 800698a:	461e      	mov	r6, r3
 800698c:	4605      	mov	r5, r0
 800698e:	4575      	cmp	r5, lr
 8006990:	d30e      	bcc.n	80069b0 <__mdiff+0xec>
 8006992:	f10e 0103 	add.w	r1, lr, #3
 8006996:	1a09      	subs	r1, r1, r0
 8006998:	f021 0103 	bic.w	r1, r1, #3
 800699c:	3803      	subs	r0, #3
 800699e:	4586      	cmp	lr, r0
 80069a0:	bf38      	it	cc
 80069a2:	2100      	movcc	r1, #0
 80069a4:	440b      	add	r3, r1
 80069a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80069aa:	b189      	cbz	r1, 80069d0 <__mdiff+0x10c>
 80069ac:	6117      	str	r7, [r2, #16]
 80069ae:	e7a3      	b.n	80068f8 <__mdiff+0x34>
 80069b0:	f855 8b04 	ldr.w	r8, [r5], #4
 80069b4:	fa1f f188 	uxth.w	r1, r8
 80069b8:	4461      	add	r1, ip
 80069ba:	140c      	asrs	r4, r1, #16
 80069bc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80069c0:	b289      	uxth	r1, r1
 80069c2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80069c6:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80069ca:	f846 1b04 	str.w	r1, [r6], #4
 80069ce:	e7de      	b.n	800698e <__mdiff+0xca>
 80069d0:	3f01      	subs	r7, #1
 80069d2:	e7e8      	b.n	80069a6 <__mdiff+0xe2>
 80069d4:	08007dea 	.word	0x08007dea
 80069d8:	08007dfb 	.word	0x08007dfb

080069dc <__d2b>:
 80069dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069de:	2101      	movs	r1, #1
 80069e0:	4617      	mov	r7, r2
 80069e2:	461c      	mov	r4, r3
 80069e4:	9e08      	ldr	r6, [sp, #32]
 80069e6:	f7ff fcd7 	bl	8006398 <_Balloc>
 80069ea:	4605      	mov	r5, r0
 80069ec:	b930      	cbnz	r0, 80069fc <__d2b+0x20>
 80069ee:	4602      	mov	r2, r0
 80069f0:	f240 310f 	movw	r1, #783	; 0x30f
 80069f4:	4b22      	ldr	r3, [pc, #136]	; (8006a80 <__d2b+0xa4>)
 80069f6:	4823      	ldr	r0, [pc, #140]	; (8006a84 <__d2b+0xa8>)
 80069f8:	f000 fa80 	bl	8006efc <__assert_func>
 80069fc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006a00:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006a04:	bb24      	cbnz	r4, 8006a50 <__d2b+0x74>
 8006a06:	2f00      	cmp	r7, #0
 8006a08:	9301      	str	r3, [sp, #4]
 8006a0a:	d026      	beq.n	8006a5a <__d2b+0x7e>
 8006a0c:	4668      	mov	r0, sp
 8006a0e:	9700      	str	r7, [sp, #0]
 8006a10:	f7ff fd8a 	bl	8006528 <__lo0bits>
 8006a14:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006a18:	b1e8      	cbz	r0, 8006a56 <__d2b+0x7a>
 8006a1a:	f1c0 0320 	rsb	r3, r0, #32
 8006a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a22:	430b      	orrs	r3, r1
 8006a24:	40c2      	lsrs	r2, r0
 8006a26:	616b      	str	r3, [r5, #20]
 8006a28:	9201      	str	r2, [sp, #4]
 8006a2a:	9b01      	ldr	r3, [sp, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	bf14      	ite	ne
 8006a30:	2102      	movne	r1, #2
 8006a32:	2101      	moveq	r1, #1
 8006a34:	61ab      	str	r3, [r5, #24]
 8006a36:	6129      	str	r1, [r5, #16]
 8006a38:	b1bc      	cbz	r4, 8006a6a <__d2b+0x8e>
 8006a3a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006a3e:	4404      	add	r4, r0
 8006a40:	6034      	str	r4, [r6, #0]
 8006a42:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a48:	6018      	str	r0, [r3, #0]
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	b003      	add	sp, #12
 8006a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a54:	e7d7      	b.n	8006a06 <__d2b+0x2a>
 8006a56:	6169      	str	r1, [r5, #20]
 8006a58:	e7e7      	b.n	8006a2a <__d2b+0x4e>
 8006a5a:	a801      	add	r0, sp, #4
 8006a5c:	f7ff fd64 	bl	8006528 <__lo0bits>
 8006a60:	9b01      	ldr	r3, [sp, #4]
 8006a62:	2101      	movs	r1, #1
 8006a64:	616b      	str	r3, [r5, #20]
 8006a66:	3020      	adds	r0, #32
 8006a68:	e7e5      	b.n	8006a36 <__d2b+0x5a>
 8006a6a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006a6e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8006a72:	6030      	str	r0, [r6, #0]
 8006a74:	6918      	ldr	r0, [r3, #16]
 8006a76:	f7ff fd37 	bl	80064e8 <__hi0bits>
 8006a7a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006a7e:	e7e2      	b.n	8006a46 <__d2b+0x6a>
 8006a80:	08007dea 	.word	0x08007dea
 8006a84:	08007dfb 	.word	0x08007dfb

08006a88 <__ssputs_r>:
 8006a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a8c:	461f      	mov	r7, r3
 8006a8e:	688e      	ldr	r6, [r1, #8]
 8006a90:	4682      	mov	sl, r0
 8006a92:	42be      	cmp	r6, r7
 8006a94:	460c      	mov	r4, r1
 8006a96:	4690      	mov	r8, r2
 8006a98:	680b      	ldr	r3, [r1, #0]
 8006a9a:	d82c      	bhi.n	8006af6 <__ssputs_r+0x6e>
 8006a9c:	898a      	ldrh	r2, [r1, #12]
 8006a9e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006aa2:	d026      	beq.n	8006af2 <__ssputs_r+0x6a>
 8006aa4:	6965      	ldr	r5, [r4, #20]
 8006aa6:	6909      	ldr	r1, [r1, #16]
 8006aa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006aac:	eba3 0901 	sub.w	r9, r3, r1
 8006ab0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ab4:	1c7b      	adds	r3, r7, #1
 8006ab6:	444b      	add	r3, r9
 8006ab8:	106d      	asrs	r5, r5, #1
 8006aba:	429d      	cmp	r5, r3
 8006abc:	bf38      	it	cc
 8006abe:	461d      	movcc	r5, r3
 8006ac0:	0553      	lsls	r3, r2, #21
 8006ac2:	d527      	bpl.n	8006b14 <__ssputs_r+0x8c>
 8006ac4:	4629      	mov	r1, r5
 8006ac6:	f7ff fbdb 	bl	8006280 <_malloc_r>
 8006aca:	4606      	mov	r6, r0
 8006acc:	b360      	cbz	r0, 8006b28 <__ssputs_r+0xa0>
 8006ace:	464a      	mov	r2, r9
 8006ad0:	6921      	ldr	r1, [r4, #16]
 8006ad2:	f000 fa05 	bl	8006ee0 <memcpy>
 8006ad6:	89a3      	ldrh	r3, [r4, #12]
 8006ad8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae0:	81a3      	strh	r3, [r4, #12]
 8006ae2:	6126      	str	r6, [r4, #16]
 8006ae4:	444e      	add	r6, r9
 8006ae6:	6026      	str	r6, [r4, #0]
 8006ae8:	463e      	mov	r6, r7
 8006aea:	6165      	str	r5, [r4, #20]
 8006aec:	eba5 0509 	sub.w	r5, r5, r9
 8006af0:	60a5      	str	r5, [r4, #8]
 8006af2:	42be      	cmp	r6, r7
 8006af4:	d900      	bls.n	8006af8 <__ssputs_r+0x70>
 8006af6:	463e      	mov	r6, r7
 8006af8:	4632      	mov	r2, r6
 8006afa:	4641      	mov	r1, r8
 8006afc:	6820      	ldr	r0, [r4, #0]
 8006afe:	f000 f9c5 	bl	8006e8c <memmove>
 8006b02:	2000      	movs	r0, #0
 8006b04:	68a3      	ldr	r3, [r4, #8]
 8006b06:	1b9b      	subs	r3, r3, r6
 8006b08:	60a3      	str	r3, [r4, #8]
 8006b0a:	6823      	ldr	r3, [r4, #0]
 8006b0c:	4433      	add	r3, r6
 8006b0e:	6023      	str	r3, [r4, #0]
 8006b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b14:	462a      	mov	r2, r5
 8006b16:	f000 fa35 	bl	8006f84 <_realloc_r>
 8006b1a:	4606      	mov	r6, r0
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	d1e0      	bne.n	8006ae2 <__ssputs_r+0x5a>
 8006b20:	4650      	mov	r0, sl
 8006b22:	6921      	ldr	r1, [r4, #16]
 8006b24:	f7ff fb3c 	bl	80061a0 <_free_r>
 8006b28:	230c      	movs	r3, #12
 8006b2a:	f8ca 3000 	str.w	r3, [sl]
 8006b2e:	89a3      	ldrh	r3, [r4, #12]
 8006b30:	f04f 30ff 	mov.w	r0, #4294967295
 8006b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b38:	81a3      	strh	r3, [r4, #12]
 8006b3a:	e7e9      	b.n	8006b10 <__ssputs_r+0x88>

08006b3c <_svfiprintf_r>:
 8006b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b40:	4698      	mov	r8, r3
 8006b42:	898b      	ldrh	r3, [r1, #12]
 8006b44:	4607      	mov	r7, r0
 8006b46:	061b      	lsls	r3, r3, #24
 8006b48:	460d      	mov	r5, r1
 8006b4a:	4614      	mov	r4, r2
 8006b4c:	b09d      	sub	sp, #116	; 0x74
 8006b4e:	d50e      	bpl.n	8006b6e <_svfiprintf_r+0x32>
 8006b50:	690b      	ldr	r3, [r1, #16]
 8006b52:	b963      	cbnz	r3, 8006b6e <_svfiprintf_r+0x32>
 8006b54:	2140      	movs	r1, #64	; 0x40
 8006b56:	f7ff fb93 	bl	8006280 <_malloc_r>
 8006b5a:	6028      	str	r0, [r5, #0]
 8006b5c:	6128      	str	r0, [r5, #16]
 8006b5e:	b920      	cbnz	r0, 8006b6a <_svfiprintf_r+0x2e>
 8006b60:	230c      	movs	r3, #12
 8006b62:	603b      	str	r3, [r7, #0]
 8006b64:	f04f 30ff 	mov.w	r0, #4294967295
 8006b68:	e0d0      	b.n	8006d0c <_svfiprintf_r+0x1d0>
 8006b6a:	2340      	movs	r3, #64	; 0x40
 8006b6c:	616b      	str	r3, [r5, #20]
 8006b6e:	2300      	movs	r3, #0
 8006b70:	9309      	str	r3, [sp, #36]	; 0x24
 8006b72:	2320      	movs	r3, #32
 8006b74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b78:	2330      	movs	r3, #48	; 0x30
 8006b7a:	f04f 0901 	mov.w	r9, #1
 8006b7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b82:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006d24 <_svfiprintf_r+0x1e8>
 8006b86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b8a:	4623      	mov	r3, r4
 8006b8c:	469a      	mov	sl, r3
 8006b8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b92:	b10a      	cbz	r2, 8006b98 <_svfiprintf_r+0x5c>
 8006b94:	2a25      	cmp	r2, #37	; 0x25
 8006b96:	d1f9      	bne.n	8006b8c <_svfiprintf_r+0x50>
 8006b98:	ebba 0b04 	subs.w	fp, sl, r4
 8006b9c:	d00b      	beq.n	8006bb6 <_svfiprintf_r+0x7a>
 8006b9e:	465b      	mov	r3, fp
 8006ba0:	4622      	mov	r2, r4
 8006ba2:	4629      	mov	r1, r5
 8006ba4:	4638      	mov	r0, r7
 8006ba6:	f7ff ff6f 	bl	8006a88 <__ssputs_r>
 8006baa:	3001      	adds	r0, #1
 8006bac:	f000 80a9 	beq.w	8006d02 <_svfiprintf_r+0x1c6>
 8006bb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bb2:	445a      	add	r2, fp
 8006bb4:	9209      	str	r2, [sp, #36]	; 0x24
 8006bb6:	f89a 3000 	ldrb.w	r3, [sl]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f000 80a1 	beq.w	8006d02 <_svfiprintf_r+0x1c6>
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8006bc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bca:	f10a 0a01 	add.w	sl, sl, #1
 8006bce:	9304      	str	r3, [sp, #16]
 8006bd0:	9307      	str	r3, [sp, #28]
 8006bd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bd6:	931a      	str	r3, [sp, #104]	; 0x68
 8006bd8:	4654      	mov	r4, sl
 8006bda:	2205      	movs	r2, #5
 8006bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006be0:	4850      	ldr	r0, [pc, #320]	; (8006d24 <_svfiprintf_r+0x1e8>)
 8006be2:	f7fe fc5f 	bl	80054a4 <memchr>
 8006be6:	9a04      	ldr	r2, [sp, #16]
 8006be8:	b9d8      	cbnz	r0, 8006c22 <_svfiprintf_r+0xe6>
 8006bea:	06d0      	lsls	r0, r2, #27
 8006bec:	bf44      	itt	mi
 8006bee:	2320      	movmi	r3, #32
 8006bf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bf4:	0711      	lsls	r1, r2, #28
 8006bf6:	bf44      	itt	mi
 8006bf8:	232b      	movmi	r3, #43	; 0x2b
 8006bfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bfe:	f89a 3000 	ldrb.w	r3, [sl]
 8006c02:	2b2a      	cmp	r3, #42	; 0x2a
 8006c04:	d015      	beq.n	8006c32 <_svfiprintf_r+0xf6>
 8006c06:	4654      	mov	r4, sl
 8006c08:	2000      	movs	r0, #0
 8006c0a:	f04f 0c0a 	mov.w	ip, #10
 8006c0e:	9a07      	ldr	r2, [sp, #28]
 8006c10:	4621      	mov	r1, r4
 8006c12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c16:	3b30      	subs	r3, #48	; 0x30
 8006c18:	2b09      	cmp	r3, #9
 8006c1a:	d94d      	bls.n	8006cb8 <_svfiprintf_r+0x17c>
 8006c1c:	b1b0      	cbz	r0, 8006c4c <_svfiprintf_r+0x110>
 8006c1e:	9207      	str	r2, [sp, #28]
 8006c20:	e014      	b.n	8006c4c <_svfiprintf_r+0x110>
 8006c22:	eba0 0308 	sub.w	r3, r0, r8
 8006c26:	fa09 f303 	lsl.w	r3, r9, r3
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	46a2      	mov	sl, r4
 8006c2e:	9304      	str	r3, [sp, #16]
 8006c30:	e7d2      	b.n	8006bd8 <_svfiprintf_r+0x9c>
 8006c32:	9b03      	ldr	r3, [sp, #12]
 8006c34:	1d19      	adds	r1, r3, #4
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	9103      	str	r1, [sp, #12]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	bfbb      	ittet	lt
 8006c3e:	425b      	neglt	r3, r3
 8006c40:	f042 0202 	orrlt.w	r2, r2, #2
 8006c44:	9307      	strge	r3, [sp, #28]
 8006c46:	9307      	strlt	r3, [sp, #28]
 8006c48:	bfb8      	it	lt
 8006c4a:	9204      	strlt	r2, [sp, #16]
 8006c4c:	7823      	ldrb	r3, [r4, #0]
 8006c4e:	2b2e      	cmp	r3, #46	; 0x2e
 8006c50:	d10c      	bne.n	8006c6c <_svfiprintf_r+0x130>
 8006c52:	7863      	ldrb	r3, [r4, #1]
 8006c54:	2b2a      	cmp	r3, #42	; 0x2a
 8006c56:	d134      	bne.n	8006cc2 <_svfiprintf_r+0x186>
 8006c58:	9b03      	ldr	r3, [sp, #12]
 8006c5a:	3402      	adds	r4, #2
 8006c5c:	1d1a      	adds	r2, r3, #4
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	9203      	str	r2, [sp, #12]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	bfb8      	it	lt
 8006c66:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c6a:	9305      	str	r3, [sp, #20]
 8006c6c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006d28 <_svfiprintf_r+0x1ec>
 8006c70:	2203      	movs	r2, #3
 8006c72:	4650      	mov	r0, sl
 8006c74:	7821      	ldrb	r1, [r4, #0]
 8006c76:	f7fe fc15 	bl	80054a4 <memchr>
 8006c7a:	b138      	cbz	r0, 8006c8c <_svfiprintf_r+0x150>
 8006c7c:	2240      	movs	r2, #64	; 0x40
 8006c7e:	9b04      	ldr	r3, [sp, #16]
 8006c80:	eba0 000a 	sub.w	r0, r0, sl
 8006c84:	4082      	lsls	r2, r0
 8006c86:	4313      	orrs	r3, r2
 8006c88:	3401      	adds	r4, #1
 8006c8a:	9304      	str	r3, [sp, #16]
 8006c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c90:	2206      	movs	r2, #6
 8006c92:	4826      	ldr	r0, [pc, #152]	; (8006d2c <_svfiprintf_r+0x1f0>)
 8006c94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c98:	f7fe fc04 	bl	80054a4 <memchr>
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	d038      	beq.n	8006d12 <_svfiprintf_r+0x1d6>
 8006ca0:	4b23      	ldr	r3, [pc, #140]	; (8006d30 <_svfiprintf_r+0x1f4>)
 8006ca2:	bb1b      	cbnz	r3, 8006cec <_svfiprintf_r+0x1b0>
 8006ca4:	9b03      	ldr	r3, [sp, #12]
 8006ca6:	3307      	adds	r3, #7
 8006ca8:	f023 0307 	bic.w	r3, r3, #7
 8006cac:	3308      	adds	r3, #8
 8006cae:	9303      	str	r3, [sp, #12]
 8006cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cb2:	4433      	add	r3, r6
 8006cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8006cb6:	e768      	b.n	8006b8a <_svfiprintf_r+0x4e>
 8006cb8:	460c      	mov	r4, r1
 8006cba:	2001      	movs	r0, #1
 8006cbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cc0:	e7a6      	b.n	8006c10 <_svfiprintf_r+0xd4>
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	f04f 0c0a 	mov.w	ip, #10
 8006cc8:	4619      	mov	r1, r3
 8006cca:	3401      	adds	r4, #1
 8006ccc:	9305      	str	r3, [sp, #20]
 8006cce:	4620      	mov	r0, r4
 8006cd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cd4:	3a30      	subs	r2, #48	; 0x30
 8006cd6:	2a09      	cmp	r2, #9
 8006cd8:	d903      	bls.n	8006ce2 <_svfiprintf_r+0x1a6>
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d0c6      	beq.n	8006c6c <_svfiprintf_r+0x130>
 8006cde:	9105      	str	r1, [sp, #20]
 8006ce0:	e7c4      	b.n	8006c6c <_svfiprintf_r+0x130>
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cea:	e7f0      	b.n	8006cce <_svfiprintf_r+0x192>
 8006cec:	ab03      	add	r3, sp, #12
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	462a      	mov	r2, r5
 8006cf2:	4638      	mov	r0, r7
 8006cf4:	4b0f      	ldr	r3, [pc, #60]	; (8006d34 <_svfiprintf_r+0x1f8>)
 8006cf6:	a904      	add	r1, sp, #16
 8006cf8:	f7fd fe80 	bl	80049fc <_printf_float>
 8006cfc:	1c42      	adds	r2, r0, #1
 8006cfe:	4606      	mov	r6, r0
 8006d00:	d1d6      	bne.n	8006cb0 <_svfiprintf_r+0x174>
 8006d02:	89ab      	ldrh	r3, [r5, #12]
 8006d04:	065b      	lsls	r3, r3, #25
 8006d06:	f53f af2d 	bmi.w	8006b64 <_svfiprintf_r+0x28>
 8006d0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d0c:	b01d      	add	sp, #116	; 0x74
 8006d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d12:	ab03      	add	r3, sp, #12
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	462a      	mov	r2, r5
 8006d18:	4638      	mov	r0, r7
 8006d1a:	4b06      	ldr	r3, [pc, #24]	; (8006d34 <_svfiprintf_r+0x1f8>)
 8006d1c:	a904      	add	r1, sp, #16
 8006d1e:	f7fe f90d 	bl	8004f3c <_printf_i>
 8006d22:	e7eb      	b.n	8006cfc <_svfiprintf_r+0x1c0>
 8006d24:	08007f54 	.word	0x08007f54
 8006d28:	08007f5a 	.word	0x08007f5a
 8006d2c:	08007f5e 	.word	0x08007f5e
 8006d30:	080049fd 	.word	0x080049fd
 8006d34:	08006a89 	.word	0x08006a89

08006d38 <__sflush_r>:
 8006d38:	898a      	ldrh	r2, [r1, #12]
 8006d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3c:	4605      	mov	r5, r0
 8006d3e:	0710      	lsls	r0, r2, #28
 8006d40:	460c      	mov	r4, r1
 8006d42:	d457      	bmi.n	8006df4 <__sflush_r+0xbc>
 8006d44:	684b      	ldr	r3, [r1, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	dc04      	bgt.n	8006d54 <__sflush_r+0x1c>
 8006d4a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	dc01      	bgt.n	8006d54 <__sflush_r+0x1c>
 8006d50:	2000      	movs	r0, #0
 8006d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d56:	2e00      	cmp	r6, #0
 8006d58:	d0fa      	beq.n	8006d50 <__sflush_r+0x18>
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d60:	682f      	ldr	r7, [r5, #0]
 8006d62:	6a21      	ldr	r1, [r4, #32]
 8006d64:	602b      	str	r3, [r5, #0]
 8006d66:	d032      	beq.n	8006dce <__sflush_r+0x96>
 8006d68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d6a:	89a3      	ldrh	r3, [r4, #12]
 8006d6c:	075a      	lsls	r2, r3, #29
 8006d6e:	d505      	bpl.n	8006d7c <__sflush_r+0x44>
 8006d70:	6863      	ldr	r3, [r4, #4]
 8006d72:	1ac0      	subs	r0, r0, r3
 8006d74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d76:	b10b      	cbz	r3, 8006d7c <__sflush_r+0x44>
 8006d78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d7a:	1ac0      	subs	r0, r0, r3
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	4602      	mov	r2, r0
 8006d80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d82:	4628      	mov	r0, r5
 8006d84:	6a21      	ldr	r1, [r4, #32]
 8006d86:	47b0      	blx	r6
 8006d88:	1c43      	adds	r3, r0, #1
 8006d8a:	89a3      	ldrh	r3, [r4, #12]
 8006d8c:	d106      	bne.n	8006d9c <__sflush_r+0x64>
 8006d8e:	6829      	ldr	r1, [r5, #0]
 8006d90:	291d      	cmp	r1, #29
 8006d92:	d82b      	bhi.n	8006dec <__sflush_r+0xb4>
 8006d94:	4a28      	ldr	r2, [pc, #160]	; (8006e38 <__sflush_r+0x100>)
 8006d96:	410a      	asrs	r2, r1
 8006d98:	07d6      	lsls	r6, r2, #31
 8006d9a:	d427      	bmi.n	8006dec <__sflush_r+0xb4>
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	6062      	str	r2, [r4, #4]
 8006da0:	6922      	ldr	r2, [r4, #16]
 8006da2:	04d9      	lsls	r1, r3, #19
 8006da4:	6022      	str	r2, [r4, #0]
 8006da6:	d504      	bpl.n	8006db2 <__sflush_r+0x7a>
 8006da8:	1c42      	adds	r2, r0, #1
 8006daa:	d101      	bne.n	8006db0 <__sflush_r+0x78>
 8006dac:	682b      	ldr	r3, [r5, #0]
 8006dae:	b903      	cbnz	r3, 8006db2 <__sflush_r+0x7a>
 8006db0:	6560      	str	r0, [r4, #84]	; 0x54
 8006db2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006db4:	602f      	str	r7, [r5, #0]
 8006db6:	2900      	cmp	r1, #0
 8006db8:	d0ca      	beq.n	8006d50 <__sflush_r+0x18>
 8006dba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006dbe:	4299      	cmp	r1, r3
 8006dc0:	d002      	beq.n	8006dc8 <__sflush_r+0x90>
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	f7ff f9ec 	bl	80061a0 <_free_r>
 8006dc8:	2000      	movs	r0, #0
 8006dca:	6360      	str	r0, [r4, #52]	; 0x34
 8006dcc:	e7c1      	b.n	8006d52 <__sflush_r+0x1a>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	47b0      	blx	r6
 8006dd4:	1c41      	adds	r1, r0, #1
 8006dd6:	d1c8      	bne.n	8006d6a <__sflush_r+0x32>
 8006dd8:	682b      	ldr	r3, [r5, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d0c5      	beq.n	8006d6a <__sflush_r+0x32>
 8006dde:	2b1d      	cmp	r3, #29
 8006de0:	d001      	beq.n	8006de6 <__sflush_r+0xae>
 8006de2:	2b16      	cmp	r3, #22
 8006de4:	d101      	bne.n	8006dea <__sflush_r+0xb2>
 8006de6:	602f      	str	r7, [r5, #0]
 8006de8:	e7b2      	b.n	8006d50 <__sflush_r+0x18>
 8006dea:	89a3      	ldrh	r3, [r4, #12]
 8006dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006df0:	81a3      	strh	r3, [r4, #12]
 8006df2:	e7ae      	b.n	8006d52 <__sflush_r+0x1a>
 8006df4:	690f      	ldr	r7, [r1, #16]
 8006df6:	2f00      	cmp	r7, #0
 8006df8:	d0aa      	beq.n	8006d50 <__sflush_r+0x18>
 8006dfa:	0793      	lsls	r3, r2, #30
 8006dfc:	bf18      	it	ne
 8006dfe:	2300      	movne	r3, #0
 8006e00:	680e      	ldr	r6, [r1, #0]
 8006e02:	bf08      	it	eq
 8006e04:	694b      	ldreq	r3, [r1, #20]
 8006e06:	1bf6      	subs	r6, r6, r7
 8006e08:	600f      	str	r7, [r1, #0]
 8006e0a:	608b      	str	r3, [r1, #8]
 8006e0c:	2e00      	cmp	r6, #0
 8006e0e:	dd9f      	ble.n	8006d50 <__sflush_r+0x18>
 8006e10:	4633      	mov	r3, r6
 8006e12:	463a      	mov	r2, r7
 8006e14:	4628      	mov	r0, r5
 8006e16:	6a21      	ldr	r1, [r4, #32]
 8006e18:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006e1c:	47e0      	blx	ip
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	dc06      	bgt.n	8006e30 <__sflush_r+0xf8>
 8006e22:	89a3      	ldrh	r3, [r4, #12]
 8006e24:	f04f 30ff 	mov.w	r0, #4294967295
 8006e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e2c:	81a3      	strh	r3, [r4, #12]
 8006e2e:	e790      	b.n	8006d52 <__sflush_r+0x1a>
 8006e30:	4407      	add	r7, r0
 8006e32:	1a36      	subs	r6, r6, r0
 8006e34:	e7ea      	b.n	8006e0c <__sflush_r+0xd4>
 8006e36:	bf00      	nop
 8006e38:	dfbffffe 	.word	0xdfbffffe

08006e3c <_fflush_r>:
 8006e3c:	b538      	push	{r3, r4, r5, lr}
 8006e3e:	690b      	ldr	r3, [r1, #16]
 8006e40:	4605      	mov	r5, r0
 8006e42:	460c      	mov	r4, r1
 8006e44:	b913      	cbnz	r3, 8006e4c <_fflush_r+0x10>
 8006e46:	2500      	movs	r5, #0
 8006e48:	4628      	mov	r0, r5
 8006e4a:	bd38      	pop	{r3, r4, r5, pc}
 8006e4c:	b118      	cbz	r0, 8006e56 <_fflush_r+0x1a>
 8006e4e:	6a03      	ldr	r3, [r0, #32]
 8006e50:	b90b      	cbnz	r3, 8006e56 <_fflush_r+0x1a>
 8006e52:	f7fe fa0f 	bl	8005274 <__sinit>
 8006e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d0f3      	beq.n	8006e46 <_fflush_r+0xa>
 8006e5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e60:	07d0      	lsls	r0, r2, #31
 8006e62:	d404      	bmi.n	8006e6e <_fflush_r+0x32>
 8006e64:	0599      	lsls	r1, r3, #22
 8006e66:	d402      	bmi.n	8006e6e <_fflush_r+0x32>
 8006e68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e6a:	f7fe fb19 	bl	80054a0 <__retarget_lock_acquire_recursive>
 8006e6e:	4628      	mov	r0, r5
 8006e70:	4621      	mov	r1, r4
 8006e72:	f7ff ff61 	bl	8006d38 <__sflush_r>
 8006e76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e78:	4605      	mov	r5, r0
 8006e7a:	07da      	lsls	r2, r3, #31
 8006e7c:	d4e4      	bmi.n	8006e48 <_fflush_r+0xc>
 8006e7e:	89a3      	ldrh	r3, [r4, #12]
 8006e80:	059b      	lsls	r3, r3, #22
 8006e82:	d4e1      	bmi.n	8006e48 <_fflush_r+0xc>
 8006e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e86:	f7fe fb0c 	bl	80054a2 <__retarget_lock_release_recursive>
 8006e8a:	e7dd      	b.n	8006e48 <_fflush_r+0xc>

08006e8c <memmove>:
 8006e8c:	4288      	cmp	r0, r1
 8006e8e:	b510      	push	{r4, lr}
 8006e90:	eb01 0402 	add.w	r4, r1, r2
 8006e94:	d902      	bls.n	8006e9c <memmove+0x10>
 8006e96:	4284      	cmp	r4, r0
 8006e98:	4623      	mov	r3, r4
 8006e9a:	d807      	bhi.n	8006eac <memmove+0x20>
 8006e9c:	1e43      	subs	r3, r0, #1
 8006e9e:	42a1      	cmp	r1, r4
 8006ea0:	d008      	beq.n	8006eb4 <memmove+0x28>
 8006ea2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ea6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006eaa:	e7f8      	b.n	8006e9e <memmove+0x12>
 8006eac:	4601      	mov	r1, r0
 8006eae:	4402      	add	r2, r0
 8006eb0:	428a      	cmp	r2, r1
 8006eb2:	d100      	bne.n	8006eb6 <memmove+0x2a>
 8006eb4:	bd10      	pop	{r4, pc}
 8006eb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006eba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ebe:	e7f7      	b.n	8006eb0 <memmove+0x24>

08006ec0 <_sbrk_r>:
 8006ec0:	b538      	push	{r3, r4, r5, lr}
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	4d05      	ldr	r5, [pc, #20]	; (8006edc <_sbrk_r+0x1c>)
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	4608      	mov	r0, r1
 8006eca:	602b      	str	r3, [r5, #0]
 8006ecc:	f7fb f830 	bl	8001f30 <_sbrk>
 8006ed0:	1c43      	adds	r3, r0, #1
 8006ed2:	d102      	bne.n	8006eda <_sbrk_r+0x1a>
 8006ed4:	682b      	ldr	r3, [r5, #0]
 8006ed6:	b103      	cbz	r3, 8006eda <_sbrk_r+0x1a>
 8006ed8:	6023      	str	r3, [r4, #0]
 8006eda:	bd38      	pop	{r3, r4, r5, pc}
 8006edc:	2000064c 	.word	0x2000064c

08006ee0 <memcpy>:
 8006ee0:	440a      	add	r2, r1
 8006ee2:	4291      	cmp	r1, r2
 8006ee4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ee8:	d100      	bne.n	8006eec <memcpy+0xc>
 8006eea:	4770      	bx	lr
 8006eec:	b510      	push	{r4, lr}
 8006eee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ef2:	4291      	cmp	r1, r2
 8006ef4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ef8:	d1f9      	bne.n	8006eee <memcpy+0xe>
 8006efa:	bd10      	pop	{r4, pc}

08006efc <__assert_func>:
 8006efc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006efe:	4614      	mov	r4, r2
 8006f00:	461a      	mov	r2, r3
 8006f02:	4b09      	ldr	r3, [pc, #36]	; (8006f28 <__assert_func+0x2c>)
 8006f04:	4605      	mov	r5, r0
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68d8      	ldr	r0, [r3, #12]
 8006f0a:	b14c      	cbz	r4, 8006f20 <__assert_func+0x24>
 8006f0c:	4b07      	ldr	r3, [pc, #28]	; (8006f2c <__assert_func+0x30>)
 8006f0e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f12:	9100      	str	r1, [sp, #0]
 8006f14:	462b      	mov	r3, r5
 8006f16:	4906      	ldr	r1, [pc, #24]	; (8006f30 <__assert_func+0x34>)
 8006f18:	f000 f870 	bl	8006ffc <fiprintf>
 8006f1c:	f000 f880 	bl	8007020 <abort>
 8006f20:	4b04      	ldr	r3, [pc, #16]	; (8006f34 <__assert_func+0x38>)
 8006f22:	461c      	mov	r4, r3
 8006f24:	e7f3      	b.n	8006f0e <__assert_func+0x12>
 8006f26:	bf00      	nop
 8006f28:	2000006c 	.word	0x2000006c
 8006f2c:	08007f6f 	.word	0x08007f6f
 8006f30:	08007f7c 	.word	0x08007f7c
 8006f34:	08007faa 	.word	0x08007faa

08006f38 <_calloc_r>:
 8006f38:	b570      	push	{r4, r5, r6, lr}
 8006f3a:	fba1 5402 	umull	r5, r4, r1, r2
 8006f3e:	b934      	cbnz	r4, 8006f4e <_calloc_r+0x16>
 8006f40:	4629      	mov	r1, r5
 8006f42:	f7ff f99d 	bl	8006280 <_malloc_r>
 8006f46:	4606      	mov	r6, r0
 8006f48:	b928      	cbnz	r0, 8006f56 <_calloc_r+0x1e>
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	bd70      	pop	{r4, r5, r6, pc}
 8006f4e:	220c      	movs	r2, #12
 8006f50:	2600      	movs	r6, #0
 8006f52:	6002      	str	r2, [r0, #0]
 8006f54:	e7f9      	b.n	8006f4a <_calloc_r+0x12>
 8006f56:	462a      	mov	r2, r5
 8006f58:	4621      	mov	r1, r4
 8006f5a:	f7fe fa24 	bl	80053a6 <memset>
 8006f5e:	e7f4      	b.n	8006f4a <_calloc_r+0x12>

08006f60 <__ascii_mbtowc>:
 8006f60:	b082      	sub	sp, #8
 8006f62:	b901      	cbnz	r1, 8006f66 <__ascii_mbtowc+0x6>
 8006f64:	a901      	add	r1, sp, #4
 8006f66:	b142      	cbz	r2, 8006f7a <__ascii_mbtowc+0x1a>
 8006f68:	b14b      	cbz	r3, 8006f7e <__ascii_mbtowc+0x1e>
 8006f6a:	7813      	ldrb	r3, [r2, #0]
 8006f6c:	600b      	str	r3, [r1, #0]
 8006f6e:	7812      	ldrb	r2, [r2, #0]
 8006f70:	1e10      	subs	r0, r2, #0
 8006f72:	bf18      	it	ne
 8006f74:	2001      	movne	r0, #1
 8006f76:	b002      	add	sp, #8
 8006f78:	4770      	bx	lr
 8006f7a:	4610      	mov	r0, r2
 8006f7c:	e7fb      	b.n	8006f76 <__ascii_mbtowc+0x16>
 8006f7e:	f06f 0001 	mvn.w	r0, #1
 8006f82:	e7f8      	b.n	8006f76 <__ascii_mbtowc+0x16>

08006f84 <_realloc_r>:
 8006f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f88:	4680      	mov	r8, r0
 8006f8a:	4614      	mov	r4, r2
 8006f8c:	460e      	mov	r6, r1
 8006f8e:	b921      	cbnz	r1, 8006f9a <_realloc_r+0x16>
 8006f90:	4611      	mov	r1, r2
 8006f92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f96:	f7ff b973 	b.w	8006280 <_malloc_r>
 8006f9a:	b92a      	cbnz	r2, 8006fa8 <_realloc_r+0x24>
 8006f9c:	f7ff f900 	bl	80061a0 <_free_r>
 8006fa0:	4625      	mov	r5, r4
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fa8:	f000 f841 	bl	800702e <_malloc_usable_size_r>
 8006fac:	4284      	cmp	r4, r0
 8006fae:	4607      	mov	r7, r0
 8006fb0:	d802      	bhi.n	8006fb8 <_realloc_r+0x34>
 8006fb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006fb6:	d812      	bhi.n	8006fde <_realloc_r+0x5a>
 8006fb8:	4621      	mov	r1, r4
 8006fba:	4640      	mov	r0, r8
 8006fbc:	f7ff f960 	bl	8006280 <_malloc_r>
 8006fc0:	4605      	mov	r5, r0
 8006fc2:	2800      	cmp	r0, #0
 8006fc4:	d0ed      	beq.n	8006fa2 <_realloc_r+0x1e>
 8006fc6:	42bc      	cmp	r4, r7
 8006fc8:	4622      	mov	r2, r4
 8006fca:	4631      	mov	r1, r6
 8006fcc:	bf28      	it	cs
 8006fce:	463a      	movcs	r2, r7
 8006fd0:	f7ff ff86 	bl	8006ee0 <memcpy>
 8006fd4:	4631      	mov	r1, r6
 8006fd6:	4640      	mov	r0, r8
 8006fd8:	f7ff f8e2 	bl	80061a0 <_free_r>
 8006fdc:	e7e1      	b.n	8006fa2 <_realloc_r+0x1e>
 8006fde:	4635      	mov	r5, r6
 8006fe0:	e7df      	b.n	8006fa2 <_realloc_r+0x1e>

08006fe2 <__ascii_wctomb>:
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	4608      	mov	r0, r1
 8006fe6:	b141      	cbz	r1, 8006ffa <__ascii_wctomb+0x18>
 8006fe8:	2aff      	cmp	r2, #255	; 0xff
 8006fea:	d904      	bls.n	8006ff6 <__ascii_wctomb+0x14>
 8006fec:	228a      	movs	r2, #138	; 0x8a
 8006fee:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff2:	601a      	str	r2, [r3, #0]
 8006ff4:	4770      	bx	lr
 8006ff6:	2001      	movs	r0, #1
 8006ff8:	700a      	strb	r2, [r1, #0]
 8006ffa:	4770      	bx	lr

08006ffc <fiprintf>:
 8006ffc:	b40e      	push	{r1, r2, r3}
 8006ffe:	b503      	push	{r0, r1, lr}
 8007000:	4601      	mov	r1, r0
 8007002:	ab03      	add	r3, sp, #12
 8007004:	4805      	ldr	r0, [pc, #20]	; (800701c <fiprintf+0x20>)
 8007006:	f853 2b04 	ldr.w	r2, [r3], #4
 800700a:	6800      	ldr	r0, [r0, #0]
 800700c:	9301      	str	r3, [sp, #4]
 800700e:	f000 f83d 	bl	800708c <_vfiprintf_r>
 8007012:	b002      	add	sp, #8
 8007014:	f85d eb04 	ldr.w	lr, [sp], #4
 8007018:	b003      	add	sp, #12
 800701a:	4770      	bx	lr
 800701c:	2000006c 	.word	0x2000006c

08007020 <abort>:
 8007020:	2006      	movs	r0, #6
 8007022:	b508      	push	{r3, lr}
 8007024:	f000 fa0a 	bl	800743c <raise>
 8007028:	2001      	movs	r0, #1
 800702a:	f7fa ff0e 	bl	8001e4a <_exit>

0800702e <_malloc_usable_size_r>:
 800702e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007032:	1f18      	subs	r0, r3, #4
 8007034:	2b00      	cmp	r3, #0
 8007036:	bfbc      	itt	lt
 8007038:	580b      	ldrlt	r3, [r1, r0]
 800703a:	18c0      	addlt	r0, r0, r3
 800703c:	4770      	bx	lr

0800703e <__sfputc_r>:
 800703e:	6893      	ldr	r3, [r2, #8]
 8007040:	b410      	push	{r4}
 8007042:	3b01      	subs	r3, #1
 8007044:	2b00      	cmp	r3, #0
 8007046:	6093      	str	r3, [r2, #8]
 8007048:	da07      	bge.n	800705a <__sfputc_r+0x1c>
 800704a:	6994      	ldr	r4, [r2, #24]
 800704c:	42a3      	cmp	r3, r4
 800704e:	db01      	blt.n	8007054 <__sfputc_r+0x16>
 8007050:	290a      	cmp	r1, #10
 8007052:	d102      	bne.n	800705a <__sfputc_r+0x1c>
 8007054:	bc10      	pop	{r4}
 8007056:	f000 b933 	b.w	80072c0 <__swbuf_r>
 800705a:	6813      	ldr	r3, [r2, #0]
 800705c:	1c58      	adds	r0, r3, #1
 800705e:	6010      	str	r0, [r2, #0]
 8007060:	7019      	strb	r1, [r3, #0]
 8007062:	4608      	mov	r0, r1
 8007064:	bc10      	pop	{r4}
 8007066:	4770      	bx	lr

08007068 <__sfputs_r>:
 8007068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706a:	4606      	mov	r6, r0
 800706c:	460f      	mov	r7, r1
 800706e:	4614      	mov	r4, r2
 8007070:	18d5      	adds	r5, r2, r3
 8007072:	42ac      	cmp	r4, r5
 8007074:	d101      	bne.n	800707a <__sfputs_r+0x12>
 8007076:	2000      	movs	r0, #0
 8007078:	e007      	b.n	800708a <__sfputs_r+0x22>
 800707a:	463a      	mov	r2, r7
 800707c:	4630      	mov	r0, r6
 800707e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007082:	f7ff ffdc 	bl	800703e <__sfputc_r>
 8007086:	1c43      	adds	r3, r0, #1
 8007088:	d1f3      	bne.n	8007072 <__sfputs_r+0xa>
 800708a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800708c <_vfiprintf_r>:
 800708c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007090:	460d      	mov	r5, r1
 8007092:	4614      	mov	r4, r2
 8007094:	4698      	mov	r8, r3
 8007096:	4606      	mov	r6, r0
 8007098:	b09d      	sub	sp, #116	; 0x74
 800709a:	b118      	cbz	r0, 80070a4 <_vfiprintf_r+0x18>
 800709c:	6a03      	ldr	r3, [r0, #32]
 800709e:	b90b      	cbnz	r3, 80070a4 <_vfiprintf_r+0x18>
 80070a0:	f7fe f8e8 	bl	8005274 <__sinit>
 80070a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070a6:	07d9      	lsls	r1, r3, #31
 80070a8:	d405      	bmi.n	80070b6 <_vfiprintf_r+0x2a>
 80070aa:	89ab      	ldrh	r3, [r5, #12]
 80070ac:	059a      	lsls	r2, r3, #22
 80070ae:	d402      	bmi.n	80070b6 <_vfiprintf_r+0x2a>
 80070b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070b2:	f7fe f9f5 	bl	80054a0 <__retarget_lock_acquire_recursive>
 80070b6:	89ab      	ldrh	r3, [r5, #12]
 80070b8:	071b      	lsls	r3, r3, #28
 80070ba:	d501      	bpl.n	80070c0 <_vfiprintf_r+0x34>
 80070bc:	692b      	ldr	r3, [r5, #16]
 80070be:	b99b      	cbnz	r3, 80070e8 <_vfiprintf_r+0x5c>
 80070c0:	4629      	mov	r1, r5
 80070c2:	4630      	mov	r0, r6
 80070c4:	f000 f93a 	bl	800733c <__swsetup_r>
 80070c8:	b170      	cbz	r0, 80070e8 <_vfiprintf_r+0x5c>
 80070ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070cc:	07dc      	lsls	r4, r3, #31
 80070ce:	d504      	bpl.n	80070da <_vfiprintf_r+0x4e>
 80070d0:	f04f 30ff 	mov.w	r0, #4294967295
 80070d4:	b01d      	add	sp, #116	; 0x74
 80070d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070da:	89ab      	ldrh	r3, [r5, #12]
 80070dc:	0598      	lsls	r0, r3, #22
 80070de:	d4f7      	bmi.n	80070d0 <_vfiprintf_r+0x44>
 80070e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070e2:	f7fe f9de 	bl	80054a2 <__retarget_lock_release_recursive>
 80070e6:	e7f3      	b.n	80070d0 <_vfiprintf_r+0x44>
 80070e8:	2300      	movs	r3, #0
 80070ea:	9309      	str	r3, [sp, #36]	; 0x24
 80070ec:	2320      	movs	r3, #32
 80070ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070f2:	2330      	movs	r3, #48	; 0x30
 80070f4:	f04f 0901 	mov.w	r9, #1
 80070f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80070fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80072ac <_vfiprintf_r+0x220>
 8007100:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007104:	4623      	mov	r3, r4
 8007106:	469a      	mov	sl, r3
 8007108:	f813 2b01 	ldrb.w	r2, [r3], #1
 800710c:	b10a      	cbz	r2, 8007112 <_vfiprintf_r+0x86>
 800710e:	2a25      	cmp	r2, #37	; 0x25
 8007110:	d1f9      	bne.n	8007106 <_vfiprintf_r+0x7a>
 8007112:	ebba 0b04 	subs.w	fp, sl, r4
 8007116:	d00b      	beq.n	8007130 <_vfiprintf_r+0xa4>
 8007118:	465b      	mov	r3, fp
 800711a:	4622      	mov	r2, r4
 800711c:	4629      	mov	r1, r5
 800711e:	4630      	mov	r0, r6
 8007120:	f7ff ffa2 	bl	8007068 <__sfputs_r>
 8007124:	3001      	adds	r0, #1
 8007126:	f000 80a9 	beq.w	800727c <_vfiprintf_r+0x1f0>
 800712a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800712c:	445a      	add	r2, fp
 800712e:	9209      	str	r2, [sp, #36]	; 0x24
 8007130:	f89a 3000 	ldrb.w	r3, [sl]
 8007134:	2b00      	cmp	r3, #0
 8007136:	f000 80a1 	beq.w	800727c <_vfiprintf_r+0x1f0>
 800713a:	2300      	movs	r3, #0
 800713c:	f04f 32ff 	mov.w	r2, #4294967295
 8007140:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007144:	f10a 0a01 	add.w	sl, sl, #1
 8007148:	9304      	str	r3, [sp, #16]
 800714a:	9307      	str	r3, [sp, #28]
 800714c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007150:	931a      	str	r3, [sp, #104]	; 0x68
 8007152:	4654      	mov	r4, sl
 8007154:	2205      	movs	r2, #5
 8007156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800715a:	4854      	ldr	r0, [pc, #336]	; (80072ac <_vfiprintf_r+0x220>)
 800715c:	f7fe f9a2 	bl	80054a4 <memchr>
 8007160:	9a04      	ldr	r2, [sp, #16]
 8007162:	b9d8      	cbnz	r0, 800719c <_vfiprintf_r+0x110>
 8007164:	06d1      	lsls	r1, r2, #27
 8007166:	bf44      	itt	mi
 8007168:	2320      	movmi	r3, #32
 800716a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800716e:	0713      	lsls	r3, r2, #28
 8007170:	bf44      	itt	mi
 8007172:	232b      	movmi	r3, #43	; 0x2b
 8007174:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007178:	f89a 3000 	ldrb.w	r3, [sl]
 800717c:	2b2a      	cmp	r3, #42	; 0x2a
 800717e:	d015      	beq.n	80071ac <_vfiprintf_r+0x120>
 8007180:	4654      	mov	r4, sl
 8007182:	2000      	movs	r0, #0
 8007184:	f04f 0c0a 	mov.w	ip, #10
 8007188:	9a07      	ldr	r2, [sp, #28]
 800718a:	4621      	mov	r1, r4
 800718c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007190:	3b30      	subs	r3, #48	; 0x30
 8007192:	2b09      	cmp	r3, #9
 8007194:	d94d      	bls.n	8007232 <_vfiprintf_r+0x1a6>
 8007196:	b1b0      	cbz	r0, 80071c6 <_vfiprintf_r+0x13a>
 8007198:	9207      	str	r2, [sp, #28]
 800719a:	e014      	b.n	80071c6 <_vfiprintf_r+0x13a>
 800719c:	eba0 0308 	sub.w	r3, r0, r8
 80071a0:	fa09 f303 	lsl.w	r3, r9, r3
 80071a4:	4313      	orrs	r3, r2
 80071a6:	46a2      	mov	sl, r4
 80071a8:	9304      	str	r3, [sp, #16]
 80071aa:	e7d2      	b.n	8007152 <_vfiprintf_r+0xc6>
 80071ac:	9b03      	ldr	r3, [sp, #12]
 80071ae:	1d19      	adds	r1, r3, #4
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	9103      	str	r1, [sp, #12]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	bfbb      	ittet	lt
 80071b8:	425b      	neglt	r3, r3
 80071ba:	f042 0202 	orrlt.w	r2, r2, #2
 80071be:	9307      	strge	r3, [sp, #28]
 80071c0:	9307      	strlt	r3, [sp, #28]
 80071c2:	bfb8      	it	lt
 80071c4:	9204      	strlt	r2, [sp, #16]
 80071c6:	7823      	ldrb	r3, [r4, #0]
 80071c8:	2b2e      	cmp	r3, #46	; 0x2e
 80071ca:	d10c      	bne.n	80071e6 <_vfiprintf_r+0x15a>
 80071cc:	7863      	ldrb	r3, [r4, #1]
 80071ce:	2b2a      	cmp	r3, #42	; 0x2a
 80071d0:	d134      	bne.n	800723c <_vfiprintf_r+0x1b0>
 80071d2:	9b03      	ldr	r3, [sp, #12]
 80071d4:	3402      	adds	r4, #2
 80071d6:	1d1a      	adds	r2, r3, #4
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	9203      	str	r2, [sp, #12]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	bfb8      	it	lt
 80071e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80071e4:	9305      	str	r3, [sp, #20]
 80071e6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80072b0 <_vfiprintf_r+0x224>
 80071ea:	2203      	movs	r2, #3
 80071ec:	4650      	mov	r0, sl
 80071ee:	7821      	ldrb	r1, [r4, #0]
 80071f0:	f7fe f958 	bl	80054a4 <memchr>
 80071f4:	b138      	cbz	r0, 8007206 <_vfiprintf_r+0x17a>
 80071f6:	2240      	movs	r2, #64	; 0x40
 80071f8:	9b04      	ldr	r3, [sp, #16]
 80071fa:	eba0 000a 	sub.w	r0, r0, sl
 80071fe:	4082      	lsls	r2, r0
 8007200:	4313      	orrs	r3, r2
 8007202:	3401      	adds	r4, #1
 8007204:	9304      	str	r3, [sp, #16]
 8007206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800720a:	2206      	movs	r2, #6
 800720c:	4829      	ldr	r0, [pc, #164]	; (80072b4 <_vfiprintf_r+0x228>)
 800720e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007212:	f7fe f947 	bl	80054a4 <memchr>
 8007216:	2800      	cmp	r0, #0
 8007218:	d03f      	beq.n	800729a <_vfiprintf_r+0x20e>
 800721a:	4b27      	ldr	r3, [pc, #156]	; (80072b8 <_vfiprintf_r+0x22c>)
 800721c:	bb1b      	cbnz	r3, 8007266 <_vfiprintf_r+0x1da>
 800721e:	9b03      	ldr	r3, [sp, #12]
 8007220:	3307      	adds	r3, #7
 8007222:	f023 0307 	bic.w	r3, r3, #7
 8007226:	3308      	adds	r3, #8
 8007228:	9303      	str	r3, [sp, #12]
 800722a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800722c:	443b      	add	r3, r7
 800722e:	9309      	str	r3, [sp, #36]	; 0x24
 8007230:	e768      	b.n	8007104 <_vfiprintf_r+0x78>
 8007232:	460c      	mov	r4, r1
 8007234:	2001      	movs	r0, #1
 8007236:	fb0c 3202 	mla	r2, ip, r2, r3
 800723a:	e7a6      	b.n	800718a <_vfiprintf_r+0xfe>
 800723c:	2300      	movs	r3, #0
 800723e:	f04f 0c0a 	mov.w	ip, #10
 8007242:	4619      	mov	r1, r3
 8007244:	3401      	adds	r4, #1
 8007246:	9305      	str	r3, [sp, #20]
 8007248:	4620      	mov	r0, r4
 800724a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800724e:	3a30      	subs	r2, #48	; 0x30
 8007250:	2a09      	cmp	r2, #9
 8007252:	d903      	bls.n	800725c <_vfiprintf_r+0x1d0>
 8007254:	2b00      	cmp	r3, #0
 8007256:	d0c6      	beq.n	80071e6 <_vfiprintf_r+0x15a>
 8007258:	9105      	str	r1, [sp, #20]
 800725a:	e7c4      	b.n	80071e6 <_vfiprintf_r+0x15a>
 800725c:	4604      	mov	r4, r0
 800725e:	2301      	movs	r3, #1
 8007260:	fb0c 2101 	mla	r1, ip, r1, r2
 8007264:	e7f0      	b.n	8007248 <_vfiprintf_r+0x1bc>
 8007266:	ab03      	add	r3, sp, #12
 8007268:	9300      	str	r3, [sp, #0]
 800726a:	462a      	mov	r2, r5
 800726c:	4630      	mov	r0, r6
 800726e:	4b13      	ldr	r3, [pc, #76]	; (80072bc <_vfiprintf_r+0x230>)
 8007270:	a904      	add	r1, sp, #16
 8007272:	f7fd fbc3 	bl	80049fc <_printf_float>
 8007276:	4607      	mov	r7, r0
 8007278:	1c78      	adds	r0, r7, #1
 800727a:	d1d6      	bne.n	800722a <_vfiprintf_r+0x19e>
 800727c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800727e:	07d9      	lsls	r1, r3, #31
 8007280:	d405      	bmi.n	800728e <_vfiprintf_r+0x202>
 8007282:	89ab      	ldrh	r3, [r5, #12]
 8007284:	059a      	lsls	r2, r3, #22
 8007286:	d402      	bmi.n	800728e <_vfiprintf_r+0x202>
 8007288:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800728a:	f7fe f90a 	bl	80054a2 <__retarget_lock_release_recursive>
 800728e:	89ab      	ldrh	r3, [r5, #12]
 8007290:	065b      	lsls	r3, r3, #25
 8007292:	f53f af1d 	bmi.w	80070d0 <_vfiprintf_r+0x44>
 8007296:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007298:	e71c      	b.n	80070d4 <_vfiprintf_r+0x48>
 800729a:	ab03      	add	r3, sp, #12
 800729c:	9300      	str	r3, [sp, #0]
 800729e:	462a      	mov	r2, r5
 80072a0:	4630      	mov	r0, r6
 80072a2:	4b06      	ldr	r3, [pc, #24]	; (80072bc <_vfiprintf_r+0x230>)
 80072a4:	a904      	add	r1, sp, #16
 80072a6:	f7fd fe49 	bl	8004f3c <_printf_i>
 80072aa:	e7e4      	b.n	8007276 <_vfiprintf_r+0x1ea>
 80072ac:	08007f54 	.word	0x08007f54
 80072b0:	08007f5a 	.word	0x08007f5a
 80072b4:	08007f5e 	.word	0x08007f5e
 80072b8:	080049fd 	.word	0x080049fd
 80072bc:	08007069 	.word	0x08007069

080072c0 <__swbuf_r>:
 80072c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c2:	460e      	mov	r6, r1
 80072c4:	4614      	mov	r4, r2
 80072c6:	4605      	mov	r5, r0
 80072c8:	b118      	cbz	r0, 80072d2 <__swbuf_r+0x12>
 80072ca:	6a03      	ldr	r3, [r0, #32]
 80072cc:	b90b      	cbnz	r3, 80072d2 <__swbuf_r+0x12>
 80072ce:	f7fd ffd1 	bl	8005274 <__sinit>
 80072d2:	69a3      	ldr	r3, [r4, #24]
 80072d4:	60a3      	str	r3, [r4, #8]
 80072d6:	89a3      	ldrh	r3, [r4, #12]
 80072d8:	071a      	lsls	r2, r3, #28
 80072da:	d525      	bpl.n	8007328 <__swbuf_r+0x68>
 80072dc:	6923      	ldr	r3, [r4, #16]
 80072de:	b31b      	cbz	r3, 8007328 <__swbuf_r+0x68>
 80072e0:	6823      	ldr	r3, [r4, #0]
 80072e2:	6922      	ldr	r2, [r4, #16]
 80072e4:	b2f6      	uxtb	r6, r6
 80072e6:	1a98      	subs	r0, r3, r2
 80072e8:	6963      	ldr	r3, [r4, #20]
 80072ea:	4637      	mov	r7, r6
 80072ec:	4283      	cmp	r3, r0
 80072ee:	dc04      	bgt.n	80072fa <__swbuf_r+0x3a>
 80072f0:	4621      	mov	r1, r4
 80072f2:	4628      	mov	r0, r5
 80072f4:	f7ff fda2 	bl	8006e3c <_fflush_r>
 80072f8:	b9e0      	cbnz	r0, 8007334 <__swbuf_r+0x74>
 80072fa:	68a3      	ldr	r3, [r4, #8]
 80072fc:	3b01      	subs	r3, #1
 80072fe:	60a3      	str	r3, [r4, #8]
 8007300:	6823      	ldr	r3, [r4, #0]
 8007302:	1c5a      	adds	r2, r3, #1
 8007304:	6022      	str	r2, [r4, #0]
 8007306:	701e      	strb	r6, [r3, #0]
 8007308:	6962      	ldr	r2, [r4, #20]
 800730a:	1c43      	adds	r3, r0, #1
 800730c:	429a      	cmp	r2, r3
 800730e:	d004      	beq.n	800731a <__swbuf_r+0x5a>
 8007310:	89a3      	ldrh	r3, [r4, #12]
 8007312:	07db      	lsls	r3, r3, #31
 8007314:	d506      	bpl.n	8007324 <__swbuf_r+0x64>
 8007316:	2e0a      	cmp	r6, #10
 8007318:	d104      	bne.n	8007324 <__swbuf_r+0x64>
 800731a:	4621      	mov	r1, r4
 800731c:	4628      	mov	r0, r5
 800731e:	f7ff fd8d 	bl	8006e3c <_fflush_r>
 8007322:	b938      	cbnz	r0, 8007334 <__swbuf_r+0x74>
 8007324:	4638      	mov	r0, r7
 8007326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007328:	4621      	mov	r1, r4
 800732a:	4628      	mov	r0, r5
 800732c:	f000 f806 	bl	800733c <__swsetup_r>
 8007330:	2800      	cmp	r0, #0
 8007332:	d0d5      	beq.n	80072e0 <__swbuf_r+0x20>
 8007334:	f04f 37ff 	mov.w	r7, #4294967295
 8007338:	e7f4      	b.n	8007324 <__swbuf_r+0x64>
	...

0800733c <__swsetup_r>:
 800733c:	b538      	push	{r3, r4, r5, lr}
 800733e:	4b2a      	ldr	r3, [pc, #168]	; (80073e8 <__swsetup_r+0xac>)
 8007340:	4605      	mov	r5, r0
 8007342:	6818      	ldr	r0, [r3, #0]
 8007344:	460c      	mov	r4, r1
 8007346:	b118      	cbz	r0, 8007350 <__swsetup_r+0x14>
 8007348:	6a03      	ldr	r3, [r0, #32]
 800734a:	b90b      	cbnz	r3, 8007350 <__swsetup_r+0x14>
 800734c:	f7fd ff92 	bl	8005274 <__sinit>
 8007350:	89a3      	ldrh	r3, [r4, #12]
 8007352:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007356:	0718      	lsls	r0, r3, #28
 8007358:	d422      	bmi.n	80073a0 <__swsetup_r+0x64>
 800735a:	06d9      	lsls	r1, r3, #27
 800735c:	d407      	bmi.n	800736e <__swsetup_r+0x32>
 800735e:	2309      	movs	r3, #9
 8007360:	602b      	str	r3, [r5, #0]
 8007362:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007366:	f04f 30ff 	mov.w	r0, #4294967295
 800736a:	81a3      	strh	r3, [r4, #12]
 800736c:	e034      	b.n	80073d8 <__swsetup_r+0x9c>
 800736e:	0758      	lsls	r0, r3, #29
 8007370:	d512      	bpl.n	8007398 <__swsetup_r+0x5c>
 8007372:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007374:	b141      	cbz	r1, 8007388 <__swsetup_r+0x4c>
 8007376:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800737a:	4299      	cmp	r1, r3
 800737c:	d002      	beq.n	8007384 <__swsetup_r+0x48>
 800737e:	4628      	mov	r0, r5
 8007380:	f7fe ff0e 	bl	80061a0 <_free_r>
 8007384:	2300      	movs	r3, #0
 8007386:	6363      	str	r3, [r4, #52]	; 0x34
 8007388:	89a3      	ldrh	r3, [r4, #12]
 800738a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800738e:	81a3      	strh	r3, [r4, #12]
 8007390:	2300      	movs	r3, #0
 8007392:	6063      	str	r3, [r4, #4]
 8007394:	6923      	ldr	r3, [r4, #16]
 8007396:	6023      	str	r3, [r4, #0]
 8007398:	89a3      	ldrh	r3, [r4, #12]
 800739a:	f043 0308 	orr.w	r3, r3, #8
 800739e:	81a3      	strh	r3, [r4, #12]
 80073a0:	6923      	ldr	r3, [r4, #16]
 80073a2:	b94b      	cbnz	r3, 80073b8 <__swsetup_r+0x7c>
 80073a4:	89a3      	ldrh	r3, [r4, #12]
 80073a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073ae:	d003      	beq.n	80073b8 <__swsetup_r+0x7c>
 80073b0:	4621      	mov	r1, r4
 80073b2:	4628      	mov	r0, r5
 80073b4:	f000 f883 	bl	80074be <__smakebuf_r>
 80073b8:	89a0      	ldrh	r0, [r4, #12]
 80073ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073be:	f010 0301 	ands.w	r3, r0, #1
 80073c2:	d00a      	beq.n	80073da <__swsetup_r+0x9e>
 80073c4:	2300      	movs	r3, #0
 80073c6:	60a3      	str	r3, [r4, #8]
 80073c8:	6963      	ldr	r3, [r4, #20]
 80073ca:	425b      	negs	r3, r3
 80073cc:	61a3      	str	r3, [r4, #24]
 80073ce:	6923      	ldr	r3, [r4, #16]
 80073d0:	b943      	cbnz	r3, 80073e4 <__swsetup_r+0xa8>
 80073d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073d6:	d1c4      	bne.n	8007362 <__swsetup_r+0x26>
 80073d8:	bd38      	pop	{r3, r4, r5, pc}
 80073da:	0781      	lsls	r1, r0, #30
 80073dc:	bf58      	it	pl
 80073de:	6963      	ldrpl	r3, [r4, #20]
 80073e0:	60a3      	str	r3, [r4, #8]
 80073e2:	e7f4      	b.n	80073ce <__swsetup_r+0x92>
 80073e4:	2000      	movs	r0, #0
 80073e6:	e7f7      	b.n	80073d8 <__swsetup_r+0x9c>
 80073e8:	2000006c 	.word	0x2000006c

080073ec <_raise_r>:
 80073ec:	291f      	cmp	r1, #31
 80073ee:	b538      	push	{r3, r4, r5, lr}
 80073f0:	4604      	mov	r4, r0
 80073f2:	460d      	mov	r5, r1
 80073f4:	d904      	bls.n	8007400 <_raise_r+0x14>
 80073f6:	2316      	movs	r3, #22
 80073f8:	6003      	str	r3, [r0, #0]
 80073fa:	f04f 30ff 	mov.w	r0, #4294967295
 80073fe:	bd38      	pop	{r3, r4, r5, pc}
 8007400:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007402:	b112      	cbz	r2, 800740a <_raise_r+0x1e>
 8007404:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007408:	b94b      	cbnz	r3, 800741e <_raise_r+0x32>
 800740a:	4620      	mov	r0, r4
 800740c:	f000 f830 	bl	8007470 <_getpid_r>
 8007410:	462a      	mov	r2, r5
 8007412:	4601      	mov	r1, r0
 8007414:	4620      	mov	r0, r4
 8007416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800741a:	f000 b817 	b.w	800744c <_kill_r>
 800741e:	2b01      	cmp	r3, #1
 8007420:	d00a      	beq.n	8007438 <_raise_r+0x4c>
 8007422:	1c59      	adds	r1, r3, #1
 8007424:	d103      	bne.n	800742e <_raise_r+0x42>
 8007426:	2316      	movs	r3, #22
 8007428:	6003      	str	r3, [r0, #0]
 800742a:	2001      	movs	r0, #1
 800742c:	e7e7      	b.n	80073fe <_raise_r+0x12>
 800742e:	2400      	movs	r4, #0
 8007430:	4628      	mov	r0, r5
 8007432:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007436:	4798      	blx	r3
 8007438:	2000      	movs	r0, #0
 800743a:	e7e0      	b.n	80073fe <_raise_r+0x12>

0800743c <raise>:
 800743c:	4b02      	ldr	r3, [pc, #8]	; (8007448 <raise+0xc>)
 800743e:	4601      	mov	r1, r0
 8007440:	6818      	ldr	r0, [r3, #0]
 8007442:	f7ff bfd3 	b.w	80073ec <_raise_r>
 8007446:	bf00      	nop
 8007448:	2000006c 	.word	0x2000006c

0800744c <_kill_r>:
 800744c:	b538      	push	{r3, r4, r5, lr}
 800744e:	2300      	movs	r3, #0
 8007450:	4d06      	ldr	r5, [pc, #24]	; (800746c <_kill_r+0x20>)
 8007452:	4604      	mov	r4, r0
 8007454:	4608      	mov	r0, r1
 8007456:	4611      	mov	r1, r2
 8007458:	602b      	str	r3, [r5, #0]
 800745a:	f7fa fce6 	bl	8001e2a <_kill>
 800745e:	1c43      	adds	r3, r0, #1
 8007460:	d102      	bne.n	8007468 <_kill_r+0x1c>
 8007462:	682b      	ldr	r3, [r5, #0]
 8007464:	b103      	cbz	r3, 8007468 <_kill_r+0x1c>
 8007466:	6023      	str	r3, [r4, #0]
 8007468:	bd38      	pop	{r3, r4, r5, pc}
 800746a:	bf00      	nop
 800746c:	2000064c 	.word	0x2000064c

08007470 <_getpid_r>:
 8007470:	f7fa bcd4 	b.w	8001e1c <_getpid>

08007474 <__swhatbuf_r>:
 8007474:	b570      	push	{r4, r5, r6, lr}
 8007476:	460c      	mov	r4, r1
 8007478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800747c:	4615      	mov	r5, r2
 800747e:	2900      	cmp	r1, #0
 8007480:	461e      	mov	r6, r3
 8007482:	b096      	sub	sp, #88	; 0x58
 8007484:	da0c      	bge.n	80074a0 <__swhatbuf_r+0x2c>
 8007486:	89a3      	ldrh	r3, [r4, #12]
 8007488:	2100      	movs	r1, #0
 800748a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800748e:	bf0c      	ite	eq
 8007490:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007494:	2340      	movne	r3, #64	; 0x40
 8007496:	2000      	movs	r0, #0
 8007498:	6031      	str	r1, [r6, #0]
 800749a:	602b      	str	r3, [r5, #0]
 800749c:	b016      	add	sp, #88	; 0x58
 800749e:	bd70      	pop	{r4, r5, r6, pc}
 80074a0:	466a      	mov	r2, sp
 80074a2:	f000 f849 	bl	8007538 <_fstat_r>
 80074a6:	2800      	cmp	r0, #0
 80074a8:	dbed      	blt.n	8007486 <__swhatbuf_r+0x12>
 80074aa:	9901      	ldr	r1, [sp, #4]
 80074ac:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80074b0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80074b4:	4259      	negs	r1, r3
 80074b6:	4159      	adcs	r1, r3
 80074b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074bc:	e7eb      	b.n	8007496 <__swhatbuf_r+0x22>

080074be <__smakebuf_r>:
 80074be:	898b      	ldrh	r3, [r1, #12]
 80074c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074c2:	079d      	lsls	r5, r3, #30
 80074c4:	4606      	mov	r6, r0
 80074c6:	460c      	mov	r4, r1
 80074c8:	d507      	bpl.n	80074da <__smakebuf_r+0x1c>
 80074ca:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80074ce:	6023      	str	r3, [r4, #0]
 80074d0:	6123      	str	r3, [r4, #16]
 80074d2:	2301      	movs	r3, #1
 80074d4:	6163      	str	r3, [r4, #20]
 80074d6:	b002      	add	sp, #8
 80074d8:	bd70      	pop	{r4, r5, r6, pc}
 80074da:	466a      	mov	r2, sp
 80074dc:	ab01      	add	r3, sp, #4
 80074de:	f7ff ffc9 	bl	8007474 <__swhatbuf_r>
 80074e2:	9900      	ldr	r1, [sp, #0]
 80074e4:	4605      	mov	r5, r0
 80074e6:	4630      	mov	r0, r6
 80074e8:	f7fe feca 	bl	8006280 <_malloc_r>
 80074ec:	b948      	cbnz	r0, 8007502 <__smakebuf_r+0x44>
 80074ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074f2:	059a      	lsls	r2, r3, #22
 80074f4:	d4ef      	bmi.n	80074d6 <__smakebuf_r+0x18>
 80074f6:	f023 0303 	bic.w	r3, r3, #3
 80074fa:	f043 0302 	orr.w	r3, r3, #2
 80074fe:	81a3      	strh	r3, [r4, #12]
 8007500:	e7e3      	b.n	80074ca <__smakebuf_r+0xc>
 8007502:	89a3      	ldrh	r3, [r4, #12]
 8007504:	6020      	str	r0, [r4, #0]
 8007506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800750a:	81a3      	strh	r3, [r4, #12]
 800750c:	9b00      	ldr	r3, [sp, #0]
 800750e:	6120      	str	r0, [r4, #16]
 8007510:	6163      	str	r3, [r4, #20]
 8007512:	9b01      	ldr	r3, [sp, #4]
 8007514:	b15b      	cbz	r3, 800752e <__smakebuf_r+0x70>
 8007516:	4630      	mov	r0, r6
 8007518:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800751c:	f000 f81e 	bl	800755c <_isatty_r>
 8007520:	b128      	cbz	r0, 800752e <__smakebuf_r+0x70>
 8007522:	89a3      	ldrh	r3, [r4, #12]
 8007524:	f023 0303 	bic.w	r3, r3, #3
 8007528:	f043 0301 	orr.w	r3, r3, #1
 800752c:	81a3      	strh	r3, [r4, #12]
 800752e:	89a3      	ldrh	r3, [r4, #12]
 8007530:	431d      	orrs	r5, r3
 8007532:	81a5      	strh	r5, [r4, #12]
 8007534:	e7cf      	b.n	80074d6 <__smakebuf_r+0x18>
	...

08007538 <_fstat_r>:
 8007538:	b538      	push	{r3, r4, r5, lr}
 800753a:	2300      	movs	r3, #0
 800753c:	4d06      	ldr	r5, [pc, #24]	; (8007558 <_fstat_r+0x20>)
 800753e:	4604      	mov	r4, r0
 8007540:	4608      	mov	r0, r1
 8007542:	4611      	mov	r1, r2
 8007544:	602b      	str	r3, [r5, #0]
 8007546:	f7fa fcce 	bl	8001ee6 <_fstat>
 800754a:	1c43      	adds	r3, r0, #1
 800754c:	d102      	bne.n	8007554 <_fstat_r+0x1c>
 800754e:	682b      	ldr	r3, [r5, #0]
 8007550:	b103      	cbz	r3, 8007554 <_fstat_r+0x1c>
 8007552:	6023      	str	r3, [r4, #0]
 8007554:	bd38      	pop	{r3, r4, r5, pc}
 8007556:	bf00      	nop
 8007558:	2000064c 	.word	0x2000064c

0800755c <_isatty_r>:
 800755c:	b538      	push	{r3, r4, r5, lr}
 800755e:	2300      	movs	r3, #0
 8007560:	4d05      	ldr	r5, [pc, #20]	; (8007578 <_isatty_r+0x1c>)
 8007562:	4604      	mov	r4, r0
 8007564:	4608      	mov	r0, r1
 8007566:	602b      	str	r3, [r5, #0]
 8007568:	f7fa fccc 	bl	8001f04 <_isatty>
 800756c:	1c43      	adds	r3, r0, #1
 800756e:	d102      	bne.n	8007576 <_isatty_r+0x1a>
 8007570:	682b      	ldr	r3, [r5, #0]
 8007572:	b103      	cbz	r3, 8007576 <_isatty_r+0x1a>
 8007574:	6023      	str	r3, [r4, #0]
 8007576:	bd38      	pop	{r3, r4, r5, pc}
 8007578:	2000064c 	.word	0x2000064c

0800757c <_init>:
 800757c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757e:	bf00      	nop
 8007580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007582:	bc08      	pop	{r3}
 8007584:	469e      	mov	lr, r3
 8007586:	4770      	bx	lr

08007588 <_fini>:
 8007588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758a:	bf00      	nop
 800758c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800758e:	bc08      	pop	{r3}
 8007590:	469e      	mov	lr, r3
 8007592:	4770      	bx	lr
